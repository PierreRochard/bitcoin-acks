[
    {
        "additions": 243,
        "author": {
            "avatarUrl": "https://avatars2.githubusercontent.com/u/1095675?v=4",
            "login": "luke-jr",
            "url": "https://github.com/luke-jr"
        },
        "body": "Replace boolean allowhighfees with an Array of rejections to ignore (in a backward compatible manner)\n\nThis is useful for node operators who wish to manually accept transactions that don't meet their typical policies, yet don't necessarily want to override all the policies.\n\nIt's a bit ugly internally - suggestions on improving that are welcome.\n",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/3298484?v=4",
                        "login": "jameshilliard"
                    },
                    "body": "concept ACK\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDE5NDExNjM1MA==",
                    "publishedAt": "2016-03-09T05:14:52Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/7533#issuecomment-194116350"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
                        "login": "promag"
                    },
                    "body": "@luke-jr why not turn the second argument an JSON object to be more scalable. For instance, I was planning to add option unlockUnspents.\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDE5NDE3MDQ2Mg==",
                    "publishedAt": "2016-03-09T08:04:43Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/7533#issuecomment-194170462"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/3298484?v=4",
                        "login": "jameshilliard"
                    },
                    "body": "Is this something that we might be able to get in 0.13? Without something like this the alternative for pool operators is usually to patch out the problematic is-standard check blocking the send which is usually not desired.\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDIzMDU2MzEyOQ==",
                    "publishedAt": "2016-07-05T18:32:39Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/7533#issuecomment-230563129"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "Sorry, no, this missed the feature freeze for 0.13 by a long haul.\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDIzMTcyNjA4MQ==",
                    "publishedAt": "2016-07-11T12:55:43Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/7533#issuecomment-231726081"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
                        "login": "MarcoFalke"
                    },
                    "body": "Needs rebase on top of master instead of 0.13\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDI1NTU0MzYzOA==",
                    "publishedAt": "2016-10-22T17:58:24Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/7533#issuecomment-255543638"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/1095675?v=4",
                        "login": "luke-jr"
                    },
                    "body": "@jameshilliard Knots has had this for a while. Miners should probably be using it anyway.\n\n@MarcoFalke Rebased.\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDI2MDEwNjQwMA==",
                    "publishedAt": "2016-11-12T07:05:10Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/7533#issuecomment-260106400"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/6848764?v=4",
                        "login": "paveljanik"
                    },
                    "body": "Concept ACK\r\nNeeds rebase.\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDI2NjIzMzMyMg==",
                    "publishedAt": "2016-12-10T19:51:56Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/7533#issuecomment-266233322"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/1095675?v=4",
                        "login": "luke-jr"
                    },
                    "body": "Rebased.\r\n\r\nCould be combined with #9422 to restore policy-bypassing transactions after a restart, but I consider that beyond the scope of this PR, and something to address after both get merged.",
                    "id": "MDEyOklzc3VlQ29tbWVudDI2OTIzNDczNg==",
                    "publishedAt": "2016-12-26T18:58:06Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/7533#issuecomment-269234736"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/548488?v=4",
                        "login": "sipa"
                    },
                    "body": "I'm not convinced about the need to ignore based on the exact reason (as that is likely something that's hard to maintain, as reasons change over time). How about just a boolean to bypass standardness/fee/mempool policy rules (but keep consensus and script execution flags for upgradability)?",
                    "id": "MDEyOklzc3VlQ29tbWVudDI5Mjc4OTYxNA==",
                    "publishedAt": "2017-04-09T14:36:12Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/7533#issuecomment-292789614"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/649246?v=4",
                        "login": "TheBlueMatt"
                    },
                    "body": "Agree with @sipa. This is not going to be maintainable for API clients. Are you planning on rebasing this luke?",
                    "id": "MDEyOklzc3VlQ29tbWVudDMxNDUyMDIxOA==",
                    "publishedAt": "2017-07-11T17:45:29Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/7533#issuecomment-314520218"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/1095675?v=4",
                        "login": "luke-jr"
                    },
                    "body": "Typically people only want to bypass a specific policy, and not others. For example, a miner might want to bypass the fee checks or bypass the ancestor limit on replacements, but not other policies.\r\n\r\nWill have a rebase done soon.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMyMjIwMzY0Ng==",
                    "publishedAt": "2017-08-14T14:22:12Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/7533#issuecomment-322203646"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/3298484?v=4",
                        "login": "jameshilliard"
                    },
                    "body": "I don't think it's all that important to have the ability to have granular overrides, if that's important to some miners it can be implemented externally, most of the time a miner will just want to force add the transaction and will have already checked that it violates policy rules(often by looking at the failure reason when they try and send it normally).",
                    "id": "MDEyOklzc3VlQ29tbWVudDMyMjMxODg2MQ==",
                    "publishedAt": "2017-08-14T21:46:53Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/7533#issuecomment-322318861"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/1095675?v=4",
                        "login": "luke-jr"
                    },
                    "body": "@jameshilliard It can't be added externally... Looking at the *first* failure reason won't tell you if it violates other policies as well.\r\n\r\nAnyhow, rebase is ready for review, and refactored somewhat so hopefully it's also easier to review.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMyMjg2MDY4NA==",
                    "publishedAt": "2017-08-16T18:34:27Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/7533#issuecomment-322860684"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/548488?v=4",
                        "login": "sipa"
                    },
                    "body": "I think the ability to override specific rejection reasons is overkill, and risks creating an interface that is unmaintainable.\r\n\r\nA boolean to say \"ignore all policy, accept if consensus-valid\" would be fine, though.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMzMTI2MjA0Mw==",
                    "publishedAt": "2017-09-21T19:47:53Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/7533#issuecomment-331262043"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "Agree with @sipa, making this too granular makes this unmaintainable as rejection reasons might come and go, or implemented differently, as policy changes. After all, policy is not standardized.\r\n(on the other hand ,the interface would be expected to change based on policy changes...)",
                    "id": "MDEyOklzc3VlQ29tbWVudDMzMTI2NDU5Mw==",
                    "publishedAt": "2017-09-21T19:58:11Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/7533#issuecomment-331264593"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/16821975?v=4",
                        "login": "DuncanBetts"
                    },
                    "body": "I've just been mulling over this. How about giving node operators a hook, and allowing them to implement this sort of functionality themselves if they need it. I note that no node operators aside luke have requested this functionality here. I don't know how practical my suggestion is.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1NTk3NTAxMw==",
                    "publishedAt": "2018-01-08T14:05:39Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/7533#issuecomment-355975013"
                },
                {
                    "author": null,
                    "body": "this seems kool lets merge it ",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2MDM5OTA3Nw==",
                    "publishedAt": "2018-01-25T08:43:50Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/7533#issuecomment-360399077"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/10217?v=4",
                        "login": "Sjors"
                    },
                    "body": "Needs love (as in, needs rebase and addressing concerns). A simpler alternative is probably the best way to move this forward. Some examples of use cases would be nice too; \"node operators who wish to manually accept transactions that don't meet their typical policies\" is a bit vague.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MTYyOTc1Mw==",
                    "publishedAt": "2018-03-08T21:26:01Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/7533#issuecomment-371629753"
                }
            ],
            "totalCount": 18
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "916f12fa675645bc4f3a19d42a24a4efaa7f6cf3"
                    }
                }
            ],
            "totalCount": 6
        },
        "createdAt": "2016-02-14T09:00:39Z",
        "deletions": 125,
        "id": "MDExOlB1bGxSZXF1ZXN0NTkyOTA4MDA=",
        "labels": {
            "nodes": [
                {
                    "color": "0052cc",
                    "id": "MDU6TGFiZWw5ODI3OTE3Nw==",
                    "name": "RPC/REST/ZMQ"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "CONFLICTING",
        "mergedAt": null,
        "number": 7533,
        "state": "OPEN",
        "title": "RPC: sendrawtransaction: Allow the user to ignore/override specific rejections",
        "updatedAt": "2018-03-08T21:26:01Z"
    },
    {
        "additions": 505,
        "author": {
            "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
            "login": "jonasschnelli",
            "url": "https://github.com/jonasschnelli"
        },
        "body": "#### Reasons for another notification interface\n- Currently there is no interface that could be extended to \"private\" notification secured behind the authorization (like peers connected/disconnected or a new wallet relevant transaction notification)\n- HTTP long poll notifications are very easy to set up and require almost no dependencies\n- HTTP long poll notifications can easily pushed over the internet using httpd reverse proxy together with a popper authentication method (certs or http auth digest) together with TLS.\n- HTTP long poll would allow connecting applications to do all kinds of things with just a single communication channel (currently you need RPC & ZMQ for most use cases which would require VPN or a fancy multi port stunnel connection to broadcast the notification over the internet)\n#### How does it work\n- The listener calls the `pollnotification` RPC command.\n- If no notifications are available, the RPC thread will idle for a given timeout (30s by default)\n- If a notification was fired during the 30 seconds, the longpoll call will be responded with the new notification(s)\n- The client/listener can immediately reconnect and wait again\n- If notifications are already in the queue, the `pollnotification` command will immediately response.\n- Notifications can't get lost (possible to lose them during http transfer and if one exceed the queue limit)\n#### Downsides\n- JSON encoding overhead\n#### New RPC calls\n\n`setregisterednotifications [<notificationtype>]` (possible types are `hashtx` and `hashblock`)\n`getregisterednotifications`\n`pollnotifications`\n#### Missing\n- [ ] More tests\n- [ ] Documentation\n\nI'd like to use a such interface to work on a remote GUI (use case: GUI on your local desktop, node on a VPS).\n",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "I like the concept of being able to listen for events through http, however I think this is severely limited by having server-side state, limiting the number of listeners to only one.\n\nWhat I'd personally prefer is, instead of longpolling, to subscribe to a 'stream' of events (e.g. websocket or just chunked encoding), where the set of events to listen to is in the request. This avoids having to store any client-state in the server - at least for longer than the request lasts.\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDIxNDc4Njk2NQ==",
                    "publishedAt": "2016-04-26T15:40:03Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/7949#issuecomment-214786965"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "> [... ] having server-side state, limiting the number of listeners to only one\n\nRight. The current implementation limits to only one listener. Extending this PR so it would support a client chosen UUID would not be very complicated (a set of queues and a set of registered notification types). Clients could register notification types along with a client-chosen UUID.\nI might extend this PR to support multiple listeners.\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDIxNDc4OTA2OA==",
                    "publishedAt": "2016-04-26T15:45:30Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/7949#issuecomment-214789068"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "Added a commit that allows multiple clients at the same time.\n\nThe new RPC commands require now a `clientUUID` parameter (a per client unique string, ideally a UUID after RFC 4122). Bitcoind keeps a queue, sequence numbers and registered types per client.\n\nThere is currently not max client limit and no way to remove clients (though you can unregister all notification types but not empty the current queue).\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDIxNDgyNDg0Mg==",
                    "publishedAt": "2016-04-26T17:45:23Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/7949#issuecomment-214824842"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "Rebased.\nWould be nice to get some concept NACKs/ACKs.\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDIxNzQwMDUwNw==",
                    "publishedAt": "2016-05-06T09:53:11Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/7949#issuecomment-217400507"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "Rebased.\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDIxODcyNDM2OA==",
                    "publishedAt": "2016-05-12T10:54:32Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/7949#issuecomment-218724368"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "Gah we need to take a look at this again after 0.14 is released.",
                    "id": "MDEyOklzc3VlQ29tbWVudDI3MTg2NDI3OA==",
                    "publishedAt": "2017-01-11T13:09:26Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/7949#issuecomment-271864278"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "Yes. Sure. I'll try to re-base and overhaul this soon.",
                    "id": "MDEyOklzc3VlQ29tbWVudDI3MTg2Nzg1Mw==",
                    "publishedAt": "2017-01-11T13:27:05Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/7949#issuecomment-271867853"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/649246?v=4",
                        "login": "TheBlueMatt"
                    },
                    "body": "Plan on rebasing this, or should just be closed?",
                    "id": "MDEyOklzc3VlQ29tbWVudDMzMjg5NjAyMA==",
                    "publishedAt": "2017-09-28T16:47:06Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/7949#issuecomment-332896020"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "I'm currently rewriting this... will be ready soon.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMzMjg5ODg5Ng==",
                    "publishedAt": "2017-09-28T16:57:42Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/7949#issuecomment-332898896"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "Overhauled and rebased.\r\n\r\nThis is still server based (server keeps track of what the client has) queue max size is currently 1024^2 and does only contain hashes of blocks or transactions.\r\nEach notification comes with a sequence number to detect lost transactions (which then should trigger a \"full-client-sync\").",
                    "id": "MDEyOklzc3VlQ29tbWVudDMzODExMzkyNg==",
                    "publishedAt": "2017-10-20T06:02:06Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/7949#issuecomment-338113926"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/649246?v=4",
                        "login": "TheBlueMatt"
                    },
                    "body": "Also, looks like the test is failing.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0MjI0NzYxOQ==",
                    "publishedAt": "2017-11-06T18:51:37Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/7949#issuecomment-342247619"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/3020646?v=4",
                        "login": "NicolasDorier"
                    },
                    "body": "Strong Concept ACK for this one ! \r\n@jonasschnelli any idea if you will bring this one from the dead?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1NjY1MDIyOQ==",
                    "publishedAt": "2018-01-10T16:10:46Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/7949#issuecomment-356650229"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "@NicolasDorier \r\nI think there is no consensus about an additional push channel... also, @sipa brought up the idea of having a push channel (could be long poll) that acts similar then `listsinceblock` where the server doesn't need to keep track of clients (keep a queue).\r\nI haven't looked closer at this approach.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1NjY5OTIxMg==",
                    "publishedAt": "2018-01-10T18:50:10Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/7949#issuecomment-356699212"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/3020646?v=4",
                        "login": "NicolasDorier"
                    },
                    "body": "I implemented a similar solution in NBXplorer. Basically there is a `GetUTXOs(xPub)` call, this call replay all the transactions of the xpub in topological order to create the current utxo for this xpub. While playing the transactions, it hashes them along the way (the hash after each transaction is effectively the equivalent of a `bookmark`). Then the bookmark + the UTXO is sent back to the client.\r\n\r\nThe client process the result, then call again `GetUTXOs(xPub, bookmark)`. The server does the same operation, replaying all transactions while calculating bookmarks along the way, when it reaches the bookmark passed by the client, it knows that what is after is a differential to the previous bookmark. If there is no differential, it just long poll. If there is a differential, it sends it back to the client.\r\n\r\nIf the bookmark in parameter was not reached, then the full UTXO is sent back again to the client, with a flag indicating it is not a differential.\r\n\r\nThis solution does not involve server side state.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1NzUzNDQzOQ==",
                    "publishedAt": "2018-01-14T19:15:58Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/7949#issuecomment-357534439"
                }
            ],
            "totalCount": 14
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "2652c55b7a8a65bbdb8ad7c09dcb09870aa913f3"
                    }
                }
            ],
            "totalCount": 2
        },
        "createdAt": "2016-04-26T15:33:04Z",
        "deletions": 0,
        "id": "MDExOlB1bGxSZXF1ZXN0Njc5MDc1NjM=",
        "labels": {
            "nodes": [
                {
                    "color": "0052cc",
                    "id": "MDU6TGFiZWw5ODI3OTE3Nw==",
                    "name": "RPC/REST/ZMQ"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "CONFLICTING",
        "mergedAt": null,
        "number": 7949,
        "state": "OPEN",
        "title": "[RPC] Add RPC long poll notifications",
        "updatedAt": "2018-01-14T19:15:58Z"
    },
    {
        "additions": 1143,
        "author": {
            "avatarUrl": "https://avatars3.githubusercontent.com/u/3514957?v=4",
            "login": "Christewart",
            "url": "https://github.com/Christewart"
        },
        "body": "This pull request is a proof of concept for introducting [property based testing](https://en.wikipedia.org/wiki/QuickCheck) into Bitcoin Core\n\n> In QuickCheck the programmer writes assertions about logical properties that a function should fulfill. Then QuickCheck attempts to generate a test case that falsifies these assertions. Once such a test case is found, QuickCheck tries to reduce it to a minimal failing subset by removing or simplifying input data that are not needed to make the test fail.\n\nThis has been very useful for a Bitcoin library I've been working on and thought it would be worthwhile to develop a POC for Bitcoin Core. The property based library I am using for C++ is called [rapidcheck](https://github.com/emil-e/rapidcheck). Here are the [docs](https://github.com/emil-e/rapidcheck/tree/master/doc). \n\nThis pull request currently contains [two properties](https://github.com/Christewart/bitcoin/blob/rapidcheck/src/test/key_properties.cpp#L34-L46), one testing `CKey` generation and the other testing serialization symmetry for `CKey` and `CBitcoinSecret`. These are rather trivial properties, but useful for illustrating the power of property based testing if there was a bug inside of Core.\n\nI want to solicit some feedback from developers if this is something that would actually be merged into Core. Eventually we could have a large library of [generators](https://github.com/emil-e/rapidcheck/blob/master/doc/generators.md) that would allow us to quickly prototype, test, and reason about the behavior of new code added to Core. Here is an example of a [library of generators](https://github.com/bitcoin-s/bitcoin-s-core/blob/master/src/main/scala/org/bitcoins/core/gen/TransactionGenerators.scala#L70-L117) (in Scala) that could give you a little more of an idea of what I am talking about. \n\nThoughts?\n",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/863730?v=4",
                        "login": "fanquake"
                    },
                    "body": "This needs a rebase/conflicts fixed.\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDIzODEyOTQxMg==",
                    "publishedAt": "2016-08-08T02:35:37Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8469#issuecomment-238129412"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
                        "login": "MarcoFalke"
                    },
                    "body": "I think this approach of testing is interesting and may render useful\nfor bitcoin. The user guide\nhttps://github.com/emil-e/rapidcheck/blob/master/doc/user_guide.md\nmentions that the API is not finalized, so it may be better to\nintegrate it via a subtree (maybe in /test)?\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDIzODE2ODM5Mw==",
                    "publishedAt": "2016-08-08T08:07:19Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8469#issuecomment-238168393"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "I think this is useful. I'm not very familiar with property based testing, but this seems to be something that would make sense for consensus and security critical projects.\n\nSome thoughts:\n- the rapidcheck dependency should probably only be required if one passes `--enable-tests`.\n- I think you can remove the changes in `src/test/script_tests.cpp` and its header.\n\nIf others also agree to take this into master, we should probably have a first logical slice of property based tests (maybe serialization).\n\nNeeds rebase.\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDIzODE2ODg1Nw==",
                    "publishedAt": "2016-08-08T08:09:27Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8469#issuecomment-238168857"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
                        "login": "MarcoFalke"
                    },
                    "body": "@theuni Can you help here to decide if using depends is fine or a subtree would be cleaner? (I prefer a subtree per my above comment, but I am not familiar with the build system. Input is appreciated)\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDI0MDc4NTMwMg==",
                    "publishedAt": "2016-08-18T16:50:27Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8469#issuecomment-240785302"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/3514957?v=4",
                        "login": "Christewart"
                    },
                    "body": "I would probably need help with the build code to get it production ready. I plan to keep on adding properties to this pull request though when time permits. I'm going to try and get around implementing fanquake's comments and figure out how to do the `--enable-test` as per jonasschnelli's comment this weekend\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDI0MDc5MDU3Mw==",
                    "publishedAt": "2016-08-18T17:09:04Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8469#issuecomment-240790573"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
                        "login": "MarcoFalke"
                    },
                    "body": "@Christewart Do you need help to address the feedback from @jonasschnelli?\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDI0MzA1Njc5OA==",
                    "publishedAt": "2016-08-29T07:55:12Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8469#issuecomment-243056798"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/3514957?v=4",
                        "login": "Christewart"
                    },
                    "body": "@MarcoFalke Yeah I'm not really sure how to get that done\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDI0MzExMjc2NA==",
                    "publishedAt": "2016-08-29T12:42:09Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8469#issuecomment-243112764"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/858454?v=4",
                        "login": "gmaxwell"
                    },
                    "body": "I like this kind of testing-- testing invariants on random test cases--, and we use it extensively in libsecp256k1. It's one of the answers to my irritation with the way many of the unit tests in Bitcoin core have worked in the past: hard-coding the exact behavior.  Meaning that if you change anything, the tests all fail and you're left wondering if you broke something important or if the test was just mandating the behavior you were fixing. In either case, updating the test is often more work than the change.\r\n\r\nTaking a dependency for it seems unfortunate; but I'm not qualified to judge if it does snazzy things that make generating cases easy.  I have had bad experience with test frameworks in the past which had very high overhead making test cases that should have taken seconds take minutes, resulting in less testing.  I see in this one that it uses a excessively slow PRNG based on skein, which makes me a bit dubious-- but if thats the only problem it would be easy to fix if we forked it (by replacing it with xorshift128+ or likewise). ",
                    "id": "MDEyOklzc3VlQ29tbWVudDI3MTEzMDgwNw==",
                    "publishedAt": "2017-01-08T05:19:45Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8469#issuecomment-271130807"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/3514957?v=4",
                        "login": "Christewart"
                    },
                    "body": "It should also be noted that they way the test are currently written they tie in the [boost testing framework](https://github.com/emil-e/rapidcheck/blob/master/doc/boost_test.md), if we add rapidcheck as a dependency and decide to remove boost, which #8670 suggests, we will have to rewrite these test cases to be independent of boost. \r\n\r\nIn terms of speed, you would know more than I would about choosing PRNG. Rapidcheck currently defaults to running 100 test cases against every property you have specified. [You can configure this property to be higher or lower depending on the situation](https://github.com/emil-e/rapidcheck/blob/master/doc/properties.md#success). I think it would make sense to configure this to lower value for local development, and a higher value for travis builds to try and exhaustively test our invariants. You can read more about configuration of rapidcheck [here](https://github.com/emil-e/rapidcheck/blob/master/doc/configuration.md). \r\n\r\n@jonasschnelli 's comment above was interesting I thought, I'm not super familiar with C++ build systems but only including the rapidcheck dependency if the flag `--enable-test` flag was given seems to makes sense. \r\n\r\nI think the long term value add here is having a library of generators (for various protocol data structures) that we can use to test new protocol changes. I'm going to be adding some properties about creating tx types in the coming weeks. To get an idea of what I'm looking to add, you can look at some of the generators I have [created in bitcoin-s](https://github.com/bitcoin-s/bitcoin-s-core/blob/master/src/main/scala/org/bitcoins/core/gen/TransactionGenerators.scala#L76-L225). ",
                    "id": "MDEyOklzc3VlQ29tbWVudDI3MTE2MjYyMA==",
                    "publishedAt": "2017-01-08T16:45:39Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8469#issuecomment-271162620"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/649246?v=4",
                        "login": "TheBlueMatt"
                    },
                    "body": "Hmm, looks like travis is failing to build rapidcheck here? Are you interested in rebasing and potentially fixing it?",
                    "id": "MDEyOklzc3VlQ29tbWVudDMxNDUyNjUyMg==",
                    "publishedAt": "2017-07-11T18:08:24Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8469#issuecomment-314526522"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/3514957?v=4",
                        "login": "Christewart"
                    },
                    "body": "It appears there is a bug with gcc 4.8 that causes a problems with lambdas and parameter packs: \r\n\r\nhttps://stackoverflow.com/questions/45062090/gcc-4-8-4-error-parameter-packs-not-expanded-with?noredirect=1#comment77097698_45062090\r\n\r\nhttps://stackoverflow.com/questions/22568642/parameter-packs-not-expanded-with-another-variadic-template-bug-with-gc\r\n\r\nhttps://gcc.gnu.org/bugzilla/show_bug.cgi?id=41933\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDMxNDgxMzgxNA==",
                    "publishedAt": "2017-07-12T15:53:43Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8469#issuecomment-314813814"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
                        "login": "MarcoFalke"
                    },
                    "body": "Assigned 0.16, as we might add gcc to depends by then.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMyMTIyNDM5OQ==",
                    "publishedAt": "2017-08-09T11:07:10Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8469#issuecomment-321224399"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/3514957?v=4",
                        "login": "Christewart"
                    },
                    "body": "An update about commits 56edb65 and d97b980:\r\n\r\n1. These commits [add generators for various scriptPubKey types](https://github.com/Christewart/bitcoin/blob/d97b9806aaf9ca13e347469392b5747ac007aeab/src/test/gen/script_gen.h#L14-L30)\r\n2. Using the script generators, I've created [generators for various transaction types ](https://github.com/Christewart/bitcoin/blob/d97b9806aaf9ca13e347469392b5747ac007aeab/src/test/gen/transaction_gen.h#L16-L31)\r\n3. Using the transaction generators, I've created new test cases specifying this invariant: If we use `ProduceSignature` to create a transaction, it should always be valid when run through the interpreter. [Here](https://github.com/Christewart/bitcoin/blob/d97b9806aaf9ca13e347469392b5747ac007aeab/src/test/transaction_properties.cpp#L74-L107) is the test cases\r\n\r\nI'm hoping this illustrates the power that property based testing can be used for once we you have a small set of primitive generators. You can keep building more and more complex data structures on these primitives and then specify invariants about various functions that use those data structures.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMzNjE4OTIzMA==",
                    "publishedAt": "2017-10-12T16:20:34Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8469#issuecomment-336189230"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/863730?v=4",
                        "login": "fanquake"
                    },
                    "body": "This is using a somewhat outdated version of rapidcheck from March [last year](https://github.com/emil-e/rapidcheck/commit/f5d3afa4f387ecf147faf98d96710a6edfa420f1). Can this PR be updated to point to a newer version?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0NzgzNTc5OA==",
                    "publishedAt": "2017-11-29T11:42:36Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8469#issuecomment-347835798"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/45598?v=4",
                        "login": "jb55"
                    },
                    "body": "Very Strong Concept ACK. I use quickcheck a lot in Haskell land, it's amazing how many bugs it can catch, and with shrinking it can find minimal breaking test cases. I'll give this PR a spin soon.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1NDYyMzE2NQ==",
                    "publishedAt": "2017-12-31T20:44:41Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8469#issuecomment-354623165"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/3514957?v=4",
                        "login": "Christewart"
                    },
                    "body": "@jb55 I am Chris_Stewart_5 on freenode. Feel free to ping. If you want to see something a little more interesting, I am starting to use this pull request as the basis for testing Mark Friedenbach's BIP98/116/117 MAST bips. \r\n\r\nhttps://github.com/maaku/bitcoin/pull/2",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1NDYyNzA2Mg==",
                    "publishedAt": "2017-12-31T22:55:57Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8469#issuecomment-354627062"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/7133040?v=4",
                        "login": "ryanofsky"
                    },
                    "body": "RE: https://github.com/bitcoin/bitcoin/pull/8469#discussion_r76030419\r\n\r\n> @Christewart Please try to fetch https://github.com/MarcoFalke/bitcoin/commit/befb827ccd12267083921e866b97179ba9899902 (Mf1608-rapidcheckRework) and push it here. This should fix your compile issues for now.\r\n\r\nI couldn't get the current depends build or Marco's build to work. RapidCheck install steps seem to be missing so the built rapidcheck tarball is completely empty. Following depends/autoconf changes fix the problem for me and also allow normal builds without RapidCheck to work: ca0dbbd64fba9d31d0ff88984529deb4b87229fc",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NDUxMTk2Mg==",
                    "publishedAt": "2018-02-09T18:07:42Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8469#issuecomment-364511962"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
                        "login": "MarcoFalke"
                    },
                    "body": "@ryanofsky Thanks for the autotools fix! Will take a look soon",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NDU0NjIzNg==",
                    "publishedAt": "2018-02-09T19:57:04Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8469#issuecomment-364546236"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
                        "login": "MarcoFalke"
                    },
                    "body": "I tested ca0dbbd64fba9d31d0ff88984529deb4b87229fc. Some notes:\r\n\r\n* The `cmake` dependency should be mentioned in `./depends/README.md` (linux and windows)\r\n* The build still fails on travis, due to the gcc bug\r\n\r\n```\r\n[100%] Building CXX object CMakeFiles/rapidcheck.dir/src/gen/detail/ScaleInteger.cpp.o\r\nIn file included from /bitcoin/depends/work/build/x86_64-pc-linux-gnu/rapidcheck/f5d3afa-4cda083952b/include/rapidcheck/gen/Container.h:30:0,\r\n                 from /bitcoin/depends/work/build/x86_64-pc-linux-gnu/rapidcheck/f5d3afa-4cda083952b/include/rapidcheck/gen/Text.hpp:6,\r\n                 from /bitcoin/depends/work/build/x86_64-pc-linux-gnu/rapidcheck/f5d3afa-4cda083952b/include/rapidcheck/gen/Text.h:23,\r\n                 from /bitcoin/depends/work/build/x86_64-pc-linux-gnu/rapidcheck/f5d3afa-4cda083952b/src/gen/Text.cpp:1:\r\n/bitcoin/depends/work/build/x86_64-pc-linux-gnu/rapidcheck/f5d3afa-4cda083952b/include/rapidcheck/gen/Container.hpp: In lambda function:\r\n/bitcoin/depends/work/build/x86_64-pc-linux-gnu/rapidcheck/f5d3afa-4cda083952b/include/rapidcheck/gen/Container.hpp:491:42: error: parameter packs not expanded with '...':\r\n     return helper.generate(random, size, gens...);\r\n                                          ^\r\n/bitcoin/depends/work/build/x86_64-pc-linux-gnu/rapidcheck/f5d3afa-4cda083952b/include/rapidcheck/gen/Container.hpp:491:42: note:         'gens'\r\n/bitcoin/depends/work/build/x86_64-pc-linux-gnu/rapidcheck/f5d3afa-4cda083952b/include/rapidcheck/gen/Container.hpp:491:46: error: expansion pattern 'gens' contains no argument packs\r\n     return helper.generate(random, size, gens...);\r\n                                              ^\r\n/bitcoin/depends/work/build/x86_64-pc-linux-gnu/rapidcheck/f5d3afa-4cda083952b/include/rapidcheck/gen/Container.hpp: In lambda function:\r\n/bitcoin/depends/work/build/x86_64-pc-linux-gnu/rapidcheck/f5d3afa-4cda083952b/include/rapidcheck/gen/Container.hpp:501:49: error: parameter packs not expanded with '...':\r\n     return helper.generate(count, random, size, gens...);\r\n                                                 ^\r\n/bitcoin/depends/work/build/x86_64-pc-linux-gnu/rapidcheck/f5d3afa-4cda083952b/include/rapidcheck/gen/Container.hpp:501:49: note:         'gens'\r\n/bitcoin/depends/work/build/x86_64-pc-linux-gnu/rapidcheck/f5d3afa-4cda083952b/include/rapidcheck/gen/Container.hpp:501:53: error: expansion pattern 'gens' contains no argument packs\r\n     return helper.generate(count, random, size, gens...);\r\n                                                     ^\r\nmake[3]: *** [CMakeFiles/rapidcheck.dir/src/gen/Text.cpp.o] Error 1",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NDY2NTYxMg==",
                    "publishedAt": "2018-02-10T16:05:14Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8469#issuecomment-364665612"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
                        "login": "MarcoFalke"
                    },
                    "body": "See https://github.com/MarcoFalke/bitcoin/commit/fa9f426eed2b1705cb34f77448333bd700c75a43 for a version bump of rapidcheck\r\n\r\nI think we can work around the gcc bug by building only when rapidcheck is explicitly enabled. I.e. implement something that does:\r\n\r\n```\r\ncd depends && make  # Doesn't build rapidcheck (RAPIDCHECK=0 by default)\r\ncd depends && make RAPIDCHECK=1  # Builds rapidcheck",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NDY2ODUyOQ==",
                    "publishedAt": "2018-02-10T16:30:33Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8469#issuecomment-364668529"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
                        "login": "MarcoFalke"
                    },
                    "body": "Please see https://github.com/MarcoFalke/bitcoin/commit/1862c49a27b2b7ca9c9e3bd2227911bd2d30ab77 on how to disable rapidcheck by default. This should work around the travis issue (finally)",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NjMxNTI0OA==",
                    "publishedAt": "2018-02-16T18:15:04Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8469#issuecomment-366315248"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
                        "login": "MarcoFalke"
                    },
                    "body": "If you like that commit, you could submit a minimal pull request with only the depends changes and a minimal working rapidcheck example. Merging in baby steps tends to work better.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NjMxNzU5MQ==",
                    "publishedAt": "2018-02-16T18:23:15Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8469#issuecomment-366317591"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
                        "login": "MarcoFalke"
                    },
                    "body": "You should be able to solve the whitespace issues with clang-format: https://github.com/bitcoin/bitcoin/tree/master/contrib/devtools#clang-format-diffpy",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NjUzNDg4MQ==",
                    "publishedAt": "2018-02-18T18:08:31Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8469#issuecomment-366534881"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/3514957?v=4",
                        "login": "Christewart"
                    },
                    "body": "@MarcoFalke I've tried running the script before, and I get this error: \r\n\r\nhttps://pastebin.com/vqS3pt3r\r\n\r\nI changed `0` to `22` as we want to run over the last 22 commits i'm guessing? I think it is failing because a bunch of the files in this PR are new in the tree",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NjUzNjM0NQ==",
                    "publishedAt": "2018-02-18T18:29:58Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8469#issuecomment-366536345"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
                        "login": "MarcoFalke"
                    },
                    "body": "What does `which clang-format` say? Is it properly installed on you system?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NjUzNjY3NQ==",
                    "publishedAt": "2018-02-18T18:34:31Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8469#issuecomment-366536675"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/6299681?v=4",
                        "login": "PierreRochard"
                    },
                    "body": "Concept ACK, ditto on @gmaxwell's comment regarding hard-coded behavior",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NTU1NzQzMA==",
                    "publishedAt": "2018-03-23T06:26:25Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8469#issuecomment-375557430"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/7133040?v=4",
                        "login": "ryanofsky"
                    },
                    "body": "Confirmed this works. Tested with:\r\n\r\n```sh\r\nmake -C depends RAPIDCHECK=1\r\n./autogen.sh\r\n./configure --prefix=$PWD/depends/x86_64-pc-linux-gnu\r\nmake -C src test/test_bitcoin\r\nsrc/test/test_bitcoin --log_level=test_suite --run_test=\"*_properties\"\r\n```",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NTc3Mjg3MA==",
                    "publishedAt": "2018-03-23T19:21:20Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8469#issuecomment-375772870"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/3514957?v=4",
                        "login": "Christewart"
                    },
                    "body": "I believe the travis failure here is unrelated? ",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NTk0MDkxOA==",
                    "publishedAt": "2018-03-25T02:41:52Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8469#issuecomment-375940918"
                }
            ],
            "totalCount": 28
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "7fd92dade83f79d65274eca158c156126a8a58a1"
                    }
                }
            ],
            "totalCount": 1
        },
        "createdAt": "2016-08-06T01:48:20Z",
        "deletions": 1,
        "id": "MDExOlB1bGxSZXF1ZXN0ODAzMjcxNzQ=",
        "labels": {
            "nodes": [
                {
                    "color": "d4c5f9",
                    "id": "MDU6TGFiZWw2Mjk2MzUxNg==",
                    "name": "Tests"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "number": 8469,
        "state": "OPEN",
        "title": "[POC] Introducing property based testing to Core",
        "updatedAt": "2018-03-25T02:41:52Z"
    },
    {
        "additions": 91,
        "author": {
            "avatarUrl": "https://avatars2.githubusercontent.com/u/1095675?v=4",
            "login": "luke-jr",
            "url": "https://github.com/luke-jr"
        },
        "body": "This upgrades #5916/#8132 to support HD wallets by adding a map<string,string> at the end of CKeyMetadata which can be used to store future-proof data, similar to CWalletTx's mapValue.\n",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/863730?v=4",
                        "login": "fanquake"
                    },
                    "body": "This needs a rebase.\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDIzODEyOTc2Nw==",
                    "publishedAt": "2016-08-08T02:39:02Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8471#issuecomment-238129767"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "Needs rebase.\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDIzODE2ODk2NQ==",
                    "publishedAt": "2016-08-08T08:09:54Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8471#issuecomment-238168965"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/1095675?v=4",
                        "login": "luke-jr"
                    },
                    "body": "Rebased, and logic re-factored to deal with the optional wallet version bump for HD. Not sure if this is the best approach...\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDIzODY2MTU3Mw==",
                    "publishedAt": "2016-08-09T19:20:26Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8471#issuecomment-238661573"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/649246?v=4",
                        "login": "TheBlueMatt"
                    },
                    "body": "Is this still relevant with the default-added hdKeypath metadata when we generate hd keys now?",
                    "id": "MDEyOklzc3VlQ29tbWVudDMxNDUyODIyMg==",
                    "publishedAt": "2017-07-11T18:14:59Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8471#issuecomment-314528222"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/1095675?v=4",
                        "login": "luke-jr"
                    },
                    "body": "I don't see why it wouldn't be - the HD keypath is kinda unrelated to this.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NzU3MTI0Mg==",
                    "publishedAt": "2018-02-22T05:24:03Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8471#issuecomment-367571242"
                }
            ],
            "totalCount": 5
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "ff448537529a43e1a1cb4d4b0bf45e9b5aee1fcd"
                    }
                }
            ],
            "totalCount": 3
        },
        "createdAt": "2016-08-06T06:27:44Z",
        "deletions": 3,
        "id": "MDExOlB1bGxSZXF1ZXN0ODAzMzI0Njg=",
        "labels": {
            "nodes": [
                {
                    "color": "08a781",
                    "id": "MDU6TGFiZWwxNDk0MjQ=",
                    "name": "Wallet"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "CONFLICTING",
        "mergedAt": null,
        "number": 8471,
        "state": "OPEN",
        "title": "Key origin metadata, with HD wallet support",
        "updatedAt": "2018-02-22T05:24:03Z"
    },
    {
        "additions": 468,
        "author": {
            "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
            "login": "jonasschnelli",
            "url": "https://github.com/jonasschnelli"
        },
        "body": "This PR adds a statistics collector class which aims to collect various types of statistics up to the configurable maximum memory target. At the moment, only mempool statistics will be collected.\r\n\r\n### Motivation\r\n\r\nAdding more statistics and visualization to the GUI would leverage its usage. To do so, we need stats that are collected even when the visualization is not visible (example: the GUI network graph will only draw data when it's visible which is kinda unusable)\r\n### How it works\r\n\r\nThis PR adds a simple stats manager that polls stats over a repetitive `CScheduler` task.\r\n\r\n\r\nThe samples are not guaranteed to be const-time. Each sample contains a time delta to the last one (uint16_t).\r\n\r\n### API\r\n- `-statsenable` **default disabled**\r\n- `-statsmaxmemorytarget` **10MB default** maximal memory target to use for statistics.\r\n- RPC: `getmempoolstats`\r\n== \r\n```json\r\n[\r\n  {\r\n    \"percision_interval\": 2,\r\n    \"time_from\": 1494252401,\r\n    \"samples\": [\r\n      [\r\n        11, \r\n        1, \r\n        1008, \r\n        0\r\n      ], ....\r\n   }...\r\n]\r\n```\r\n### Features\r\n\r\n-> CScheduler driven sample collecting (current interval 2000ms)\r\n-> Relevant mempool data (size, memory requirement, minfee) gets written to an atomic cache (no additional locking required)\r\n-> Multiple precision levels (currently three, 2s, 60s, 1800s)\r\n-> Memory target that will calculate how many samples do fit in the given target\r\n-> Sample do only have a 2byte time-delta to the last sample, allowing to save some memory\r\n-> Flexible design, adding more data-points should be simple (bandwidth, utxo-stats, etc.).",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/20916903?v=4",
                        "login": "isle2983"
                    },
                    "body": "Hi Jonas,\n\nI understand the concern in your description for the addMempoolSample() stat\nbookkeeping designed to be as lightweight as possible in the critical execution\npath. However, I have a few (perhaps under-informed, neophyte) questions which\nwould help me understand the design considerations better:\n\n1) the comment in rpc_stats.cpp hints that the overhead of the JSON string\ngeneration is best optimized to be this 'flat' encoding as opposed to some\nencoding like:\n\n`\n{\n\"fieldNames\" : [\"delta_in_secs\", \"tx_count\",\n               \"dynamic_mem_usage\", \"min_fee_per_k\"],\n\"samples\" : [[val1, val2, val3, val4],\n           [val1, val2, val3, val4],\n          ]\n}\n`\n\nIs the 'flat' encoding strictly needed? or is there some other concern with\noutputting a slightly more convenient format than 'flat'?\n\n2) It appears possible to set the maximum memory target very hight such that\nmany, many samples are collected and the overhead of the computation\nmempoolGetValuesInRange() inside the lock might become onerus (assuming I am\ncorrectly understanding how the lock works and the implications of holding it\ntoo long). Have you considered taking a copy of 'mempoolStats' in a way that\nlets you return the lock earlier, and doing the dataset computation outside the\nlock? (Is that even currently possible under the current execution model?)\n\nCheers,\n\nIsle\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDIzOTcyNTYzMA==",
                    "publishedAt": "2016-08-15T04:03:48Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8501#issuecomment-239725630"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "@isle2983 Welcome to github.\nThanks for your feedback and your nitpicks. I really appreciate this and i'll process them during the next hours.\n\nFor your questions/inputs:\n1) My idea with the JSON flat output was to bypass the JSON encoding/decoding.`[val1, val2, val3, val4], [val1, val2, val3, val4],` should also work. I just though a single string would result in faster encoding and decoding performance. But your approach seems to be the better choice, although not sure if we want to use `UniValue` for encoding or just appending strings... maybe we should start with the first and use a more optimized encoding if the JSON overhead is a problem.\n\n2) Yes. That's a good point. Copying the samples vector could result in a memory peak when using large amount of `-maxmemorytarget`.\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDIzOTc4NjU5Mg==",
                    "publishedAt": "2016-08-15T12:03:54Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8501#issuecomment-239786592"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/20916903?v=4",
                        "login": "isle2983"
                    },
                    "body": "I have been playing around making my own changes off these commits (isle2983:getmempoolstats). Mostly to just to get some hands on with the code and try to get my C++ up to  par.\n\nBut anyway, I made the rpc output of the samples full JSON:\n\n```\n{\n  \"enabled\": true,\n  \"maxmemorytarget\": 10485760,\n  \"currentusage\": 1734416,\n  \"time_from\": 1471573271,\n  \"time_to\": 1471657376,\n  \"sampleCount\": 27131,\n  \"sampleFieldNames\": [\n    \"timeDelta\", \n    \"txCount\", \n    \"dynMemUsage\", \n    \"minFeePerK\"\n  ],\n  \"samples\": [\n    [\n      0, \n      1, \n      1728, \n      0\n    ], \n    [\n      4, \n      11, \n      15232, \n      0\n    ], \n    ...\n    (snip)\n    ]\n}\n```\n\nThe JSON 'pretty' print through bitcoin-cli is definitely unwieldy. However, the computational overhead in doing the wrangling doesn't seem so bad.\n\nThe 1.7MM of stat data is from collecting just overnight. With that data, I can pull it off the node, parse and convert the JSON into CSV with a python script and plot it in gnuplot in under a second.\n\n```\n$ time myJunk/plotTxCount.sh \n\nreal    0m0.966s\nuser    0m0.460s\nsys     0m0.128s\n```\n\nNot sure what the comparable is with the qt gui stuff branch that is running, but this doesn't seem too bad on the face of it.\n\nAlso, if getting this info from the node to the UI quickly is a concern, perhaps a more dense, binary-like format is worth considering i.e:\n\n```\n{\"stats_blob\":\"8b292cf.....\"}\n```\n\nOne could imagine it being more efficient than even the 'flat' format, depending on the sophistication.\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDI0MTE3MzkyNg==",
                    "publishedAt": "2016-08-20T02:36:13Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8501#issuecomment-241173926"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "Thanks @isle2983 for the testing, benchmarks and improvements.\nI have switched to the proposed array format for the samples (rather then the flat structure). A more performant binary format (inside of the JSON format) would be a hack. More performance would probably be possible over ZMQ.. but its currently a push only channel.\n\nI also though again about copy the samples hash before filtering it. I came to the conclusion that it's not worth generating a memory peak (by a copy of the whole samples vector) in order to allow a faster release of the LOCK. The filtering should be very fast because it only compares some uint32 and does construct a new vector with a from-/to-iterators (should also preform fast).\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDI0MTQwNTY1OA==",
                    "publishedAt": "2016-08-22T13:02:59Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8501#issuecomment-241405658"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "Needed rebase.\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDI0NTgzNDY1NQ==",
                    "publishedAt": "2016-09-09T06:54:37Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8501#issuecomment-245834655"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "Rebased.\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDI1NTA0MjU4NA==",
                    "publishedAt": "2016-10-20T08:31:01Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8501#issuecomment-255042584"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
                        "login": "MarcoFalke"
                    },
                    "body": "Assigning \"would be nice to have\" for 0.14 per meeting today.\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDI1OTgyMDc4OQ==",
                    "publishedAt": "2016-11-10T22:02:56Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8501#issuecomment-259820789"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/4360349?v=4",
                        "login": "morcos"
                    },
                    "body": "Just saw @gmaxwell's comment on #8550 (which I completely agree with) and it reminded to look at that PR and this one.  Sorry for not getting involved sooner, but I really like the idea.  Unfortunately I can think of many many stats (dozens and dozens) that we might want to collect, both to potentially show to users in whiz-bangy gui's and also would be useful for developers and businesses trying to understand unusual behavior on the network.  \r\n\r\nIf we envision that there might be 1 KB of different stats data, then maybe rather than just saving sample data points and trimming when they hit memory usage, we should be smart about saving it along different time frames.  For instance we could have second, minute, hour, day sampling intervals and we could save 1000 points or more on each and still have quite reasonable memory usage, but they could be auto trimmed..  so if you wanted to look at data from hours ago, you couldn't look at it on the second time frame...\r\n\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDI2NDc0NTc4MA==",
                    "publishedAt": "2016-12-05T00:51:13Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8501#issuecomment-264745780"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "@morcos: thanks for the comment. Yes. I completely agree. I think this is a first start and the current design allows features like you mentioned.\r\nI once started with interpolating values instead of just trimming the back, you could in theory just reduce the \"density\" of the sample and interpolate the in-between values (to a point where this could make sense).\r\nBut yes, adding more stats probably require individual limits and trim-behaviours.\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDI2NDg0OTMwNA==",
                    "publishedAt": "2016-12-05T13:06:43Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8501#issuecomment-264849304"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/4360349?v=4",
                        "login": "morcos"
                    },
                    "body": "@jonasschnelli Well I guess what I was thinking was that one general framework might fit all stats.  You log it with whatever frequency you want.  And it's stored in up to 4 different histories (by second, minute, hour, day) and each of those is trimmed to some limit (say 1000 or 2000 data points each).   Is there any type of stat that such a general framework might not work well with?  \r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDI2NDg3Njc2NA==",
                    "publishedAt": "2016-12-05T15:04:09Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8501#issuecomment-264876764"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "@morcos: the original idea I was trying to follow was to not collect in a fixed frequency. A) To avoid locking a thread for just collecting stats samples. B) To not collect over and over the same value if it was unchanged.\r\nTake the traffic report as an example. If you like to collect stats of all peers traffic segmented into all available p2p commands, then you would probably \"loose\" plenty of memory by storing samples with identical values.\r\n\r\nI had the idea of recording samples in the most restrained way possible. Collect lock free and only if values have changes; collect the according timestamp.\r\nIf you want to retrieve data with a fixed frequency/step-size, interpolate.\r\n\r\nBut not sure if this is stupid.",
                    "id": "MDEyOklzc3VlQ29tbWVudDI2NDg3OTg5NQ==",
                    "publishedAt": "2016-12-05T15:15:12Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8501#issuecomment-264879895"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "Rebased (main split)",
                    "id": "MDEyOklzc3VlQ29tbWVudDI2NTExNjY4Nw==",
                    "publishedAt": "2016-12-06T10:37:32Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8501#issuecomment-265116687"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/1095675?v=4",
                        "login": "luke-jr"
                    },
                    "body": "c0af3664360e26333f8e16f20b0e21efa6ce2f1a has unresolved conflicts :(",
                    "id": "MDEyOklzc3VlQ29tbWVudDI2NjI0NDE0OQ==",
                    "publishedAt": "2016-12-10T22:22:56Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8501#issuecomment-266244149"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/6848764?v=4",
                        "login": "paveljanik"
                    },
                    "body": "@luke-jr All checks have passed ;-)",
                    "id": "MDEyOklzc3VlQ29tbWVudDI2NjI0NDI5NA==",
                    "publishedAt": "2016-12-10T22:25:43Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8501#issuecomment-266244294"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/1095675?v=4",
                        "login": "luke-jr"
                    },
                    "body": "@paveljanik They're removed in the subsequent commit.",
                    "id": "MDEyOklzc3VlQ29tbWVudDI2NjI0NDgxMA==",
                    "publishedAt": "2016-12-10T22:36:18Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8501#issuecomment-266244810"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/6848764?v=4",
                        "login": "paveljanik"
                    },
                    "body": "Yes (I noticed that), this is why we should take Travis' results as a help only.",
                    "id": "MDEyOklzc3VlQ29tbWVudDI2NjI0NTAxOA==",
                    "publishedAt": "2016-12-10T22:40:48Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8501#issuecomment-266245018"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/4360349?v=4",
                        "login": "morcos"
                    },
                    "body": "@jonasschnelli whatever happened to this plan?\r\n```\r\n09:19:49 < jonasschnelli> I think you convinced me to do the 1000s 1000m 1000h 1000d approach.\r\n09:19:59 < jonasschnelli> maybe the 1000 is configurable.\r\n09:20:04 < morcos> doesn't matter to me how we do it... i think a delta version coudl be just as good\r\n09:20:14 < morcos> and you could just be smart about trimming the delta list or something\r\n09:20:28 < morcos> yes, 1000 should be configurable i thik... actually maybe isn't enough for a default\r\n09:20:45 < jonasschnelli> also, I liked the configurability of the buffer in MB.\r\n09:20:52 < jonasschnelli> That's what you probably care about.\r\n09:20:56 < jonasschnelli> Not the 1000\r\n09:20:59 < morcos> 1000 secs is just 16 minutes...  you would not want to have to only have 16 data points\r\n09:21:12 < jonasschnelli> You would say, I reserve 300MB for stats.\r\n09:21:37 < jonasschnelli> Right... just en \r\n09:21:45 < jonasschnelli> just as an example\r\n09:22:14 < jonasschnelli> So,.. you convinced me for high frequency recent and low frequency long time horizon,...\r\n09:22:21 < morcos> ok cool...   any approach that automatically keeps both recent fine-grained and long time horizon bigger step, is fine with me\r\n```",
                    "id": "MDEyOklzc3VlQ29tbWVudDI3MDcxNDIzMw==",
                    "publishedAt": "2017-01-05T18:09:40Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8501#issuecomment-270714233"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1008458?v=4",
                        "login": "jtimon"
                    },
                    "body": "Concept ACK",
                    "id": "MDEyOklzc3VlQ29tbWVudDI4MjE1ODgxOA==",
                    "publishedAt": "2017-02-23T23:45:33Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8501#issuecomment-282158818"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "Needs rebase / reply to @morcos' review comment",
                    "id": "MDEyOklzc3VlQ29tbWVudDI5ODYzNDQ3MQ==",
                    "publishedAt": "2017-05-02T13:24:56Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8501#issuecomment-298634471"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "Completely rewrote this PR.\r\n\r\nCurrent features are \r\n-> CScheduler driven sample collecting (current interval 2000ms)\r\n-> Relevant mempool data (size, memory requirement, minfee) gets written to an atomic cache (no additional locking required)\r\n-> Multiple precision levels (currently three, 2s, 60s, 1800s)\r\n-> Memory target that will calculate how many samples do fit in the given target\r\n-> Sample do only have a 2byte time-delta to the last sample, allowing to save some memory\r\n-> Flexible design, adding more data-points should be simple (bandwidth, utxo-stats, etc.).\r\n\r\nping @morcos ",
                    "id": "MDEyOklzc3VlQ29tbWVudDI5OTg3NjAyMw==",
                    "publishedAt": "2017-05-08T14:04:42Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8501#issuecomment-299876023"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "Addressed @ryanofsky points.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMwMTA3MDc1MA==",
                    "publishedAt": "2017-05-12T13:04:09Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8501#issuecomment-301070750"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "Fixed @paveljanik points and nits.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMwMTA5NDg1NQ==",
                    "publishedAt": "2017-05-12T14:39:06Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8501#issuecomment-301094855"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/1095675?v=4",
                        "login": "luke-jr"
                    },
                    "body": "Rebased on my repo.\r\n\r\n```\r\ngit checkout stats_rpc && git fetch git://github.com/luke-jr/bitcoin stats_rpc && git reset --hard FETCH_HEAD && git push ...\r\n```",
                    "id": "MDEyOklzc3VlQ29tbWVudDMyMzg2NzcyOQ==",
                    "publishedAt": "2017-08-21T22:19:55Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8501#issuecomment-323867729"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "Rebased (rebased @luke-jr's version).",
                    "id": "MDEyOklzc3VlQ29tbWVudDMzNDM1OTU3MA==",
                    "publishedAt": "2017-10-05T05:00:17Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8501#issuecomment-334359570"
                }
            ],
            "totalCount": 24
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "7af0ea43b2976ee54a53597f178e73037c62dea8"
                    }
                }
            ],
            "totalCount": 2
        },
        "createdAt": "2016-08-12T12:00:25Z",
        "deletions": 3,
        "id": "MDExOlB1bGxSZXF1ZXN0ODExMDgxMzA=",
        "labels": {
            "nodes": [
                {
                    "color": "0052cc",
                    "id": "MDU6TGFiZWw5ODI3OTE3Nw==",
                    "name": "RPC/REST/ZMQ"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "CONFLICTING",
        "mergedAt": null,
        "number": 8501,
        "state": "OPEN",
        "title": "Add mempool statistics collector",
        "updatedAt": "2018-01-11T18:53:25Z"
    },
    {
        "additions": 883,
        "author": {
            "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
            "login": "jonasschnelli",
            "url": "https://github.com/jonasschnelli"
        },
        "body": "Includes #8501\n\nAt the moment, the mempool graph is not very prominently placed (next to the debug window).\n<img width=\"351\" alt=\"bildschirmfoto 2016-08-19 um 21 20 48\" src=\"https://cloud.githubusercontent.com/assets/178464/17821624/e225da0e-6652-11e6-9322-55c918f47012.png\">\n\nFeatures:\n- interactive graph with options for tx count, dynamic memory usage and minRelayFee/KB\n- collects stats in the background, changing the timespan will directly redraw (unlike our bandwidth graph)\n- Dynamic size drawing, window can be resized\n- The mempool graph is a QWidget which means, it could be placed together with other graphs in a combine multi-graph view (screensaver approach)\n\n<img width=\"592\" alt=\"bildschirmfoto 2016-08-19 um 21 28 09\" src=\"https://cloud.githubusercontent.com/assets/178464/17821824/ecb39b72-6653-11e6-87ab-b445556b306a.png\">\n",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
                        "login": "MarcoFalke"
                    },
                    "body": "Concept ACK. Will test later.\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDI0MTEyMTI3MQ==",
                    "publishedAt": "2016-08-19T20:05:58Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8550#issuecomment-241121271"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "Added the missing button PNGs now to git. This should fix the compile issue. \n",
                    "id": "MDEyOklzc3VlQ29tbWVudDI0MTEyOTAzMQ==",
                    "publishedAt": "2016-08-19T20:39:58Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8550#issuecomment-241129031"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/1095675?v=4",
                        "login": "luke-jr"
                    },
                    "body": "Nice. Some people might want to see actual byte-size, weights, etc; probably will overflow the one-line-per-item paradigm quickly - maybe have a dropdown box to add stuff?\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDI0MTEzMDE4Mw==",
                    "publishedAt": "2016-08-19T20:44:51Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8550#issuecomment-241130183"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "Yes. Dropdown box could make sense. Adding a second graph below or on the right that just plots different data would probably also look good.\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDI0MTEzMTQ5Mw==",
                    "publishedAt": "2016-08-19T20:49:53Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8550#issuecomment-241131493"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
                        "login": "MarcoFalke"
                    },
                    "body": "Nit: Fonts appear larger on my system. Otherwise this looks great!\n\n![screenshot from 2016-08-19 23-15-51](https://cloud.githubusercontent.com/assets/6399679/17824558/076cf120-6663-11e6-9e96-f20299977782.png)\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDI0MTEzNzYxMg==",
                    "publishedAt": "2016-08-19T21:17:25Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8550#issuecomment-241137612"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "Switched to \"Arial\" as font and added a auto-size-adjustment.\nAlso added the \"charts\" icon for the menu.\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDI0MTE4Njg0OA==",
                    "publishedAt": "2016-08-20T08:20:05Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8550#issuecomment-241186848"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
                        "login": "MarcoFalke"
                    },
                    "body": "Nit: run optimize-pngs and mention the icons in assets_attribution?\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDI0MTE4NzExNw==",
                    "publishedAt": "2016-08-20T08:27:04Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8550#issuecomment-241187117"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "Optimized the pngs and added them to the assets attribution file.\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDI0MTE5MTI3MQ==",
                    "publishedAt": "2016-08-20T10:06:34Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8550#issuecomment-241191271"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/20167871?v=4",
                        "login": "Mendeleyef"
                    },
                    "body": "Concept ACK.\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDI0MTE5NDI3OQ==",
                    "publishedAt": "2016-08-20T11:26:41Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8550#issuecomment-241194279"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/20916903?v=4",
                        "login": "isle2983"
                    },
                    "body": "Nit1: The graph window is always drawn on top of the main window, even when the main window is active. It makes it annoying to use the rest of the GUI while this is open.\n\nNit2: The quantity labels for the Dynamic Memory Usage values on the left hand side of the graph are cramped and cut off some of the characters. See \"500.00 KB\" in the screenshot. It is like that for larger values once it gets into the 100MBs too.\n\n![mempoolstats](https://cloud.githubusercontent.com/assets/20916903/17840383/03383888-67c3-11e6-9bb9-851928121d1a.png)\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDI0MTI4ODg1Mg==",
                    "publishedAt": "2016-08-21T23:21:49Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8550#issuecomment-241288852"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/1530283?v=4",
                        "login": "rebroad"
                    },
                    "body": "I'm not sure what I'm doing wrong but I've merged this and the graph is empty, and has been for an hour now... :-s i.e. Dynamic Memory Usage is stuck on 0 bytes, Amount of Txs also 0, MinRelayFee also zero.\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDI0MjAwOTYzOQ==",
                    "publishedAt": "2016-08-24T09:40:01Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8550#issuecomment-242009639"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "@rebroad: what does `getmempoolinfo` tells you? Are you in sync on mainnet (or testnet)?\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDI0MjAwOTkyOA==",
                    "publishedAt": "2016-08-24T09:41:06Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8550#issuecomment-242009928"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/1530283?v=4",
                        "login": "rebroad"
                    },
                    "body": "@jonasschnelli problem solved - I had blocksonly=1 in the config file!! It's working really nicely now - great job!! I love how it can be resized and the period of time changed without the graph resetting (unlike the network traffic graph!). \n",
                    "id": "MDEyOklzc3VlQ29tbWVudDI0MjQzNjI2MA==",
                    "publishedAt": "2016-08-25T15:46:49Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8550#issuecomment-242436260"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/863730?v=4",
                        "login": "fanquake"
                    },
                    "body": "OS X screenshots:\n![init](https://cloud.githubusercontent.com/assets/863730/18006228/2c34dbd0-6bd1-11e6-85ee-c96f4025e4ca.png)\n![more-than-10](https://cloud.githubusercontent.com/assets/863730/18006229/2d2739de-6bd1-11e6-93ce-03891f85a19f.png)\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDI0MjczMDU0Mg==",
                    "publishedAt": "2016-08-26T13:08:44Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8550#issuecomment-242730542"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/1095675?v=4",
                        "login": "luke-jr"
                    },
                    "body": "Using images for basically-a-checkbox gives a non-native look on every system. It looks like [we can just colour a QCheckBox](http://www.qtcentre.org/threads/4941-qCheckbox-back-ground-color)?\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDI0Mjg5NTA2NA==",
                    "publishedAt": "2016-08-27T04:23:26Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8550#issuecomment-242895064"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/6848764?v=4",
                        "login": "paveljanik"
                    },
                    "body": "Rebase needed.\n\nConcept ACK\n\nAgree about checkboxes...\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDI0NTIzNjU4Mg==",
                    "publishedAt": "2016-09-07T10:13:25Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8550#issuecomment-245236582"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "Rebased on top of #8501\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDI0NTgzNjI2MQ==",
                    "publishedAt": "2016-09-09T07:04:42Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8550#issuecomment-245836261"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/6848764?v=4",
                        "login": "paveljanik"
                    },
                    "body": "I really like this!\n\nSuggestions:\n1. the menu item should read Mempool statistics (small s) to match other items in the menu.\n2. the window title should be the same (both title bar and top header - I think it is there only to balance the \"legenda\" on the right...) ;-)\n3. the graph itself in the window is not centered - it is a bit on the left side here.\n4. Esc should close the window.\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDI0NzI3NzA3NQ==",
                    "publishedAt": "2016-09-15T09:12:45Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8550#issuecomment-247277075"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/6848764?v=4",
                        "login": "paveljanik"
                    },
                    "body": "Rebase needed.\n\nHmm, github shows \"Conflicting files\"...\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDI0OTQxMzk0NA==",
                    "publishedAt": "2016-09-25T10:22:08Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8550#issuecomment-249413944"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/1530283?v=4",
                        "login": "rebroad"
                    },
                    "body": "I've been testing this under various window managers. On mwm the title of the mempool window says \"bitcoin-qt\". Also, it's not its own window like the debug window is, but a child of the main bitcoin-qt window, so it cannot be minimised on its own, and is minimised whenever the main window is minimised.\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDI1NDAzMTU1Mw==",
                    "publishedAt": "2016-10-16T07:11:52Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8550#issuecomment-254031553"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "Thanks @rebroad.\nI have plans to completely overhaul this PR during this week.\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDI1NDEyNTIxOA==",
                    "publishedAt": "2016-10-17T06:45:31Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8550#issuecomment-254125218"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/1530283?v=4",
                        "login": "rebroad"
                    },
                    "body": "@jonasschnelli Needed a little rebasing... d7857e11b67db6342466b06016971a6343b29ddd\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDI1NTUwNTExNA==",
                    "publishedAt": "2016-10-22T03:41:03Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8550#issuecomment-255505114"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "Concept ACK, looks nice!\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDI1NjMyNTM4OA==",
                    "publishedAt": "2016-10-26T11:54:46Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8550#issuecomment-256325388"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/863730?v=4",
                        "login": "fanquake"
                    },
                    "body": "ping @jonasschnelli Did you get to overhauling this PR?\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDI1ODc2MjQ5OQ==",
                    "publishedAt": "2016-11-07T07:12:50Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8550#issuecomment-258762499"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/11365204?v=4",
                        "login": "Victorsueca"
                    },
                    "body": "ACK 7a7d631\nTested on Windows x64\nNit: Some elements overlay with my system font size and default window size\nMaybe we should add this as a Debug window tab?\n![GUI Screenshot](https://cloud.githubusercontent.com/assets/11365204/20248561/ee886e4c-a9e6-11e6-9e3d-6f40c3bc9d01.png)\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDI2MDIwOTkzNQ==",
                    "publishedAt": "2016-11-13T20:23:41Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8550#issuecomment-260209935"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/863730?v=4",
                        "login": "fanquake"
                    },
                    "body": "Post overhaul OS X screenshots:\r\n![screen shot](https://cloud.githubusercontent.com/assets/863730/20589991/2576774c-b25b-11e6-9851-171b2e8f35c6.png)\r\n![screen shot 3](https://cloud.githubusercontent.com/assets/863730/20589993/27fbb464-b25b-11e6-8d20-51a448f01100.png)\r\n![screen shot 5](https://cloud.githubusercontent.com/assets/863730/20592539/12499dd0-b269-11e6-87c0-83b667170bb3.png)\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDI2MjcyNTgxMQ==",
                    "publishedAt": "2016-11-24T09:12:24Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8550#issuecomment-262725811"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "Removed the custom checkbox icons.\r\nThanks to `QGraphicsProxyWidget`, it's still flexible in Size.",
                    "id": "MDEyOklzc3VlQ29tbWVudDI2MjkyODMzNQ==",
                    "publishedAt": "2016-11-25T10:36:59Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8550#issuecomment-262928335"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "This is how it looks now on OSX:\r\n<img width=\"592\" alt=\"bildschirmfoto 2016-11-25 um 11 38 32\" src=\"https://cloud.githubusercontent.com/assets/178464/20622607/f7ad273a-b303-11e6-8941-1ccd11cd604d.png\">\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDI2MjkyOTAxNw==",
                    "publishedAt": "2016-11-25T10:40:37Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8550#issuecomment-262929017"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/6848764?v=4",
                        "login": "paveljanik"
                    },
                    "body": "@jonasschnelli Please address my comments here: https://github.com/bitcoin/bitcoin/pull/8550#issuecomment-247277075",
                    "id": "MDEyOklzc3VlQ29tbWVudDI2Mjk5MDM4Ng==",
                    "publishedAt": "2016-11-25T16:20:04Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8550#issuecomment-262990386"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/1095675?v=4",
                        "login": "luke-jr"
                    },
                    "body": "@jonasschnelli https://github.com/luke-jr/bitcoin/commit/ee121aa40fee4da9666d66c49cebad1b861b311d",
                    "id": "MDEyOklzc3VlQ29tbWVudDI2MzA2MTEzMQ==",
                    "publishedAt": "2016-11-26T12:35:51Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8550#issuecomment-263061131"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/1095675?v=4",
                        "login": "luke-jr"
                    },
                    "body": "I think the click-the-human-readable-timeframe was better, but I replaced it with a slider to match our bandwidth graph. Probably they should both be the same, whatever we go with (ie, replace the sliders together, in a subsequent PR).",
                    "id": "MDEyOklzc3VlQ29tbWVudDI2MzEwNjg3OA==",
                    "publishedAt": "2016-11-27T07:33:24Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8550#issuecomment-263106878"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/858454?v=4",
                        "login": "gmaxwell"
                    },
                    "body": "More graph things are cool. But I think this data is basically worthless to users, if someone goes and makes and gives you a zillion minrelayfee transactions that will never get confirmed ... the graph will read maximum, but nothing has really changed for the user or the network.\r\n\r\nA stacked chart of mempool bytes at different feerates would be much more interesting and useful to users like how sipa's chart displays the utxo set http://bitcoin.sipa.be/utxo_size.png as it would make it possible to tell things that will get confirmed (bottom stacks of the graph) from noise (higher stacks).\r\n\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDI2NDczNTE0Nw==",
                    "publishedAt": "2016-12-04T22:04:06Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8550#issuecomment-264735147"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/1530283?v=4",
                        "login": "rebroad"
                    },
                    "body": "@gmaxwell Showing memory utilization, especially in relation to minfeerelay is useful for anyone wanting to refine the algorithm for setting minfeerelay.\r\n\r\nI have set maxmempool to 144, i.e. 24 hours worth of 1MB blocks - in order to give me an indication of the minimum fee needed to keep a tx in the mempool for at least 24 hours - although not an indication for how much the fee needs to be to get it confirmed within 24 hours, admittedly.",
                    "id": "MDEyOklzc3VlQ29tbWVudDI2NDc0NjkyOQ==",
                    "publishedAt": "2016-12-05T01:06:09Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8550#issuecomment-264746929"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "I like the idea of the stacked chart. However I wanted to start with a simple graph to get in the fundamental stuff (stats core classes, drawing stuff). At the moment, the only insight into the mempool from the GUI you can get is the amount of transactions. IMO step after step.",
                    "id": "MDEyOklzc3VlQ29tbWVudDI2NDg1MDAxNg==",
                    "publishedAt": "2016-12-05T13:10:31Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8550#issuecomment-264850016"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "> However I wanted to start with a simple graph to get in the fundamental stuff (stats core classes, drawing stuff).\r\n\r\nI tend to agree - one step at a time, scope creep before the initial merge will likely mean that this will never happen at all. \r\n(needs rebase)",
                    "id": "MDEyOklzc3VlQ29tbWVudDI2NTcyNjcyOA==",
                    "publishedAt": "2016-12-08T12:16:00Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8550#issuecomment-265726728"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/1530283?v=4",
                        "login": "rebroad"
                    },
                    "body": "![screenshot at 2016-12-11 10 34 09](https://cloud.githubusercontent.com/assets/1530283/21077957/6680b5cc-bf8f-11e6-9bcd-3a5087436fa1.png)\r\n\r\n@laanwj spot on re scope creep. In this sense, I'd say ACK to merging it now.\r\n\r\nThe screenshot attached is a typical example of what it looks like after running for a week or so. One thing that becomes apparent is that the horizontal graph label points become useless - i.e. once it goes over 24 hours of duration, it would make sense to switch to date instead of time.",
                    "id": "MDEyOklzc3VlQ29tbWVudDI2NjI1ODkzOA==",
                    "publishedAt": "2016-12-11T03:50:37Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8550#issuecomment-266258938"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/6848764?v=4",
                        "login": "paveljanik"
                    },
                    "body": "Rebase needed.\r\n\r\nI really really would like to see this included in the GUI in the next version!\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDI4MTgxMzUxNQ==",
                    "publishedAt": "2017-02-22T21:42:20Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8550#issuecomment-281813515"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/1095675?v=4",
                        "login": "luke-jr"
                    },
                    "body": "FWIW, rebased (at least part of the way) in my `stats_rpc-0.14` and `stats_qt-0.14` branches.\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDI4MTg1MzY3NQ==",
                    "publishedAt": "2017-02-23T00:45:49Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8550#issuecomment-281853675"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "This is based on #8501 (core change with additional RPC command) which has to get right first.\r\nAnother solution would be to not depend on a core statistics \"module\" and therefore collect the stats in a GUI container only. Maybe this would be the better first step.",
                    "id": "MDEyOklzc3VlQ29tbWVudDI4MTkxODcyMQ==",
                    "publishedAt": "2017-02-23T07:42:58Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8550#issuecomment-281918721"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1008458?v=4",
                        "login": "jtimon"
                    },
                    "body": "Concept ACK needs rebase",
                    "id": "MDEyOklzc3VlQ29tbWVudDI4MjE1ODg1Ng==",
                    "publishedAt": "2017-02-23T23:45:47Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8550#issuecomment-282158856"
                },
                {
                    "author": null,
                    "body": "The graphics are good, the design does not forget \r\nHere you can see the different designs of graphs\r\nhttp://www.bittbox.com/showcase/30-flat-analytics-ui-dashboards\r\n\r\nI like this one\r\n\r\n![](https://d13yacurqjgara.cloudfront.net/users/13307/screenshots/1719845/attachments/275847/Statistics_-_real_size.jpg)\r\nhttps://dribbble.com/shots/1719845-Statistics-General-trends",
                    "id": "MDEyOklzc3VlQ29tbWVudDI4NTEyMTc3OA==",
                    "publishedAt": "2017-03-08T18:14:49Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8550#issuecomment-285121778"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "Seems the discussion here bled out.\r\n\r\nI'd say please review the code, and then get it merged. Visual details etc can be changed later. Real-time statistics is one reason why people like to run their own nodes.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMwNjUxMzkwNg==",
                    "publishedAt": "2017-06-06T15:00:26Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8550#issuecomment-306513906"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "Needs rebase.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMxMTY2MTA3NA==",
                    "publishedAt": "2017-06-28T13:33:14Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8550#issuecomment-311661074"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/10217?v=4",
                        "login": "Sjors"
                    },
                    "body": "Concept ACK.\r\n\r\nI can't compile this ([log gist](https://gist.github.com/Sjors/f8edebd96e02c17c8d19701a3fc504cb)). I'll try again after the rebase.\r\n\r\n> A stacked chart of mempool bytes at different feerates would be much more interesting and useful\r\n\r\nAgreed.\r\n\r\nIt would be nice to have a little chart icon in the bottom right corner of the wallet (in a future PR).\r\n\r\nThat said, I also agree with:\r\n\r\n> Visual details etc can be changed later.\r\n\r\n\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0MzE3NjU0Nw==",
                    "publishedAt": "2017-11-09T14:47:44Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8550#issuecomment-343176547"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "This is based on https://github.com/bitcoin/bitcoin/pull/8501 and the question is, should it be Qt only (no Qt free stats collector) or should we try to get #8501 done?\r\n(will rebase both PRs soon)",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0MzI1NDYwOQ==",
                    "publishedAt": "2017-11-09T18:54:51Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8550#issuecomment-343254609"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "Rebased.\r\nIt's currently not Qt4 compatible due to a lambda signal connect (travis reported / working on it).",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0NjQ5MDg4OQ==",
                    "publishedAt": "2017-11-22T22:33:06Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8550#issuecomment-346490889"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "> It's currently not Qt4 compatible due to a lambda signal connect (travis reported / working on it).\r\n\r\nIf it's a lot of work, feel free to leave \"nice but not critical\" features such as this out when compiling with Qt4.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0NjY0NzM3MQ==",
                    "publishedAt": "2017-11-23T15:31:48Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8550#issuecomment-346647371"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/6299681?v=4",
                        "login": "PierreRochard"
                    },
                    "body": "ACK with Qt5",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1MTg4MTQwNA==",
                    "publishedAt": "2017-12-15T00:53:27Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8550#issuecomment-351881404"
                }
            ],
            "totalCount": 48
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "63fb11652fd41783589ba55d68d5f8473f299b15"
                    }
                }
            ],
            "totalCount": 2
        },
        "createdAt": "2016-08-19T19:30:50Z",
        "deletions": 2,
        "id": "MDExOlB1bGxSZXF1ZXN0ODIwMzMzNDc=",
        "labels": {
            "nodes": [
                {
                    "color": "02d7e1",
                    "id": "MDU6TGFiZWwxMzU5NDY=",
                    "name": "GUI"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "CONFLICTING",
        "mergedAt": null,
        "number": 8550,
        "state": "OPEN",
        "title": "[Qt] Add interactive mempool graph",
        "updatedAt": "2018-01-08T12:39:16Z"
    },
    {
        "additions": 210,
        "author": {
            "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
            "login": "jonasschnelli",
            "url": "https://github.com/jonasschnelli"
        },
        "body": "This adds the startup argument `-hdkeypath` which allows to set the BIP32 keypath scheme during the creation of a wallet.\n\nThis PR would allow to use keypath-scheme after BIP44, etc. to be compatible with other wallets.\n\nThis PR does **not** change the keypool mechanism. Even if the keypath would allow public-key-derivation, we still derive all keys with private-key-derivation and fill up the keypool.\nThough, a PR that would enable public-key-derivation would be \"in a reviewable size\" once this gets merged.\n",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "@dcousens: Yes. I have thought about the split of the two key-chains (internal/external). But the current keypool concept make it a bit more difficult. I guess it could be combined with the feature to allow public key derivation. \n",
                    "id": "MDEyOklzc3VlQ29tbWVudDI0NzI0NjI4MA==",
                    "publishedAt": "2016-09-15T06:27:04Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8723#issuecomment-247246280"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "Rebased.\nI hope we can make some progress regarding the flexibility of our HD wallet feature as well as with pub-child-key-derivation.\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDI1NTAzNjI2OQ==",
                    "publishedAt": "2016-10-20T08:01:40Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8723#issuecomment-255036269"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "Accidentally closed, reopen.\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDI1NTAzNjU0OQ==",
                    "publishedAt": "2016-10-20T08:02:56Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8723#issuecomment-255036549"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "Added the 0.14 milestone label.\r\nIMO we should support flexible keypaths as well as wallet creation with an initial xpriv.",
                    "id": "MDEyOklzc3VlQ29tbWVudDI2Mjg5NzQ1NA==",
                    "publishedAt": "2016-11-25T07:41:51Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8723#issuecomment-262897454"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1492956?v=4",
                        "login": "jmcorgan"
                    },
                    "body": "ACK. It works as is, however, I would like to see either a separate keypath scheme for change keys, or a way of specifying both in the existing one. Of course, you'd need to actually implement the split in the wallet code.\r\n\r\nWallet creation with an xpriv/keypathscheme would be very useful, however, it brings up the question of restoring a wallet from only those (scanning, gap policy, etc.), vs. a full wallet.dat file.",
                    "id": "MDEyOklzc3VlQ29tbWVudDI2NDUwOTQxMg==",
                    "publishedAt": "2016-12-02T17:20:23Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8723#issuecomment-264509412"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1008458?v=4",
                        "login": "jtimon"
                    },
                    "body": "Concept ACK, needs rebase.",
                    "id": "MDEyOklzc3VlQ29tbWVudDI3MTY1MTk1NA==",
                    "publishedAt": "2017-01-10T18:09:59Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8723#issuecomment-271651954"
                }
            ],
            "totalCount": 6
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "fdfd58b0d2898c1c1e5d19a9cbd5c142657220b5"
                    }
                }
            ],
            "totalCount": 1
        },
        "createdAt": "2016-09-14T13:22:24Z",
        "deletions": 31,
        "id": "MDExOlB1bGxSZXF1ZXN0ODUyMjYzNTM=",
        "labels": {
            "nodes": [
                {
                    "color": "08a781",
                    "id": "MDU6TGFiZWwxNDk0MjQ=",
                    "name": "Wallet"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "CONFLICTING",
        "mergedAt": null,
        "number": 8723,
        "state": "OPEN",
        "title": "[Wallet] Add support for flexible BIP32/HD keypath-scheme",
        "updatedAt": "2018-02-08T17:56:17Z"
    },
    {
        "additions": 127,
        "author": {
            "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
            "login": "jonasschnelli",
            "url": "https://github.com/jonasschnelli"
        },
        "body": "At the moment, the HD seed cannot be set by the user. It will always be generated by Bitcoin-Core (`CKey::MakeNewKey()`).\n\nThis PR adds a startup argument `-hdxpriv` where users can set their custom hd extended master private key. The argument takes only affect during the creation of a new `wallet.dat` and there will be a warning if the argument is present during loading an exiting wallet.\n\nIf a custom extended master private key has been set, it will be kept when encrypting the wallet (with log-printing a warning).\n",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/7275704?v=4",
                        "login": "btcdrak"
                    },
                    "body": "As it stands this will leak the xpriv since the xpriv will be in the command history. The import of the xpriv should be interactive and should be encrypted before being stored.\n\nI know previously we would not recommend forcing encryption because it could lead to funds loss, here the user already has the xpriv so it's already backed up.\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDI0NzM1NDcxNw==",
                    "publishedAt": "2016-09-15T15:03:47Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8735#issuecomment-247354717"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/6848764?v=4",
                        "login": "paveljanik"
                    },
                    "body": "@btcdrak We can change this to accept the seed only from stdin (`-stdin`).\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDI0NzM1Njc4Mw==",
                    "publishedAt": "2016-09-15T15:11:03Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8735#issuecomment-247356783"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "Yes. I'm aware of the security weakness of accepting a xpriv over a startup argument.\nA previous proposed solution would be to support a tool called `bitcoin-wallet` which could create, alter and encrypt wallet without the need of bitcoind (this would by my preferred solution but can be added later).\n\nI think accepting a xpriv over a configuration value is not extremely bad. If an attacker can access bitcoin.conf he might also be capable of grabbing your RPC password and dump your wallet to /tmp.\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDI0NzM2MTYwNg==",
                    "publishedAt": "2016-09-15T15:27:50Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8735#issuecomment-247361606"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/7275704?v=4",
                        "login": "btcdrak"
                    },
                    "body": "Personally I prefer a separate interactive import tool and a Qt GUI option which I think would be used more in any case. FWIW, I think importing via a bitcoin.conf option is even worse.\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDI0NzM2Mzc3OQ==",
                    "publishedAt": "2016-09-15T15:35:17Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8735#issuecomment-247363779"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/7275704?v=4",
                        "login": "btcdrak"
                    },
                    "body": "> @btcdrak We can change this to accept the seed only from stdin (-stdin).\n\nSounds good, that relieves my concerns.\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDI0NzM2Mzk5MA==",
                    "publishedAt": "2016-09-15T15:36:00Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8735#issuecomment-247363990"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/548488?v=4",
                        "login": "sipa"
                    },
                    "body": "Concept ACK, but I think this needs significant reworking to interact with multiwallet.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MDg1NDUxMQ==",
                    "publishedAt": "2018-03-06T17:08:47Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8735#issuecomment-370854511"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1063656?v=4",
                        "login": "jnewbery"
                    },
                    "body": "This would possibly be easier to implement using bitcoin-wallet-tool (https://github.com/bitcoin/bitcoin/pull/8745)",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3ODMzMDE0NQ==",
                    "publishedAt": "2018-04-03T17:24:45Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8735#issuecomment-378330145"
                }
            ],
            "totalCount": 7
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "d772d3bb210ac9d1e802b76babe2589998d6e6e8"
                    }
                }
            ],
            "totalCount": 3
        },
        "createdAt": "2016-09-15T09:11:07Z",
        "deletions": 20,
        "id": "MDExOlB1bGxSZXF1ZXN0ODUzNjg2MjY=",
        "labels": {
            "nodes": [
                {
                    "color": "08a781",
                    "id": "MDU6TGFiZWwxNDk0MjQ=",
                    "name": "Wallet"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "CONFLICTING",
        "mergedAt": null,
        "number": 8735,
        "state": "OPEN",
        "title": "[Wallet] add option for a custom extended master privat key (xpriv)",
        "updatedAt": "2018-04-03T17:24:45Z"
    },
    {
        "additions": 350,
        "author": {
            "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
            "login": "jonasschnelli",
            "url": "https://github.com/jonasschnelli"
        },
        "body": "**WORK IN PROGRESS**\nAdd another bitcoin-tool called `bitcoin-wallet-tool`. Currently it supports creation of wallets (with optional encryption before creating keys), encryption and some info-dumping.\n\nIf we agree on this concept, it could be use for creating a HD wallet with a given xpriv.\nAlso, a such tool would probably be required to properly restore a hd wallet.\nIf we once migrate away from BerkleyDB, this could also be helpful.\n",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/6848764?v=4",
                        "login": "paveljanik"
                    },
                    "body": "I like the concept of an external app working on `wallet.dat` files. I know several use cases where you have many `wallet.dat` files and with this, you can remove all the notes around the files you have to select between them.\n\nI can even imagine removing/deprecating `encryptwallet`, `walletpassphrasechange` and such from `bitcoind` afterwards.\n\nWe have to take care of proper file locking when working on the file when `bitcoind` is running at the same time.\n\nSome travis' hosts do not build (wallet/nowallet configs?).\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDI0Nzc1NjgwOQ==",
                    "publishedAt": "2016-09-17T08:15:57Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8745#issuecomment-247756809"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "Yeah, why not. Concept ACK. This is conceptually similar to SQL database's external utilities for repair, management, etc.\nAlso I suppose when there needs to be a conversion tool between old and new formats, it would be part of this utility?\n\nFrom a deployment point of view I think we should keep this command-line only. Two Qt-using statically linked monster executables in the distribution is a bit too much, because of size concerns but also because e.g. MacOSX assumes a one-to-one mapping of GUI executables to applications.\n\n> We have to take care of proper file locking when working on the file when bitcoind is running at the same time.\n\nThis is indeed very important, it needs to be prevented (and tested) that it is impossible to fudge a database with this utility while bitcoind is running.\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDI0Nzk5MjA2NQ==",
                    "publishedAt": "2016-09-19T13:25:47Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8745#issuecomment-247992065"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "> Also I suppose when there needs to be a conversion tool between old and new formats, it would be part of this utility?\n\nYes. The whole -walletupgare (as well as salvage) could go into this tool.\n\n> From a deployment point of view I think we should keep this command-line only. Two Qt-using statically linked monster executables in the distribution is a bit too much, because of size concerns but also because e.g. MacOSX assumes a one-to-one mapping of GUI executables to applications.\n\nYes. The current Qt app could support similar functions, It doesn't need to be a separate App. Multiwallet support would help in this case.\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDI0ODIyNjEzMA==",
                    "publishedAt": "2016-09-20T07:34:20Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8745#issuecomment-248226130"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "Another operation that would be useful here: rewriting the wallet. This does the CDB::rewrite step as done after encryption, but is meant to get rid of no-longer-used 'junk' blocks in the wallet. Either to make the file smaller or permanently rid of sensitive metadata that has been removed.\n\nThis cannot be conveniently done from the context of bitcoind (needs restart) but ideally in an external tool.\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDI0ODUyMDI0NA==",
                    "publishedAt": "2016-09-21T06:07:46Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8745#issuecomment-248520244"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/1095675?v=4",
                        "login": "luke-jr"
                    },
                    "body": "I think if we're going to keep adding more binaries like this, we really ought to stop using static linking for the gitian bins sooner rather than later... :/\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDI0ODg1MjMwNw==",
                    "publishedAt": "2016-09-22T09:23:38Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8745#issuecomment-248852307"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "Can't figure out how to solve the gcc linking circular dependencies issue. Maybe @theuni know a way to solve this.\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDI0OTIwMzg4Nw==",
                    "publishedAt": "2016-09-23T14:12:45Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8745#issuecomment-249203887"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "> I think if we're going to keep adding more binaries like this, we really ought to stop using static linking for the gitian bins sooner rather than later... :/\n\nOn windows that's easy: package the DLLs with the binary, ship them in the same directory. Many software does this. On Linux less so, unfortunately. It's possible to ship `.so` files but it needs a special script to invoke then, as they won't get picked up automatically if they're in the directory of the executable.\n\nAnyhow this is a tangent: our non-GUI dependencies are really small. E.g. boost is mostly header-only with some small library files, libevent is tiny, berkeleydb is relatively small, etc. It isn't too problematic to link them to each executable. Also this tool doesn't even need libevent.\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDI0OTU1NTM2Mg==",
                    "publishedAt": "2016-09-26T12:24:49Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8745#issuecomment-249555362"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "Agree with @laanwj. The non QT static linked tools should be relatively small, compared to the disk space required by the blocks/index.\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDI0OTU1NTcwMw==",
                    "publishedAt": "2016-09-26T12:26:44Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8745#issuecomment-249555703"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/1095675?v=4",
                        "login": "luke-jr"
                    },
                    "body": "> It's possible to ship .so files but it needs a special script to invoke then, as they won't get picked up automatically if they're in the directory of the executable.\n\nHmm, what about RPATH?\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDI0OTY5NDU4Ng==",
                    "publishedAt": "2016-09-26T20:54:28Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8745#issuecomment-249694586"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/417043?v=4",
                        "login": "theuni"
                    },
                    "body": "Agree with @laanwj/@jonasschnelli above.\n\n@luke-jr rpath would work (for linux, you can use a relative path). There are lots of reasons _not_ to do that though, and unless there's a better reason than filesize, it doesn't seem justifiable.\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDI0OTY5OTgzNA==",
                    "publishedAt": "2016-09-26T21:15:36Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8745#issuecomment-249699834"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "Closing for now. Requires some steps in between until this can be revitalized",
                    "id": "MDEyOklzc3VlQ29tbWVudDI3NDc5ODk2Ng==",
                    "publishedAt": "2017-01-24T13:12:21Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8745#issuecomment-274798966"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "Reopening.\r\nA such tool would make much sense for zapwallet, salvage, wallet-creation with an xpriv (especially with multiwallet).",
                    "id": "MDEyOklzc3VlQ29tbWVudDMwNDIxOTkwMw==",
                    "publishedAt": "2017-05-26T08:09:10Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8745#issuecomment-304219903"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/7133040?v=4",
                        "login": "ryanofsky"
                    },
                    "body": "Not sure if you are still seeing issues with circular dependencies, but a simple way to allow building with circular dependencies during development is to add `-Wl,--start-group` to LDFLAGS before the relevant libraries like I did here: https://github.com/bitcoin/bitcoin/pull/8873#pullrequestreview-2650430",
                    "id": "MDEyOklzc3VlQ29tbWVudDMwNDI3NDUxMg==",
                    "publishedAt": "2017-05-26T12:49:36Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8745#issuecomment-304274512"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1063656?v=4",
                        "login": "jnewbery"
                    },
                    "body": "doesn't build for me. Fails at linking:\r\n\r\n```\r\nlibbitcoin_wallet.a(libbitcoin_wallet_a-wallet.o): In function `CWallet::AddCScript(CScript const&)':\r\n/home/ubuntu/bitcoin/src/wallet/wallet.cpp:238: undefined reference to `CBasicKeyStore::AddCScript(CScript const&)'\r\nlibbitcoin_wallet.a(libbitcoin_wallet_a-wallet.o): In function `COutput::ToString[abi:cxx11]() const':\r\n/home/ubuntu/bitcoin/src/wallet/wallet.cpp:78: undefined reference to `FormatMoney[abi:cxx11](long const&)'\r\nlibbitcoin_wallet.a(libbitcoin_wallet_a-wallet.o): In function `CWallet::IsMine(CTxOut const&) const':\r\n/home/ubuntu/bitcoin/src/wallet/wallet.cpp:1192: undefined reference to `IsMine(CKeyStore const&, CScript const&, SigVersion)'\r\n...\r\n```\r\n\r\nTravis seems to have the same build failures.\r\n\r\nConcept ACK. Once you've fixed the build failures, I'm very keen to test and review this. As you say, this will be especially useful for multi-wallet.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMwNTMyOTg0MQ==",
                    "publishedAt": "2017-05-31T21:58:22Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8745#issuecomment-305329841"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1063656?v=4",
                        "login": "jnewbery"
                    },
                    "body": "I can get this to build using the `-Wl,--start-group` flag as suggested by ryanofsky above. If anyone wants to test/review this, then the branch here: https://github.com/jnewbery/bitcoin/tree/pr8745.1 builds",
                    "id": "MDEyOklzc3VlQ29tbWVudDMwNjg2MjI5Ng==",
                    "publishedAt": "2017-06-07T17:12:03Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8745#issuecomment-306862296"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1063656?v=4",
                        "login": "jnewbery"
                    },
                    "body": "I have a branch of this rebased on #10762 and #12490 (which remove the wallet <-> server circular dependencies and allow this to build)\r\n\r\nhere: https://github.com/jnewbery/bitcoin/tree/pr8745_rebased if anyone wants to play around with it.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NzEyMzM1MQ==",
                    "publishedAt": "2018-02-20T21:20:21Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8745#issuecomment-367123351"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1063656?v=4",
                        "login": "jnewbery"
                    },
                    "body": "I've rebased https://github.com/jnewbery/bitcoin/tree/pr8745_rebased and pushed it (there were lots of silent conflicts with wallet refactors).",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3ODM2ODE2OQ==",
                    "publishedAt": "2018-04-03T19:28:45Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8745#issuecomment-378368169"
                }
            ],
            "totalCount": 17
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "f76ed9ca1e3fdc290698496e0c910f522e822e53"
                    }
                }
            ],
            "totalCount": 1
        },
        "createdAt": "2016-09-16T14:48:51Z",
        "deletions": 8,
        "id": "MDExOlB1bGxSZXF1ZXN0ODU1ODY0MDQ=",
        "labels": {
            "nodes": [
                {
                    "color": "08a781",
                    "id": "MDU6TGFiZWwxNDk0MjQ=",
                    "name": "Wallet"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "CONFLICTING",
        "mergedAt": null,
        "number": 8745,
        "state": "OPEN",
        "title": "[PoC] Add wallet inspection and modification tool \"bitcoin-wallet-tool\"",
        "updatedAt": "2018-04-03T19:28:45Z"
    },
    {
        "additions": 169,
        "author": {
            "avatarUrl": "https://avatars3.githubusercontent.com/u/5617245?v=4",
            "login": "afk11",
            "url": "https://github.com/afk11"
        },
        "body": "I figured it may be useful for these RPC methods to allow sorting public keys (BIP67) The PR adds a new boolean to createmultisig / addmultisigaddress at the end of their parameter list. By default, this is set to false to avoid a BC break. \n\nI added a RPC test file `sort_multisig.py` for testing createmultisig. Tests for addmultisigaddress went in `wallet-accounts.py`.\n\nNote: Code to check whether sorting is desired had to be replicated in both RPC methods (not in _createmultisig_redeemScript) because addmultisigaddress already takes a parameter at position 3.\n",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/413395?v=4",
                        "login": "dcousens"
                    },
                    "body": "concept ACK\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDI0NzgzMjIzOA==",
                    "publishedAt": "2016-09-18T07:46:23Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8751#issuecomment-247832238"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "Concept ACK, although I really don't like multiple-optional-positional-boolean APIs. Wish we switched to named arguments any day.\n\nOne nit: the RPC help should mention BIP67 by name.\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDI0ODgxMjk1NA==",
                    "publishedAt": "2016-09-22T04:58:58Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8751#issuecomment-248812954"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
                        "login": "MarcoFalke"
                    },
                    "body": "Needs rebase\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDI1OTEwMTQwMA==",
                    "publishedAt": "2016-11-08T10:30:24Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8751#issuecomment-259101400"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/5617245?v=4",
                        "login": "afk11"
                    },
                    "body": "@MarcoFalke thanks, done. @laanwj I should have mentioned, nits addressed. \n\nOne travis run failed due to the compactblocks RPC test.\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDI1OTE3NDU1OQ==",
                    "publishedAt": "2016-11-08T15:53:02Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8751#issuecomment-259174559"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/7133040?v=4",
                        "login": "ryanofsky"
                    },
                    "body": "I can't see anything on travis right now  (503 errors), but the compactblocks error is probably just the spurious https://github.com/bitcoin/bitcoin/issues/8842 / https://github.com/bitcoin/bitcoin/pull/9058 failures.\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDI1OTE4MDA5Ng==",
                    "publishedAt": "2016-11-08T16:11:23Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8751#issuecomment-259180096"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
                        "login": "MarcoFalke"
                    },
                    "body": "Concept ACK 7d7a64726991ff087cb8125e0c7277173a688dc7\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDI1OTIwMTk1MA==",
                    "publishedAt": "2016-11-08T17:26:44Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8751#issuecomment-259201950"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/5617245?v=4",
                        "login": "afk11"
                    },
                    "body": "I probably shouldn't have squashed @MarcoFalke, I'm sorry for rebasing out the commit you reviewed. The only thing to change this time was the removal of \"'s from the RPC help message. ",
                    "id": "MDEyOklzc3VlQ29tbWVudDI2Mjc0MTk1OQ==",
                    "publishedAt": "2016-11-24T10:25:39Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8751#issuecomment-262741959"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/1095675?v=4",
                        "login": "luke-jr"
                    },
                    "body": "Should update `doc/bips.md` also.",
                    "id": "MDEyOklzc3VlQ29tbWVudDI2ODQ3MzYyMQ==",
                    "publishedAt": "2016-12-21T09:14:19Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8751#issuecomment-268473621"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/1095675?v=4",
                        "login": "luke-jr"
                    },
                    "body": "I rebased and addressed all the nits; pushed this to luke-jr/sort-multisigs\r\n\r\n@afk11 Are you still maintaining this? Can you pull my changes?\r\n\r\n```\r\ngit checkout sort-multisigs\r\ngit fetch git://github.com/luke-jr/bitcoin sort-multisigs\r\ngit reset --hard FETCH_HEAD\r\ngit push ...\r\n```",
                    "id": "MDEyOklzc3VlQ29tbWVudDI3NzQ3Njk3NA==",
                    "publishedAt": "2017-02-04T20:51:08Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8751#issuecomment-277476974"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/5617245?v=4",
                        "login": "afk11"
                    },
                    "body": "Sorry, yep I can pull these! \r\n\r\nI wanted to wait until named parameters was merged before hand, so I could avoid adding a positional parameter before the accounts parameters were changed \r\n\r\nI'll look at this in the next day or so (away from internet atm) wanna finish this up",
                    "id": "MDEyOklzc3VlQ29tbWVudDI3Nzc5ODUwNA==",
                    "publishedAt": "2017-02-06T20:10:21Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8751#issuecomment-277798504"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/5617245?v=4",
                        "login": "afk11"
                    },
                    "body": "Merged commits and rebased. Apologies for the delay!",
                    "id": "MDEyOklzc3VlQ29tbWVudDI4NTE1MDM1Nw==",
                    "publishedAt": "2017-03-08T19:55:28Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8751#issuecomment-285150357"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/5617245?v=4",
                        "login": "afk11"
                    },
                    "body": "The Apple build failed because the job time exceeded the maximum :/",
                    "id": "MDEyOklzc3VlQ29tbWVudDI4NTE1NzIzMg==",
                    "publishedAt": "2017-03-08T20:21:22Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8751#issuecomment-285157232"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/5617245?v=4",
                        "login": "afk11"
                    },
                    "body": "Rebased",
                    "id": "MDEyOklzc3VlQ29tbWVudDI4NjM1NzE1MA==",
                    "publishedAt": "2017-03-14T08:47:01Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8751#issuecomment-286357150"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/5617245?v=4",
                        "login": "afk11"
                    },
                    "body": "Rebased",
                    "id": "MDEyOklzc3VlQ29tbWVudDMwMDI3Njc1MQ==",
                    "publishedAt": "2017-05-09T19:32:01Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8751#issuecomment-300276751"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/1095675?v=4",
                        "login": "luke-jr"
                    },
                    "body": "The description for d70583a2f9ae8bb4bda2e6224e699ac2cbb583ee is no longer correct.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMwNjM3NDI5Ng==",
                    "publishedAt": "2017-06-06T03:50:32Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8751#issuecomment-306374296"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/5617245?v=4",
                        "login": "afk11"
                    },
                    "body": "@luke-jr Oops, yeah the rebase mightn't have been the easiest. So re-add the contents of setup_network?",
                    "id": "MDEyOklzc3VlQ29tbWVudDMwNjQyNDUyOQ==",
                    "publishedAt": "2017-06-06T08:56:36Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8751#issuecomment-306424529"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1063656?v=4",
                        "login": "jnewbery"
                    },
                    "body": "Perhaps I'm missing something, but I don't see the need for this. The `addmultisigaddress` RPC creates the multisig script with the keys in the order provided. Why not just have the client provide keys in sorted order if you want the script to be BIP-67 compliant?\r\n\r\nIt doesn't look like this PR is enforcing that the provided keys are compressed, so even with this PR, there are still expectations placed on the client.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMwODc0ODA0Mg==",
                    "publishedAt": "2017-06-15T14:20:34Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8751#issuecomment-308748042"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/5617245?v=4",
                        "login": "afk11"
                    },
                    "body": "I think if developers are already committing to using the RPC to make a multisig script, making it easier to produce the same representation is more important than not.\r\n\r\nYou are correct the PR as it stands doesn't validate it.. fixing this now. ",
                    "id": "MDEyOklzc3VlQ29tbWVudDMwOTA0MTIzNg==",
                    "publishedAt": "2017-06-16T14:30:15Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8751#issuecomment-309041236"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1063656?v=4",
                        "login": "jnewbery"
                    },
                    "body": "I'm still a weak concept NACK for this. I don't agree that we should add complexity to the server when the same outcome can be achieved by simply running a `sort()` function on the client before calling the RPC. Sometimes there's good reason to add that complexity to the server - see for example #9991 which adds a filter to save significantly on bandwidth and server resources. In this case I don't see the benefit.\r\n\r\nSorry if that sounds negative - I think there needs to be some bar for adding new RPCs and arguments to avoid bloat.\r\n\r\nHowever, if I'm wrong and there's widespread consensus that this is useful functionality and should be merged, can I at least ask that you use named arguments instead of an Options object? There's really no need for Options objects in RPC calls since named args were added in #8811.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMwOTA1NTUyOQ==",
                    "publishedAt": "2017-06-16T15:23:09Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8751#issuecomment-309055529"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/5617245?v=4",
                        "login": "afk11"
                    },
                    "body": "Both RPC methods take an options object for this (sorry, the PR description wasn't updated with this)\r\nhttps://github.com/bitcoin/bitcoin/pull/8751/files#diff-ad6efdc354b57bd1fa29fc3abb6e2872R353\r\nhttps://github.com/bitcoin/bitcoin/pull/8751/files#diff-df7d84ff2f53fcb2a0dc15a3a51e55ceR1050 \r\n\r\nI appreciate where you are coming from and agree that most people can probably sort themselves, but they could also build a multisig script out of the keys and m/n. It's been a while since I've even used the RPC, but remember well the time when I didn't have a bitcoin library to do it all. \r\n\r\nI think it's worth including since once they continue using the flag, requests which mistakenly use the wrong order will reproduce the same redeem script (instead of always having a stateful order of public keys), and likewise with libraries that support it. ",
                    "id": "MDEyOklzc3VlQ29tbWVudDMwOTM3ODg5MA==",
                    "publishedAt": "2017-06-19T08:53:10Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8751#issuecomment-309378890"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/1095675?v=4",
                        "login": "luke-jr"
                    },
                    "body": "Rebased and squashed a bit.\r\n\r\n```\r\ngit checkout sort-multisigs && git fetch git://github.com/luke-jr/bitcoin sort-multisigs && git reset --hard FETCH_HEAD && git push ...\r\n```",
                    "id": "MDEyOklzc3VlQ29tbWVudDMyMzg1OTEzMw==",
                    "publishedAt": "2017-08-21T21:33:58Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8751#issuecomment-323859133"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/649246?v=4",
                        "login": "TheBlueMatt"
                    },
                    "body": "Concept ACK. Care to rebase?",
                    "id": "MDEyOklzc3VlQ29tbWVudDMzMzE5OTI2NQ==",
                    "publishedAt": "2017-09-29T18:13:05Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8751#issuecomment-333199265"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/5617245?v=4",
                        "login": "afk11"
                    },
                    "body": "Rebased, sorry for the delay. Updated to check that keys are compressed before allowing sorting, and added more tests for this. \r\n\r\nUpdated the docs/bips.md document to mention 0.15.1 instead of 0.15.0 (let me know whatever's best for this)",
                    "id": "MDEyOklzc3VlQ29tbWVudDMzMzMxMjI1OQ==",
                    "publishedAt": "2017-09-30T14:31:38Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8751#issuecomment-333312259"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/649246?v=4",
                        "login": "TheBlueMatt"
                    },
                    "body": "Hmm, hate to reopen it, but now that we do actually have named arguments, could you rever to just adding a new boolean argument? options objects are just redundant now, and having options alias account in addmultisigaddress is just gross. Everything else seems fine at first glance.\r\n\r\n@jnewbery I'd generally agree with you, but, at least in principal, I think BIP67 is worth it.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMzMzY4NTA1Mw==",
                    "publishedAt": "2017-10-02T22:37:51Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8751#issuecomment-333685053"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/5617245?v=4",
                        "login": "afk11"
                    },
                    "body": "@TheBlueMatt that's fine, revised the PR now. \r\n\r\nI missed the boat again for v0.15.1, suggestions for a release to mention in bips.md?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0ODcwMjI5MQ==",
                    "publishedAt": "2017-12-02T16:18:00Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8751#issuecomment-348702291"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/1095675?v=4",
                        "login": "luke-jr"
                    },
                    "body": "> Hmm, hate to reopen it, but now that we do actually have named arguments, could you rever to just adding a new boolean argument? options objects are just redundant now, and having options alias account in addmultisigaddress is just gross. Everything else seems fine at first glance.\r\n\r\nStrongly disagree. Named arguments is not a reason to have a terrible positional arguments API. Uncommon options should go through an options argument when positional arguments are used.\r\n\r\nThe account alias is merely for backward compatibility.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2OTc2MTAyNQ==",
                    "publishedAt": "2018-03-01T22:59:50Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8751#issuecomment-369761025"
                }
            ],
            "totalCount": 26
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "e11cb50a09b1a6108f906b7cdb67015a812ea689"
                    }
                }
            ],
            "totalCount": 5
        },
        "createdAt": "2016-09-17T15:44:45Z",
        "deletions": 21,
        "id": "MDExOlB1bGxSZXF1ZXN0ODU2Nzc5MTU=",
        "labels": {
            "nodes": [
                {
                    "color": "0052cc",
                    "id": "MDU6TGFiZWw5ODI3OTE3Nw==",
                    "name": "RPC/REST/ZMQ"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "CONFLICTING",
        "mergedAt": null,
        "number": 8751,
        "state": "OPEN",
        "title": "RPC: Add parameter to addmultisigaddress / createmultisig to sort public keys",
        "updatedAt": "2018-03-02T06:05:21Z"
    },
    {
        "additions": 574,
        "author": {
            "avatarUrl": "https://avatars0.githubusercontent.com/u/8403418?v=4",
            "login": "jl2012",
            "url": "https://github.com/jl2012"
        },
        "body": "This implements a static estimation of sighash size for a transaction. A transaction with more than 90bytes of sighash per weight is non-standard. This is equivalent to 36MB for an 100kB non-segwit transaction, or 360MB for a block in the worst case. All transactions below 100kB with legitimate use of CHECK(MULTI)SIG should remain standard with this limit.\n\nThe estimation of sighash is based on the following 3 assumptions:\n a. OP_CODESEPARATOR and FindAndDelete are disabled by SCRIPT_VERIFY_CONST_SCRIPTCODE. This ensures that the scriptCode serialized in SignatureHash is always the same as the original script passing to the EvalScript. (part of this PR)\n b. SignatureHash is performed once only for each SIGHASH type. (#8654)\n c. Only 6 sighash types are allowed: ALL, NONE, SINGLE, and combinations with ANYONECANPAY (already enforced as policy with STRICTENC)\n\nTodo: unit tests\n",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/8403418?v=4",
                        "login": "jl2012"
                    },
                    "body": "@TheBlueMatt As you suggested, we could be more aggressive when disabling FindAndDelete. So eventually we may retire this function after a softfork. \n",
                    "id": "MDEyOklzc3VlQ29tbWVudDI0Nzg2NzcxMQ==",
                    "publishedAt": "2016-09-18T19:21:12Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8755#issuecomment-247867711"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/8403418?v=4",
                        "login": "jl2012"
                    },
                    "body": "A draft BIP is made for the detailed rationale of this PR: https://github.com/jl2012/bips/blob/sighash/bip-sighash.mediawiki\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDI0ODY5MzU2NQ==",
                    "publishedAt": "2016-09-21T18:03:57Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8755#issuecomment-248693565"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/8403418?v=4",
                        "login": "jl2012"
                    },
                    "body": "Unit tests are completed and related BIP updated\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDI1MDcxMzU0Mg==",
                    "publishedAt": "2016-09-30T10:36:14Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8755#issuecomment-250713542"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "Removing 0.14 tag as discussed in today's meeting",
                    "id": "MDEyOklzc3VlQ29tbWVudDI3MjI1NzY5MA==",
                    "publishedAt": "2017-01-12T19:27:05Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8755#issuecomment-272257690"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/649246?v=4",
                        "login": "TheBlueMatt"
                    },
                    "body": "Strong Concept ACK on at least making CODESEPARATOR and FindAndDelete non-standard. Can we push forward on that independantly to get it done sooner rather than later, then at least the sighash limits can be reviewed separately and are more straight-forward? Any plans to rebase this @jl2012?",
                    "id": "MDEyOklzc3VlQ29tbWVudDMzMzIwMDY2OA==",
                    "publishedAt": "2017-09-29T18:19:05Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8755#issuecomment-333200668"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/8403418?v=4",
                        "login": "jl2012"
                    },
                    "body": "@TheBlueMatt : sure, I'll make another PR just for the `SCRIPT_VERIFY_CONST_SCRIPTCODE` policy",
                    "id": "MDEyOklzc3VlQ29tbWVudDMzMzI0MTU5MQ==",
                    "publishedAt": "2017-09-29T21:18:46Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8755#issuecomment-333241591"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/548488?v=4",
                        "login": "sipa"
                    },
                    "body": "@jl2012 What's the status here?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MDg1NDY0Nw==",
                    "publishedAt": "2018-03-06T17:09:16Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8755#issuecomment-370854647"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/8403418?v=4",
                        "login": "jl2012"
                    },
                    "body": "@sipa: this requires #8654 and #11423. But #8654 needs to maintain a cache of 256 32-bytes hashes per input which might impact validation. It could be reduced to 6 hashes/input if we softfork away those 250 non-std nHashType.\r\n\r\nThe alternative is #8756, which does not require #8654 and #11423. But the counting is more conservative (overestimating)",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MDg4OTEwMg==",
                    "publishedAt": "2018-03-06T18:56:55Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8755#issuecomment-370889102"
                }
            ],
            "totalCount": 8
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "aa8c27515c3a2d2edfd8cdeae629a55397d6654a"
                    }
                }
            ],
            "totalCount": 4
        },
        "createdAt": "2016-09-18T19:17:32Z",
        "deletions": 7,
        "id": "MDExOlB1bGxSZXF1ZXN0ODU3MTk3NDg=",
        "labels": {
            "nodes": [
                {
                    "color": "006b75",
                    "id": "MDU6TGFiZWw5ODI5ODAwNw==",
                    "name": "P2P"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "CONFLICTING",
        "mergedAt": null,
        "number": 8755,
        "state": "OPEN",
        "title": "Implement excessive sighashing protection policy with tight sighash estimation",
        "updatedAt": "2018-03-06T18:56:55Z"
    },
    {
        "additions": 185,
        "author": {
            "avatarUrl": "https://avatars3.githubusercontent.com/u/1008458?v=4",
            "login": "jtimon",
            "url": "https://github.com/jtimon"
        },
        "body": "...reads from runtime params and simplify the creation of partitioned chains by simply generating different gensis block hashes from a given custom name.\r\nDatadir now depends on -chain except for the reserved values.\r\n\r\nDependencies:\r\n\r\n- [x] Use a proper factory for creating chainparams #8855\r\n~~- [ ] Really don't validate genesis block #9102~~\r\n- [x] Introduce an ArgsManager class encapsulating cs_args, mapArgs and mapMultiArgs #9494\r\n- [x] QA: segwit.py: s/find_unspent/find_spendable_utxo/ #11869\r\n- [ ] Refactor: One CBaseChainParams should be enough #12128\r\n\r\n Other features:\r\n- [x] Uses a custom chain for all python tests.\r\n- [X] Create new testchains with different genesis hashes at will.\r\n- [X] Load chainparams from ~~separated~~ file or command line. (file left for later, see https://github.com/jtimon/bitcoin/tree/b16-new-testnet-file )\r\n- [X] New chains are neither orange, blue nor green: they're purple and have your custom chain petname shown in the GUI.\r\n- Extra context: some people asked for signed blocks but that's way more disruptive and this is already review-thirsty (see #9177 ).\r\n  ",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/7275704?v=4",
                        "login": "btcdrak"
                    },
                    "body": "Concept ACK\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDI1NTUxMjExNA==",
                    "publishedAt": "2016-10-22T07:08:02Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-255512114"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/7275704?v=4",
                        "login": "btcdrak"
                    },
                    "body": "Some ideas from [IRC today](https://botbot.me/freenode/bitcoin-core-dev/2016-10-22/?msg=75272893&page=1): Allow users to specify a .json file with all the parameters, and include an option for federated signing with list of signing keys.\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDI1NTUxMjc2MA==",
                    "publishedAt": "2016-10-22T07:27:26Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-255512760"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1008458?v=4",
                        "login": "jtimon"
                    },
                    "body": "Needed rebase. Also, new configurable parameter was introduced in #9053\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDI1ODI5NTMyMQ==",
                    "publishedAt": "2016-11-03T22:39:08Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-258295321"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1008458?v=4",
                        "login": "jtimon"
                    },
                    "body": "Rebased on top of #9102\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDI1OTAzODYzNw==",
                    "publishedAt": "2016-11-08T03:50:36Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-259038637"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1008458?v=4",
                        "login": "jtimon"
                    },
                    "body": "Since #8855 needed rebase, this one too. Also adapted some more rpc tests to use the custom chain instead of regtest (only 4 missing it seems, but travis should pass).\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDI2MDQ0NTk2Nw==",
                    "publishedAt": "2016-11-14T20:02:40Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-260445967"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1008458?v=4",
                        "login": "jtimon"
                    },
                    "body": "Needed rebase.\r\n\r\nUpdate:\r\n\r\n- Now all rpc tests pass for self.chain=\"regtest\"\r\n\r\n\"Magic\" fixes:\r\n\r\n- pruning.py and mempool_packages.py now pass with both regtest and custom (they were passing travis before because they are in the extended set of tests).\r\n\r\n\"Magic\" fails:\r\n\r\n- Now p2p-segwit.py only passes with regtest but not with custom like before\r\n\r\nThis is related to #9102 (see https://github.com/bitcoin/bitcoin/pull/9102#issuecomment-259097238  ping @laanwj ) in the sense that we cannot test that the genesis block is not validated unless we can run the system for a chain whose genesis block doesn't comply with the rules.\r\nFor example, the custom chain (unlike regtest) doesn't comply with pow (although some values for -chainpetname should make it).\r\n\r\n@gmaxwell, you suggested that something like #9177 would need a lot of coverage testing and review, and I completely agree. Any suggestion to advance in that front in this PR instead of  #9177 (which currently doesn't work and has one unittest that is not independent) would be welcomed.\r\n\r\nYou have recently made improvements in the rpc test framework, @MarcoFalke , and are familiar with it. If you get bored and can help fix one of the 3 tests that aren't passing for custom or just comment about the python changes in general, that would be great.\r\n\r\nREM:\r\n- The last 2 commits are not necessary, but anyone feel free to comment on them.\r\n- Except for p2p-compactblocks.py, segwit.py (and now p2p-segwit.py too) all rpc tests pass with \"custom\" too",
                    "id": "MDEyOklzc3VlQ29tbWVudDI2NDQwNjA1Mw==",
                    "publishedAt": "2016-12-02T09:02:50Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-264406053"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1008458?v=4",
                        "login": "jtimon"
                    },
                    "body": "@TheBlueMatt said in #9243 :\r\n\r\n> I think for things which are their own classes, they should either have the arguments they care about passed into the constructor, or passed in when they need them (eg the way mempool limiting is done now)\r\n\r\nThe longer version of CreateChainParams could indeed take all fields in CChainParams and Consensus::Params as arguments, but that would break the encapsulation. Every time a field is added or removed all calls would need to be adapted. Note that ideally, in the future, all tests would rely on CreateChainParams but none of them on the chainparams globals (accessed to via SelectParams and Params() ).\r\n\r\nAnother simpler option would be to simply let chainparams.cpp depend on globals mapArgs and mapMultiArgs (it depends on util.o anyway).\r\n\r\nYet another option is to undo some of that changes in #9243 if that gets merged first, which would be my personal preference.\r\n\r\nIf anyone has more options, I'm all ears.",
                    "id": "MDEyOklzc3VlQ29tbWVudDI2NDU3ODk2Mw==",
                    "publishedAt": "2016-12-02T22:24:32Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-264578963"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1008458?v=4",
                        "login": "jtimon"
                    },
                    "body": "Rebased",
                    "id": "MDEyOklzc3VlQ29tbWVudDI2NDYzODU1Mg==",
                    "publishedAt": "2016-12-03T13:13:51Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-264638552"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1008458?v=4",
                        "login": "jtimon"
                    },
                    "body": "Rebased",
                    "id": "MDEyOklzc3VlQ29tbWVudDI2ODE3MTI0MQ==",
                    "publishedAt": "2016-12-20T07:08:26Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-268171241"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1008458?v=4",
                        "login": "jtimon"
                    },
                    "body": "As a reminder, segwit.py and p2p-compactblocks.py still need to run with self.chain = \"regtest\" instead of self.chain = \"custom\". Perhaps that's ok?",
                    "id": "MDEyOklzc3VlQ29tbWVudDI2ODIwNzg0MQ==",
                    "publishedAt": "2016-12-20T10:24:31Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-268207841"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1008458?v=4",
                        "login": "jtimon"
                    },
                    "body": "Needs rebase after #9243",
                    "id": "MDEyOklzc3VlQ29tbWVudDI3MDE1Mzc2Nw==",
                    "publishedAt": "2017-01-03T16:21:24Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-270153767"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1008458?v=4",
                        "login": "jtimon"
                    },
                    "body": "Rebased, now including #9494 as a dependency.\r\nAt the same time, some simplifications have been done in the last rebase like less disruption to avoid usage of globals in SelectParams.\r\nAlso not do anything with bip9params like before (it is allowed for both retest and custom, unless you set fmineblocksondemand=0 in your custom chainparams.conf). Trying to move the bip9params args from regular args to the custom chainparams config file what was what causing errors unless self.chain = \"regtest\" before in p2p-segwit.py and p2p-compactblocks.py.\r\n\r\nsegwit.py is still failing with self.chain = \"custom\". Unless I'm missing something else, it all points to hardcoded hashes depending on the genesis block's, which should be the only different thing from regtest to custom without touching the custom chain defaults.\r\n ",
                    "id": "MDEyOklzc3VlQ29tbWVudDI3MTQzMDAwMA==",
                    "publishedAt": "2017-01-09T22:36:00Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-271430000"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1008458?v=4",
                        "login": "jtimon"
                    },
                    "body": "Sorry for the back and forth, but we only need #9494 as a dependency if we want the args to be loaded from a different .conf file. If loading from the same conf file (or regular command line args) is good enough as a first step there's no need to interfere with #9494 or temporarily creating a more generic version of ReadConfigFile that doesn't take the lock.\r\nIn case that's a strong requirement, I left a version that includes  #9494 and loads from a separate file at https://github.com/jtimon/bitcoin/tree/0.13-new-testchain-separated-file",
                    "id": "MDEyOklzc3VlQ29tbWVudDI3MTkwNjgyMg==",
                    "publishedAt": "2017-01-11T15:56:27Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-271906822"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/775844?v=4",
                        "login": "rustyrussell"
                    },
                    "body": "Concept Ack; I really like this, especially as lightning's spec has resorted to specifying a full blockchain for the test vectors (only way to get specific txids, see https://github.com/lightningnetwork/lightning-rfc/blob/master/03-transactions.md#appendix-c-funding-transaction-test-vectors )",
                    "id": "MDEyOklzc3VlQ29tbWVudDI4MTUxNTkyNA==",
                    "publishedAt": "2017-02-21T23:25:08Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-281515924"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1008458?v=4",
                        "login": "jtimon"
                    },
                    "body": "Rebased, but the python tests were broken again.",
                    "id": "MDEyOklzc3VlQ29tbWVudDI4ODkzMjMyMQ==",
                    "publishedAt": "2017-03-24T04:45:27Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-288932321"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1008458?v=4",
                        "login": "jtimon"
                    },
                    "body": "Sorry, false alarm, it was just pruning which seems to be dependent on the regtest genesis block too. In the process I noticed that I was missing option con_defaultassumevalid.\r\n  ",
                    "id": "MDEyOklzc3VlQ29tbWVudDI4OTIzOTQ3MA==",
                    "publishedAt": "2017-03-25T21:04:39Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-289239470"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1008458?v=4",
                        "login": "jtimon"
                    },
                    "body": "Needed rebase like #8855 and in some python tests. Also fixed pruning.py so that it can run with self.chain=\"custom\" again.",
                    "id": "MDEyOklzc3VlQ29tbWVudDI5OTAwMzE3OA==",
                    "publishedAt": "2017-05-03T18:56:00Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-299003178"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1008458?v=4",
                        "login": "jtimon"
                    },
                    "body": "Needed rebase for python tests.\r\nAlso, after #8855 has been merged, it goes from 9 commits and +248-137 to 6 commits and +161-55.\r\nSome squashing could be done too.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMwMDE1MjAxNw==",
                    "publishedAt": "2017-05-09T12:47:44Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-300152017"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1008458?v=4",
                        "login": "jtimon"
                    },
                    "body": "Fixed some nits\r\n> what's the presumed use-case for the petname? A way to introduce some randomness into the genesis block?\r\n\r\nIt allows you to create another chain with a different genesis block but with the exact same parameters on the rest. For example, let's say people create \"lightningtestnet\", then gets attacked and people just need to change the petname \"lightningtestnet2\" to coordinate another chain.\r\nIt can also be helpful for reading conf files if you maintain several, ie:\r\n\r\nlightningtest.conf\r\n```\r\nchain=custom\r\nchainpetname=lightningtest\r\n```\r\notherconfig.conf\r\n```\r\nchain=custom\r\nchainpetname=lightningtest2\r\n```\r\nBut this is less valuable since you can simple use the file name for that.\r\n\r\n> Also long-term what is the role of regtest in the functional test framework in your view since you're replacing it in most tests?\r\n\r\nI think we should consider removing it in the future (we would need to declare it deprecated first, or maybe we can rename custom to regtest and explain the genesis block for regtest changed), but note that after this segwit.py still uses regtest (presumably for its genesis block).\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDMwMDI2ODc5Mg==",
                    "publishedAt": "2017-05-09T19:01:35Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-300268792"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/7133040?v=4",
                        "login": "ryanofsky"
                    },
                    "body": "What's the reason for the dependency on #9102? Also, you could remove #8855 from the list of dependencies in the PR description since it's now merged.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMwMDUyMzYzMQ==",
                    "publishedAt": "2017-05-10T15:41:35Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-300523631"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/5767891?v=4",
                        "login": "instagibbs"
                    },
                    "body": "@ryanofsky not sure if it occurs here, but if a custom chain has a PoW that fails the minimum PoW check, it will fail to validate.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMwMDYwNzYwOA==",
                    "publishedAt": "2017-05-10T20:47:25Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-300607608"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1008458?v=4",
                        "login": "jtimon"
                    },
                    "body": "Updated the list. Yes, that's the reason for #9102, so that any arbitrary genesis block doesn't fail on pow checks (whether the chain is regtest-like or not). At the same time, I think this PR is the best way to test this, so perhaps #9102 should be closed as independent?",
                    "id": "MDEyOklzc3VlQ29tbWVudDMwMjUwNjM3NQ==",
                    "publishedAt": "2017-05-18T18:43:30Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-302506375"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/5767891?v=4",
                        "login": "instagibbs"
                    },
                    "body": "@jtimon Agreed, I think it fails to be mergable if not packaged with tests. Closing mine(for now?).",
                    "id": "MDEyOklzc3VlQ29tbWVudDMwMjUwODI4MQ==",
                    "publishedAt": "2017-05-18T18:51:04Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-302508281"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1008458?v=4",
                        "login": "jtimon"
                    },
                    "body": "Although it didn't strictly needed, rebased after #9494 I can show more easily my preferred option of only allowing to load the custom chainparam arguments from file (not command line options), and only from a separated file from the one with the rest of the config. So I added a commit to do that as this PR did before (which can be squashed if it is liked or removed if it is not).\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDMwNDk4ODI3OQ==",
                    "publishedAt": "2017-05-30T19:49:45Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-304988279"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1008458?v=4",
                        "login": "jtimon"
                    },
                    "body": "Needed rebase",
                    "id": "MDEyOklzc3VlQ29tbWVudDMwNjI3MDUxNQ==",
                    "publishedAt": "2017-06-05T18:45:19Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-306270515"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1063656?v=4",
                        "login": "jnewbery"
                    },
                    "body": "I don't understand the use of `-chainconf` argument. It looks like the actual functionality is just an additional config file that gets loaded after the main bitcoin.conf file. I originally thought that it'd be doing something like #9374, and allowing the user to specify a config file that would only get used if a specific chain was chosen, which would be very useful.\r\n\r\nIn any case, I think the loading of the additional config file can be done in the new `ReadConfigFiles()` function in #10267. There's nothing that requires it to be in chainparams.cpp.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMwNjMwMzU4Mw==",
                    "publishedAt": "2017-06-05T20:48:50Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-306303583"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/250224?v=4",
                        "login": "kallewoof"
                    },
                    "body": "I have to admit I don't really understand the purpose of it either. With #10267 you could also just do `-datadir` and/or `-conf` from command line and the chain specific config would `includeconf` the main config file.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMwNjY1MjI3Mg==",
                    "publishedAt": "2017-06-07T00:34:03Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-306652272"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1008458?v=4",
                        "login": "jtimon"
                    },
                    "body": "I don't think you are understanding what the last commit does.\r\n\r\nExample after last commit:\r\n```bitcoind -chain=custom -chainconf=mytestnet.conf```\r\nmytestnet.conf:\r\n```\r\nchainpetname=mytestnet1\r\ncon_fpowallowmindifficultyblocks=0\r\ncon_npowtargetspacing=700\r\n...\r\n```\r\nExample before the last commit (edited, it had a mistake):\r\n\r\n```bitcoind -chain=custom -con_fpowallowmindifficultyblocks=0 -chainpetanme=mytestnet1 -conf=mytestnet2.conf```\r\n\r\nIn mytestnet2.conf:\r\n```\r\ndbcache=6000\r\ncon_fpowallowmindifficultyblocks=1\r\nchainpetanme=mytestnet2\r\nincludeconf=mytestnet3.conf\r\n```\r\n\r\nIn mytestnet3.conf:\r\n```\r\ndbcache=8000\r\ncon_fpowallowmindifficultyblocks=0\r\nchainpetanme=mytestnet2\r\n```\r\n\r\nWhat is the resulting chainpetanme in the second example? This is not a small detail since the hash of the genesis block depends on it (it could depend on all consensus parameters as well).\r\nIs con_fpowallowmindifficultyblocks 1 or 0? You better know because this is consensus critical.\r\n\r\nI think only allowing the custom chainparams to be loaded from one place and decoupled from the rest of the configuration options (much more versatile) simplifies things and will less likely lead to unexpected behavior.\r\nBut if people prefer the flexibility that the second example gives users to shot themselves in the foot much more easily, I can drop the last commit.\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDMwNjc4MDExMA==",
                    "publishedAt": "2017-06-07T12:31:03Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-306780110"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/250224?v=4",
                        "login": "kallewoof"
                    },
                    "body": "@jtimon `-includeconf` is not allowed on command line, only the config file. So in your case (I believe you meant includeconf=mytestnet3.conf there btw, but you wrote mytestnet2.conf in both), mytestnet2.conf would includeconf mytestnet3.conf, which actually isn't allowed and probably makes no sense.\r\n\r\nI'm still not really sure why you can't put \r\n\r\n```\r\nincludeconf=globalstuff.conf\r\n```\r\n\r\nin the chain conf file and just do `-conf=` that file.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMwNjc4NTk4Mw==",
                    "publishedAt": "2017-06-07T12:55:39Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-306785983"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1008458?v=4",
                        "login": "jtimon"
                    },
                    "body": "Sorry, if I wasn't clear enough and that the example was wrong about -includeconf (corrected).\r\nTo be clear, without the last commit (and with you pr) you can do what you describe, with the last commit, you cannot, or put chainparams in the regular config file nor on the command line. Disallowing those options in favor of only allowing completely separated file for custom chainparams is the whole point of the last commit. \r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDMwNjc5MjIxNw==",
                    "publishedAt": "2017-06-07T13:19:59Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-306792217"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1008458?v=4",
                        "login": "jtimon"
                    },
                    "body": "Since it conflicted with it, preemptively rebase on top of #10339 ",
                    "id": "MDEyOklzc3VlQ29tbWVudDMwNjk2NDIyNg==",
                    "publishedAt": "2017-06-08T00:31:57Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-306964226"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1008458?v=4",
                        "login": "jtimon"
                    },
                    "body": "Needed rebase, also removed the commit from #10339 .",
                    "id": "MDEyOklzc3VlQ29tbWVudDMxMDg3NTI5OA==",
                    "publishedAt": "2017-06-25T01:07:54Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-310875298"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1008458?v=4",
                        "login": "jtimon"
                    },
                    "body": "Needed trivial rebase after #9176",
                    "id": "MDEyOklzc3VlQ29tbWVudDMxMDk0MDU2NA==",
                    "publishedAt": "2017-06-26T00:58:30Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-310940564"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1008458?v=4",
                        "login": "jtimon"
                    },
                    "body": "Needed rebase.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMxMjkwNDA0Ng==",
                    "publishedAt": "2017-07-04T15:24:55Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-312904046"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1063656?v=4",
                        "login": "jnewbery"
                    },
                    "body": "Concept ACK. I like this idea. A few high-level thoughts:\r\n\r\n- it'd be nice if we could just move the functional tests across to exclusively use the custom chain. Then you wouldn't need to make the changes in test_framework to store and pass around the chain name. What are the problems with the `segwit.py` test that prevent you from doing that?\r\n- What do you think about simplifying the config model:\r\n    - change `-chain=` to take any string, where `main`, `test` and `regtest` are reserved and have special meaning. Any other value becomes the name of the custom chain (eg `custom` or `mychain` or `supereasydifficulty` or whatever).\r\n    - remove `chainconf`. The consensus config should always appear in `<chainname>_chain.conf`, so if I want to use a custom chain called \"lowdifficulty\", I set `-chain=lowdifficulty` and add a `lowdifficulty_chain.conf`\r\n    - drop the `chainpetname` parameter and add a `-consensus_genesiscoinbasetext` to the consensus parameters\r\n- this model could be extended to allow a `main_chain.conf`, which would allow only `consensus_assumevalid` to be updated. That would remove the global `hashAssumeValid` and put it back in CChainParams (can be done in a follow-up PR)\r\n\r\nCan you clean up the original PR notes so they describe exactly what's in this PR (they seem to have drifted a bit since you opened this)?",
                    "id": "MDEyOklzc3VlQ29tbWVudDMyMTM1NTM0OQ==",
                    "publishedAt": "2017-08-09T19:20:34Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-321355349"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1008458?v=4",
                        "login": "jtimon"
                    },
                    "body": "Rebased.\r\nHopefully fixed some nits and suggestions by @jnewbery . Also removed a warning in the qt change.\r\nUpdated OP.\r\n\r\nRegarding allowing -chainconf or main_chain.conf for main, testnet3 or regtest, yeah, I think that would belong in another PR, but interested on hearing more thoughts on that.\r\n\r\nDetails of the segwit failure (I'll leave it failing on travis):\r\n```\r\nsegwit.py failed, Duration: 16 s\r\n\r\nstdout:\r\n2017-08-14 23:19:17.140000 TestFramework (INFO): Initializing test directory /tmp/bitcoin_test_runner_20170815_011849/segwit_82\r\n2017-08-14 23:19:19.529000 TestFramework (INFO): Verify sigops are counted in GBT with pre-BIP141 rules before the fork\r\n2017-08-14 23:19:21.425000 TestFramework (INFO): Verify default node can't accept any witness format txs before fork\r\n2017-08-14 23:19:21.452000 TestFramework (INFO): Verify witness txs are skipped for mining before the fork\r\n2017-08-14 23:19:21.711000 TestFramework (INFO): Verify unsigned bare witness txs in versionbits-setting blocks are valid before the fork\r\n2017-08-14 23:19:21.808000 TestFramework (INFO): Verify unsigned p2sh witness txs without a redeem script are invalid\r\n2017-08-14 23:19:21.812000 TestFramework (INFO): Verify unsigned p2sh witness txs with a redeem script in versionbits-settings blocks are valid before the fork\r\n2017-08-14 23:19:21.897000 TestFramework (INFO): Verify previous witness txs skipped for mining can now be mined\r\n2017-08-14 23:19:21.936000 TestFramework (INFO): Verify block and transaction serialization rpcs return differing serializations depending on rpc serialization flag\r\n2017-08-14 23:19:22.029000 TestFramework (INFO): Verify witness txs without witness data are invalid after the fork\r\n2017-08-14 23:19:22.119000 TestFramework (INFO): Verify default node can now use witness txs\r\n2017-08-14 23:19:22.353000 TestFramework (INFO): Verify sigops are counted in GBT with BIP141 rules after the fork\r\n2017-08-14 23:19:22.477000 TestFramework (INFO): Non-segwit miners are able to use GBT response after activation.\r\n2017-08-14 23:19:22.593000 TestFramework (INFO): Verify behaviour of importaddress, addwitnessaddress and listunspent\r\n2017-08-14 23:19:26.018000 TestFramework (ERROR): JSONRPC error\r\nTraceback (most recent call last):\r\n  File \"/home/jt/datafast/code/bitcoin/test/functional/test_framework/test_framework.py\", line 152, in main\r\n    self.run_test()\r\n  File \"/home/jt/code/bitcoin/test/functional/segwit.py\", line 458, in run_test\r\n    spendable_txid.append(self.mine_and_test_listunspent(spendable_anytime + spendable_after_importaddress, 2))\r\n  File \"/home/jt/code/bitcoin/test/functional/segwit.py\", line 582, in mine_and_test_listunspent\r\n    txid = self.nodes[0].sendrawtransaction(signresults, True)\r\n  File \"/home/jt/datafast/code/bitcoin/test/functional/test_framework/coverage.py\", line 46, in __call__\r\n    return_val = self.auth_service_proxy_instance.__call__(*args, **kwargs)\r\n  File \"/home/jt/datafast/code/bitcoin/test/functional/test_framework/authproxy.py\", line 154, in __call__\r\n    raise JSONRPCException(response['error'])\r\ntest_framework.authproxy.JSONRPCException: Missing inputs (-25)\r\n2017-08-14 23:19:26.020000 TestFramework (INFO): Stopping nodes\r\n2017-08-14 23:19:32.786000 TestFramework (WARNING): Not cleaning up dir /tmp/bitcoin_test_runner_20170815_011849/segwit_82\r\n2017-08-14 23:19:32.786000 TestFramework (ERROR): Test failed. Test logging available at /tmp/bitcoin_test_runner_20170815_011849/segwit_82/test_framework.log\r\n```\r\n\r\nSome squashing is due once there's more feedback on the latest suggestions.\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDMyMjM1MTMwNw==",
                    "publishedAt": "2017-08-15T01:15:17Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-322351307"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1008458?v=4",
                        "login": "jtimon"
                    },
                    "body": "Rebased.\r\n~~Squashed except for the 3 file-related commits at the end, which could be one.~~\r\n~~Perhaps we can leave loading from a different file for later?~~\r\nEDIT: Squashed. Since there's some discussion related to the config files and potential conflict with other PRs, I left that part for later in https://github.com/jtimon/bitcoin/compare/0.13-new-testchain...jtimon:b16-new-testnet-file\r\n\r\nThe tests seem to be broken in rebase one more time. \r\n@jnewbery I would really prefer to leave segwit.py for later unless somebody finds the fix. Rebasing this PR is costly, mostly due to the tests. Any further extension or improvement will be much easier to rebase and review afterwards.\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDMyNjE2ODQ3Ng==",
                    "publishedAt": "2017-08-31T02:05:42Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-326168476"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1008458?v=4",
                        "login": "jtimon"
                    },
                    "body": "Fixed the tests, except for the segwit one which still needs to remain in regtest or have some tests commented (not an option, but see last commit, in case anybody has an idea why may be failing).\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDMyNjQ0NzE5MQ==",
                    "publishedAt": "2017-08-31T23:30:28Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-326447191"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1008458?v=4",
                        "login": "jtimon"
                    },
                    "body": "Alright, it seems I solved segwit.py too, it seems I needed https://github.com/bitcoin/bitcoin/pull/8994/commits/9b4feab8d48972b5f3241d1926095da3401f536b",
                    "id": "MDEyOklzc3VlQ29tbWVudDMyNjQ1MTU4NA==",
                    "publishedAt": "2017-09-01T00:02:27Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-326451584"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1008458?v=4",
                        "login": "jtimon"
                    },
                    "body": "Needed rebase",
                    "id": "MDEyOklzc3VlQ29tbWVudDMyNzY3MjE4OQ==",
                    "publishedAt": "2017-09-07T03:16:58Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-327672189"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1008458?v=4",
                        "login": "jtimon"
                    },
                    "body": "Needed rebase.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMzMDk5Mzg1MQ==",
                    "publishedAt": "2017-09-20T22:03:01Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-330993851"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1008458?v=4",
                        "login": "jtimon"
                    },
                    "body": "Needed rebase, also some new adaptations in the python tests and taking care of bech32_hrp. ",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0MDA3Mzk2OQ==",
                    "publishedAt": "2017-10-27T20:12:54Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-340073969"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/649246?v=4",
                        "login": "TheBlueMatt"
                    },
                    "body": "I'd say I'm -0 on this by the scale at https://github.com/bitcoin/bitcoin/pull/11426#issuecomment-334091207 - I'm fine with this if others want to review and maintain this, but unless we need it for testing, I dont think its worth the effort at all. Currently all our tests that need to change chainparams flags are pretty contained to only change one chainparams value (and we only ever care about one or three of them anyway), so I really dont think its worth the effort to do so, and its certainly not worth the effort to make random other altcoins/sidechains/whatever simpler.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0MzU5NTY5MA==",
                    "publishedAt": "2017-11-10T21:45:39Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-343595690"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
                        "login": "MarcoFalke"
                    },
                    "body": "The code looks well written and I really like that experiment. Though, I fail to see how this helps with testing Bitcoin Core. We already have three networks that should cover all our testing needs. I am -0 on this change, given that it is a nice generalizing refactor, but might not be worth the effort of review and maintaining.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0MzY4NjUwMQ==",
                    "publishedAt": "2017-11-11T18:58:47Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-343686501"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1008458?v=4",
                        "login": "jtimon"
                    },
                    "body": "Several new testchains were created when testing segwit. Lightning developers also wanted their own testnet, preferably with signed blocks (related to that, I would like to continue my work on #9177 if this gets merged).\r\nPerhaps similar testing needs/wants will arise again in the future. Regarding testing needs, I would say they're always unbounded.\r\n\r\nThis is also a way to test  #9102 which has never been merged due to lack of tests. Another way to test it could be to change the genesis block of regtest without changing anything else. In that case, the \"custom chain\" could simply be regtest itself.\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0MzY4NzYwMQ==",
                    "publishedAt": "2017-11-11T19:16:51Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-343687601"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
                        "login": "MarcoFalke"
                    },
                    "body": "> This is also a way to test #9102 which has never been merged due to lack of tests.\r\n\r\nWell. That reasoning is circular. #9102 was never merged because it is only required for this pull.\r\n\r\nThough, easier creation of future testchains (similar to segnet) is a valid rationale for this pull request. I change my preference to +0.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0MzcwOTk3Mw==",
                    "publishedAt": "2017-11-12T02:59:34Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-343709973"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
                        "login": "MarcoFalke"
                    },
                    "body": "I actually begin to like this pull. Going to review...",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0NDQyMzI2Ng==",
                    "publishedAt": "2017-11-14T22:38:06Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-344423266"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/10217?v=4",
                        "login": "Sjors"
                    },
                    "body": "Came accross this PR today after waiting forever for my SegWit transactions to confirm on testnet, which makes #11403 a pain to test. Concept ACK. I'll try after the next rebase.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0ODUyODA1Ng==",
                    "publishedAt": "2017-12-01T15:43:47Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-348528056"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1008458?v=4",
                        "login": "jtimon"
                    },
                    "body": "Rebased. Hopefully solved or answered many nits by @MarcoFalke but not all.\r\nSome nits remain as debt for now but new nits are welcomed.\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1MDkxMDAyNg==",
                    "publishedAt": "2017-12-12T01:00:06Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-350910026"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1008458?v=4",
                        "login": "jtimon"
                    },
                    "body": "> The RPC port is 18553, right? When I run cgminer I get: No Stratum, GBT or Solo support in pool 0. It works for me on testnet (although its difficulty is out of reach for me).\r\n\r\nYeah, the default port, you can set it to something else. I don't know much about cgminer but this shouldn't affect it. Does it work for you with -regtest (or -chain=regtest)?\r\n\r\n> Maybe it's because initialblockdownload: true?\r\n\r\nI don't see the relation, sorry.\r\n\r\n> How would I go about bootstrapping my custom chain and convincing my node that it is indeed alone in the blockchain universe?\r\n\r\nIt should work just by choosing a chain name that nobody does, for example: -chain=aloneintheworld.\r\nSince the name (except for main, test and regtest) is used to build the genesis block, the chain will be invalid for everyone else unless they chose the same name.\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1MTA2NDAwNg==",
                    "publishedAt": "2017-12-12T14:18:09Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-351064006"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/10217?v=4",
                        "login": "Sjors"
                    },
                    "body": "@jtimon I haven't tried mining on regtest, only on testnet. I'm not familiar with how the difference between regtest and testnet would impact the ability to use mining software like cgminer.\r\n\r\nRegardless of mining, shouldn't `initialblockdownload` in `getblockchaininfo` be `false`? It remained `true` when I used `-chain=sjors`. \r\n\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1MTA3MjM4Nw==",
                    "publishedAt": "2017-12-12T14:46:58Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-351072387"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1008458?v=4",
                        "login": "jtimon"
                    },
                    "body": "Well, this changes nothing about testnet or getblockchaininfo, just allows you to use -chain=test instead of -testnet additionally.\r\nI really don't know what you're trying to do with the mining software, but if it's currently not working for -regtest it can't work with this patch and -chain=sjors, becasue -chain=sjors is basically just regtest with a different genesis block.\r\nThere's not much to test regarding testnet and this PR.\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1MTExMDczOA==",
                    "publishedAt": "2017-12-12T16:45:35Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-351110738"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1008458?v=4",
                        "login": "jtimon"
                    },
                    "body": "Rebased, mainly to make sure new tests were failing. Updated the OP accordingly. Ok, also updated because one more commit was separated into its own PR (ie https://github.com/bitcoin/bitcoin/pull/12128 ).\r\nCurrently 2 tests are failing documented in the TODO section of the OP.\r\n\r\nEDIT: Also add one last commit for CCustomParams to extend from CRegTestParams as suggested by @MarcoFalke (although it is incpmplete for fields that default as hash for regtest but string for custom chains).\r\n  ",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1NjE2OTM1NA==",
                    "publishedAt": "2018-01-09T03:27:10Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-356169354"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1008458?v=4",
                        "login": "jtimon"
                    },
                    "body": "Squashed the commit in which CCustomParams extends CRegTestParams and rebased.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2MjExMTUxMw==",
                    "publishedAt": "2018-01-31T23:56:42Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-362111513"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1008458?v=4",
                        "login": "jtimon"
                    },
                    "body": "Added commit named \"regtest and custom could be the same\", with it, commits \"QA: Adapt BitcoinTestFramework for chains other than \"regtest\"\" and \"QA: Use custom chain instead of regtest for rpc tests\" aren't really necesary to test CCustomParams, since with it only CCustomParams be used, even for -regtest, never CRegTestParams on its own. IMO it still wouldn't hurt to have those 2 last commits changing the tests.\r\nThoughts?\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2MjEzMzc5Mw==",
                    "publishedAt": "2018-02-01T02:00:43Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-362133793"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1008458?v=4",
                        "login": "jtimon"
                    },
                    "body": "Needed rebase",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NDI1MjM5MA==",
                    "publishedAt": "2018-02-08T21:22:14Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-364252390"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1008458?v=4",
                        "login": "jtimon"
                    },
                    "body": "To clarify my earlier question, if we unify regtest CRegTestParams and CCustomParams (ie we use the equivalent of -chain=regtest for -regtest) there would be no need to touch the python tests to test the CCustomParams class, since it would already be used for all python tests (with the custom name \"regtest\"). But this is a HF to regtest because it would change its genesis block, and people would need to remove their ./bitcoin/regtest directory. Would that be acceptable?\r\nWhich of the two options is preferred, hardfork for segwit or changing the python tests?\r\nThe former is both less code changes and less total code at the end.\r\n\r\nEDIT: another possibility is to do both and rename the new regtest to regtest2  ",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NzEwODkxNA==",
                    "publishedAt": "2018-02-20T20:30:21Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-367108914"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/10217?v=4",
                        "login": "Sjors"
                    },
                    "body": "Assuming regtest is really only used by developers, it's not too much to ask them to delete it once, if it results in cleaner code. Using a new directory could lead to confusion \"where did my regtest history go?\"\r\n\r\nThis needs a release note.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NzYxNjMwNQ==",
                    "publishedAt": "2018-02-22T09:17:32Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-367616305"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1008458?v=4",
                        "login": "jtimon"
                    },
                    "body": "> Do we really need the con_ prefix for these new arguments? It makes them hard to read.\r\n\r\nWell, it's to distinguish them from the non-consensus chain params.\r\n\r\n> If parameters can't be changed between launches, shouldn't bitcoind throw an error upon launch?\r\n\r\nI don't think so, no. Unless the change itself produces an error.\r\n\r\n> For example, if I change -bech32_hrp between launches, it will consider its own previously generated addresses invalid.\r\n\r\nAnd won't that throw an error like you wanted?\r\nAnother possibility is to make the genesis block dependent on some or all fields like we do with strNetworkID so that changing them simply results on a different genesis block.\r\nThis is what we're doing in elements for a few fields, see https://github.com/ElementsProject/elements/blob/elements-0.14.1/src/chainparams.cpp#L20\r\n\r\n> I like the -chainconf approach better (instead of command line args), where that file contains the chain name and other settings.\r\n\r\nI also prefer it. I can recover stuff from https://github.com/jtimon/bitcoin/tree/b16-new-testnet-file but I left that out since there was too much discussion about how it fits with  https://github.com/bitcoin/bitcoin/pull/10267 . Or that can be done after merging this.\r\n\r\n> To make future changes easier, the file should contain regtest=1\r\n\r\nAssuming we unify CRegTestParams and CCustomParams, regtest=1 is just equivalent to chain=regtest (chain=regtest2 or anything will work too, but with a different genesis block).\r\nIf we separate the chain params config to a different conf file, chain/regtest/testnet options are still set up on the regular conf file (or command line).\r\n\r\n> Would it make sense to leave out params like defaultAssumeValid that are 0x00 in regtest?\r\n\r\nWhy? It's almost no extra effort to do it with all fields and some users may use them.\r\n \r\n> If not, is this behavior sufficiently tested?\r\n\r\nWell, we change consensus.nMinimumChainWork and consensus.defaultAssumeValid for mainnet and testnet with every release, so, yes, I think it is sufficiently tested.\r\n\r\n> Fewer con_ parameters would also make this PR easier to test.\r\n\r\nNone of them are actually being tested automatically, but the point is to allow people to change them for their automatic tests!\r\nI don't see any value in excluding any field that is easy to implement. Of course if we remove fields from CChainParams later, great to remove them from here too!\r\n\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2ODYxNjg2MQ==",
                    "publishedAt": "2018-02-26T19:19:11Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-368616861"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/10217?v=4",
                        "login": "Sjors"
                    },
                    "body": "> discussion about how it fits with #10267 . Or that can be done after merging this.\r\n\r\nIf consensus paramaters are _only_ stored in a `.conf` and can't be changed through parameters, this shouldn't get in the way of #10267.\r\n\r\n>> For example, if I change -bech32_hrp between launches, it will consider its own previously generated addresses invalid.\r\n\r\n> And won't that throw an error like you wanted?\r\n\r\nThe UI throws an error if you try to enter such an address, but previously received transactions don't become invalid. It's hard to think through every parameter and what things to test when changing it. However, if the purpose is only to facilitate writing tests, this may not be an issue.\r\n\r\n> Another possibility is to make the genesis block dependent on some or all fields like we do with strNetworkID so that changing them simply results on a different genesis block.\r\n\r\nIt may actually be useful in tests to be able to change consensus rules on the fly without a new genesis block. Using a configuration file rather than parameters should be sufficient protection against accidental changes.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2ODg1MDAzNQ==",
                    "publishedAt": "2018-02-27T11:55:02Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-368850035"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1008458?v=4",
                        "login": "jtimon"
                    },
                    "body": "> If consensus paramaters are only stored in a .conf and can't be changed through parameters, this shouldn't get in the way of #10267.\r\n\r\nWell, in previous discussion it seemed that using a separate file was getting the PR stuck instead of merged, so I decided to leave that for a following PR, but I have the code written, it should just be one rebase if we prefer that (but I'm really not sure that's the case, although thanks for voicing your opinion, that is helpful).\r\n\r\n> The UI throws an error if you try to enter such an address, but previously received transactions don't become invalid.\r\n\r\nwhy should previously received txs become invalid? I don't even understand why someone would want to use 2 different bech32_hrp on the same chain at different times...\r\n\r\n> It may actually be useful in tests to be able to change consensus rules on the fly without a new genesis block.\r\n\r\nI assume by \"on the fly\", you mean stopping the node and restarting it with different rules but the same genesis block and datadir. Yeah, I guess that could perhaps be useful and it's not compatible with committing those consensus chain params to the genesis block. Perhaps it makes sense to commit certain chainparams but not others.\r\n \r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2OTAzNjU2NQ==",
                    "publishedAt": "2018-02-27T21:42:53Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-369036565"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/10217?v=4",
                        "login": "Sjors"
                    },
                    "body": "> I don't even understand why someone would want to use 2 different bech32_hrp on the same chain at different times\r\n\r\nMe neither. I assume this would only happen by accident and confuse a developer until they realize what's going on.\r\n\r\n> by \"on the fly\", you mean stopping the node and restarting it with different rules but the same genesis block and datadir\r\n\r\nCorrect. Perhaps in order to simulate two nodes in a (accidental) hard fork scenario.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2OTE3NTU3Nw==",
                    "publishedAt": "2018-02-28T09:26:50Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-369175577"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1008458?v=4",
                        "login": "jtimon"
                    },
                    "body": "@MarcoFalke I honestly don't know what's the status of this at this point. I feel I asked too many question and I got too many different answers.\r\n\r\nThere's a few components here:\r\n\r\n1) regtest could make all its attributes configurable within its constructor. we already do this outside the constructor for bip9 and plan to do the same for segwitheight (there's older examples for trying to edit \"Params()\", but we want Params() to be immutable after init, at least for production. You can have your cake and it eat to as long as you make it in the constructor)\r\n2)  chainparams.cpp doesn't need any more classes even if we decide to add 10 new testnets, and -testnet, -regtest doesn't scale, there's should be just one -chain=<chainame> option and unless chainame is testnet3 or main, it should be just a configurable regtest which inclides the selected name in the hash of the genesis block (so if dumb miners chose to attack a testnet chain, let's say, lightningtestnet2, you just tell your friend testing on the same chain to change to -chain=lightningtestnet3 and replay all relevant txs).\r\n3) The python framework heavily assumes Params().strNetworkID == \"regtest\", that shouldn't be the case if chain=regtest is actually chain=<anything_except_main_and_testet3> . Combined with step 2, this could also serve to write tests to make sure that peers with incompatible consensus rules fork from each other as expected.\r\n\r\nI have no concerns in rebasing this forever (or until it's merged, obviously), but there's no harm in proposing and testing things one by one separatedly.\r\n\r\nAlthough I previously wanted to leave that for later, I suggest bip9 as an excuse to use gArgs/g_args from regtest's constructor (that's going to net remove a bunch of lines from init.cpp, so people may like it at a glance). Once people can do anything with regtest chainparams they may stop proposing to edit them on runtime, something I've been opposed to for years, but always comes back (see segwitheight).\r\n\r\nBut I think this PR in particular should be closed because maintaining the part about the simplest way of changing the genesis block into something that depends on <petname> and at the same time doesn't produce enough pow it's too expensive, at least expensive to maintain until there's even a more generic -chain=<petname> option other than -regtest.\r\n\r\nFinally, the qt part is just about having a different logo color for any other name (and put the name of the random chain in the title of the qt gui). I do care about he part of the custom petname being printed in the gui, I do not care about adding a new color, I'm fine reusing regtest color as long it's not bitcoin's or testnet3's. NACKs to specific commits or changes very welcomed too, or other logo default colors.\r\n\r\ntl;dr\r\n\r\nI mainly use this PR to monitor changes in chainparams or related or tests that may break changing the genesis block, petname (assuming there's a -chain=<petname> option)\r\nI will likely create a similar PR in the future, but the interesting part is, I think, feedback on the small parts that could be merged independently of my eternal \"altchainer vision\".\r\n\r\nWhich parts should be opened independently after closing this PR?\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NTI2MDYzOA==",
                    "publishedAt": "2018-03-22T10:48:37Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-375260638"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
                        "login": "MarcoFalke"
                    },
                    "body": "@jtimon Sorry that I haven't looked at this after the rebase. I just wanted to get in #12300 first, which touches the same files.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NTI2MzgxMg==",
                    "publishedAt": "2018-03-22T10:58:59Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-375263812"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1008458?v=4",
                        "login": "jtimon"
                    },
                    "body": "@MarcoFalke It seems there's some controversy around https://github.com/bitcoin/bitcoin/pull/12300 though. Rebasing either one on top of the other should be relatively easy I think.\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3OTgyMzU1Ng==",
                    "publishedAt": "2018-04-09T17:05:09Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-379823556"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
                        "login": "MarcoFalke"
                    },
                    "body": "@jtimon Sounds fine. (Needs rebase)",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3OTgyNDU0Nw==",
                    "publishedAt": "2018-04-09T17:08:41Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-379824547"
                }
            ],
            "totalCount": 66
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "54a70ff4f8afba19e471c3adf2b444173ea525b5"
                    }
                }
            ],
            "totalCount": 7
        },
        "createdAt": "2016-10-22T02:25:25Z",
        "deletions": 116,
        "id": "MDExOlB1bGxSZXF1ZXN0OTA0NjcwNzM=",
        "labels": {
            "nodes": [
                {
                    "color": "009800",
                    "id": "MDU6TGFiZWwxOTIyMDIwMDA=",
                    "name": "Consensus"
                },
                {
                    "color": "d4c5f9",
                    "id": "MDU6TGFiZWw2Mjk2MzUxNg==",
                    "name": "Tests"
                }
            ],
            "totalCount": 2
        },
        "mergeable": "CONFLICTING",
        "mergedAt": null,
        "number": 8994,
        "state": "OPEN",
        "title": "Testchains: Introduce custom chain whose constructor... ",
        "updatedAt": "2018-04-09T17:08:42Z"
    },
    {
        "additions": 323,
        "author": {
            "avatarUrl": "https://avatars2.githubusercontent.com/u/1095675?v=4",
            "login": "luke-jr",
            "url": "https://github.com/luke-jr"
        },
        "body": "Does this look like a good approach?\r\n\r\nTODO:\r\n\r\n* rawtransaction sweep functionality\r\n* GUI sweep (Receive tab?)\r\n* abstract shared sweep logic\r\n* ~~RPC tests~~",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "Concept ACK (Haven't really looked at the code).\nI think a sweep function would be a great feature. One could import \"old\" private keys into a new HD wallet for example.\n\nPossible extension: `sweepseed` could be an extended version of that, moving all funds form a HD seed to a new one, generating large lookup-windows on different chainpathes. It could also be UTXO set only not requiring a -rescan.\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDI2MDI2Nzg5MA==",
                    "publishedAt": "2016-11-14T07:41:08Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9152#issuecomment-260267890"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/858454?v=4",
                        "login": "gmaxwell"
                    },
                    "body": "From a raw flow perspective, the generation of the sweep transaction is something that works from public information and should be possible on an online node without access to the private keys... so that one should be a 'createrawsweeptransaction' which takes a list of adresses/pubkeys/redeemscripts (and maybe private keys ... maybe some kind of BIP32 chain spec) and returns a transaction that spends all coins assigned to matching keys, potentially with arguments to limit the set of inputs collected.\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDI2MDcwODY4Nw==",
                    "publishedAt": "2016-11-15T17:29:21Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9152#issuecomment-260708687"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/6848764?v=4",
                        "login": "paveljanik"
                    },
                    "body": "Hmm, what about extending RPC `importprivkey` with another optional argument `sweep` defaulting to `false`?\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDI2MTIyMjE0MA==",
                    "publishedAt": "2016-11-17T11:20:07Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9152#issuecomment-261222140"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/1095675?v=4",
                        "login": "luke-jr"
                    },
                    "body": "sweepprivkeys is intended for users, and not to import keys. Users should never use importprivkey.\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDI2MTIyNDM3MA==",
                    "publishedAt": "2016-11-17T11:32:07Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9152#issuecomment-261224370"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "Concept ACK.\r\n\r\n> Hmm, what about extending RPC importprivkey with another optional argument sweep defaulting to false?\r\n\r\nPlease don't do this. People confuse `import` and `sweep` all over the place. The least we can do is make them separate RPCs with separate documentation.",
                    "id": "MDEyOklzc3VlQ29tbWVudDI4MjY3MDA0MA==",
                    "publishedAt": "2017-02-27T09:31:41Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9152#issuecomment-282670040"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/548488?v=4",
                        "login": "sipa"
                    },
                    "body": "Seems this won't be making it for 0.15. Untagging.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMxNDkxOTg2MA==",
                    "publishedAt": "2017-07-12T22:50:19Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9152#issuecomment-314919860"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "Concept Re-ACK. Needs rebase. I guess this is also something we could want for 0.16.\r\nI have no strong opinion about sweep versus createrawsweep. The approach we took for bumpfee was also to do the non raw one first, although I agree that the ramification of sweep is different then a bump.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMyMjU3NTk4NQ==",
                    "publishedAt": "2017-08-15T20:14:59Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9152#issuecomment-322575985"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/1095675?v=4",
                        "login": "luke-jr"
                    },
                    "body": "Rebased and added a simple functional test.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMyMzQ5NzkxNQ==",
                    "publishedAt": "2017-08-19T03:55:59Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9152#issuecomment-323497915"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/1095675?v=4",
                        "login": "luke-jr"
                    },
                    "body": "Fixed the test failure (missing `cs_main` lock on `AcceptToMemoryPool`)",
                    "id": "MDEyOklzc3VlQ29tbWVudDMyMzYzNzU0OA==",
                    "publishedAt": "2017-08-21T03:18:15Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9152#issuecomment-323637548"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "@luke-jr: can you rebase this once again? Thanks",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0ODA5NDI1MA==",
                    "publishedAt": "2017-11-30T06:24:09Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9152#issuecomment-348094250"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/1095675?v=4",
                        "login": "luke-jr"
                    },
                    "body": "Rebased",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0ODEwMDA4Mg==",
                    "publishedAt": "2017-11-30T06:59:29Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9152#issuecomment-348100082"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "utACK a397deb247fc404064cf76ede8d64eb68f4fefe6 (will test soon).\r\nI personally dislike the \"direct\"-approach. I would like to \"see\" the transaction before submitting.\r\n\r\nPossible extensions:\r\n* Remove the signing and broadcasting, accept a pubkey and rename it to `createrawsweeptransaction` (or similar)\r\n* Add support for HD sweep (xpub/xpriv)",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0ODQyMDQ3MA==",
                    "publishedAt": "2017-12-01T07:18:27Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9152#issuecomment-348420470"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/148059?v=4",
                        "login": "jaromil"
                    },
                    "body": "ACK using a397deb247fc40. This is a great feature many people need.\r\nI'm moving on to test it on mainnet using the v0.15.0.knots20170914 build.\r\nI encourage inclusion and later on apply extensions (esp what @jonasschnelli recommends above).",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0OTcyNjE2MA==",
                    "publishedAt": "2017-12-06T18:09:29Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9152#issuecomment-349726160"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/148059?v=4",
                        "login": "jaromil"
                    },
                    "body": "The check fail is unrelated to this PR and limited to the ARM build, lacking the \"flake8\" python library.\r\n```\r\ncontrib/devtools/lint-python.sh: 10: contrib/devtools/lint-python.sh: flake8: not found\r\n```\r\nremoving unused imports won't fix lint-python.sh either.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1MDc4MDQwMQ==",
                    "publishedAt": "2017-12-11T16:39:06Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9152#issuecomment-350780401"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/148059?v=4",
                        "login": "jaromil"
                    },
                    "body": "ping and HNY everyone :^P",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1NTk5ODE1NQ==",
                    "publishedAt": "2018-01-08T15:29:22Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9152#issuecomment-355998155"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
                        "login": "MarcoFalke"
                    },
                    "body": "Since the keys are not added to the wallet, and thus bumpfee won't work, it makes sense to set nSequence to support rbf and return a list of signed raw transactions that each pay a slightly higher fee?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1NzU1NDcyMw==",
                    "publishedAt": "2018-01-15T00:08:32Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9152#issuecomment-357554723"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/148059?v=4",
                        "login": "jaromil"
                    },
                    "body": "@MarcoFalke I believe yours is a brilliant idea. Just to be clear, you mean a list of signed raw transactions that are ready to replace the one made and can be fired up from the lowest fee to the higher to bump if necessary, right? such transactions should be discarded once enough confirmations are present.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1NzY0OTg5MA==",
                    "publishedAt": "2018-01-15T10:57:56Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9152#issuecomment-357649890"
                }
            ],
            "totalCount": 17
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "127ec180bd10e971d8a8696c6987f6a8b3decfab"
                    }
                }
            ],
            "totalCount": 6
        },
        "createdAt": "2016-11-13T22:07:48Z",
        "deletions": 60,
        "id": "MDExOlB1bGxSZXF1ZXN0OTM0ODkwNjY=",
        "labels": {
            "nodes": [
                {
                    "color": "0052cc",
                    "id": "MDU6TGFiZWw5ODI3OTE3Nw==",
                    "name": "RPC/REST/ZMQ"
                },
                {
                    "color": "08a781",
                    "id": "MDU6TGFiZWwxNDk0MjQ=",
                    "name": "Wallet"
                }
            ],
            "totalCount": 2
        },
        "mergeable": "CONFLICTING",
        "mergedAt": null,
        "number": 9152,
        "state": "OPEN",
        "title": "Wallet/RPC: sweepprivkeys method to scan UTXO set and send to local wallet",
        "updatedAt": "2018-03-03T16:17:33Z"
    },
    {
        "additions": 173,
        "author": {
            "avatarUrl": "https://avatars2.githubusercontent.com/u/1095675?v=4",
            "login": "luke-jr",
            "url": "https://github.com/luke-jr"
        },
        "body": "",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "Concept ACK. Though not very happy to introduce platform-specific voodoo - we only just got rid of thread priority manipulation. But it may be worth the hassle, I don't know.\r\n\r\nCan we quantify whether this works or not somehow?\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDI2MzgxNTE1MQ==",
                    "publishedAt": "2016-11-30T08:41:53Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9245#issuecomment-263815151"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/858454?v=4",
                        "login": "gmaxwell"
                    },
                    "body": "This will also delay other processing, in particular block relay-- at least until the handling is made more concurrent-- no?  Not a reason to not do it, but maybe a reason to not do it by default for everyone. \r\n\r\nI second the need to quantify this-- I could imagine it making for a big usability improvement. ... or not mattering at all. If the former, I want it... if the latter...\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDI2MzgxNjk0MQ==",
                    "publishedAt": "2016-11-30T08:50:50Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9245#issuecomment-263816941"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/1095675?v=4",
                        "login": "luke-jr"
                    },
                    "body": "Whenever I restart my node lately, I find myself eventually manually `ionice`ing the entire process as it slows down other things monitoring it in `iotop`. I can't be sure it's sending out old blocks, but I can't imagine what else it'd be spending so much time reading... :/\r\n\r\nAdded Mac and Windows support for completeness.",
                    "id": "MDEyOklzc3VlQ29tbWVudDI2MzgyNTc4MA==",
                    "publishedAt": "2016-11-30T09:32:53Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9245#issuecomment-263825780"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/863730?v=4",
                        "login": "fanquake"
                    },
                    "body": "Travis failure:\r\n```\r\n'../../src/'`utilioprio.cpp\r\nIn file included from ../../src/utilioprio.cpp:9:0:\r\n../../src/utilioprio.h: In destructor \u2018ioprio_idler::~ioprio_idler()\u2019:\r\n../../src/utilioprio.h:42:51: error: \u2018LogPrintf\u2019 was not declared in this scope\r\n             LogPrintf(\"failed to restore ioprio\\n\");\r\n```",
                    "id": "MDEyOklzc3VlQ29tbWVudDI2NDAzOTYyOQ==",
                    "publishedAt": "2016-12-01T00:18:20Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9245#issuecomment-264039629"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/1095675?v=4",
                        "login": "luke-jr"
                    },
                    "body": "Looks like to make the Windows part work, we need to bump _WIN32_WINNT to 0x0600 which means it will only run on Vista or newer. AFAIK this is okay(?), but I'm going to leave it for a separate PR...",
                    "id": "MDEyOklzc3VlQ29tbWVudDI2NDExNTQ5Nw==",
                    "publishedAt": "2016-12-01T08:51:20Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9245#issuecomment-264115497"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/1530283?v=4",
                        "login": "rebroad"
                    },
                    "body": "I like this (concept ACK) although I wonder what the impact is on the p2p network as a whole if everyone ran this.",
                    "id": "MDEyOklzc3VlQ29tbWVudDI2Nzg4MDI0Nw==",
                    "publishedAt": "2016-12-19T04:35:40Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9245#issuecomment-267880247"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/5240319?v=4",
                        "login": "martinschwarz"
                    },
                    "body": "> Looks like to make the Windows part work, we need to bump _WIN32_WINNT to 0x0600 which means it will only run on Vista or newer. \r\n\r\nThere are win32 and win64 builds. Can't this just be enabled on the win64 build only?",
                    "id": "MDEyOklzc3VlQ29tbWVudDI4NTg5NTc0OA==",
                    "publishedAt": "2017-03-11T19:57:41Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9245#issuecomment-285895748"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "> Looks like to make the Windows part work, we need to bump _WIN32_WINNT to 0x0600 which means it will only run on Vista or newer. AFAIK this is okay(?), but I'm going to leave it for a separate PR...\r\n\r\nIsn't Vista the version after Windows XP? As we dropped support for Windows XP in 0.13, it seems that requiring Vista for 0.15 is fine.\r\n\r\n> There are win32 and win64 builds. Can't this just be enabled on the win64 build only?\r\n\r\nCould be done, but it'd be confusing to couple those. The low-end systems running 32-bit versions would probably need this more.",
                    "id": "MDEyOklzc3VlQ29tbWVudDI4NjExMzQyMA==",
                    "publishedAt": "2017-03-13T13:55:12Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9245#issuecomment-286113420"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/1095675?v=4",
                        "login": "luke-jr"
                    },
                    "body": "Rebased...",
                    "id": "MDEyOklzc3VlQ29tbWVudDMyMzY0NzMyMg==",
                    "publishedAt": "2017-08-21T05:06:48Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9245#issuecomment-323647322"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/649246?v=4",
                        "login": "TheBlueMatt"
                    },
                    "body": "Hmm, I dont think this is really the best idea as long as our message processing is still single-threaded. Really we need to refactor stuff so that block reading is async and the network processing can continue for other peers while we're serving blocks for peers in IBD, otherwise we may block receiving a new block longer than required.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMyMzc3NjAwMg==",
                    "publishedAt": "2017-08-21T15:31:16Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9245#issuecomment-323776002"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/1095675?v=4",
                        "login": "luke-jr"
                    },
                    "body": "That's somewhat independent from this issue. If users need to shut off their node to use their computer, the delay for processing a new block will be even longer.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMyMzc4NTY0Nw==",
                    "publishedAt": "2017-08-21T16:04:52Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9245#issuecomment-323785647"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/7133040?v=4",
                        "login": "ryanofsky"
                    },
                    "body": "@TheBlueMatt @luke-jr, maybe a compromise would be to make this behavior configurable, and perhaps to default to dropping priority if user is running bitcoin-qt on a desktop.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMzNjIxMzk2Mw==",
                    "publishedAt": "2017-10-12T17:47:24Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9245#issuecomment-336213963"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/649246?v=4",
                        "login": "TheBlueMatt"
                    },
                    "body": "Another approach which might be simpler would be to have the validation.h-exposed versions of ReadBlockFromDisk drop io priority so that net_processing will use low priority when answering remote-node queries but connecting blocks will not. With 0.15 I/O when doing initial sync is somewhat better, so this may also be less of an issue now unless the user is running with -peerbloomfilters.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0MzU5NzQxNQ==",
                    "publishedAt": "2017-11-10T21:54:10Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9245#issuecomment-343597415"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/1095675?v=4",
                        "login": "luke-jr"
                    },
                    "body": "@TheBlueMatt That's exactly what this already does... priority is only dropped when serving peers, not when connecting blocks.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0MzY0NDQ4Nw==",
                    "publishedAt": "2017-11-11T06:28:30Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9245#issuecomment-343644487"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/649246?v=4",
                        "login": "TheBlueMatt"
                    },
                    "body": "@luke-jr I was referring to the possibility of not exposing a priority flag in validation.h's API - that seems a bit overkill IMO, as evidenced by the fact that there are now two ReadBlockFromDisk calls in net_processing which dont get the low-priority flag :p. Though that would also result in RPC ReadBlockFromDisk calls getting de-prioritized.\r\n\r\nMore importantly, I'm curious how much we need this anymore - it seems most of the complaints about I/O usage were primarily due to 0.13.1 preferential peering...On systems where your I/O is severely limited, I both don't know how much this will help (in my experience Linux' ionice is mostly worthless when it comes to desktop latency) and don't know if its not better to direct people towards maxuploadtarget or peerbloomfilters so as to avoid simply slowing down your peers because your I/O is too slow.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0MzcwMDAzMg==",
                    "publishedAt": "2017-11-11T22:57:20Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9245#issuecomment-343700032"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/1095675?v=4",
                        "login": "luke-jr"
                    },
                    "body": "Before writing this, I generally ionice'd the entire bitcoind process to maintain system usability.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0MzcwMTQ4Mw==",
                    "publishedAt": "2017-11-11T23:23:57Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9245#issuecomment-343701483"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/649246?v=4",
                        "login": "TheBlueMatt"
                    },
                    "body": "Concept ACK. You need to mark the other ReadBlockFromDisks in net_processing low-priority as well.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0NTA2MDU5MA==",
                    "publishedAt": "2017-11-16T20:59:37Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9245#issuecomment-345060590"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/548488?v=4",
                        "login": "sipa"
                    },
                    "body": "Concept ACK, but needs rebase.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MDg1NTI1NA==",
                    "publishedAt": "2018-03-06T17:11:05Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9245#issuecomment-370855254"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/1095675?v=4",
                        "login": "luke-jr"
                    },
                    "body": "Rebased and added the additional deprioritisations requested by @TheBlueMatt ",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MDg5Njk0NQ==",
                    "publishedAt": "2018-03-06T19:22:34Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9245#issuecomment-370896945"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "utACK 91ccbbb87",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MDk1NjU2OA==",
                    "publishedAt": "2018-03-06T22:45:57Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9245#issuecomment-370956568"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
                        "login": "MarcoFalke"
                    },
                    "body": "Needs rebase after LookupBlockIndex-\"rename\"",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NDA2NzM2NA==",
                    "publishedAt": "2018-03-18T23:41:16Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9245#issuecomment-374067364"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/2734?v=4",
                        "login": "eklitzke"
                    },
                    "body": "I considered making this change in #12618 and there's a comment about it there. This is much more dangerous than a CPU scheduler change (like the one I just linked for two reasons).\r\n\r\nOn Linux the I/O scheduling stuff is very primitive, and `IOPRIO_CLASS_IDLE` is quite a strong policy. From the man page:\r\n```\r\n       IOPRIO_CLASS_IDLE (3)\r\n              This is the idle scheduling class.  Processes running at this\r\n              level get I/O time only when no one else needs the disk.  The\r\n              idle class has no class data.  Attention is required when\r\n              assigning this priority class to a process, since it may\r\n              become starved if higher priority processes are constantly\r\n              accessing the disk.\r\n```\r\n\r\nThis means that at the idle I/O processing level you can get starved **forever** if anything else at all is using the disk. This is quite different from something like `SCHED_BATCH`, which just deprioritizes you a little bit. The CPU scheduler actually has a `SCHED_IDLE` that works like `IOPRIO_CLASS_IDLE`, but it's dangerous for the same reason that `IOPRIO_CLASS_IDLE` is dangerous, so I didn't use it.\r\n\r\nThe other thing that I'm fairly certain of (but could be wrong about) is that I believe the kernel doesn't really take into account multi-queue devices when considering idleness of a block device. There's a lot of discussion about this online if you look at people talking about the %util field in iostat output, e.g. [here](https://brooker.co.za/blog/2014/07/04/iostat-pct.html). I believe for this reason `IOPRIO_CLASS_IDLE` could starve you out from accessing a disk when it actually does have idle capacity remaining.\r\n\r\nI think we should test this change more (or get a better understanding of the Linux I/O scheduler before proceeding with this change). The crude and easy-to-get wrong policy is part of the reason that I think glibc doesn't expose this system call in the first place. Not sure that I can think of an actual attack off-hand, but this is a DOS vector if you create N connections to a host, ask for blocks from all N connections, and then have some other mechanism to cause them to use up their disk I/O.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NDc3MTI4Mw==",
                    "publishedAt": "2018-03-20T21:57:50Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9245#issuecomment-374771283"
                }
            ],
            "totalCount": 22
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "9e161f0709e5776ae74dace3e282c0241e104501"
                    }
                }
            ],
            "totalCount": 2
        },
        "createdAt": "2016-11-30T08:29:55Z",
        "deletions": 10,
        "id": "MDExOlB1bGxSZXF1ZXN0OTU4NDcyMjk=",
        "labels": {
            "nodes": [
                {
                    "color": "000000",
                    "id": "MDU6TGFiZWwyMTk4OTA1NTU=",
                    "name": "Block storage"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "CONFLICTING",
        "mergedAt": null,
        "number": 9245,
        "state": "OPEN",
        "title": "Drop IO priority to idle while reading blocks for peer requests and startup verification",
        "updatedAt": "2018-03-20T22:06:19Z"
    },
    {
        "additions": 185,
        "author": {
            "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
            "login": "jonasschnelli",
            "url": "https://github.com/jonasschnelli"
        },
        "body": "Adds a new database record (`\"hdpubkey\"`) reflected by class `CHDPubKey`.\r\n* Results in no longer storing derived child private keys in the database\r\n* Only the extended child public key will be stored\r\n* If the private key gets requested, it will be derived on the fly\r\n\r\nDump functions are unchanged, will result in deriving the keys on the fly.\r\nNot backward compatible. Ideally combined with HD chain split #9294.",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/5767891?v=4",
                        "login": "instagibbs"
                    },
                    "body": "Can you explain a bit of motivation for this?",
                    "id": "MDEyOklzc3VlQ29tbWVudDI2NTQ0OTgwMg==",
                    "publishedAt": "2016-12-07T13:42:26Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9298#issuecomment-265449802"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "> Can you explain a bit of motivation for this?\r\n\r\nSure. Sorry for leaving that out in the main description.\r\n\r\n1.) Reduce amount of stored data in wallet.dat\r\n2.) Don't expose each child private key in wallet.dat\r\n3.) Lays groundwork for public key derivation in conjunction with a signing device.",
                    "id": "MDEyOklzc3VlQ29tbWVudDI2NTQ1NTg5MA==",
                    "publishedAt": "2016-12-07T14:09:16Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9298#issuecomment-265455890"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
                        "login": "MarcoFalke"
                    },
                    "body": "> 2.) Don't expose each child private key in wallet.dat\n\n\nI think this means salvagewallet no longer works for hd wallets as it\npreviously did. This could potentially lead to loss of coins for\ninexperienced users, because it is currently not easily possible to\nrecover the HD wallet after salvagewallet, nor is is possible to\nrecover the child keys, if they are not saved...\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDI2NTc0OTkwMw==",
                    "publishedAt": "2016-12-08T14:17:20Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9298#issuecomment-265749903"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "> I think this means salvagewallet no longer works for hd wallets as it\r\npreviously did. \r\n\r\nRight. This is a good point.\r\nHowever, I think we should do the following also for \"normal\" wallets.\r\n\r\n1. We already recover the hdchain (child key counter, private key id thats used for the HD master key).\r\n2. Don't abort if a privat-key is corrupted, instead...\r\n3. Recreate all keys up to the child-key-counter (CHDChain object)\r\n\r\nBefore implementing this, I think some Concept ACKs/NACKs would be required.\r\n@sipa, @gmaxwell: thoughts?",
                    "id": "MDEyOklzc3VlQ29tbWVudDI2NTc4NDE3OQ==",
                    "publishedAt": "2016-12-08T16:27:21Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9298#issuecomment-265784179"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/548488?v=4",
                        "login": "sipa"
                    },
                    "body": "@jonasschnelli I think this is generally the direction to go in, and it's also part of what my idea for refactoring accomplishes in a different way (https://gist.github.com/sipa/125cfa1615946d0c3f3eec2ad7f250a2). Do you think this is worth pursuing on its own?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MDg2MDAyNA==",
                    "publishedAt": "2018-03-06T17:25:17Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9298#issuecomment-370860024"
                }
            ],
            "totalCount": 5
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "3fd850ae5e5f0e167e63782501886d7e114482e0"
                    }
                }
            ],
            "totalCount": 1
        },
        "createdAt": "2016-12-07T11:00:43Z",
        "deletions": 18,
        "id": "MDExOlB1bGxSZXF1ZXN0OTY5MDE0NTU=",
        "labels": {
            "nodes": [
                {
                    "color": "08a781",
                    "id": "MDU6TGFiZWwxNDk0MjQ=",
                    "name": "Wallet"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "CONFLICTING",
        "mergedAt": null,
        "number": 9298,
        "state": "OPEN",
        "title": "[Wallet] use CHDPubKey, don't store child priv keys in db, derive on the fly",
        "updatedAt": "2018-03-06T17:25:17Z"
    },
    {
        "additions": 28,
        "author": {
            "avatarUrl": "https://avatars2.githubusercontent.com/u/7133040?v=4",
            "login": "ryanofsky",
            "url": "https://github.com/ryanofsky"
        },
        "body": "Allow importmulti RPC to apply address labels when importing standard scriptPubKeys. This makes the importmulti RPC less finnicky about import formats and also simpler internally.",
        "closedAt": null,
        "comments": {
            "nodes": [],
            "totalCount": 0
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "98ea64cf232c34d4b1aebe738b3956191667cd76"
                    }
                }
            ],
            "totalCount": 1
        },
        "createdAt": "2016-12-12T15:52:50Z",
        "deletions": 51,
        "id": "MDExOlB1bGxSZXF1ZXN0OTc1NzgwMTA=",
        "labels": {
            "nodes": [
                {
                    "color": "0052cc",
                    "id": "MDU6TGFiZWw5ODI3OTE3Nw==",
                    "name": "RPC/REST/ZMQ"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "number": 9332,
        "state": "OPEN",
        "title": "Let wallet importmulti RPC accept labels for standard scriptPubKeys",
        "updatedAt": "2018-03-08T14:57:49Z"
    },
    {
        "additions": 157,
        "author": {
            "avatarUrl": "https://avatars2.githubusercontent.com/u/7133040?v=4",
            "login": "ryanofsky",
            "url": "https://github.com/ryanofsky"
        },
        "body": "This is a pure refactoring, no behavior is changing.\r\n\r\nInstead of AddToWallet taking a temporary CWalletTx object and then potentially merging it with a pre-existing CWalletTx, have it take a callback so callers can update the pre-existing CWalletTx directly.\r\n\r\nThis makes AddToWallet simpler because now it is only has to be concerned with saving CWalletTx objects and not merging them.\r\n\r\nThis makes AddToWallet calls clearer because they can now make direct updates to CWalletTx entries without having to make temporary objects and then worry about how they will be merged.\r\n\r\nMotivation for this change came from the bumpfee PR #8456 where we wanted to be able to call AddToWallet to make a simple update to an existing transaction, but were reluctant to, because the existing CWalletTx merging logic did not apply and seemed dangerous try to update as part of that PR. After this refactoring, the bumpfee PR could call AddToWallet safely instead of implementing a duplicate AddToWallet function.\r\n\r\nThis also allows getting rid of the CWalletTx copy constructor to prevent unintentional copying.",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/7133040?v=4",
                        "login": "ryanofsky"
                    },
                    "body": "Rebased ed457a39ebaa672cce21622d3af422fe50730580 -> b1ac3cff00a51c0b8965b7a85fa489c98409ddff to resolve merge conflicts with bumpfee (#8456).",
                    "id": "MDEyOklzc3VlQ29tbWVudDI3NTE5MTgyMg==",
                    "publishedAt": "2017-01-25T18:30:33Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9381#issuecomment-275191822"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/7133040?v=4",
                        "login": "ryanofsky"
                    },
                    "body": "I'm thinking of splitting this up into two commits to make it easier to review. First commit would change CreateTransaction to return a CTransactionRef instead of CWalletTx. Second commit would change AddToWallet to accept a CTransactionRef instead of a CWalletTx.\r\n\r\nIf any reviewers would prefer this you can let me know.",
                    "id": "MDEyOklzc3VlQ29tbWVudDI3NTE5NjY4NA==",
                    "publishedAt": "2017-01-25T18:48:42Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9381#issuecomment-275196684"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/649246?v=4",
                        "login": "TheBlueMatt"
                    },
                    "body": "Splitting commits into logical breaks is always appreciated.\n\nOn 01/25/17 18:48, Russell Yanofsky wrote:\n> I'm thinking of splitting this up into two commits to make it easier to\n> review. First commit would change CreateTransaction to return a\n> CTransactionRef instead of CWalletTx. Second commit would change\n> AddToWallet to accept a CTransactionRef instead of a CWalletTx.\n> \n> If any reviewers would prefer this you can let me know.\n> \n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/bitcoin/bitcoin/pull/9381#issuecomment-275196684>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AAnoHu0xZqwtESQp3_rXWoR3OurDnNzgks5rV5kPgaJpZM4LRR4W>.\n> \n",
                    "id": "MDEyOklzc3VlQ29tbWVudDI3NTIwNzI2Mw==",
                    "publishedAt": "2017-01-25T19:26:39Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9381#issuecomment-275207263"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/649246?v=4",
                        "login": "TheBlueMatt"
                    },
                    "body": "Hum, reading this (finally) now, I'm not sure if I'm a big fan of this approach. The call-function-which-callsback-to-let-you-fill-in-things-that-really-should-have-been-arguments pattern really sucks. On the flip side, passing in CWalletTxes, and copying those into mapWallet can also lead to issues if you try to do anything to the object you just passed in thinking it is what got stored in the wallet (a mistake I made recently).\r\n\r\nMaybe we should adapt some of these functions (AddToWallet/CommitTransaction/whatever) to just always take an rvalue to a CWalletTx. This leaves only AddToWalletIfInvolvingMe (I think) which has to update-or-add, and that can just use an internal version of AddToWallet which takes the CWalletDB as an argument instead of creating its own.",
                    "id": "MDEyOklzc3VlQ29tbWVudDI3NTI1MDY5Mw==",
                    "publishedAt": "2017-01-25T22:17:34Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9381#issuecomment-275250693"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/7133040?v=4",
                        "login": "ryanofsky"
                    },
                    "body": "> The call-function-which-callsback-to-let-you-fill-in-things-that-really-should-have-been-arguments pattern really sucks.\r\n\r\nIf you are adamant about this, could you say more about why it sucks? I think a callback is exactly the thing you want when you are doing an in-place update to a data structure.\r\n\r\nIn any case, I agree that CommitTransaction shouldn't take a callback, so I changed it to just take a transaction ref. So now there are way fewer callbacks (I think only 3 left in non-test code).\r\n\r\n\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDI3NzEyMjcwMg==",
                    "publishedAt": "2017-02-02T23:51:36Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9381#issuecomment-277122702"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/649246?v=4",
                        "login": "TheBlueMatt"
                    },
                    "body": "I'm just generally not a fan of callbacks making ownership models inconsistent. eg this kind of thing is where people always fuck up lockordering (though admittedly less so in this particular case, more the general case of callbacks going in both directions between modules).\r\n\r\nSo I do like this version much better, but still not sure the call back is required to be publicly exposed...Can we just leave MarkReplaced and add a similar function for importpruned funds to use (I dont believe the double-disk-sync in importprunedfunds will make for inconsistent/bad on-disk state?). Then we can make AddToWallet(..., callback) private and use AddToWalletIfInvolvingMe (which should probably also take a CTransactionRef, not a CTransaction, though maybe thats for a separate PR) publicly.",
                    "id": "MDEyOklzc3VlQ29tbWVudDI3NzMyODQ4Mg==",
                    "publishedAt": "2017-02-03T18:46:10Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9381#issuecomment-277328482"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/7133040?v=4",
                        "login": "ryanofsky"
                    },
                    "body": "> Can we just leave MarkReplaced and add a similar function for importpruned funds to use\r\n\r\nWill try that. In the meantime I moved the non-AddToWallet cleanup to #9680 so it can be considered separately. By the way #9369 is another PR which significantly simplifies AddToWallet.",
                    "id": "MDEyOklzc3VlQ29tbWVudDI3NzMzNTAzNQ==",
                    "publishedAt": "2017-02-03T19:10:56Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9381#issuecomment-277335035"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/7133040?v=4",
                        "login": "ryanofsky"
                    },
                    "body": "> Can we just leave MarkReplaced and add a similar function for importpruned funds to use\r\n\r\nImplemented this suggestion. (New function is `CWallet::AddTransaction`). I also went ahead and disabled the CWalletTx copy constructor. Interestingly this uncovered a bunch of cases where we were unwittingly copying wallet transactions in loops due to writing:\r\n```c++\r\nfor (const std::pair<uint256, CWalletTx>& pairWtx : pwallet->mapWallet)\r\n```\r\n\r\ninstead of:\r\n```c++\r\nfor (const std::pair<const uint256, CWalletTx>& pairWtx : pwallet->mapWallet)\r\n```",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0ODYzMTcxNw==",
                    "publishedAt": "2017-12-01T22:31:12Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9381#issuecomment-348631717"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
                        "login": "MarcoFalke"
                    },
                    "body": "Needs rebase to fix travis (sorry)",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MTUxOTA3Ng==",
                    "publishedAt": "2018-03-08T15:21:26Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9381#issuecomment-371519076"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/7133040?v=4",
                        "login": "ryanofsky"
                    },
                    "body": "> Needs rebase to fix travis (sorry)\r\n\r\nRebased 71bce6b0f4aee487026afd31ada41a4e6028abd3 -> 31297f007b2424ab5036258ed782aacc70237a7f ([pr/atw-nomerge.33](https://github.com/ryanofsky/bitcoin/commits/pr/atw-nomerge.33) -> [pr/atw-nomerge.34](https://github.com/ryanofsky/bitcoin/commits/pr/atw-nomerge.34)) for #12607.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MjQyNDMzOQ==",
                    "publishedAt": "2018-03-12T18:55:25Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9381#issuecomment-372424339"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/250224?v=4",
                        "login": "kallewoof"
                    },
                    "body": "Re-slight-utACK 8a6ec70",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3Mjg1MzIyNg==",
                    "publishedAt": "2018-03-13T23:27:29Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9381#issuecomment-372853226"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/7133040?v=4",
                        "login": "ryanofsky"
                    },
                    "body": "Rebased e15246fc310599770332021d14b96ce3f213a82b -> d62357a7c7c8c34a55580a31ddbfd04a9fa72591 ([pr/atw-nomerge.37](https://github.com/ryanofsky/bitcoin/commits/pr/atw-nomerge.37) -> [pr/atw-nomerge.38](https://github.com/ryanofsky/bitcoin/commits/pr/atw-nomerge.38)) due to conflict with #12681 and after merge of base PR #9680.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MzQ5OTE5MA==",
                    "publishedAt": "2018-03-15T19:41:47Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9381#issuecomment-373499190"
                }
            ],
            "totalCount": 12
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "1d6c0ba1159d67c7b6dec8891e41fc20ec66370e"
                    }
                }
            ],
            "totalCount": 5
        },
        "createdAt": "2016-12-19T23:00:20Z",
        "deletions": 155,
        "id": "MDExOlB1bGxSZXF1ZXN0OTg2NTYyODg=",
        "labels": {
            "nodes": [
                {
                    "color": "E6F6D6",
                    "id": "MDU6TGFiZWwxMzU5NjE=",
                    "name": "Refactoring"
                },
                {
                    "color": "08a781",
                    "id": "MDU6TGFiZWwxNDk0MjQ=",
                    "name": "Wallet"
                }
            ],
            "totalCount": 2
        },
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "number": 9381,
        "state": "OPEN",
        "title": "Remove CWalletTx merging logic from AddToWallet",
        "updatedAt": "2018-04-10T10:29:17Z"
    },
    {
        "additions": 127,
        "author": {
            "avatarUrl": "https://avatars2.githubusercontent.com/u/7133040?v=4",
            "login": "ryanofsky",
            "url": "https://github.com/ryanofsky"
        },
        "body": "CCoinsViewCache code cleanup & deduplication\r\n\r\nThe change moves code responsible for updating the cache out of various\r\nCCoinsViewCache methods and into a Modifier class. This way the cache update\r\ncode is just written once in a general way instead of being duplicated and\r\nsplit up to handle various special cases.\r\n\r\nThis is a refactoring, with changes to cache behavior only in 2 corner cases\r\n(with corresponding tests in coins_test.cpp) which don't affect the meaning of\r\ndata stored in the cache:\r\n\r\n* In BatchWrite, overwriting a non-dirty pruned cache entry with a fresh pruned\r\n  cache entry now deletes the cache entry instead of leaving behind a dirty\r\n  pruned entry that will trigger an unnecessary database write later.\r\n\r\n* In BatchWrite, overwriting a dirty pruned fresh cache entry with a nonpruned\r\n  entry updates the entry without dropping the fresh flag. There's no reason to\r\n  drop the fresh flag in this case because the flag accurately describes the\r\n  state of the base view and could prevent unnecessary database writes in the\r\n  future if the utxo is spent later.",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/7133040?v=4",
                        "login": "ryanofsky"
                    },
                    "body": "@sipa, this is the PR I mentioned other day. It does move code to the modifier object, but the code could be moved if the modifier object is going away.",
                    "id": "MDEyOklzc3VlQ29tbWVudDI3MTkxNjA5OA==",
                    "publishedAt": "2017-01-11T16:26:39Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9384#issuecomment-271916098"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/7133040?v=4",
                        "login": "ryanofsky"
                    },
                    "body": "@sipa, I posted a version of your [pertxoutcache](https://github.com/sipa/bitcoin/commits/pertxoutcache) branch rebased on top of this PR here: \r\nhttps://github.com/ryanofsky/bitcoin/commits/pr/pertxoutcache\r\n\r\nIt might be useful to you even if you aren't interested in this PR because it also updates coins_tests to be compatible with your change.\r\n\r\nRelevant commits:\r\n\r\n- 6b547c287e63a48d24547f48ac8108d83dcc7266 `WIP per-txout chainstate` \u2013 rebased version of your main commit on top of this PR.\r\n- 5853aed217e4fd7f4a02790491ef1ea01821a2d5 `Re-enable and fix coins_test.cpp` \u2013 coins_test fixes that you can incorporate (regardless of the code refactoring in this PR)\r\n- 1b8425fce6498be757e663d202be025730f86725 `Fix wallet CCoinsViewCache::GetCoins call` \u2013 fix for compile error in wallet caused by ccoins changes\r\n ",
                    "id": "MDEyOklzc3VlQ29tbWVudDI4MzQ5MjM3NA==",
                    "publishedAt": "2017-03-01T22:30:12Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9384#issuecomment-283492374"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/7133040?v=4",
                        "login": "ryanofsky"
                    },
                    "body": "Rebased c72de76bf803254454a5dc4618bde85d1d992b7d -> 2f2d3c856520da6fcdcb82b2330515136be3f028 ([pr/ccoins-cleanup.6](https://github.com/ryanofsky/bitcoin/commits/pr/ccoins-cleanup.6) -> [pr/ccoins-cleanup.7](https://github.com/ryanofsky/bitcoin/commits/pr/ccoins-cleanup.7)) after #10195 merge.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMwNTg5NTgxMA==",
                    "publishedAt": "2017-06-02T20:03:40Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9384#issuecomment-305895810"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/548488?v=4",
                        "login": "sipa"
                    },
                    "body": "Concept ACK",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MDg1NjYyNA==",
                    "publishedAt": "2018-03-06T17:15:05Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9384#issuecomment-370856624"
                }
            ],
            "totalCount": 4
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "2279ff50b74a4fd11379f4b22a41ace453df07d7"
                    }
                }
            ],
            "totalCount": 1
        },
        "createdAt": "2016-12-20T00:07:34Z",
        "deletions": 90,
        "id": "MDExOlB1bGxSZXF1ZXN0OTg2NjM4MDU=",
        "labels": {
            "nodes": [
                {
                    "color": "E6F6D6",
                    "id": "MDU6TGFiZWwxMzU5NjE=",
                    "name": "Refactoring"
                },
                {
                    "color": "fbca04",
                    "id": "MDU6TGFiZWw5NzQ3MDc5Ng==",
                    "name": "UTXO Db and Indexes"
                }
            ],
            "totalCount": 2
        },
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "number": 9384,
        "state": "OPEN",
        "title": "CCoinsViewCache code cleanup & deduplication",
        "updatedAt": "2018-03-06T17:15:05Z"
    },
    {
        "additions": 118,
        "author": {
            "avatarUrl": "https://avatars2.githubusercontent.com/u/1095675?v=4",
            "login": "luke-jr",
            "url": "https://github.com/luke-jr"
        },
        "body": "Should fix #9103 ",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/6848764?v=4",
                        "login": "paveljanik"
                    },
                    "body": "Needs rebase.",
                    "id": "MDEyOklzc3VlQ29tbWVudDI3MTE0MzYzMQ==",
                    "publishedAt": "2017-01-08T10:52:29Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9422#issuecomment-271143631"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/1095675?v=4",
                        "login": "luke-jr"
                    },
                    "body": "Fixed serialisation params. There are conflicts now - may I rebase?",
                    "id": "MDEyOklzc3VlQ29tbWVudDI3MjIyMjMwMw==",
                    "publishedAt": "2017-01-12T17:09:38Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9422#issuecomment-272222303"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/1095675?v=4",
                        "login": "luke-jr"
                    },
                    "body": "Rebased.",
                    "id": "MDEyOklzc3VlQ29tbWVudDI3MjI3MDIzMQ==",
                    "publishedAt": "2017-01-12T20:12:08Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9422#issuecomment-272270231"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/548488?v=4",
                        "login": "sipa"
                    },
                    "body": "I'm not sure this is worth it right now; we can revisit if there is critical information to add to the mempool file?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MDg3NjE2NQ==",
                    "publishedAt": "2018-03-06T18:15:33Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9422#issuecomment-370876165"
                }
            ],
            "totalCount": 4
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "1d34442931e6b6b16893568a4719f447747097e5"
                    }
                }
            ],
            "totalCount": 2
        },
        "createdAt": "2016-12-25T06:07:02Z",
        "deletions": 43,
        "id": "MDExOlB1bGxSZXF1ZXN0OTkzMTYzNTY=",
        "labels": {
            "nodes": [
                {
                    "color": "fef2c0",
                    "id": "MDU6TGFiZWwxNjQyMDg1NzI=",
                    "name": "Mempool"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "CONFLICTING",
        "mergedAt": null,
        "number": 9422,
        "state": "OPEN",
        "title": "Refactor mempool.dat to be extensible, and store missing info",
        "updatedAt": "2018-03-06T19:20:14Z"
    },
    {
        "additions": 370,
        "author": {
            "avatarUrl": "https://avatars0.githubusercontent.com/u/8403418?v=4",
            "login": "jl2012",
            "url": "https://github.com/jl2012"
        },
        "body": "The large-work fork warning system is broken under header first validation. This should fix it by storing all valid headers, even if the block contents or the previous blocks are invalid.\r\n\r\nIt also stores invalid-version-but-otherwise-valid headers. This allows a potential planned hardfork to be followed by the client (a simplified version of the hardfork bit and hardfork warning system I proposed: https://github.com/bitcoin/bips/pull/317 and https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2016-December/013332.html )",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/7042?v=4",
                        "login": "petertodd"
                    },
                    "body": "Concept ACK on warning re: invalid version headers.",
                    "id": "MDEyOklzc3VlQ29tbWVudDI3MDcyODA4Ng==",
                    "publishedAt": "2017-01-05T19:02:18Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9443#issuecomment-270728086"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "Concept ACK, but due to the non-localized changes required to core code my opinion is that it is too risky to include in 0.14, given that it just fixes the fork check. I'd prefer to merge this after the 0.14 split-off.",
                    "id": "MDEyOklzc3VlQ29tbWVudDI3MjEzNTMxNg==",
                    "publishedAt": "2017-01-12T11:01:11Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9443#issuecomment-272135316"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/1095675?v=4",
                        "login": "luke-jr"
                    },
                    "body": "To actually fix the warning system, we need to avoid banning peers that give us invalid blocks. Unfortunately, we currently also *rely* on that banning to ensure we have peers on the same network as us.",
                    "id": "MDEyOklzc3VlQ29tbWVudDI3MjIxNjI0MQ==",
                    "publishedAt": "2017-01-12T16:48:57Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9443#issuecomment-272216241"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/8403418?v=4",
                        "login": "jl2012"
                    },
                    "body": "@luke-jr we actually don't ban all types of invalid blocks. For example, violation of all softforks after P2SH are not banned. Also, with this PR it won't ban a node for sending header of a child of invalid block. As long as the PoW and timestamp are valid, the header chain will be followed.",
                    "id": "MDEyOklzc3VlQ29tbWVudDI3MjI1MDIxMg==",
                    "publishedAt": "2017-01-12T18:59:16Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9443#issuecomment-272250212"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/1530283?v=4",
                        "login": "rebroad"
                    },
                    "body": "@luke-jr there's a middle ground perhaps. set a maximum number of peers on different chains. ",
                    "id": "MDEyOklzc3VlQ29tbWVudDI4NjA2ODE3Mg==",
                    "publishedAt": "2017-03-13T10:23:37Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9443#issuecomment-286068172"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/7463573?v=4",
                        "login": "sdaftuar"
                    },
                    "body": "@sipa @jl2012 and I discussed this a bit in person. I think we should revisit this PR after we have better DoS protections in place against storing arbitrarily long headers chains.  (I plan to propose one potential solution to this soon.)",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MDkyMzk2Mw==",
                    "publishedAt": "2018-03-06T20:52:09Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9443#issuecomment-370923963"
                }
            ],
            "totalCount": 6
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "5cd334727d127a27983a97c19a4b8135b2f0e48d"
                    }
                }
            ],
            "totalCount": 3
        },
        "createdAt": "2016-12-29T19:02:51Z",
        "deletions": 36,
        "id": "MDExOlB1bGxSZXF1ZXN0OTk2ODc4Njc=",
        "labels": {
            "nodes": [
                {
                    "color": "6060aa",
                    "id": "MDU6TGFiZWwxMTgzNzk2NTI=",
                    "name": "Validation"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "CONFLICTING",
        "mergedAt": null,
        "number": 9443,
        "state": "OPEN",
        "title": "Repairing the large-work fork warning system",
        "updatedAt": "2018-03-06T20:52:09Z"
    },
    {
        "additions": 1336,
        "author": {
            "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
            "login": "jonasschnelli",
            "url": "https://github.com/jonasschnelli"
        },
        "body": "This is the complete patch-set for the **hybrid full block SPV mode**.\r\n\r\nIf one enables the SPV mode with `-spv=1` it does...\r\n* ...first sync all headers (no block downloads during that phase)\r\n* ...requests and persist all blocks that are relevant for the wallet (down to the dept of the older wallet key)\r\n* ...scan the block for relevant transactions and flag them with `validated = false` (visible in `listtransactions` etc).\r\n* ... continue with IBD (initial block download) after all wallet relevant blocks have been processed\r\n\r\nPure full block SPV mode is possible by setting `-autorequestblocks=0`, in that mode, no blocks for validating the chain will be downloaded, resulting in a SPV only mode.\r\n\r\nFor better testing, this PR also includes a bump to 0.0005 for the default fallback fee.\r\n\r\nIncluding all required GUI changes and RPC tests:\r\n\r\nScreenshots:\r\n\r\n<img width=\"962\" alt=\"bildschirmfoto 2017-01-06 um 17 21 24\" src=\"https://cloud.githubusercontent.com/assets/178464/21725297/1a101eae-d438-11e6-91c6-04eca0f0a553.png\">\r\n\r\n\r\n![untitled-1](https://cloud.githubusercontent.com/assets/178464/21725116/4fe62b78-d437-11e6-8f1e-80ba02405a64.png)\r\n\r\n<img width=\"732\" alt=\"bildschirmfoto 2017-01-06 um 17 34 09\" src=\"https://cloud.githubusercontent.com/assets/178464/21725281/09088916-d438-11e6-8bf3-390e62ea2648.png\">\r\n\r\n\r\n![untitled-2](https://cloud.githubusercontent.com/assets/178464/21725151/727ec398-d437-11e6-851b-8577df1b6a15.png)\r\n",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/1095675?v=4",
                        "login": "luke-jr"
                    },
                    "body": "(Prefer if we don't propagate the misuse of \"SPV\" for things that don't support fraud proofs)",
                    "id": "MDEyOklzc3VlQ29tbWVudDI3MDk1MzAyMw==",
                    "publishedAt": "2017-01-06T17:14:13Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9483#issuecomment-270953023"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/858454?v=4",
                        "login": "gmaxwell"
                    },
                    "body": "I kinda want to use an open lock icon instead of the likely meaningless to uses SPV in any case. \r\n\r\nWe also should do something about the confirmed counts in this mode. I'm not sure what. The issue is that confirmations mean less when you're not validating.  Perhaps displaying transactions like they are unconfirmed until they have 6 blocks might be the thing to do. Or displaying a visible \"not-verified\" on any transaction with the not validated flag. ",
                    "id": "MDEyOklzc3VlQ29tbWVudDI3MTAxMTM0Mw==",
                    "publishedAt": "2017-01-06T21:24:55Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9483#issuecomment-271011343"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/1095675?v=4",
                        "login": "luke-jr"
                    },
                    "body": "Indeed, I would assume any mode like this shouldn't count confirmation at all.",
                    "id": "MDEyOklzc3VlQ29tbWVudDI3MTA0MDEzMg==",
                    "publishedAt": "2017-01-06T23:42:05Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9483#issuecomment-271040132"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/6586275?v=4",
                        "login": "dabura667"
                    },
                    "body": "How about a flag for showing confirmations during SPV mode? Default to off.\r\n\r\nPeople who understand the implications and just don't want to bother having to search their address on an explorer can enable in the menu / config",
                    "id": "MDEyOklzc3VlQ29tbWVudDI3MTA2MzU2MQ==",
                    "publishedAt": "2017-01-07T05:05:56Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9483#issuecomment-271063561"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/1095675?v=4",
                        "login": "luke-jr"
                    },
                    "body": "@dabura667 Is it sufficient to simply show it in the transaction details dialog, perhaps?",
                    "id": "MDEyOklzc3VlQ29tbWVudDI3MTA2NTIyNA==",
                    "publishedAt": "2017-01-07T05:52:12Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9483#issuecomment-271065224"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/6586275?v=4",
                        "login": "dabura667"
                    },
                    "body": "@luke-jr I would think so, yes.",
                    "id": "MDEyOklzc3VlQ29tbWVudDI3MTA3MjQ2MQ==",
                    "publishedAt": "2017-01-07T09:13:34Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9483#issuecomment-271072461"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/21127776?v=4",
                        "login": "molxyz"
                    },
                    "body": "On transactions screen, fully-confirmed receiving txs show only one confirmation, and fully-confirmed sending txs show \"unconfirmed\" with question marks.  \r\n![spv-txscreen](https://cloud.githubusercontent.com/assets/21127776/21752655/6e4431e0-d5aa-11e6-9493-141437b40085.png)\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDI3MTE3MDk5Nw==",
                    "publishedAt": "2017-01-08T18:58:01Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9483#issuecomment-271170997"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/4371?v=4",
                        "login": "diegoviola"
                    },
                    "body": "@molxyz I've also noticed the same thing, confirmations in Transactions list don't update, unless I restart Core.\r\n\r\nOther than that it works great.\r\n\r\nI used this for testing: `./bitcoin-qt -spv=1 -autorequestblocks=0 -testnet`.",
                    "id": "MDEyOklzc3VlQ29tbWVudDI3MTE3NDA0MA==",
                    "publishedAt": "2017-01-08T19:45:06Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9483#issuecomment-271174040"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "Thanks for reporting. This seems to be a UI update issue. Will fix it in the next overhaul / PR update.",
                    "id": "MDEyOklzc3VlQ29tbWVudDI3MTE4MTM3NA==",
                    "publishedAt": "2017-01-08T21:35:41Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9483#issuecomment-271181374"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/1095675?v=4",
                        "login": "luke-jr"
                    },
                    "body": "Thought: Can this be made to work with external wallets/software?",
                    "id": "MDEyOklzc3VlQ29tbWVudDI3NDE3MTIzMQ==",
                    "publishedAt": "2017-01-20T20:25:46Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9483#issuecomment-274171231"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "> Thought: Can this be made to work with external wallets/software?\r\n\r\nI don't know what you mean by this.\r\nCan you make an use-case example?",
                    "id": "MDEyOklzc3VlQ29tbWVudDI3NDI1MDYxMw==",
                    "publishedAt": "2017-01-21T09:29:32Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9483#issuecomment-274250613"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1008458?v=4",
                        "login": "jtimon"
                    },
                    "body": "Needs rebase.\r\nConcept ACK\r\n\r\nWhat happens with -autorequestblocks=0 -spv=0?\r\nI assume both -spv and -autorequestblocks are 1 by default. With -spv=0 -autorequestblocks=1 you would get what you have today, but is it really so useful compared to -spv=1 -autorequestblocks=1 ?\r\n\r\nI don't know it seems overly complicated. I thought we would just have a single param spvonly that defaults to 0 (equivalent to this autorequestblocks, and your spv is always =1, ie spvonly=0 equivalent to -spv=1 -autorequestblocks=1, spvonly=1 equivalent to -spv=1 -autorequestblocks=0). Not sure, just thinking out loud.",
                    "id": "MDEyOklzc3VlQ29tbWVudDI3NDgxMjY5Ng==",
                    "publishedAt": "2017-01-24T14:12:47Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9483#issuecomment-274812696"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "Rebased.\r\n\r\n> What happens with -autorequestblocks=0 -spv=0?\r\n\r\nThis would result in a mode where no blocks are automatically requested (only headers are fetched).\r\n`autorequestblocks=0` is a debug option and I could imagine some interesting use-cases where you only want to fetch certain blocks with `requestblocks` RPC call.",
                    "id": "MDEyOklzc3VlQ29tbWVudDI3NDgzMDg1Mg==",
                    "publishedAt": "2017-01-24T15:10:14Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9483#issuecomment-274830852"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "Adapted to work with bumpfee.\r\nAdded a fix for the UI update issue reported by @molxyz and @diegoviola (https://github.com/bitcoin/bitcoin/pull/9483#issuecomment-271170997).",
                    "id": "MDEyOklzc3VlQ29tbWVudDI3NDkyNDU3Mw==",
                    "publishedAt": "2017-01-24T20:12:44Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9483#issuecomment-274924573"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/7133040?v=4",
                        "login": "ryanofsky"
                    },
                    "body": "I reviewed all the commits and left many minor comments, but I have two broader concerns about this PR that may be worth some discussion:\r\n\r\n1) Architecture. It seems this change would be a lot simpler if it just added a `deque<const CBlockIndex*> blocksToDownloadFirst` net_processing variable that the wallet could add blocks to (through a function) and that net_processing code would process within its existing control flow (with some tweaks to `FindNextBlocksToDownload` and `ProcessNewBlock`). Aside from the simplifications this would allow, I also think this would be better because it would no longer be adding wallet code that has to be responsible for batching and orchestrating block downloads (in `CWallet::RequestSPVScan`).\r\n\r\n2) Naming and UI. The `-autorequestblocks` flag makes sense to me. The `-spv` option makes less sense to me and I think it would be better off called something like `-priorityrequestblocks`. Renaming `-spv` to `-priorityrequestblocks` would give a more coherent set of options:\r\n\r\n```\r\n-priorityrequestblocks\r\n\r\n       Prioritized block request. If enabled, full IBD/sync-up will be delayed\r\n       until complete blockchain headers and the contents of blocks newer than\r\n       the oldest wallet key have been downloaded. Any wallet transactions that\r\n       are picked up in the prioritized blocks will show up as non-validated until\r\n       the full IBD/sync completes. (default: 0)\r\n\r\n-autorequestblocks\r\n\r\n       Automatic block request. If disabled, no blocks will be requested in\r\n       IBD/sync-up, and only previously downloaded blocks, and blocks \r\n       requested through the `requestblocks` RPC or `-priorityrequestblocks`\r\n       option will be available. (default: 1)\r\n```\r\n\r\nSimilarly, I don't think it makes sense to have a so-called \"SPV mode\" in the wallet that just reflects the `-priorityrequestblocks` setting while ignoring the `-autorequestblocks` setting. Certainly if there are non-validated transactions in the wallet, they should clearly show up as non-validated. And if the wallet transaction history in the wallet is incomplete, this should clearly be indicated (as discussed in #9409). But beyond these two things, I don't understand what the wallet \"SPV mode\" is supposed to indicate. Why would it be helpful to me to know that my wallet is in SPV mode if I don't actually have any nonvalidated transactions? Why would it helpful be to me to know my wallet is not in SPV mode if I do have nonvalidated transactions?\r\n\r\nIf changing the wallet SPV mode toggled the `-autorequestblocks` behavior, having the mode would begin to make a certain amount of sense, though it also seems it like it would be overselling the SPV feature when the wallet will still be downloading and storing the complete contents of all blocks after a point.\r\n\r\nApart from externally visible names, naming in the code should definitely be made more consistent. If there was a global search and replace in this PR to change all occurrences of \"nonvalidation,\" \"nvs,\" \"headers only,\" \"spv,\" \"hybrid,\" and \"auxilliary\" with just \"nonvalidated\" it would help a lot with readability, because the seemingly random choices of names make the implementation seem more haphazard than it needs to be.",
                    "id": "MDEyOklzc3VlQ29tbWVudDI3ODc5OTk5MA==",
                    "publishedAt": "2017-02-09T22:47:29Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9483#issuecomment-278799990"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/7133040?v=4",
                        "login": "ryanofsky"
                    },
                    "body": "To summarize my feedback above, here's what I think ideally would be next steps for this PR:\r\n\r\n- [ ] Get rid of the `CAuxiliaryBlockRequest` class and integrate prioritized block download logic directly into `net_processing.cpp` so more code responsible for regular and prioritized block downloads can be shared, and the wallet will not have to be involved in batching and sequencing p2p requests.\r\n- [ ] Search and replace for occurrences of \"nonvalidation,\" \"nvs,\" \"headers only,\" \"spv,\" \"hybrid,\" and \"auxiliary\" in new code and just say \"nonvalidated\" in all the places it makes sense.\r\n- [ ] Change this PR title from \"_Complete hybrid full block SPV mode_\" to something more descriptive and literal like \"_Support nonvalidated transactions in wallet to increase usability during IBD_\".\r\n- [ ] Rename the `-spv` flag to `-priorityrequestblocks` or similar to be consistent with `-autorequestblocks`\r\n- [ ] Instead of labeling nonvalidated transactions in the wallet as \"SPV\", label them as \"nonvalidated.\"\r\n- [ ] Either remove the wallet SPV mode display and toggle until more SPV features are implemented, or extend the SPV mode to toggle both `-priorityrequestblocks` and `-autorequestblocks` settings. Having the SPV mode toggle only the `-priorityrequestblocks` setting while leaving `-autorequestblocks` set to 1 would be adding a limited feature that's confusing and useless as soon as the initial sync finishes.\r\n- [ ] Consider defaulting the `-priorityrequestblocks` flag to true instead of false. There should be few drawbacks if the wallet transactions are clearly labeled as nonvalidated and the wallet can be usable before the IBD completes.\r\n- [ ] Merge this PR with all the great features it adds. Then follow up with more options for reducing disk and network usage and bring the wallet SPV mode toggle to provide an easy way of enabling them.",
                    "id": "MDEyOklzc3VlQ29tbWVudDI3OTA3NzYwOA==",
                    "publishedAt": "2017-02-10T21:58:29Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9483#issuecomment-279077608"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "@ryanofsky: Thanks for your review and sorry for the late response.\r\n\r\n* About the idea of getting rid of `CAuxiliaryBlockRequest`:\r\nI think keeping it in a separate file/class allows simpler rebases. I expect to rebase that PR a lot. Also, clustering to much into net_processing would result against in a moster-class/Impl.-file that does everything net related. I think in terms of architecture, splitting of stuff into separate classes/files makes sense. \r\n\r\n* SPV versus non-validating mode:\r\nI haven't really found the ideal term. A first sight, SPV seems to miss the point (if we assume SPV = bloom filter, though I disagree here), but is does allow everybody quickly understand what this PR does. If we look at Satoshi's white paper \"Simplified Payment Verification\" (chapter 8) then I guess this is more or less what this PR is about. That's why I haven't given up on calling it SPV.\r\nClient-mode seems wrong-ish to me, because no \"server\" is involved.\r\nNon-validating mode seems to nail it, but it implies we validate nothing (we still validate headers/PoW) and therefore gives it a negative general direction. Ideally the term should not include what we not do (`non`) and should be formed in a positive way.\r\n\r\nAny objections calling this SPV mode?\r\nAlso, very likely, this mode will once have client side filtering.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMxNDM5Nzk1OQ==",
                    "publishedAt": "2017-07-11T10:07:42Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9483#issuecomment-314397959"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/7133040?v=4",
                        "login": "ryanofsky"
                    },
                    "body": "> About the idea of getting rid of CAuxiliaryBlockRequest\r\n\r\nSee https://github.com/bitcoin/bitcoin/pull/10794#issuecomment-314508746\r\n\r\n> Any objections calling this SPV mode?\r\n\r\nI don't like it, but I wouldn't object to a useful feature because it has a confusing name, and my complaints above are more about naming inconsistency than about this name in particular. Also, I wish you would respond to my some of my suggestions in detail. I wasn't suggesting renaming \"SPV mode\" to \"non-validating mode\" or to \"client-mode\" (I don't even know where \"client-mode\" comes from). I suggested renaming the `-spv` flag to `-priorityrequestblocks`, to be consistent with `-autorequestblocks` flag, and because the point of the feature is to be smarter about the order blocks are downloaded.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMxNDUxNDkwOQ==",
                    "publishedAt": "2017-07-11T17:26:20Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9483#issuecomment-314514909"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/548488?v=4",
                        "login": "sipa"
                    },
                    "body": "@ryanofsky In early 2011, there was an incomplete feature in the codebase called \"client mode\", which probably was intended to be some sort of SPV version. It never got finished, and was eventually removed.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMxNDUxNjQwNA==",
                    "publishedAt": "2017-07-11T17:31:29Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9483#issuecomment-314516404"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/7133040?v=4",
                        "login": "ryanofsky"
                    },
                    "body": "That's interesting. I don't think client is a bad name either (seems pretty innocuous). I just hadn't heard it before.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMxNDUxNzcyOA==",
                    "publishedAt": "2017-07-11T17:36:17Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9483#issuecomment-314517728"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/9156103?v=4",
                        "login": "nopara73"
                    },
                    "body": " What would be needed to progress this issue further?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0MzY4MjEyNQ==",
                    "publishedAt": "2017-11-11T17:54:18Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9483#issuecomment-343682125"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "I have plans to soon re-do / overhaul the SPV work...",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0MzgwNzY2MQ==",
                    "publishedAt": "2017-11-13T04:20:47Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9483#issuecomment-343807661"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/649246?v=4",
                        "login": "TheBlueMatt"
                    },
                    "body": "Instead of headersChainActive, which seems hard to get to automatically reorg to the new-best-headers-chain after a block is found to be invalid when we get the full block, you may want to take a look at https://github.com/TheBlueMatt/bitcoin/commits/2017-10-best-header-tracking which should handle most of that work for you. ",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0OTc5MDc2NQ==",
                    "publishedAt": "2017-12-06T22:07:40Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9483#issuecomment-349790765"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/10217?v=4",
                        "login": "Sjors"
                    },
                    "body": "I'll take a look after rebase. From the description:\r\n\r\n> requests and persist all blocks that are relevant for the wallet\r\n\r\nHow does it achieve this? BIP 37? In light of #11863, would it make sense to allow dropping in some arbitrary class that figures out which blocks to request?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1MDgyNDczOA==",
                    "publishedAt": "2017-12-11T19:06:22Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9483#issuecomment-350824738"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "> How does it achieve this? BIP 37? \r\n\r\nNo BIP37 involved here, to retain privacy uses full-block SPV mode. The relevant blocks are only those from the birthdate of the wallet on.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1MzQxNDkzMw==",
                    "publishedAt": "2017-12-21T17:52:50Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9483#issuecomment-353414933"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/548488?v=4",
                        "login": "sipa"
                    },
                    "body": "Sorry for the very late comment here, but I think this is introducing a lot of complexity and then building on top of it.\r\n\r\nI think a first step should be what @ryanofsky suggested above (\"Get rid of the CAuxiliaryBlockRequest class and integrate prioritized block download logic directly into net_processing.cpp so more code responsible for regular and prioritized block downloads can be shared, and the wallet will not have to be involved in batching and sequencing p2p requests.\"). This is more generally useful than just lightweight mode too; it could be used for rescanning while pruning too, for example.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MDg4MjAwMw==",
                    "publishedAt": "2018-03-06T18:33:50Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9483#issuecomment-370882003"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/7133040?v=4",
                        "login": "ryanofsky"
                    },
                    "body": "> I think a first step should be what @ryanofsky suggested above (\"Get rid of the CAuxiliaryBlockRequest class and integrate prioritized block download logic directly into net_processing.cpp so more code responsible for regular and prioritized block downloads can be shared, and the wallet will not have to be involved in batching and sequencing p2p requests.\").\r\n\r\nThis is actually implemented in #10794. @jonasschnelli, it would probably be good to reference #10794 in the PR description, and make sure the PR description is up to date generally.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MDg4NDk5MQ==",
                    "publishedAt": "2018-03-06T18:43:41Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9483#issuecomment-370884991"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/7133040?v=4",
                        "login": "ryanofsky"
                    },
                    "body": "@TheBlueMatt pointed out at core dev that the sync implemented here sometimes can't recover from invalid blocks, and that basing this change on #12138 might fix this.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NTc2MzkwNg==",
                    "publishedAt": "2018-03-23T18:45:03Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9483#issuecomment-375763906"
                }
            ],
            "totalCount": 28
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "254c94ca45d990d7eb745110486eb9c6ecfcb8b4"
                    }
                }
            ],
            "totalCount": 26
        },
        "createdAt": "2017-01-06T16:44:43Z",
        "deletions": 123,
        "id": "MDExOlB1bGxSZXF1ZXN0MTAwNDg3NjIx",
        "labels": {
            "nodes": [
                {
                    "color": "02d7e1",
                    "id": "MDU6TGFiZWwxMzU5NDY=",
                    "name": "GUI"
                },
                {
                    "color": "08a781",
                    "id": "MDU6TGFiZWwxNDk0MjQ=",
                    "name": "Wallet"
                }
            ],
            "totalCount": 2
        },
        "mergeable": "CONFLICTING",
        "mergedAt": null,
        "number": 9483,
        "state": "OPEN",
        "title": "Complete hybrid full block SPV mode",
        "updatedAt": "2018-03-23T18:45:03Z"
    },
    {
        "additions": 173,
        "author": {
            "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
            "login": "jonasschnelli",
            "url": "https://github.com/jonasschnelli"
        },
        "body": "This, almost UI only change, will add a Pause/Resume button to the modal overlay to pause/resume block downloads during IBD.\r\n\r\nThis is an effective way to pause/resume IBD during a time when the computers resources are required somewhere else.\r\n\r\n<img width=\"962\" alt=\"bildschirmfoto 2017-01-10 um 18 34 09\" src=\"https://cloud.githubusercontent.com/assets/178464/21817212/659f314c-d763-11e6-87e2-5b0754d067e0.png\">\r\n",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/6848764?v=4",
                        "login": "paveljanik"
                    },
                    "body": "Isn't network toggle button usable in this case? If it is not, let's fix it instead...",
                    "id": "MDEyOklzc3VlQ29tbWVudDI3MTY0Mjk3Mw==",
                    "publishedAt": "2017-01-10T17:37:39Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9502#issuecomment-271642973"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "I extracted this from my SPV branch. Especially there, it is very useful to pause IBD and continue with SPV during a time where you don't want to use all available resources on verification.\r\n\r\nBut also without SPV, I think this can be useful (pause IBD and not loose broadcast capabilities, fetch headers but not the blocks)... ",
                    "id": "MDEyOklzc3VlQ29tbWVudDI3MTY1MDY5Mg==",
                    "publishedAt": "2017-01-10T18:05:19Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9502#issuecomment-271650692"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/1095675?v=4",
                        "login": "luke-jr"
                    },
                    "body": "IMO it would be too confusing to be worth it without \"SPV\" mode, but probably should go in after the latter is.",
                    "id": "MDEyOklzc3VlQ29tbWVudDI3MTY1MDk1OA==",
                    "publishedAt": "2017-01-10T18:06:22Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9502#issuecomment-271650958"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
                        "login": "MarcoFalke"
                    },
                    "body": "> Isn't network toggle button usable in this case? If it is not, let's fix it instead...\n\nImo those are different features, but I agree that the GUI should not\n\"diverge\" in regard to presenting features. The toggle network\nfunctionality should be removed from the network icon and a proper\nbutton should be put beside the new \"Pause\" button?\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDI3MTY1ODA1MA==",
                    "publishedAt": "2017-01-10T18:33:43Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9502#issuecomment-271658050"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/1095675?v=4",
                        "login": "luke-jr"
                    },
                    "body": "The \"Pause\" button won't be visible in normal cases.",
                    "id": "MDEyOklzc3VlQ29tbWVudDI3MTY2MDgxNg==",
                    "publishedAt": "2017-01-10T18:44:23Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9502#issuecomment-271660816"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": ">> Isn't network toggle button usable in this case? If it is not, let's fix it instead...\r\n\r\n> Imo those are different features, but I agree that the GUI should not\r\n\"diverge\" in regard to presenting features. The toggle network\r\nfunctionality should be removed from the network icon and a proper\r\nbutton should be put beside the new \"Pause\" button?\r\n\r\nYes. These are internally two completely different features. Expose to the users, these have similar effects.\r\n\r\n> The \"Pause\" button won't be visible in normal cases.\r\n\r\nYes. The modal overlay is currently only accessible during IBD. Though, we could extend it to support a state where the chain is in-sync and show it when someone click on the network statusbar icon.",
                    "id": "MDEyOklzc3VlQ29tbWVudDI3MTY2OTYwMg==",
                    "publishedAt": "2017-01-10T19:16:04Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9502#issuecomment-271669602"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "Added 0.15 milestone",
                    "id": "MDEyOklzc3VlQ29tbWVudDI4NjM1OTUxMQ==",
                    "publishedAt": "2017-03-14T08:57:40Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9502#issuecomment-286359511"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "Rebased.",
                    "id": "MDEyOklzc3VlQ29tbWVudDI4NzM2NzE4OQ==",
                    "publishedAt": "2017-03-17T14:22:45Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9502#issuecomment-287367189"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "When re-enabling AutoRequestBlocks, what 'kicks off' the block requesting process again? Setting the flag will make it request blocks the next time `FindNextBlocksToDownload` is called; is that good enough? I suppose it is, because `SendMessages` is called periodically (every 100 ms?).",
                    "id": "MDEyOklzc3VlQ29tbWVudDI5NTIxMTQ0NA==",
                    "publishedAt": "2017-04-19T10:40:53Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9502#issuecomment-295211444"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "Overhauled the PR and addresses @laanwj points.\r\n\r\nAlso, I added the info \"Blocks requested from peers\" (blocks in flight). This may be important because pause will not result in disconnecting peers. Already requested blocks will be downloaded (and verified) in the \"pause\" state.\r\n\r\nIf blocks are in flight and the pause has been triggered, there is now a special info label `Wait to finish current downloads`.",
                    "id": "MDEyOklzc3VlQ29tbWVudDI5NTYzMzcwMA==",
                    "publishedAt": "2017-04-20T08:33:22Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9502#issuecomment-295633700"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/6848764?v=4",
                        "login": "paveljanik"
                    },
                    "body": "Well, I have to change my previous opinion. I think this can be useful.\r\n\r\nConcept ACK\r\n\r\nWill test soon.",
                    "id": "MDEyOklzc3VlQ29tbWVudDI5NTY0NDc3NQ==",
                    "publishedAt": "2017-04-20T09:10:24Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9502#issuecomment-295644775"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/6848764?v=4",
                        "login": "paveljanik"
                    },
                    "body": "Needs rebase.\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDI5Njk4NjM0MA==",
                    "publishedAt": "2017-04-25T10:17:43Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9502#issuecomment-296986340"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/7133040?v=4",
                        "login": "ryanofsky"
                    },
                    "body": "ACK e952b67d294043d9758b37bf2be57a982b41c051\r\n\r\nCode looks good. On the UI feature, two minor comments:\r\n\r\n- Pausing the download throws off \"Estimated time left till synced.\" It would be better pausing didn't affect estimated time.\r\n- Pause/Resume button really sticks out where it's currently placed. Maybe it would make more sense next to the progress bar or near the hide button.",
                    "id": "MDEyOklzc3VlQ29tbWVudDI5ODM5NzA5MA==",
                    "publishedAt": "2017-05-01T18:35:50Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9502#issuecomment-298397090"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/548488?v=4",
                        "login": "sipa"
                    },
                    "body": "Needs rebase.",
                    "id": "MDEyOklzc3VlQ29tbWVudDI5ODQ1NDE3MA==",
                    "publishedAt": "2017-05-01T22:54:35Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9502#issuecomment-298454170"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "Rebased.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMwMDc4ODUzNg==",
                    "publishedAt": "2017-05-11T13:26:34Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9502#issuecomment-300788536"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/6848764?v=4",
                        "login": "paveljanik"
                    },
                    "body": "Testing this again.\r\n\r\nACK https://github.com/bitcoin/bitcoin/pull/9502/commits/fc84323d8ee447f1461a10b7f3b29d113f9f4a43\r\n\r\nI think this could be even more usable if it can be called once fully in sync with the network. But I can't display the overlay then...\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDMwMTUzNjIyMA==",
                    "publishedAt": "2017-05-15T16:56:55Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9502#issuecomment-301536220"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "> I think this could be even more usable if it can be called once fully in sync with the network. But I can't display the overlay then...\r\n\r\nHm I vaguely remember I added that functionality once, you should be able to bring up the overlay by the secret trick of clicking on the sync icon.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMwMzYzNDgwNw==",
                    "publishedAt": "2017-05-24T06:54:36Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9502#issuecomment-303634807"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/6848764?v=4",
                        "login": "paveljanik"
                    },
                    "body": "@laanwj But the sync icon (you mean the triangle with an exclamation mark inside?) is not displayed when you are \"in sync\" with the network.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMwMzYzNTI3Mw==",
                    "publishedAt": "2017-05-24T06:57:12Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9502#issuecomment-303635273"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "> I think this could be even more usable if it can be called once fully in sync with the network. But I can't display the overlay then...\r\n\r\nThere are four ways how the modal-overlay can be opened:\r\n-> auto-opens when in IBD/sync\r\n-> Click on the warning icons next to the balance\r\n-> Click on the progress bar during IBD/sync\r\n-> Click on the sync icon in the status bar\r\n\r\nThough I agree with you, there is no option how to open it once you are in sync... which could be useful, but independent to this PR.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMwMzYzNTM5MQ==",
                    "publishedAt": "2017-05-24T06:57:48Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9502#issuecomment-303635391"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "@paveljanik Oh, though it also worked with the checkmark that takes its place.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMwMzYzNjUwNA==",
                    "publishedAt": "2017-05-24T07:03:31Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9502#issuecomment-303636504"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "> @paveljanik Oh, though it also worked with the checkmark that takes its place.\r\n\r\nYes. We should probably allow that.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMwMzYzNjg3NA==",
                    "publishedAt": "2017-05-24T07:05:24Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9502#issuecomment-303636874"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/7463573?v=4",
                        "login": "sdaftuar"
                    },
                    "body": "Concept ACK. (I haven't reviewed the qt code at all, but I did look over the net_processing changes.)\r\n\r\nWhat is the intended behavior if the user turns off block download after being synced or nearly synced?  I believe this PR only disables the parallel fetch logic, and not the direct fetch -- so block download could conceivably be disabled by the user, but blocks could still be requested as they are announced.  (Maybe this is hard to accomplish, if the modal overlay is not accessible when bitcoind is close to synced, but my recollection is that the modal overlay becomes visible whenever the headers chain is out of sync, which can happen even after leaving IBD, does that sound right?)\r\n\r\nPerhaps the ability to disable block download should disappear if we're close to caught up, eg if `CanDirectFetch()` is true?\r\n\r\nAdditionally, perhaps if we've disabled block download, we should also disable transaction download.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMwNTU4MzU5Nw==",
                    "publishedAt": "2017-06-01T18:43:36Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9502#issuecomment-305583597"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "Rebased and addressed the `CanDirectFetch()` issue @sdaftuar mentioned.\r\n\r\nThe current implementation avoids exposing `net_processing.cpp`'s `CanDirectFetch()` for the reasons a) it does always use chainActive (lock) and b) to avoid another core-layer dependency.\r\n\r\nI'm not doing to tackle the transaction download in the PR (main scope is disabling block download).",
                    "id": "MDEyOklzc3VlQ29tbWVudDMxMTk5OTQxNQ==",
                    "publishedAt": "2017-06-29T15:18:14Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9502#issuecomment-311999415"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/3782274?v=4",
                        "login": "achow101"
                    },
                    "body": "ACK\r\n\r\nI have tested this on a node that was a few weeks behind and I was able to pause the block download multiple times while it was syncing. I noticed that even when paused, UpdateTip is still happening for hundreds of blocks after what the GUI said still needed to be downloaded. I assume this is because it still processes all of the blocks that have been downloaded and the downloading happens faster than the processing. The UpdateTip lines do stop after a while which I assume is because all downloaded blocks have been processed.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMxNDkwNzE5Mg==",
                    "publishedAt": "2017-07-12T21:48:45Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9502#issuecomment-314907192"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/548488?v=4",
                        "login": "sipa"
                    },
                    "body": "> I assume this is because it still processes all of the blocks that have been downloaded and the downloading happens faster than the processing.\r\n\r\nYes, that's expected. We download multiple blocks in parallel, ahead of the next one to connect. I expect that this PR also keeps processing the ones that were in flight at the time blocks downloads are disabled.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMxNDkxNzYyOQ==",
                    "publishedAt": "2017-07-12T22:37:57Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9502#issuecomment-314917629"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "This has missed the 0.15 feature freeze, moving to 0.16.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMxNjA5ODc3NQ==",
                    "publishedAt": "2017-07-18T15:20:56Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9502#issuecomment-316098775"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "Rebased.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMyNzg3NzcxOA==",
                    "publishedAt": "2017-09-07T18:02:20Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9502#issuecomment-327877718"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "rebased and slightly overhauled the blocks-in-flight information flow.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMyNzkwNDU0Mg==",
                    "publishedAt": "2017-09-07T19:48:04Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9502#issuecomment-327904542"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "Rebased.\r\n@paveljanik @achow101 @ryanofsky @kallewoof: care to re-ack?",
                    "id": "MDEyOklzc3VlQ29tbWVudDMzNDM1MjQ2Mg==",
                    "publishedAt": "2017-10-05T04:00:17Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9502#issuecomment-334352462"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "Rebased and addressed nits (code style).",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0NTA3MjA5Mg==",
                    "publishedAt": "2017-11-16T21:43:05Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9502#issuecomment-345072092"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "@cfields: since this is touching net code, can you do a final review?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NDU2OTgzNw==",
                    "publishedAt": "2018-03-20T11:51:07Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9502#issuecomment-374569837"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/863730?v=4",
                        "login": "fanquake"
                    },
                    "body": "Had a quick test of this (b0a9b8d6dae2a9efcdbc3607b235c37e1f7db31d) on top of master (9b8b1079ddab64ac955766536c38d23dc57bc499). macOS 10.13.3 and Qt 5.10.1.\r\n\r\nThis is what the overlay model looks like now with this PR (b0a9b8d6dae2a9efcdbc3607b235c37e1f7db31d):\r\n![147511](https://user-images.githubusercontent.com/863730/37718009-b363ad0e-2d5c-11e8-9ff8-d01169983d10.png)\r\n\r\nOne thing I noticed is after hitting \"Pause\", it can take a while to stop downloading blocks. \r\ni.e In the images below, we hit pause with 127 blocks \"requested from peers\" and 145022 total blocks left. However we don't appear to stop downloading blocks until we've reached 144601 total blocks left to download, > 400 blocks later. This could be confusing, and might appear worse on slower connections?\r\n\r\n<img width=\"1119\" alt=\"145022\" src=\"https://user-images.githubusercontent.com/863730/37718535-e1ba009e-2d5d-11e8-95c7-89fc5c418a21.png\">\r\n<img width=\"1133\" alt=\"144601\" src=\"https://user-images.githubusercontent.com/863730/37718555-ec53ed94-2d5d-11e8-96d9-1933eec59f75.png\">\r\n\r\nI'll comment inline about simplifying the new strings.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NDk3NTgwNQ==",
                    "publishedAt": "2018-03-21T15:19:40Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9502#issuecomment-374975805"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "> One thing I noticed is after hitting \"Pause\", it can take a while to stop downloading blocks.\r\ni.e In the images below, we hit pause with 127 blocks \"requested from peers\" and 145022 total blocks left. However we don't appear to stop downloading blocks until we've reached 144601 total blocks left to download, > 400 blocks later. This could be confusing, and might appear worse on slower connections?\r\n\r\nYes. That could be confusing,.. though I guess there is an explanation. You may still have blocks on your disk that hasn't been verified due to a missing the next blocks after your tip. This means it is possible to jump a couple of block after downloading a single block.\r\n\r\nAlso,... we don't want to ignore the request because the peer is sending it anyway (once requested) and we don't want to disconnect peers (that feature is already available).\r\n\r\nIt would be possible to hide that information from the user, though I think it makes more sense to display it so its clear that the \"pause\" means not \"disconnect\".",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MDIxNTA0NA==",
                    "publishedAt": "2018-04-10T19:11:47Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9502#issuecomment-380215044"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "Rebased.\r\nThanks for re-reviewing.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MDM2MzUwMQ==",
                    "publishedAt": "2018-04-11T08:00:21Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9502#issuecomment-380363501"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "Rebased.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MzQwMTI2OA==",
                    "publishedAt": "2018-04-22T18:16:42Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9502#issuecomment-383401268"
                }
            ],
            "totalCount": 35
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "20795517dac0cc1019a9566389b52d8a6099c911"
                    }
                }
            ],
            "totalCount": 8
        },
        "createdAt": "2017-01-10T17:35:57Z",
        "deletions": 13,
        "id": "MDExOlB1bGxSZXF1ZXN0MTAwOTE5NTM1",
        "labels": {
            "nodes": [
                {
                    "color": "02d7e1",
                    "id": "MDU6TGFiZWwxMzU5NDY=",
                    "name": "GUI"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "number": 9502,
        "state": "OPEN",
        "title": "[Qt] Add option to pause/resume block downloads",
        "updatedAt": "2018-04-22T18:16:42Z"
    },
    {
        "additions": 17,
        "author": {
            "avatarUrl": "https://avatars2.githubusercontent.com/u/1095675?v=4",
            "login": "luke-jr",
            "url": "https://github.com/luke-jr"
        },
        "body": "ReserveKeyFromKeyPool's previous behaviour is to set nIndex to -1 if the keypool is empty, OR throw an exception for technical failures.\r\nInstead, we now return nIndex (always >= 0) and throw a keypool_empty exception if the keypool is empty.\r\n\r\nThis is to ensure calling code must handle the empty case, and so the compiler can provide use-without-assignment warnings when appropriate.",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "Needs rebase",
                    "id": "MDEyOklzc3VlQ29tbWVudDMwMjMzMzE2Nw==",
                    "publishedAt": "2017-05-18T08:11:43Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9537#issuecomment-302333167"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/649246?v=4",
                        "login": "TheBlueMatt"
                    },
                    "body": "Gaa, can we not add more C++ exceptions? They are generally very strongly discouraged across the board by sandard C++ guidelines, for various reasons. As an alternative which accomplishes most of the same goal, maybe still make ReserveKeyFromKeyPool return the nIndex and add the stanard \"not using returned values\" checks that most compilers support?",
                    "id": "MDEyOklzc3VlQ29tbWVudDMwNDczNDkyOA==",
                    "publishedAt": "2017-05-29T21:44:19Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9537#issuecomment-304734928"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "Needs rebase and maybe discussion about @TheBlueMatt's points about the C++ exceptions (or close).",
                    "id": "MDEyOklzc3VlQ29tbWVudDMyMjU3NDgwNA==",
                    "publishedAt": "2017-08-15T20:10:16Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9537#issuecomment-322574804"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/7133040?v=4",
                        "login": "ryanofsky"
                    },
                    "body": "Needs rebase. This seems like a reasonable use of exceptions, so I'd stand by my previous ACK, but no strong opinion one way or the other.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMzNjIxMDA5Mg==",
                    "publishedAt": "2017-10-12T17:33:12Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9537#issuecomment-336210092"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/548488?v=4",
                        "login": "sipa"
                    },
                    "body": "Concept ACK in the sense that using -1 as exceptional value may be improvable. I'm not a fan of using exceptions though; what about boost::optional?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MDg4Mjc3Mg==",
                    "publishedAt": "2018-03-06T18:36:20Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9537#issuecomment-370882772"
                }
            ],
            "totalCount": 5
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "ba98de0b129bf510a52e3a65bece11ff492ec8d7"
                    }
                }
            ],
            "totalCount": 1
        },
        "createdAt": "2017-01-12T21:20:28Z",
        "deletions": 12,
        "id": "MDExOlB1bGxSZXF1ZXN0MTAxMzQyNjI4",
        "labels": {
            "nodes": [
                {
                    "color": "99a810",
                    "id": "MDU6TGFiZWw3NDk0MTY1MDg=",
                    "name": "Up for grabs"
                },
                {
                    "color": "08a781",
                    "id": "MDU6TGFiZWwxNDk0MjQ=",
                    "name": "Wallet"
                }
            ],
            "totalCount": 2
        },
        "mergeable": "CONFLICTING",
        "mergedAt": null,
        "number": 9537,
        "state": "OPEN",
        "title": "Wallet: Refactor ReserveKeyFromKeyPool for safety",
        "updatedAt": "2018-03-18T23:09:14Z"
    },
    {
        "additions": 201,
        "author": {
            "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
            "login": "jonasschnelli",
            "url": "https://github.com/jonasschnelli"
        },
        "body": "This mode (`-disableprivatekeys`) is intended for a sane pure watch-only mode, ideal for a use-case where one likes to use Bitcoin-Core in conjunction with a hardware-wallet or another solutions for cold-stogare.\r\n\r\nSince we have support for custom change addresses in `fundrawtransaction`, pure watch-only wallets including coin-selection are possible and do make sense for some use cases.\r\n\r\nThis new mode disables all forms of private key generation and ensure that no mix between hot and cold keys are possible.",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/649246?v=4",
                        "login": "TheBlueMatt"
                    },
                    "body": "It seems somewhat strange that this is set per-run and not per-wallet. Indeed, if it were set per-wallet, an easy way to get the intended behavior here is to simply encrypt your wallet with a garbage passphrase such that it can no longer be opened (not to say we shouldn't do this, better UX around that is good, but it might be easier to review/write if it re-used that infrastructure).",
                    "id": "MDEyOklzc3VlQ29tbWVudDI3Njc4NjY2Mg==",
                    "publishedAt": "2017-02-01T21:23:51Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9662#issuecomment-276786662"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "Concept ACK. I agree that this would be better as a mode on the wallet instead of yet another startup option.",
                    "id": "MDEyOklzc3VlQ29tbWVudDI3Njg5MTk3OA==",
                    "publishedAt": "2017-02-02T08:03:06Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9662#issuecomment-276891978"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/3020646?v=4",
                        "login": "NicolasDorier"
                    },
                    "body": "I would like to rebase on top of that for https://github.com/bitcoin/bitcoin/pull/9728, can you rebase?\r\nI would switch that on if hdwatchonly is used.",
                    "id": "MDEyOklzc3VlQ29tbWVudDI4MDIwNTAzMQ==",
                    "publishedAt": "2017-02-16T01:53:52Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9662#issuecomment-280205031"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "Added two commit.\r\n* First commit adds a facility to store and check wallet flags (64bit). Made DISABLE_PRIVATE_KEYS the first flag.\r\n* Second commit makes the disablehot function per wallet (no longer a global state)\r\n\r\nDisabling private keys on a wallet that already contains private keys is not possible (also the other way around).",
                    "id": "MDEyOklzc3VlQ29tbWVudDI4MDU5NjM1MQ==",
                    "publishedAt": "2017-02-17T09:11:11Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9662#issuecomment-280596351"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "Needed rebase (#8775).\r\nTravis will fail because of the missing `assert_start_raises_init_error` (see #9832).",
                    "id": "MDEyOklzc3VlQ29tbWVudDI4Mzk4NTkxMA==",
                    "publishedAt": "2017-03-03T15:36:09Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9662#issuecomment-283985910"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "> ideal for a use-case where one likes to use Bitcoin-Core in conjunction with a hardware-wallet or another solutions for cold-stogare\r\n\r\nNice, so this guarantees that bitcoind process will contain no private key data at all?\r\nSeems like s a good step towards supporting hardware wallets too.\r\nConcept ACK.\r\n\r\nTravis should pass now that #9832 is merged.",
                    "id": "MDEyOklzc3VlQ29tbWVudDI4NDM0MTI0Ng==",
                    "publishedAt": "2017-03-06T09:13:54Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9662#issuecomment-284341246"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "The `disablehot.py` now makes use of the new (#9832) `assert_start_raises_init_error` call.\r\n\r\n> Nice, so this guarantees that bitcoind process will contain no private key data at all?\r\n\r\nYes. Event the default key is disabled (while still detecting the first start correctly).",
                    "id": "MDEyOklzc3VlQ29tbWVudDI4NDM0NTUxMQ==",
                    "publishedAt": "2017-03-06T09:31:54Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9662#issuecomment-284345511"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "Rebased.",
                    "id": "MDEyOklzc3VlQ29tbWVudDI5MDExMjcxOA==",
                    "publishedAt": "2017-03-29T14:44:25Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9662#issuecomment-290112718"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "Needs rebase again (sorry)\r\nutACK otherwise.",
                    "id": "MDEyOklzc3VlQ29tbWVudDI5ODYzNjM5Ng==",
                    "publishedAt": "2017-05-02T13:32:20Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9662#issuecomment-298636396"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "Rebased.",
                    "id": "MDEyOklzc3VlQ29tbWVudDI5OTE4MDU2Mg==",
                    "publishedAt": "2017-05-04T13:11:09Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9662#issuecomment-299180562"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "- Completely rewrote the commit history (as reported by @ryanofsky it was messy).\r\n- Fixed @ryanofsky points\r\n\r\nNo strong opinion if this should be called `-disableprivatekeys` (which somehow nails it but may confuse people who just want cold key storage). Other opinions?\b",
                    "id": "MDEyOklzc3VlQ29tbWVudDI5OTQwMDA2NQ==",
                    "publishedAt": "2017-05-05T07:27:38Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9662#issuecomment-299400065"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/7133040?v=4",
                        "login": "ryanofsky"
                    },
                    "body": "utACK fcea55a6ec6be57ee96458bde6fb24656269d3ee\r\n\r\nChanges from previous review: pwalletMain removal, SetWalletFlag rename, error message tweaks, assert_raises_jsonrpc usage, and history cleanup.",
                    "id": "MDEyOklzc3VlQ29tbWVudDI5OTQ4MzA4MQ==",
                    "publishedAt": "2017-05-05T14:40:42Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9662#issuecomment-299483081"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/3020646?v=4",
                        "login": "NicolasDorier"
                    },
                    "body": "utACK fcea55a6ec6be57ee96458bde6fb24656269d3ee",
                    "id": "MDEyOklzc3VlQ29tbWVudDI5OTYyNTU2NA==",
                    "publishedAt": "2017-05-06T08:46:42Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9662#issuecomment-299625564"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/7133040?v=4",
                        "login": "ryanofsky"
                    },
                    "body": "This has 3 utACKs so I'm building it now to provide a little testing. Maybe this PR should also update `doc/release-notes.md` since it's adding a new option.\r\n\r\nOn \"private keys\" vs \"hot keys\" naming, \"private keys\" still sounds more comprehensible to me, but I wouldn't weigh my opinion very heavily if \"hot key\" is a term users will know.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMwMzQ2NjgyNg==",
                    "publishedAt": "2017-05-23T17:01:29Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9662#issuecomment-303466826"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/7133040?v=4",
                        "login": "ryanofsky"
                    },
                    "body": "Tested ACK fcea55a6ec6be57ee96458bde6fb24656269d3ee. Confirmed disablehot option prevents generating keys, persists across reload even when disablehot option not specified in later runs, and that it prevents loading pre-existing or non-disablehot wallets. I don't think I encountered any bugs, and it seems to me this PR works well and is safe to merge.\r\n\r\nI was surprised by two things, and maybe these behaviors could be changed in the future if they aren't intentional:\r\n\r\n- I was surprised that -disablehot could only be used on a new wallet and would refuse to load a preexisting wallet that did not have any private keys.\r\n- I was surprised that -disablehot did seem to allow importing private keys via importprivkey and importwallet rpcs.\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDMwMzQ5MDgxOA==",
                    "publishedAt": "2017-05-23T18:30:05Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9662#issuecomment-303490818"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "Added two commits.\r\nThe first addresses the \"importprivkey\" / \"Importwallet\" issues reported by @ryanofsky (disable both commands in -disablehot mode).\r\nThe second fixes a rebase `pwallet`/`pwalletmain` issue.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMwMzY2NzQ1OQ==",
                    "publishedAt": "2017-05-24T09:20:03Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9662#issuecomment-303667459"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/5767891?v=4",
                        "login": "instagibbs"
                    },
                    "body": "needs rebase, will review",
                    "id": "MDEyOklzc3VlQ29tbWVudDMwOTQ0MDg1Mw==",
                    "publishedAt": "2017-06-19T13:34:03Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9662#issuecomment-309440853"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/5767891?v=4",
                        "login": "instagibbs"
                    },
                    "body": "General comment while I wait for rebase: This is fundamentally in conflict with the hdwatchonly mode proposed in https://github.com/bitcoin/bitcoin/pull/9728 which was surprising to me. Perhaps the descriptions of the mode should stress that no (pub)key generation of any sort is allowed, or explicitly state that only imported watchonly keys are supported?\r\n\r\nAlso, I think to make this mode less brittle if an assert in `AddKeyPubKey` is added, since this should never be reachable.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMwOTQ1NDMxMQ==",
                    "publishedAt": "2017-06-19T14:20:14Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9662#issuecomment-309454311"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/10217?v=4",
                        "login": "Sjors"
                    },
                    "body": "Needs rebase.\r\n\r\nTend to agree that this should be a per wallet thing and that this should be set upon wallet creation, rather than application launch.\r\n\r\nIf I understand correctly this is purely a safety feature. But I wonder if it doesn't make too many assumptions.\r\n\r\nThe term watch-only wallet is ambiguous. It could mean that the user doesn't have access to private keys at all, or that they do, but managed by an external device. They could also be part of a multisig arrangement, in which case it does have some keys and needs to generate (multisig) change addresses, but shouldn't generate \"solo\" keys.\r\n\r\nIf I understand correctly, the scope of this PR is wallets where keys are managed externally, e.g. a hardware wallet. Would such a wallet have it's own UI that uses the RPC, or would the user interact directly with the RPC somehow? In the first case, it would seem that the hardware wallet developer should just be careful about which RPC commands to call. Or am I missing something? Not that I'm against making it safer.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NDE5MDY3Ng==",
                    "publishedAt": "2018-02-08T17:41:38Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9662#issuecomment-364190676"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "Rebased and fixed.\r\nRenamed `-disablehot` to `-disableprivatekeys`\r\n\r\nSince we have no dynamic wallet creation (something like #10740), disabling private keys is only possible during wallet creation and with the `-disableprivatekeys` option.\r\n\r\nUse case:\r\n* Splitting the private keys from the wallet (hardware wallets, cold storage, use wallet as pure index), one wants to make sure, fundrawtransaction, etc. won't accidentally use an internal private key as change address or something similar",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2OTIzODA3OA==",
                    "publishedAt": "2018-02-28T13:25:15Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9662#issuecomment-369238078"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "Rebased (and fixed travis issue)",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MDEyMTQwNg==",
                    "publishedAt": "2018-03-03T05:45:02Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9662#issuecomment-370121406"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "Rebased.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3Mzk4NDEyOA==",
                    "publishedAt": "2018-03-18T09:30:05Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9662#issuecomment-373984128"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "Had to rebase after #10244 (non trivial).\r\nGlad if utACKers can review again.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MDM1NTM0NQ==",
                    "publishedAt": "2018-04-11T07:29:15Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9662#issuecomment-380355345"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/250224?v=4",
                        "login": "kallewoof"
                    },
                    "body": "Late so can be safely ignored, but we say `importprivkey` so maybe `disableprivkeys` for consistency? Will review.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MDM3MTAwNQ==",
                    "publishedAt": "2018-04-11T08:28:18Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9662#issuecomment-380371005"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/10217?v=4",
                        "login": "Sjors"
                    },
                    "body": "Concept ACK on the use of flags that are stored in the wallet (I think I overlooked that the first time I reviewed). This prevents accidentally disabling the feature. I also think it's a safe choice that you can't enable this feature on a wallet that already has private keys.\r\n\r\nThere are some problems in a multi wallet environment though.\r\n\r\nIt correctly remembers which wallets have disabled private keys, disabling the payment request button in QT where appropriate. So that's good.\r\n\r\nBut if you try to load an existing normal wallet and create a new `-disableprivatekeys` wallet at the same time, you'll get an error upon launch \"You can't disable private keys if your wallet already contains private keys\".\r\n\r\nOne solution would be to explain in documentation that in order to create such a wallet you can only have one `-wallet` argument. But I think a better approach is to create a new `-createwallet` `RPC` which takes `disableprivatekeys` as an argument. Such an RPC could also be useful for dynamic loading #10740 .",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MDQxMzc5Mw==",
                    "publishedAt": "2018-04-11T11:05:36Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9662#issuecomment-380413793"
                }
            ],
            "totalCount": 25
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "74d25a289ea040ed33e0aaed120e77f3be7e5311"
                    }
                }
            ],
            "totalCount": 4
        },
        "createdAt": "2017-02-01T13:16:16Z",
        "deletions": 9,
        "id": "MDExOlB1bGxSZXF1ZXN0MTA0MTMzODcy",
        "labels": {
            "nodes": [
                {
                    "color": "08a781",
                    "id": "MDU6TGFiZWwxNDk0MjQ=",
                    "name": "Wallet"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "number": 9662,
        "state": "OPEN",
        "title": "Add `-disableprivatekeys` mode: a sane mode for watchonly-wallets",
        "updatedAt": "2018-04-11T11:05:36Z"
    },
    {
        "additions": 7,
        "author": {
            "avatarUrl": "https://avatars2.githubusercontent.com/u/1530283?v=4",
            "login": "rebroad",
            "url": "https://github.com/rebroad"
        },
        "body": "Fixes one of the issues mentioned in #9668 - i.e. speeds up shutdown (can save over 30 seconds in some cases), which can cause shutdown to be aborted on some operating systems (if the OS does not allow as much time as bitcoind was requiring).",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1008458?v=4",
                        "login": "jtimon"
                    },
                    "body": "utACK",
                    "id": "MDEyOklzc3VlQ29tbWVudDMyNzY0NjExOQ==",
                    "publishedAt": "2017-09-07T00:12:20Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9719#issuecomment-327646119"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/649246?v=4",
                        "login": "TheBlueMatt"
                    },
                    "body": "This effectively partially reverts #12367, which may be OK because of the fixes in #12349, but needs a careful look.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2OTk1NTMxMA==",
                    "publishedAt": "2018-03-02T15:37:13Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9719#issuecomment-369955310"
                }
            ],
            "totalCount": 2
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "8eab85cf672b8ea2fb5f721aff71de9aec15a43b"
                    }
                }
            ],
            "totalCount": 1
        },
        "createdAt": "2017-02-08T06:28:11Z",
        "deletions": 1,
        "id": "MDExOlB1bGxSZXF1ZXN0MTA1MTU2NTYw",
        "labels": {
            "nodes": [
                {
                    "color": "6060aa",
                    "id": "MDU6TGFiZWwxMTgzNzk2NTI=",
                    "name": "Validation"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "number": 9719,
        "state": "OPEN",
        "title": "Allow abort of ConnectBlock() when shutdown requested.",
        "updatedAt": "2018-03-19T17:38:08Z"
    },
    {
        "additions": 127,
        "author": {
            "avatarUrl": "https://avatars2.githubusercontent.com/u/1095675?v=4",
            "login": "luke-jr",
            "url": "https://github.com/luke-jr"
        },
        "body": "Exceptions:\r\n- Multiple inputs in the same transaction are allowed to spend against the same scriptPubKey\r\n- The same scriptPubKey may be used in the mempool as both first an output, and then spent in a later transaction's input\r\n\r\nChanges since original 2013 patch (pre-squashed):\r\n- Refactor: Move CScript::ScriptPubkeyReuseHash to ScriptHashkey(CScript) in txmempool\r\n- Update mempool duplicate-scriptPubKey limiting with C++11 and misc formatting improvements\r\n- Bugfix: Use bitwise operators for mempool SPK states\r\n- Use CValidationState for SPK reuse rejections\r\n- Move mapTxSPK to CTxMemPoolEntry.mapSPK\r\n- Make SPK reuse filtering optional (use -spkreuse)\r\n\r\nKnown issues:\r\n- ~~This breaks RBF in most usage scenarios.~~\r\n- ~~Someone could watch for transactions and spam dust to block them on nodes using this.~~",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/1095675?v=4",
                        "login": "luke-jr"
                    },
                    "body": "@sdaftuar pointed out on IRC that someone could watch the p2p network and screw up people by sending dust to SPKs they see. I also noticed this breaks common RBF usage since the SPK conflict rejects the transaction before it can be replaced.\r\n\r\nTo address both of these, I refactored the logic so that it treats non-inherent (that is, within the same tx) SPK conflicts in the same manner as TxIn conflicts. Although in the SPK case, the RBF optin flag is ignored, and a conflict in the parents of the transaction don't cause a DoS ban.",
                    "id": "MDEyOklzc3VlQ29tbWVudDI3OTI5ODU0MA==",
                    "publishedAt": "2017-02-13T05:37:34Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9749#issuecomment-279298540"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/4360349?v=4",
                        "login": "morcos"
                    },
                    "body": "As mentioned on IRC, I'm opposed to this feature.  Would not object to more optional safeguards against reuse in the wallet code though.",
                    "id": "MDEyOklzc3VlQ29tbWVudDI3OTQ4Mjk2MQ==",
                    "publishedAt": "2017-02-13T18:44:06Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9749#issuecomment-279482961"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/1095675?v=4",
                        "login": "luke-jr"
                    },
                    "body": "And as mentioned on IRC, I don't like the idea of changing Core's direction to where it is no longer a reference implementation, but a specific political agenda to the exclusion of others. If you don't like the feature, just don't use it.",
                    "id": "MDEyOklzc3VlQ29tbWVudDI3OTU5OTUyMA==",
                    "publishedAt": "2017-02-14T03:42:08Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9749#issuecomment-279599520"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/7463573?v=4",
                        "login": "sdaftuar"
                    },
                    "body": "@luke-jr Please explain in the pull request, and ideally in code comments, what this patch is intended to do and why.  Concept NACK policy change PRs that are made without providing motivation.",
                    "id": "MDEyOklzc3VlQ29tbWVudDI3OTcxMDA4MQ==",
                    "publishedAt": "2017-02-14T13:43:41Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9749#issuecomment-279710081"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/1095675?v=4",
                        "login": "luke-jr"
                    },
                    "body": "Context: https://bitcointalk.org/index.php?topic=334316.0;viewResults",
                    "id": "MDEyOklzc3VlQ29tbWVudDI4MDc1NDYwNw==",
                    "publishedAt": "2017-02-17T20:13:25Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9749#issuecomment-280754607"
                }
            ],
            "totalCount": 5
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "9b75ab5b39055c68e7bc410f0380cc15438206ef"
                    }
                }
            ],
            "totalCount": 3
        },
        "createdAt": "2017-02-13T00:09:02Z",
        "deletions": 4,
        "id": "MDExOlB1bGxSZXF1ZXN0MTA1ODEzMzIw",
        "labels": {
            "nodes": [
                {
                    "color": "fef2c0",
                    "id": "MDU6TGFiZWwxNjQyMDg1NzI=",
                    "name": "Mempool"
                },
                {
                    "color": "6060aa",
                    "id": "MDU6TGFiZWwxMTgzNzk2NTI=",
                    "name": "Validation"
                }
            ],
            "totalCount": 2
        },
        "mergeable": "CONFLICTING",
        "mergedAt": null,
        "number": 9749,
        "state": "OPEN",
        "title": "If -spkreuse=0, ensure transactions in mempool always have unique scriptPubKeys",
        "updatedAt": "2017-12-30T11:10:59Z"
    },
    {
        "additions": 1128,
        "author": {
            "avatarUrl": "https://avatars2.githubusercontent.com/u/1095675?v=4",
            "login": "luke-jr",
            "url": "https://github.com/luke-jr"
        },
        "body": "Simple realtime log of p2p network activity (blocks and transactions only)\r\n\r\n- Doesn't begin logging until opened; limited to 0x400 entries (outputs)\r\n- Automatically scrolls if left at the bottom of the log; maintains position if left elsewhere\r\n- Memory-efficient circular buffer; CTransaction references become weak after they're 0x200 entries back in the log\r\n- Search function that selects all matching log entries, including ongoing",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/6848764?v=4",
                        "login": "paveljanik"
                    },
                    "body": "This is how it looks like here on testnet:\r\n\r\n<img width=\"1167\" alt=\"screen shot 2017-02-24 at 08 22 39\" src=\"https://cloud.githubusercontent.com/assets/6848764/23294190/86f5186e-fa6a-11e6-83bd-dfa5811b8b68.png\">\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDI4MjIyMjkyMQ==",
                    "publishedAt": "2017-02-24T07:24:01Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9849#issuecomment-282222921"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "Thanks. Will review.\r\nI just played a bit with it and had massive locking issues on mainnet during catch-up of 2-3 weeks.",
                    "id": "MDEyOklzc3VlQ29tbWVudDI4MjIyMzg0Ng==",
                    "publishedAt": "2017-02-24T07:30:31Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9849#issuecomment-282223846"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "Running this PR (built over gitian: https://bitcoin.jonasschnelli.ch/build/54) makes Bitcoin-Qt and also the rest of my apps almost unusable. Had to force kill the process.",
                    "id": "MDEyOklzc3VlQ29tbWVudDI4NzM4NTMyNQ==",
                    "publishedAt": "2017-03-17T15:26:08Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9849#issuecomment-287385325"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "Concept ACK, I like having this, though we have to be sure that there is *no* performance impact when the monitor is not running, and as little as possible when it is.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MDk1ODcxMg==",
                    "publishedAt": "2018-03-06T22:54:29Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9849#issuecomment-370958712"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/1095675?v=4",
                        "login": "luke-jr"
                    },
                    "body": "The code is (already) disabled until the first time it is opened.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MTAwNDA4NA==",
                    "publishedAt": "2018-03-07T02:46:47Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9849#issuecomment-371004084"
                }
            ],
            "totalCount": 5
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "22dff5319716915529c30e0cfdf4d745109f4178"
                    }
                }
            ],
            "totalCount": 3
        },
        "createdAt": "2017-02-24T04:01:18Z",
        "deletions": 1,
        "id": "MDExOlB1bGxSZXF1ZXN0MTA3NzYzODI2",
        "labels": {
            "nodes": [
                {
                    "color": "02d7e1",
                    "id": "MDU6TGFiZWwxMzU5NDY=",
                    "name": "GUI"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "number": 9849,
        "state": "OPEN",
        "title": "Qt: Network Watch tool",
        "updatedAt": "2018-03-07T02:46:47Z"
    },
    {
        "additions": 27,
        "author": {
            "avatarUrl": "https://avatars3.githubusercontent.com/u/3298484?v=4",
            "login": "jameshilliard",
            "url": "https://github.com/jameshilliard"
        },
        "body": "Rational for removal:\r\n\r\n- This is effectively a fatal error to miners regardless, there is no meaningful downside to removing this because getting an invalid template is not practically any worse than getting no template.\r\n\r\n- Due to cs_main locks this causes a large variance in GBT response times and further encourages undesirable workarounds such as validationless mining.\r\n\r\n- Invalid blocks are much more likely to originate from stratum server bugs, something like [this](https://github.com/bitcoin/bitcoin/pull/9000) is probably a better way to test block validity.\r\n\r\nI've been running with this TestBlockValidity call removed in production for a few months at this point.",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/417043?v=4",
                        "login": "theuni"
                    },
                    "body": "I can agree with the idea that BlockAssembler shouldn't need to resort to the heaviness of TestBlockValidity, but we do need _some_ checks here.\r\n\r\nAs to your points\r\n- Grinding for a minute on a block that will be rejected is not worse than an extra quick call to gbt?\r\n- cs_main is already locked. This change does not reduce locking, only shaves down the time that it's held. Also, technically, this change would make this validation-less mining :(\r\n- Your example uses TestBlockValidity :)",
                    "id": "MDEyOklzc3VlQ29tbWVudDI4MjUxNDQ5NQ==",
                    "publishedAt": "2017-02-25T21:41:15Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9858#issuecomment-282514495"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/3298484?v=4",
                        "login": "jameshilliard"
                    },
                    "body": "Getting an invalid template here should never happen unless there is a bug within bitcoind, this TestBlockValidity call is only an internal sanity check, my definition of validationless mining would be mining on top of a block that you haven't validated, this does not change that.\r\n\r\n@luke-jr \r\n\r\n- Not all pool software is capable of bypassing GBT, that requires implementing p2p networking in the stratum server which adds quite a bit of complexity.\r\n\r\n- My point is that CNB is in the critical path for validating mining, at least for stratum servers that don't implement p2p themselves.\r\n\r\n@theuni \r\n\r\n- My assumption is that if TestBlockValidity fails subsequent calls are also likely to fail.\r\n\r\n- Yes, removing TestBlockValidity does however significantly reduce CreateNewBlock times from my testing, I'm assuming locking is a major factor since TestBlockValidity introduces a large amount of variance in CreateNewBlock times as well.",
                    "id": "MDEyOklzc3VlQ29tbWVudDI4MjUxODI5NA==",
                    "publishedAt": "2017-02-25T22:48:25Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9858#issuecomment-282518294"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/1095675?v=4",
                        "login": "luke-jr"
                    },
                    "body": "`blocknotify` should be sufficient to begin empty-block mining. But perhaps it would make sense to have bitcoind's GBT itself handle the empty template?",
                    "id": "MDEyOklzc3VlQ29tbWVudDI4MjUyNjI0MQ==",
                    "publishedAt": "2017-02-26T01:49:55Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9858#issuecomment-282526241"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/3298484?v=4",
                        "login": "jameshilliard"
                    },
                    "body": "@luke-jr Well you would have to cache some things like nversion if you just use blocknotify right? CreateNewBlock itself seems to be quite fast without TestBlockValidity so I'm not sure sending empty blocks out first is worth the extra bandwidth/complexity.",
                    "id": "MDEyOklzc3VlQ29tbWVudDI4MjUyODA2NA==",
                    "publishedAt": "2017-02-26T02:37:23Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9858#issuecomment-282528064"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/649246?v=4",
                        "login": "TheBlueMatt"
                    },
                    "body": "I'm totally in favor of removing TBV from the critical-path, but only if we trigger some background checker that will print to debug.log (and probably assert) if it returned a template it later found to be invalid.",
                    "id": "MDEyOklzc3VlQ29tbWVudDI4MjU3NzI2OA==",
                    "publishedAt": "2017-02-26T18:46:33Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9858#issuecomment-282577268"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/3298484?v=4",
                        "login": "jameshilliard"
                    },
                    "body": "@TheBlueMatt I made an [attempt](https://github.com/bitcoin/bitcoin/pull/7167) to do that before but the way I was doing it there didn't look viable.",
                    "id": "MDEyOklzc3VlQ29tbWVudDI4MjU4MDY5NA==",
                    "publishedAt": "2017-02-26T19:35:14Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9858#issuecomment-282580694"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/548488?v=4",
                        "login": "sipa"
                    },
                    "body": "I believe that @jameshilliard assumption that if CNB ever produces an invalid block, it is likely that it will keep doing so is right, and if so, the only benefit of running TBV is better reporting (so developers can fix the bug), not actually changing what is being mined. The better reporting may be useful, as miners may use GBT under circumstances that aren't covered by any tests during rcs, but it seems we have a pretty good track record the last few releases.\r\n\r\nI think there are two reasonable approaches:\r\n* Run a background thread that occasionally runs TBV on the CNB results. It doesn't have to test everything, and it can do so with a delay. Unfortunately, TBV's locking of cs_main may interfere with other CNB calls.\r\n* Make the TBV call optional like in #9859, and leave it on in unit and RPC tests, but off by default in production.",
                    "id": "MDEyOklzc3VlQ29tbWVudDI4MjU4OTQ2NQ==",
                    "publishedAt": "2017-02-26T21:33:31Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9858#issuecomment-282589465"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/3298484?v=4",
                        "login": "jameshilliard"
                    },
                    "body": "@sipa I think just making it optional is probably best, doing block proposals within the stratum server would be good since it can be done completely outside of the critical path, although I'm not sure how easy it would be to add support for that in the various stratum servers themselves. I like cory's faux-mining for testing a little more at least for non-production testing since it can be done without modification of the stratum server.",
                    "id": "MDEyOklzc3VlQ29tbWVudDI4MjU5MTMxMw==",
                    "publishedAt": "2017-02-26T21:58:04Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9858#issuecomment-282591313"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/858454?v=4",
                        "login": "gmaxwell"
                    },
                    "body": "I don't think making it optional is useful.  It will almost never be run where it needs to be run. And more options mean more mostly untested code that will catch fire later when someone does happen to use it.\r\n\r\n> Run a background thread that occasionally runs TBV on the CNB results. It doesn't have to test everything, and it can do so with a delay. Unfortunately, TBV's locking of cs_main may interfere with other CNB calls.\r\n\r\nWe should be able to get the locking into a state where it can return a cached template without taking cs_main.  In which case, running the test immediately after returning a result will run it during a time when its mostly only returning a cached result. Moreover the test could be made interruptible, in case a new block arrives-- this is also important for BIP23 block proposal testing.\r\n\r\nI do disagree that mining an invalid block is equal to or better than a delay:  A shutdown lets you fall over to another daemon, a shutdown tells you something is broken so you fix it rather than days of fake mining, and a shutdown also prevents you from making blocks that cause false confirmations for SPV clients propagated around broken nodes that broadcast without validating.  -- but the whole question should be moot, since we should be able to perform this check without adding any meaningful delay.\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDI4Mjg5NDE3OA==",
                    "publishedAt": "2017-02-27T23:41:41Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9858#issuecomment-282894178"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/3298484?v=4",
                        "login": "jameshilliard"
                    },
                    "body": "@gmaxwell My thoughts are that this should probably be only used for testing and not in production under normal circumstances.\r\n\r\nIn regards to failover I would expect that a bug in CNB would likely be deterministic and cause failures on all other pool nodes as well that run similar mempool policy.",
                    "id": "MDEyOklzc3VlQ29tbWVudDI4MjkwNDA0OA==",
                    "publishedAt": "2017-02-28T00:37:47Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/9858#issuecomment-282904048"
                }
            ],
            "totalCount": 10
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "7555922a6680fdfa0c85108041ce3cbd1090855b"
                    }
                }
            ],
            "totalCount": 1
        },
        "createdAt": "2017-02-25T19:57:33Z",
        "deletions": 25,
        "id": "MDExOlB1bGxSZXF1ZXN0MTA3OTc0NTEx",
        "labels": {
            "nodes": [
                {
                    "color": "c7def8",
                    "id": "MDU6TGFiZWwxMTgzNzg5NjA=",
                    "name": "Mining"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "CONFLICTING",
        "mergedAt": null,
        "number": 9858,
        "state": "OPEN",
        "title": "remove TestBlockValidity from CreateNewBlock critical path",
        "updatedAt": "2017-12-30T11:11:00Z"
    },
    {
        "additions": 7002,
        "author": {
            "avatarUrl": "https://avatars2.githubusercontent.com/u/7133040?v=4",
            "login": "ryanofsky",
            "url": "https://github.com/ryanofsky"
        },
        "body": "**This is based on #10973.** The non-base commits are:\r\n\r\n- [`88596f3eb1` Add support for Cap'n Proto in autotools build setup](https://github.com/bitcoin/bitcoin/pull/10102/commits/88596f3eb15967616a00b65660d78e297ad62b82)\r\n- [`6ef023a8c0` Multiprocess bitcoin](https://github.com/bitcoin/bitcoin/pull/10102/commits/6ef023a8c0486d4c9d843b119c43cab475188261)\r\n\r\n---\r\n\r\n**Current status:** This PR is a work in progress. Current code is in the middle of being reorganized and is messy and basically non functional. To try an earlier verison of the PR which is functional, use the [ipc.21](https://github.com/ryanofsky/bitcoin/commit/1f3b21b0b07e194c55c4cd0f0a6ed6756cf4e1c8) tag, which is also linked below.\r\n\r\n---\r\n\r\nThis PR adds an `--enable-multiprocess` configure option which will build new `bitcoin-node`, `bitcoin-wallet`, and `bitcoin-gui` executables with node, wallet, and gui functionality isolated into different processes. See [doc/multiprocess.md](https://github.com/ryanofsky/bitcoin/tree/pr/ipc/doc/multiprocess.md) for details.\r\n\r\nThis change adds an [`Init`](https://github.com/ryanofsky/bitcoin/blob/pr/ipc/src/interfaces/init.h) interface that lets wallet and node interfaces be spawned in subprocesses and communicated with over a socketpair. You can see the IPC messages going back and forth by setting environment variable `IPC_DEBUG=1` before launching `bitcoin-gui` or `bitcoin-node`.) Followup PR will add `-ipcbind` and `-ipcconnect` options that allow more flexibility in how processes are connected.\r\n\r\nThe IPC protocol used is Cap'n Proto, but this could be swapped out for another protocol. Cap'n Proto types and libraries are only accessed in the [src/interfaces/capnp/](https://github.com/ryanofsky/bitcoin/tree/pr/ipc/src/interfaces/capnp) directory, and not in any public headers or other parts of bitcoin code.\r\n\r\n---\r\n\r\nSlides from a presentation describing the change are available on: [google drive](https://docs.google.com/presentation/d/1AeJ-7gD-dItUgs5yH-HoEzLvXaEWe_2ZiGUUxYIXcws/edit). Demo code used in the presentation was from an older version this PR (tag [ipc.21](https://github.com/ryanofsky/bitcoin/releases/tag/pr%2Fipc.21), [commits](https://github.com/ryanofsky/bitcoin/compare/master...pr/ipc.21)).",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "Oh. Nice.\r\nI expected much more code to achieve this.\r\n\r\nConceptually I think this goes into the right direction, though, I'm not sure if this could end up being only a temporary in-between step that may end up being replaced.\r\nBecause, it may be more effective to split the Qt/d part completely and let them communicate over the p2p protocol (SPV and eventually RPC). More effective because it would also allow to run Qt independent from a trusted full node (if not trusted, use mechanism like full block SPV, etc.).\r\n\r\nThough, I'm aware that capnp has an RPC layer. But this would introduce another API (RPC / ZMQ / REST and then capnp RPC).\r\n\r\nI'm not saying this is the wrong direction, but we should be careful about adding another API.\r\n\r\nThree questions:\r\n- Would the performance be impractical if we would try to use the existing RPC API?\r\n- Could the capnp approach (or lets say IPC approach) be designed as a (or the) new API (\"JSON RPC v2\" and replacement for ZMQ)?\r\n- Does capnp provide a basic form of authentication? Would that even be required?",
                    "id": "MDEyOklzc3VlQ29tbWVudDI4OTY4ODY4OQ==",
                    "publishedAt": "2017-03-28T07:38:14Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10102#issuecomment-289688689"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/7133040?v=4",
                        "login": "ryanofsky"
                    },
                    "body": "> Would the performance be impractical if we would try to use the existing RPC API?\r\n\r\nReason this is currently using capnp is not performance but convenience. Capnp provides a high level API that supports bidirectional, synchronous, and asynchronous calls out of the box and allows me to easily explore implementation choices in bitcoin-qt without having to worry about low level protocol details, write a lot of parameter packing/unpacking boilerplate, and implement things like long polling.\r\n\r\nCapnp could definitely be replaced by JSON-RPC, though, and I've gone out of my way to support this by not calling capnp functions or using capnp types or headers anywhere except the `ipc/server.cpp` and `ipc/client.cpp` files. No code outside of these two files has to change in order to move to a different protocol.\r\n\r\n> Could the capnp approach (or lets say IPC approach) be designed as a (or the) new API (\"JSON RPC v2\" and replacement for ZMQ)?\r\n\r\nIt could, but I'm going out of my way right now specifically NOT to add yet another bitcoind public API that could add to the JSON-RPC/REST/ZMQ/-blocknotify/-walletnotify confusion. The IPC here doesn't happen over a TCP port or even a unix socket path but over an anonymous [socketpair](http://man7.org/linux/man-pages/man2/socketpair.2.html) using an inherited file descriptor. (I haven't done a windows implementation yet but [similar things](https://msdn.microsoft.com/en-us/library/ms683463(v=VS.85).aspx) are possible there).\r\n\r\nI'm trying to make the change completely internal for now and transparent to users. Bitcoin-qt should still be invoked the same way and behave the same way as before, starting its own node and wallet. It just will happen to do this internally now by forking a bitcoind executable rather than calling in-process functions. \r\n\r\nThis change will not add any new command line or GUI options allowing bitcoin-qt to connect to bitcoinds other than the one it spawns internally. Adding these features and supporting new public APIs might be things we want to do in the future, but they would involve downsides and complications that I'm trying to avoid here.\r\n\r\n> Does capnp provide a basic form of authentication? Would that even be required?\r\n\r\nIt's not required here because this change doesn't expose any new socket or endpoint, but it could be supported. Capnp's security model is based on [capabilities](https://capnproto.org/rpc.html#security), so to add authentication, you would just define a factory function that takes credentials as parameters and returns a reference to an object exposing the appropriate functionality.\r\n\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDI4OTcyMTc3Nw==",
                    "publishedAt": "2017-03-28T09:58:15Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10102#issuecomment-289721777"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/858454?v=4",
                        "login": "gmaxwell"
                    },
                    "body": "I'm really uncomfortable with using capn proto, but fine enough for some example testing stuff!\r\n\r\nI'm a fan of this general approach (ignoring the use of capn proto) and I think we should have done something like it a long time ago.",
                    "id": "MDEyOklzc3VlQ29tbWVudDI4OTg0MjY0Ng==",
                    "publishedAt": "2017-03-28T17:23:18Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10102#issuecomment-289842646"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/413395?v=4",
                        "login": "dcousens"
                    },
                    "body": "strong concept ACK, but if is feasible, would prefer usage of the existing RPC instead of capn'proto",
                    "id": "MDEyOklzc3VlQ29tbWVudDI4OTkyNzIwNQ==",
                    "publishedAt": "2017-03-28T22:39:49Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10102#issuecomment-289927205"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "Concept ACK, nice.\r\n\r\n> I'm really uncomfortable with using capn proto, but fine enough for some example testing stuff!\r\n\r\nPlease, let's not turn this into a discussion of serialization and RPC frameworks. To be honest that's been one of the things that's putting me off of doing work like this. If you want to suggest what framework to use, please make a thorough investigation of what method would be best to use for our specific use case, and propose that, but let's not start throwing random \"I'm not comfortable with X\" comments.\r\n\r\nWe already use google protocol buffers in the GUI for payment requests to in a way that would be the straightforward choice. I'm also happy you didn't choose some XML-based abomonation or ASN.1. But anyhow, not here. For this pull it's fine to use whatever RPC mechanism you're comfortable with. \r\n\r\n> This change will not add any new command line or GUI options allowing bitcoin-qt to connect to bitcoinds other than the one it spawns internally. \r\n\r\nI'm also perfectly fine with keeping the scope here to \"communication between GUI and bitcoind\". This is not the place for introducing another external interface. Might be an option at some point in the future, but for now process isolation is enough motivation.",
                    "id": "MDEyOklzc3VlQ29tbWVudDI4OTk5OTk4MA==",
                    "publishedAt": "2017-03-29T06:53:25Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10102#issuecomment-289999980"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/7133040?v=4",
                        "login": "ryanofsky"
                    },
                    "body": "Updated and rebased 0ca73bc13c3457cd5c3244abfa9fa586d9137117 -> 5e28c2fcc2757479d29ca83cd3256584ab908e48 ([pr/ipc.1](https://github.com/ryanofsky/bitcoin/commits/pr/ipc.1) -> [pr/ipc.3](https://github.com/ryanofsky/bitcoin/commits/pr/ipc.3)) to avoid a conflict. Main addition is an expanded [src/ipc/README.md](https://github.com/ryanofsky/bitcoin/tree/pr/ipc/src/ipc/README.md) file.\r\n\r\nAgain it would be very helpful to have some code review for the main commit (5e28c2fcc2757479d29ca83cd3256584ab908e48 \"Add barebones IPC framework to bitcoin-qt and bitcoind\"). Giving feedback on the README file would be an easy place to start.",
                    "id": "MDEyOklzc3VlQ29tbWVudDI5MjY0ODQ4NA==",
                    "publishedAt": "2017-04-07T20:51:14Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10102#issuecomment-292648484"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/7133040?v=4",
                        "login": "ryanofsky"
                    },
                    "body": "Updated 5e28c2fcc2757479d29ca83cd3256584ab908e48 -> dda375662d060ce42b5113247301e0289584e14d ([pr/ipc.3](https://github.com/ryanofsky/bitcoin/commits/pr/ipc.3) -> [pr/ipc.4](https://github.com/ryanofsky/bitcoin/commits/pr/ipc.4))\r\n\r\nThis implements two suggestions from @JeremyRubin:\r\n\r\n* It includes a small commit demonstrating what it looks like to add a single new method to the API:\r\n[`dda3756 Add ipc::Node::getNodeCount method`](https://github.com/bitcoin/bitcoin/commit/dda375662d060ce42b5113247301e0289584e14d). This should help give a clearer picture of the layers involved in implementing an IPC call.\r\n\r\n* Instead of adding Cap'n Proto code and modifying Qt code in a single commit, it includes a new early commit ([`1407a2b Add ipc::Node and ipc::Wallet interfaces`](https://github.com/bitcoin/bitcoin/commit/1407a2bb0b0a3ab21ae374b58980bb0dc53b12c5) that introduces new [`src/ipc/interfaces.h`](https://github.com/ryanofsky/bitcoin/blob/pr/ipc/src/ipc/interfaces.h)  and [`src/ipc/interfaces.cpp`](https://github.com/ryanofsky/bitcoin/blob/pr/ipc/src/ipc/interfaces.cpp) files and ports Qt code to use them without any Cap'n Proto stuff. This shows the separation between Qt updates and IPC implementation details better and makes it easier to see how a different IPC system could be substituted in for Cap'n Proto. This commit could even be made into a separate PR.\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDI5MzA5NjgyMQ==",
                    "publishedAt": "2017-04-10T22:25:37Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10102#issuecomment-293096821"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/7133040?v=4",
                        "login": "ryanofsky"
                    },
                    "body": "@laanwj pointed out in IRC (https://botbot.me/freenode/bitcoin-core-dev/msg/83983170/) that this change could help make the GUI more responsive by preventing Qt event processing from getting blocked, which currently happens in the monolithic `bitcoin-qt` when the main GUI thread makes a call to a slow libbitcoin function, or waits a long time for a `cs_main` or `cs_wallet` lock.\r\n\r\nAt the time in IRC, I didn't think this change could directly help gui responsiveness, because although it does move libbitcoin and LOCK calls out of the `bitcoin-qt` process and into the `bitcoind` process, it just replaces these calls with blocking IPCs that make the GUI equally unresponsive when they tie up the main GUI thread.\r\n\r\nHowever, this doesn't have to be the case. The place where IPC calls currently block waiting for responses is the `return promise.get_future().get();` line in `ipc::util::Call::send` method here: https://github.com/ryanofsky/bitcoin/blob/pr/ipc.4/src/ipc/util.h#L166\r\n\r\nBut the `std::promise` object used in that line could easily be replaced with a Qt-aware promise object that processes GUI events while the promise is blocked. (The Qt-aware promise implementation would check if it is being used on the main GUI thread, and if so use a [local Qt event loop](https://doc.qt.io/archives/qq/qq27-responsive-guis.html#waitinginalocaleventloop) substituting\r\n`loop.exec()` for `std::future::get()` and `loop.quit()` for `std::promise::set_value()`.)\r\n\r\nThis would add more overhead and make the average IPC call a little slower. But it would avoid situations where an unexpectedly slow IPC call ties up the whole gui, so it might be worth doing anyway.",
                    "id": "MDEyOklzc3VlQ29tbWVudDI5NDA5NDYxMA==",
                    "publishedAt": "2017-04-14T05:44:28Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10102#issuecomment-294094610"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "@ryanofsky Yes, integrating the IPC event loop and Qt event loop would help responsiveness.\r\nThough I remember there were some issues in some cases with recursively calling into the Qt event loop (e.g. things need to be reentrant, deleteLater stuff runs earlier than expected, to keep in mind).",
                    "id": "MDEyOklzc3VlQ29tbWVudDI5NDExMTU2Ng==",
                    "publishedAt": "2017-04-14T08:00:38Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10102#issuecomment-294111566"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/548488?v=4",
                        "login": "sipa"
                    },
                    "body": "@ryanofsky I'm not familiar with Qt or capnproto, but I don't understand what the move to a different process has to do with making things less blocking. Any changes in architecture that would result in less blocks should equally be possible within the same process.\r\n\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDI5NDQ3NDYyMA==",
                    "publishedAt": "2017-04-17T12:23:13Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10102#issuecomment-294474620"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/548488?v=4",
                        "login": "sipa"
                    },
                    "body": "> This change will not add any new command line or GUI options allowing bitcoin-qt to connect to bitcoinds other than the one it spawns internally. Adding these features and supporting new public APIs might be things we want to do in the future, but they would involve downsides and complications that I'm trying to avoid here.\r\n\r\nI don't understand the goal here. On itself, there seems little benefit in separating the GUI and the rest into separate processes if those two processes still depend on each other (this is different from separating the wallet from the node, for example, as there as security considerations there... but for that use case the easiest approach seems to just have a lightweight mode and running two instances).\r\n\r\nI think it would be awesome if bitcoin-qt could be started and stopped independently to control a bitcoind process in the background, but if that's not the intent, what is the purpose?",
                    "id": "MDEyOklzc3VlQ29tbWVudDI5NDQ3NTMxNw==",
                    "publishedAt": "2017-04-17T12:29:23Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10102#issuecomment-294475317"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/7133040?v=4",
                        "login": "ryanofsky"
                    },
                    "body": "> Any changes in architecture that would result in less blocks should equally be possible within the same process.\r\n\r\nLet's say there are 50 places where bitcoin-qt calls a libbitcoin function. That means there are 50 places to update if you want bitcoin-qt handle to events while the function calls are executing. WIth the IPC framework, there is only one place you have to update instead of 50 places (if you want to do this).\r\n\r\n> On itself, there seems little benefit in separating the GUI and the rest into separate processes if those two processes still depend on each other.\r\n\r\nOk, so you think the benefits are small, and I think they are more significant.\r\n\r\n> I think it would be awesome if bitcoin-qt could be started and stopped independently to control a bitcoind process in the background,\r\n\r\nThis is trivial once bitcoin-qt is controlling bitcoind across a socket. I'm just implementing the socket part first, without introducing new UI features for now.",
                    "id": "MDEyOklzc3VlQ29tbWVudDI5NDQ5MzQ2Nw==",
                    "publishedAt": "2017-04-17T14:15:47Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10102#issuecomment-294493467"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/548488?v=4",
                        "login": "sipa"
                    },
                    "body": "> > I think it would be awesome if bitcoin-qt could be started and stopped independently to control a bitcoind process in the background,\r\n>\r\n> This is trivial once bitcoin-qt is controlling bitcoind across a socket. I'm just implementing the socket part first, without introducing new UI features for now.\r\n\r\nOk, that's what I was missing. It wasn't clear to me that this was a just first step towards a more useful separation.",
                    "id": "MDEyOklzc3VlQ29tbWVudDI5NDU1NzM0OQ==",
                    "publishedAt": "2017-04-17T18:48:29Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10102#issuecomment-294557349"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/7133040?v=4",
                        "login": "ryanofsky"
                    },
                    "body": "As of 8f78f085976bcb0f9093f0b1b4c3c65110ec44aa ([pr/ipc.7](https://github.com/ryanofsky/bitcoin/commits/pr/ipc.7)), this change is much more complete & functional. You can also now monitor the IPC traffic going back and forth between `bitcoin-qt` and `bitcoind` by setting the `IPC_DEBUG` environment variable (`export IPC_DEBUG=1`)\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDI5Nzc5MjMxMg==",
                    "publishedAt": "2017-04-27T18:01:04Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10102#issuecomment-297792312"
                }
            ],
            "totalCount": 14
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "14b677877414ee4e48b46590ed41f5dbfaec6b8d"
                    }
                }
            ],
            "totalCount": 27
        },
        "createdAt": "2017-03-27T21:48:26Z",
        "deletions": 742,
        "id": "MDExOlB1bGxSZXF1ZXN0MTEyODQ2NDMx",
        "labels": {
            "nodes": [
                {
                    "color": "02d7e1",
                    "id": "MDU6TGFiZWwxMzU5NDY=",
                    "name": "GUI"
                },
                {
                    "color": "0052cc",
                    "id": "MDU6TGFiZWw5ODI3OTE3Nw==",
                    "name": "RPC/REST/ZMQ"
                }
            ],
            "totalCount": 2
        },
        "mergeable": "CONFLICTING",
        "mergedAt": null,
        "number": 10102,
        "state": "OPEN",
        "title": "[experimental] Multiprocess bitcoin",
        "updatedAt": "2018-04-17T19:26:36Z"
    },
    {
        "additions": 261,
        "author": {
            "avatarUrl": "https://avatars0.githubusercontent.com/u/886523?v=4",
            "login": "JeremyRubin",
            "url": "https://github.com/JeremyRubin"
        },
        "body": "edit 0: Updated to reflect updates mentioned in https://github.com/bitcoin/bitcoin/pull/10145#issuecomment-291632820\r\n\r\nThis PR separates ProcessMessage into two functions, ContextualProcessMessage and ~ProcessMessage~ _Process*Message_. This helps with readability, verifiability, and maintainability of the code.\r\n\r\nContextualProcessMessage generates a list of context dependent \"whitelists\", all of which must pass for the incoming message before a call to ProcessMessage may be made. If the whitelists fail, the code that follows should be identical to the previous behavior. The choice of whitelists over blacklists is because it is better to explicitly enable the behaviors desired, rather than to try to block the potential bad features (e.g., adding something unsafe and new won't be permitted in unstudied contexts). This design should be extensible for adding new features (~up to 64 netmsgs total~ unlimited network messages) as well as new contexts (easy to add new whitelists). There should be very little overhead to check these whitelists as it is all ~bitwise~ _bool array lookups_.\r\n\r\n~ProcessMessage now uses an enum to switch to~ _Dispatch is now done using a std::map lookup to get_ the appropriate handler, and is semi \"stateless\" _(the map is const)_. This makes it easier to verify the code and make dispatch more modular.\r\n\r\n\r\nI haven't benchmarked that the conversion from string->~enum~_std::pair<handler_t, whitelist_index>_ has any performance implication, negative or positive. In theory this code could be faster given fewer branch mispredictions due to the ~switch~_function pointer call_. Another PR could improve the lookup algorithm ~(trivially, inlining getAllNetMessageTypes might help the compiler a lot)~, but unless it is exotic it should be compatible with this design _by replacing the map with the desired scheme_. ~I didn't think there was something obviously faster than the linear lookup, because n is small.~ _A std::map lookup should be fairly fast, but perhaps a custom map could be faster._\r\n\r\n~The correctness of this code is dependent on NetMsgTypeEnum::tag and allNetMessageTypes having the same index order. It would be nice to verify this property at compile time, which should be possible with some recursive constexpr static_assert magic. The default return of ProcessNewMessage is now also false, because the last return is unreachable.~\r\n\r\nSee #9608 and https://github.com/theuni/bitcoin/commit/f1e4e281e3f1eb884f8010ac941c82752174bdbe for related work/alternatives.",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/858454?v=4",
                        "login": "gmaxwell"
                    },
                    "body": "I don't get the bitfield stuff here. Why?  It adds a lot of code with indirect effects, and means that we cannot use a perfect hash to set the enum value (e.g. stuck with a map of strings at best, though this code doesn't do that). ",
                    "id": "MDEyOklzc3VlQ29tbWVudDI5MTI5MTY3Mw==",
                    "publishedAt": "2017-04-03T22:23:32Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10145#issuecomment-291291673"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/417043?v=4",
                        "login": "theuni"
                    },
                    "body": "@gmaxwell I agree. I asked @JeremyRubin to check my logic in https://github.com/theuni/bitcoin/commit/f1e4e281e3f1eb884f8010ac941c82752174bdbe, and after reviewing, he wanted to take a stab at a more direct mapping for the initial filter.\r\n\r\nThis is an interesting approach, but I think this is much less clear than f1e4e281e3f1eb884f8010ac941c82752174bdbe, and it tangles the rules up with the enum values.",
                    "id": "MDEyOklzc3VlQ29tbWVudDI5MTI5NDcxOQ==",
                    "publishedAt": "2017-04-03T22:39:25Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10145#issuecomment-291294719"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/886523?v=4",
                        "login": "JeremyRubin"
                    },
                    "body": "It's actually trivial to make this work very well with a perfect hash and\r\nthis implementation doesn't add any network dependency on the order. If you\r\nhave a perfect hash available I could demonstrate :)\r\n\r\nThe bitwise stuff is the set of current policies. It's much more explicit\r\nabout which operations are allowed in which contexts compared to a list of\r\nconditionals. There might be a better way to aggregate those rules\r\ntogether, but those are the rules. Blacklists would be shorter (I used one\r\nfor the bloom stuff, now that I think of it), but it's generally easier to\r\naudit what is permitted rather than what is not.\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDI5MTI5NTA3Mg==",
                    "publishedAt": "2017-04-03T22:41:12Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10145#issuecomment-291295072"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/858454?v=4",
                        "login": "gmaxwell"
                    },
                    "body": "> If you have a perfect hash available \r\n\r\ngperf works in a pinch\r\n\r\ncat protocol.cpp | grep '^const char *' | cut -d'\"' -f2 | sort | gperf -lCcE\r\n\r\n> . It's much more explicit about which operations are allowed in which contexts compared to a list of conditionals.\r\n\r\n/Generally/ moving function preconditions far away from their code results in defects. When its something that applies basically universally (like the check for the version handshake finishing), then it can make sense... but I think having if (importing) return; at the top of a message handling function is a lot more maintainable than what is effectively an additional state machine.",
                    "id": "MDEyOklzc3VlQ29tbWVudDI5MTMwOTkzNQ==",
                    "publishedAt": "2017-04-03T23:16:55Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10145#issuecomment-291309935"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/886523?v=4",
                        "login": "JeremyRubin"
                    },
                    "body": "> cat protocol.cpp | grep '^const char *' | cut -d'\"' -f2 | sort | gperf -lCcE\r\n\r\nAs promised, perfect hashing patch in https://github.com/JeremyRubin/bitcoin/tree/perfect_hashing (a little bit less clean than it could be, because I didn't want to modify protocol.h, but you get the idea). \r\n\r\nIt's like 8 lines of code. At initialize you just fill up a translation table to map the perfect hashes. Note that I slightly tweaked the API of the gperf hash to return the hash key and max+1 on fail to make this design easier.\r\n\r\nWhat's nice about the translation table is it could be modified to store the function pointers to the handlers directly as well, skipping the jump table/switch.\r\n\r\n> /Generally/ moving function preconditions far away from their code results in defects. When its something that applies basically universally (like the check for the version handshake finishing), then it can make sense... but I think having if (importing) return; at the top of a message handling function is a lot more maintainable than what is effectively an additional state machine.\r\n\r\nI'm mixed on this one. I agree that having preconditions closer to the code can be good; but it's also good to have a non-exposed function which only takes sanitized inputs, and do the sanitizing elsewhere. I agree with the state machine comment, but that was the existing state of the code: there is currently an implicit state machine on what order messages were allowed to come in. This PR makes it more explicit; if you want to make it even more explicit (e.g., ProtocolStateMachine class I think that would be great :)). This at least makes it really easy to do whatever you want with the actual dispatch as it is state independent.\r\n\r\nI don't think it's more maintainable to have repeated preconditions throughout the code, because then it is easier to forget to check a precondition in a handler and you repeat precondition checking code, leading to more opportunity for error. It's a trade off.\r\n\r\nIt is possible to re-check these preconditions if critical, which would maybe be \"the best/worst\" of both worlds.",
                    "id": "MDEyOklzc3VlQ29tbWVudDI5MTM3NDAwNw==",
                    "publishedAt": "2017-04-04T02:12:05Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10145#issuecomment-291374007"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "A serious drawback of perfect hashing is that it makes it hard to add message types, especially in PRs or third-party patches. It reduces flexibility.\r\n\r\nUnless it can be clearly shown from performance results that matching a small string in e.g. a sorted table or run-time constructed hash is really a performance sink, and given the small number of small messages I would be really surprised (12 bytes isn't even two 64-bit words!), I'd prefer if adding a message type was just adding a line. \r\n\r\n> ProtocolStateMachine \r\n\r\nIf you go this way, I don't think there should be one protocol state machine. Different concerns (e.g. initial negotiation, handling pings, handling transactions, handling blocks, handling filters) could be separate state machines that handle groups of messages (this was @sipa's idea). Creating a separate handler class for every message type would be typical OOP overkill, but for separate concerns I think it'd make sense and would help untangle the current labyrinth.",
                    "id": "MDEyOklzc3VlQ29tbWVudDI5MTQwNTU5NA==",
                    "publishedAt": "2017-04-04T06:27:52Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10145#issuecomment-291405594"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/548488?v=4",
                        "login": "sipa"
                    },
                    "body": "I think using a perfect hash is unnecessary overkill here.",
                    "id": "MDEyOklzc3VlQ29tbWVudDI5MTQxMzQxNg==",
                    "publishedAt": "2017-04-04T07:07:29Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10145#issuecomment-291413416"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/886523?v=4",
                        "login": "JeremyRubin"
                    },
                    "body": "Ultimately if we want to check preconditions, it can't hurt to check some general preconditions in ContextualProcessMessage which apply to either the ProcessMessage state machine (e.g., that only one version may be received) or affect more than one handler. Individual handlers that rely on global preconditions should also re-check these global preconditions to harden them against a failure in ContextualProcessMessage.\r\n\r\nI pushed up a better version. \r\n\r\nMore Modular:\r\n  - there is no external dependency on the value of message types in the enum\r\n  - Each handler is a separate function (this duplicates/replaces some of @jtimon's work)\r\n\r\nCleaner:\r\n  - The whitelists are now a std::array<bool, ...> rather than (previously) a uint64_t, so no masking just indexing\r\n  - Identifiers are renamed to be a bit more clear\r\n  - whitelists are now separated into global and connection specific\r\n  - diff is easier to read\r\n\r\nMore Extensible:\r\n  - The whitelists are now a std::array<bool, ...> rather than (previously) a uint64_t, so no refactoring needed to have more than 64 messages. Adding new whitelists is also easier/cleaner.\r\n  - The use of the function pointers/whitelist arrays makes future work easier, including having per-node handler tables/whitelists (e.g., if a client says it is SPV disable certain operations).\r\n\r\n\r\nold version exists at https://github.com/jeremyrubin/bitcoin/tree/netprocessing_enum_backup for reference.\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDI5MTYzMjgyMA==",
                    "publishedAt": "2017-04-04T21:09:50Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10145#issuecomment-291632820"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1008458?v=4",
                        "login": "jtimon"
                    },
                    "body": "I only looked fast at the changes and read the rest of the comments, but this does way more than #9608 , even if #9608 would rebase on top of https://github.com/theuni/bitcoin/commit/f1e4e281e3f1eb884f8010ac941c82752174bdbe (which at a glance look like something good to do before #9608, but I haven't reviewed it deeply because I'm not that familiar with the network code).\r\n\r\n#9608 is very easy to review and trivial to rebase (or re-write) and personally I think it makes the network code easier to read for people like me (perhaps combined with https://github.com/theuni/bitcoin/commit/f1e4e281e3f1eb884f8010ac941c82752174bdbe even more, I haven't tried combining them). In contrast, it seems like this PR would make harder for me to read at a glance (or maybe not, or maybe it is still worth it, I honestly don't know). Although I've written #9608 (which as said is trivial to write IMO, just a little bit painful [could have been lesss painful if I still used eclipse http://help.eclipse.org/neon/index.jsp?topic=%2Forg.eclipse.jdt.doc.user%2FgettingStarted%2Fqs-ExtractMethod.htm ]), I don't feel very capacitated to review this PR or even https://github.com/theuni/bitcoin/commit/f1e4e281e3f1eb884f8010ac941c82752174bdbe which looks much simpler.\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDI5MTkyMjQyMA==",
                    "publishedAt": "2017-04-05T16:44:17Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10145#issuecomment-291922420"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/886523?v=4",
                        "login": "JeremyRubin"
                    },
                    "body": "rebased to 1b389b0",
                    "id": "MDEyOklzc3VlQ29tbWVudDMyNzMzMjI4Mw==",
                    "publishedAt": "2017-09-05T23:34:27Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10145#issuecomment-327332283"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/417043?v=4",
                        "login": "theuni"
                    },
                    "body": "I've thought about this a good bit lately, sorry for the delayed response.\r\n\r\nAfter rewriting this about a dozen different ways now, I'm now convinced that the approach in #9608 is the way to go.\r\n\r\nA dispatcher with registered functions and a state checker (like you've done here, and like I attempted as well) seems like the obviously correct approach, but once implemented, it's far less straightforward than the simplistic #9608.\r\n\r\nWe can avoid some duplication and keep some of the whitelist functionality here with a few helper functions like CanProcessWhileImporting(command).\r\n\r\nA dumb if/then/else parser seems icky, but I think it's the least likely to cause us issues in the future :(",
                    "id": "MDEyOklzc3VlQ29tbWVudDMzMTU3NDQzMQ==",
                    "publishedAt": "2017-09-22T22:25:05Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10145#issuecomment-331574431"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/886523?v=4",
                        "login": "JeremyRubin"
                    },
                    "body": "> A dumb if/then/else parser seems icky, but I think it's the least likely to cause us issues in the future :(\r\n\r\nCan you clarify the kinds of future issues you're worried about? I think something like #9608 is more likely to cause issues. I think verifying correctness of changes to the processing logic is more complicated under #9608. I'd love to understand what other future considerations you're making though.\r\n\r\n\r\n> A dispatcher with registered functions and a state checker (like you've done here, and like I attempted as well) seems like the obviously correct approach, but once implemented, it's far less straightforward than the simplistic #9608.\r\n\r\nI think that there may be a similarity bias. #9608 is more similar to the existing code, which makes it more straightforward. But my guess would be that #10145 is much easier to understand for anyone new to the project/seeing the code for the first time.\r\n\r\n\r\n<hr>\r\n\r\nPersonally, I think this design has the following benefits over the 'simpler' design:\r\n\r\n- Easier to 'prove correct' design/write exhaustive tests for\r\n- Extensible to per connection handler tables\r\n- Extensible to middlewares (e.g., a statistics middleware or maybe an encryption one)\r\n- Easier to add new message types & less chance of hitting an unforseen edge case\r\n- Lower latency dispatch\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDMzMTU4NzE3NA==",
                    "publishedAt": "2017-09-23T00:16:17Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10145#issuecomment-331587174"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/417043?v=4",
                        "login": "theuni"
                    },
                    "body": "> Can you clarify the kinds of future issues you're worried about? I think something like #9608 is more likely to cause issues. I think verifying correctness of changes to the processing logic is more complicated under #9608. I'd love to understand what other future considerations you're making though.\r\n\r\nBecause of all of the pesky interactions with our own state, we can only go so far in laying out the rules up-front.\r\n\r\nFor example, someone could be forgiven for assuming (based on the whitelist here) that INVs are processed while importing/reindexing, though in reality, there's only a tiny wallet interaction.\r\n\r\nSimilarly, IsInitialBlockDownload() isn't handled by the dispatcher, leaving it up to individual messages to decide. And that's as it should be, because each message will have their own criteria for that.\r\n\r\nSo if the rules can't be completely enumerated, we're only spreading them out and adding more places to check (or miss). The current behavior (and that of #9608) is to only check for proper handshake behavior outside of individual message parsing. That basically boils down to:\r\n```c++\r\nif (!node->nVersion && strCommand != NetMsgType::VERSION) return;\r\nelse if (!node->fSuccessfullyConnected && strCommand != NetMsgType::VERACK) return;\r\nDispatch(strCommand);\r\n```\r\n\r\nI might be convinced that a slimmed-down version of this that only performed ^^ checks before dispatching would be reasonable.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMzMjAwMTc2OQ==",
                    "publishedAt": "2017-09-25T20:26:18Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10145#issuecomment-332001769"
                }
            ],
            "totalCount": 13
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "1b389b0e7e57534a2a4b18a2fead70c24dd69ced"
                    }
                }
            ],
            "totalCount": 1
        },
        "createdAt": "2017-04-03T22:13:28Z",
        "deletions": 102,
        "id": "MDExOlB1bGxSZXF1ZXN0MTE0MDM0MTI2",
        "labels": {
            "nodes": [
                {
                    "color": "006b75",
                    "id": "MDU6TGFiZWw5ODI5ODAwNw==",
                    "name": "P2P"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "CONFLICTING",
        "mergedAt": null,
        "number": 10145,
        "state": "OPEN",
        "title": "Separate Contextual checks and handling & switch on enum in net_processing.cpp ",
        "updatedAt": "2017-12-30T11:11:02Z"
    },
    {
        "additions": 212,
        "author": {
            "avatarUrl": "https://avatars3.githubusercontent.com/u/1063656?v=4",
            "login": "jnewbery",
            "url": "https://github.com/jnewbery"
        },
        "body": "Adds an `updatepeer` RPC to update peer config and carry out actions on the peer by NodeId. At the moment, the actions are just changing whether the peer is whitelisted and whether the peer is a manual_connection (previously called an addnode). Future possible actions would be changing banscore, banning, and so on.\r\n\r\nThis is designed to be called using named arguments, but due to the RPC infrastructure can also be called with positional arguments (although doing so would be very fiddly).\r\n\r\nI've set the category to hidden for now. We may want to make the whitelisting behaviour more granular in future and I don't want to commit us to a public API that we can't then change.",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/417043?v=4",
                        "login": "theuni"
                    },
                    "body": "I'm not sure I like the idea of adding a command that changes the implied state of a peer via its attributes, rather than performing actions explicitly. The whitelist side-effects are especially hazy, see the brief discussion here: https://github.com/bitcoin/bitcoin/pull/10051#issuecomment-290622674.",
                    "id": "MDEyOklzc3VlQ29tbWVudDI5MjI1ODgyNg==",
                    "publishedAt": "2017-04-06T18:05:47Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10160#issuecomment-292258826"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "@jnewbery:\r\nCan you elaborate the use-case for `disconnect`? IMO `setban` provides a similar interface, with disconnecting & banning for a specific timespan (`1h`, etc.) because, a pure `disconnect` does not prevent the peer from a direct re-connect.",
                    "id": "MDEyOklzc3VlQ29tbWVudDI5MjI2NTAxOA==",
                    "publishedAt": "2017-04-06T18:26:31Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10160#issuecomment-292265018"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "Ah... an there is already the `disconnectnode` RPC call.",
                    "id": "MDEyOklzc3VlQ29tbWVudDI5MjI2NTM2Mw==",
                    "publishedAt": "2017-04-06T18:27:34Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10160#issuecomment-292265363"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1063656?v=4",
                        "login": "jnewbery"
                    },
                    "body": "@jonasschnelli see #2729 and #6271 for history of the `disconnectnode` RPC. It's also useful in testing to be able to control the topology of the test nodes.\r\n\r\n@theuni - I agree that whitelisting is a mess and should be broken out into bits for controlling individual behaviours. Hence my original comment: \"I have a feeling we may want to make the whitelisting behaviour more granular and I don't want to commit us to a public API that we can't then change.\" I was thinking of your comment in #10051 but couldn't find the reference.\r\n\r\n> the idea of adding a command that changes the implied state of a peer via its attributes, rather than performing actions explicitly\r\n\r\nI don't understand what this means in the context of whitelisting. The idea is to update the peer's whitelist behaviour. What would performing actions explicitly entail?",
                    "id": "MDEyOklzc3VlQ29tbWVudDI5MjMwNTIwMA==",
                    "publishedAt": "2017-04-06T20:22:37Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10160#issuecomment-292305200"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1063656?v=4",
                        "login": "jnewbery"
                    },
                    "body": "Closing in favour of #10143 for the immediate need (disconnect node by id), but I think this could still be a useful RPC in the future.",
                    "id": "MDEyOklzc3VlQ29tbWVudDI5MjY0OTc0Nw==",
                    "publishedAt": "2017-04-07T20:57:08Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10160#issuecomment-292649747"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1063656?v=4",
                        "login": "jnewbery"
                    },
                    "body": "Reopening with just the ability to update:\r\n\r\n- `fWhitelisted`\r\n- `m_manual_connection`\r\n\r\nThe net_processing functionality for the v0.15.0.2 PRs is disabled for manual connections, so this PR could be helpful for testing those changes.\r\n\r\n@sdaftuar ",
                    "id": "MDEyOklzc3VlQ29tbWVudDMzOTgxNzUwNw==",
                    "publishedAt": "2017-10-26T22:19:00Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10160#issuecomment-339817507"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1063656?v=4",
                        "login": "jnewbery"
                    },
                    "body": "Thanks for the review @promag . I've addressed all your comments.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMzOTk4MTM4MQ==",
                    "publishedAt": "2017-10-27T14:06:33Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10160#issuecomment-339981381"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/3020646?v=4",
                        "login": "NicolasDorier"
                    },
                    "body": "whitelisting via rpc?? BIG BIG concept ACK. I am excited. It will make configuration of services depending on Bitcoin Core RPC and P2P so much easier.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMzOTk4ODYzMA==",
                    "publishedAt": "2017-10-27T14:32:40Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10160#issuecomment-339988630"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1063656?v=4",
                        "login": "jnewbery"
                    },
                    "body": "@promag nits addressed in latest commit.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0MDA2NzUxOA==",
                    "publishedAt": "2017-10-27T19:43:49Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10160#issuecomment-340067518"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/3020646?v=4",
                        "login": "NicolasDorier"
                    },
                    "body": "I agree with @promag `updatepeer id setting value (setting value ...)` would be easier to extend later.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0MDg4MjgyMQ==",
                    "publishedAt": "2017-10-31T19:36:38Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10160#issuecomment-340882821"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1063656?v=4",
                        "login": "jnewbery"
                    },
                    "body": "> Nit, how about updatepeer id setting value (setting value ...)\r\n\r\nThis is a different scheme from all of the existing RPCs. I expect that there would need to be changes to the rpc framework to make this work.\r\n\r\nIt doesn't make sense to me have a completely different scheme for just this RPC method, since we already have named arguments.\r\n\r\nIf you disagree, perhaps you could implement the scheme you're talking about in a new branch?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0MDkyODU2MA==",
                    "publishedAt": "2017-10-31T22:40:00Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10160#issuecomment-340928560"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/3020646?v=4",
                        "login": "NicolasDorier"
                    },
                    "body": "@jnewbery how so? This is just 3 differents parameters of 3 strings.\r\n\r\nThe way you are doing now, if there is like 60 settings for one peer, we will have 60 parameters to this function. This does not seem very maintainable. In such case even  `updatewhitelist id true` would be better. We would have 60 functions, which is still better than 60 parameters.\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0MTI4NzM2Mw==",
                    "publishedAt": "2017-11-02T00:59:09Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10160#issuecomment-341287363"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
                        "login": "promag"
                    },
                    "body": "> This is designed to be called using named arguments, but due to the RPC infrastructure can also be called with positional arguments (although doing so would be very fiddly).\r\n\r\n@jnewbery you too agree that this is by design bad for positional arguments (considering the possible settings can be extended).\r\n\r\nAnother approach is to use something like `sendmany`: `updatepeer {\\\"setting\\\":value, ...}`.\r\n\r\nFWIW I already gave my utACK \ud83d\ude04 ",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0MTI4OTYyNg==",
                    "publishedAt": "2017-11-02T01:15:55Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10160#issuecomment-341289626"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1063656?v=4",
                        "login": "jnewbery"
                    },
                    "body": "@NicolasDorier \r\n\r\n> how so? This is just 3 differents parameters of 3 strings\r\n\r\nRight, but all RPCs currently support positional arguments, where the position of the argument determines its meaning. I don't necessarily agree that it's always appropriate, but having a single RPC that doesn't adhere to that scheme is confusing and inconsistent.\r\n\r\nUsing named arguments have been around for at least two releases now, so there's no need to use positional arguments at all.\r\n\r\nRebased",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0NDM1NDI3MA==",
                    "publishedAt": "2017-11-14T18:34:49Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10160#issuecomment-344354270"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/3020646?v=4",
                        "login": "NicolasDorier"
                    },
                    "body": "yeah we talked about it, I understand now why named args make sense. Concept ACK.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0NTY4NjE5Nw==",
                    "publishedAt": "2017-11-20T12:49:23Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10160#issuecomment-345686197"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1063656?v=4",
                        "login": "jnewbery"
                    },
                    "body": "@NicolasDorier - you've given this a *BIG BIG concept ACK*. Mind reviewing? :slightly_smiling_face: ",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0ODAwMTExMA==",
                    "publishedAt": "2017-11-29T21:25:10Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10160#issuecomment-348001110"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/3020646?v=4",
                        "login": "NicolasDorier"
                    },
                    "body": "Sure will review and test today.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0ODA1ODE5MQ==",
                    "publishedAt": "2017-11-30T01:57:19Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10160#issuecomment-348058191"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/3020646?v=4",
                        "login": "NicolasDorier"
                    },
                    "body": "@jnewbery do you need more help on this PR? I am really interested into seeing it merged.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0OTg4NjQ4OQ==",
                    "publishedAt": "2017-12-07T07:33:49Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10160#issuecomment-349886489"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1063656?v=4",
                        "login": "jnewbery"
                    },
                    "body": "@NicolasDorier: Sorry for dropping this - I've rebased on master and squashed all nits.\r\n\r\nI'm not sure about your suggestion for locking in updatepeer and fetching the `CNode`. `cs_vNodes` isn't currently locked anywhere outsdie `CConman`, which I think is a good property to maintain.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1MDAyNDkwOQ==",
                    "publishedAt": "2017-12-07T16:43:41Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10160#issuecomment-350024909"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/3020646?v=4",
                        "login": "NicolasDorier"
                    },
                    "body": "@jnewbery in this case, I would suggest to have a method on CConman `bool CConman::UpdateSetting(nodeid, str,value)` because there is high ratio of ceremonial monkey copy pasta code everytimes we will need to add one property here.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1MDE3NDU5Mg==",
                    "publishedAt": "2017-12-08T05:15:11Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10160#issuecomment-350174592"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/649246?v=4",
                        "login": "TheBlueMatt"
                    },
                    "body": "I'm still with @theuni on this one, not super happy with the idea of changing properties about peers that net_processing/net both consider \"constant\". Would prefer we add some (undocumented?) options to addnode (or a new RPC) which lets you control the flags of a peer as you create a connection.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1MDI5OTUzMg==",
                    "publishedAt": "2017-12-08T16:00:35Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10160#issuecomment-350299532"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1063656?v=4",
                        "login": "jnewbery"
                    },
                    "body": "@theuni's comment was:\r\n\r\n> the idea of adding a command that changes the implied state of a peer via its attributes, rather than performing actions explicitly\r\n\r\nI don't understand what's meant by 'performing actions explicitly', but I'm happy to modify this PR if there are concrete suggestions.\r\n\r\n> not super happy with the idea of changing properties about peers that net_processing/net both consider \"constant\"\r\n\r\nCan you articulate what makes you not happy? Being able to change the properties of a connection without having to delete/recreate that object is generally very useful, since cycling a connection has many side-effects. As far as I can see, the only stateful impact of starting with `fWhitelisted` rather than updating it later is this call to `AddLocal()` in `BindListenPort()`:\r\n\r\n```\r\n    if (addrBind.IsRoutable() && fDiscover && !fWhitelisted)\r\n        AddLocal(addrBind, LOCAL_BIND);\r\n```\r\n\r\nI can't see any other reason to be concerned about updating `fWhitelisted` dynamically.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1MDMyNTk0MA==",
                    "publishedAt": "2017-12-08T17:44:06Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10160#issuecomment-350325940"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/649246?v=4",
                        "login": "TheBlueMatt"
                    },
                    "body": "I might be slightly more OK with changing fWhitelisted on a peer after its up, as that may be useful \"in the real world\" outside of tests, but I'm super not a fan of changing manual_connection. One thing @theuni and I have talked about is being more aggressive about CNode representing a \"connection handle\" where its potentially allowed to have a few constant members which are general information about the connection, eg whether it was automatically or manually added, the remote address, etc.\r\nOne thing you might imagine is inserting a peer into a set/map (eg compact blocks HB mode peers set, the (implied) set of nPreferredDownload peers (which we currently track with fPreferredDownload, but we could actually take it as implication based on const values in CNode)) or otherwise performing (between-message-)stateful behavior on a peer based on such (constant) information about a connection. In each of these cases, having such constant information change out from under you could potentially introduce races/bugs.\r\n\r\n> cycling a connection has many side-effects.\r\n\r\nI'm not sure what side-effects there are that couldn't be reproduced on a new connection after cycling the connection. It ends up being an unrealistic test if you dont do that anyway. Maybe I'm just missing the motivation of cases that wouldnt be better tested by cycling a connection?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1MDM0MDE2OQ==",
                    "publishedAt": "2017-12-08T18:43:30Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10160#issuecomment-350340169"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1063656?v=4",
                        "login": "jnewbery"
                    },
                    "body": "> One thing you might imagine...\r\n\r\nYou're describing things that _may_ happen in future changes in abstract terms, particularly when you talk about between-message-stateful behaviour.\r\n\r\n`m_manual_connection` is certainly a better name than `fAddNode`, but I still don't think it really captures what the property means. Really it's something like 'preferred_peer' - it's a peer that we don't want to disconnect or punish for bad behaviour. How it was connected isn't really relevant. We may want to prefer a peer that has connected inbound to us, and we may want to connect outbound to a peer without preferring it. In that context, I think it makes sense to want to set this property manually after connection, without having to disconnect and go through the version-verack-getheaders-headers handshaking.\r\n\r\nThis is undoubtedly useful for testing, but I could also imagine it being useful, for example in a business that has more than one bitcoin node and wants to be able to manage their network topology.\r\n\r\nThinking forward a bit more, I think it'd also be beneficial to break out the whitelist behaviour to be more granular, and again be able to update those properties dynamically.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1MDM3ODYzOQ==",
                    "publishedAt": "2017-12-08T21:38:34Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10160#issuecomment-350378639"
                }
            ],
            "totalCount": 24
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "5e89e2411341f8d4f0076895a858cc845a253677"
                    }
                }
            ],
            "totalCount": 5
        },
        "createdAt": "2017-04-05T21:48:52Z",
        "deletions": 62,
        "id": "MDExOlB1bGxSZXF1ZXN0MTE0NDgwNDE5",
        "labels": {
            "nodes": [
                {
                    "color": "006b75",
                    "id": "MDU6TGFiZWw5ODI5ODAwNw==",
                    "name": "P2P"
                },
                {
                    "color": "0052cc",
                    "id": "MDU6TGFiZWw5ODI3OTE3Nw==",
                    "name": "RPC/REST/ZMQ"
                }
            ],
            "totalCount": 2
        },
        "mergeable": "CONFLICTING",
        "mergedAt": null,
        "number": 10160,
        "state": "OPEN",
        "title": "Add updatepeer RPC",
        "updatedAt": "2018-02-22T08:59:42Z"
    },
    {
        "additions": 125,
        "author": {
            "avatarUrl": "https://avatars3.githubusercontent.com/u/250224?v=4",
            "login": "kallewoof",
            "url": "https://github.com/kallewoof"
        },
        "body": "Fixes: #10071.\r\n\r\nDone:\r\n- adds `-includeconf=<path>`, where `<path>` is relative to `datadir` or to the path of the file being read, if in a file\r\n- protects against circular includes\r\n- updates help docs\r\n\r\n~~~Thoughts:~~~\r\n- ~~~I am not sure how to test this in a neat manner. Feedback on this would be nice. Will dig/think though.~~~",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "Yeah. Why not. This can be useful.\r\n\r\n* I would recommend to use `-addconf=` (otherwise user may think it replaces the bitcoin.conf configuration file).\r\n* If I follow `GetConfigFile()` correctly, you can also use absolut paths, right?",
                    "id": "MDEyOklzc3VlQ29tbWVudDI5NjUzMzE0MQ==",
                    "publishedAt": "2017-04-24T06:12:08Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10267#issuecomment-296533141"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/3020646?v=4",
                        "login": "NicolasDorier"
                    },
                    "body": "Why not making the existing `-config` a repeatable argument.",
                    "id": "MDEyOklzc3VlQ29tbWVudDI5NjU1MTcxNg==",
                    "publishedAt": "2017-04-24T07:15:46Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10267#issuecomment-296551716"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/250224?v=4",
                        "login": "kallewoof"
                    },
                    "body": "@jonasschnelli Good point - will switch to `-addconf=`. Yes, you can use absolute paths. My worry above is for when a user presumes the path is relative to the config file when it is in fact not.\r\n\r\n@NicolasDorier I think `-config` simply tells what name to use and defaults to `bitcoin.conf` -- it doesn't actually load the file. This feature lets you load other files arbitrarily from within `bitcoin.conf`.\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDI5NjU2NTU4Nw==",
                    "publishedAt": "2017-04-24T08:00:00Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10267#issuecomment-296565587"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/250224?v=4",
                        "login": "kallewoof"
                    },
                    "body": "[Unsquashed history](https://github.com/kallewoof/bitcoin/tree/feature-config-readconfig-unsquashed): [1](https://github.com/kallewoof/bitcoin/commit/b2c56e1ae2dad03bfd8af64cdf0d185317b19662) \u2192 [2](https://github.com/kallewoof/bitcoin/commit/770b88e3514a1d289bb64d0d66d276ca24197b06) \u2192 [3\u22b11](https://github.com/kallewoof/bitcoin/commit/bc4a972bcc50ad37d5b386b52cfe7f7a5b3d87cd) \u2192 [4\u22b12](https://github.com/kallewoof/bitcoin/commit/0aae401523a8986617bd1306748dae3d9c08f107)",
                    "id": "MDEyOklzc3VlQ29tbWVudDI5NjU5NTE5MQ==",
                    "publishedAt": "2017-04-24T09:35:45Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10267#issuecomment-296595191"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "Concept ACK\r\n\r\n> My worry above is for when a user presumes the path is relative to the config file when it is in fact not.\r\n\r\nYes, making it relative to the data directory is a good choice. I think we should handle all relative paths in `bitcoind` that way.\r\n\r\n> Why not making the existing -config a repeatable argument.\r\n\r\nThat was also my first thought, but it may just be confusing as it changes the meaning of the option slightly. It's possible that some setups already use multiple `-conf` options, and rely on the overriding behavior.\r\n\r\nSo I'm good with making it an explicit option.  Another suggestion for the name would be `-includeconf`.",
                    "id": "MDEyOklzc3VlQ29tbWVudDI5NjYzNjEwOQ==",
                    "publishedAt": "2017-04-24T11:53:18Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10267#issuecomment-296636109"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1008458?v=4",
                        "login": "jtimon"
                    },
                    "body": "Concept ACK. Don't care much about the name, but what about -extraconf ?",
                    "id": "MDEyOklzc3VlQ29tbWVudDI5NjczOTg5OQ==",
                    "publishedAt": "2017-04-24T16:50:28Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10267#issuecomment-296739899"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/250224?v=4",
                        "login": "kallewoof"
                    },
                    "body": "From the given suggestions I think `includeconf` is the most clear so I'll switch to that.\r\n\r\n@laanwj:\r\n\r\n> Yes, making it relative to the data directory is a good choice. I think we should handle all relative paths in bitcoind that way.\r\n\r\nTo clarify, you mean that the relative path inside /dir/file.conf should be /dir/, not [bitcoin datadir], right? It will require some lines of code I bet but I think that makes sense too.",
                    "id": "MDEyOklzc3VlQ29tbWVudDI5Njg2ODM1OQ==",
                    "publishedAt": "2017-04-25T01:47:24Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10267#issuecomment-296868359"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/250224?v=4",
                        "login": "kallewoof"
                    },
                    "body": "The `includeconf` feature now defines the path relative to the file being read, if any. For command line, it is [datadir], for `/dir/abc.conf` it is `/dir/`. I tested this with\r\n```\r\nsrc/testreadconfig/bitcoin.conf: [...] includeconf=../global.conf\r\nsrc/global.conf: includeconf=secrets.conf\r\nsrc/secrets.conf: rpcpassword=foo\r\n```\r\nwith `bitcoind  -datadir=testreadconfig`. Ensured `bitcoin-cli` with password `foo` worked and password `bar` did not. \r\n\r\n[[...]](https://github.com/kallewoof/bitcoin/tree/feature-config-readconfig-unsquashed): \u2192 [5\u22b11](https://github.com/kallewoof/bitcoin/commit/f88e7ce8ec842ce2b46b551b0efc067ae8276a6f) \u2192 [6\u22b12](https://github.com/kallewoof/bitcoin/commit/cc917f86045a978c11d7be6e1fe7a4da93748b9a)",
                    "id": "MDEyOklzc3VlQ29tbWVudDI5Njg4MDM4NQ==",
                    "publishedAt": "2017-04-25T03:00:18Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10267#issuecomment-296880385"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "> To clarify, you mean that the relative path inside /dir/file.conf should be /dir/, not [bitcoin datadir], right? It > will require some lines of code I bet but I think that makes sense too.\r\n\r\nYes, seems good to me too. So it's like C's include \"\" - I wasn't thinking about relative includes in other includes.\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDI5NjkxMDk2OA==",
                    "publishedAt": "2017-04-25T05:14:44Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10267#issuecomment-296910968"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/250224?v=4",
                        "login": "kallewoof"
                    },
                    "body": "To clarify, the code now does what @laanwj suggested.",
                    "id": "MDEyOklzc3VlQ29tbWVudDI5Njk0MjE3MQ==",
                    "publishedAt": "2017-04-25T07:34:47Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10267#issuecomment-296942171"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "> I am not sure how to test this in a neat manner. Feedback on this would be nice. Will dig/think though.\r\n\r\nSome ideas:\r\n- RPC test that creates a tree of bitcoin config files including each other beneath the data directory\r\n- Starts a node w/ `-includeconf=<path>`\r\n- Then interrogate node over RPC to verify the files got included, in the right order\r\n\r\nTo achieve the latter the option `uacomment=` is useful, as these will be added to an array, then querying `getnetworkinfo` to see if the `(...)` part of the `subversion` matches expected content and order.",
                    "id": "MDEyOklzc3VlQ29tbWVudDI5ODMyMzgxMw==",
                    "publishedAt": "2017-05-01T11:59:53Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10267#issuecomment-298323813"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1063656?v=4",
                        "login": "jnewbery"
                    },
                    "body": "@laanwj's suggested test method seems sensible. I'm happy to review that or lend a hand implementing it. Feel free to reach me on IRC.",
                    "id": "MDEyOklzc3VlQ29tbWVudDI5ODQ0MDc5MQ==",
                    "publishedAt": "2017-05-01T21:43:21Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10267#issuecomment-298440791"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/250224?v=4",
                        "login": "kallewoof"
                    },
                    "body": "Thanks for the suggestion! I added a test that checks for load order and ensures circular include is guarded against. @jnewbery review would be wonderful :)\r\n\r\nEdit: If anyone has ideas why travis is failing I'd appreciate it. It works fine on all the machines I test it on locally (mac, linux).",
                    "id": "MDEyOklzc3VlQ29tbWVudDI5ODQ3NTI4Mw==",
                    "publishedAt": "2017-05-02T01:28:44Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10267#issuecomment-298475283"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1063656?v=4",
                        "login": "jnewbery"
                    },
                    "body": "> If anyone has ideas why travis is failing I'd appreciate it\r\n\r\nYou've made `ReadConfigFile()` recursive (through `ProcessSetting()`). `ReadConfigFile()` locks cs_args, and then at the end calls `ClearDatadirCache()`, which locks csPathCached. That means that the bottom-most `ReadConfigFile()` locks csPathCached while cs_args is still held.\r\n\r\nThere's already a function that locks in the other order: `GetDataDir()` locks csPathCached and then locks cs_args (in its call to `IsArgSet()`).\r\n\r\nIf those two functions are called in different threads, we'd have a deadlock.\r\n\r\nThere's a CPP_FLAG option that checks lock ordering `CPPFLAGS=-DDEBUG_LOCKORDER`, which is used in Travis build 5. That's why that build is failing. You can repro locally by running `configure` with that option.\r\n\r\nYou can fix this by not locking cs_args recursively.",
                    "id": "MDEyOklzc3VlQ29tbWVudDI5ODY3MTQ5Mw==",
                    "publishedAt": "2017-05-02T15:33:53Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10267#issuecomment-298671493"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/250224?v=4",
                        "login": "kallewoof"
                    },
                    "body": "@jnewbery Thanks a lot for the explanation! I should've paid closer attention to locks considering the added recursiveness.\r\n\r\n97ee63b fixes this by moving the conditionally-locked code into a new `ReadConfigStream` function which is called with locking/clearing in one case and without in the other, based on a `bool lockAndClear` added to `ReadConfigFile`.\r\n\r\n(Also had to tweak tests a tiny bit; 8fb6511.)",
                    "id": "MDEyOklzc3VlQ29tbWVudDI5OTc2Nzk1NQ==",
                    "publishedAt": "2017-05-08T04:02:22Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10267#issuecomment-299767955"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1063656?v=4",
                        "login": "jnewbery"
                    },
                    "body": "I think you've introduced a subtle bug here. If `-datadir` is configured in one of the additional config files, then the datadir cache won't be cleared, which means that bitcoind will continue to use the old datadir.\r\n\r\nI think you should try to not make ReadConfigFile recursive. For me, it would be acceptable to only allow one level of redirection here (ie the \"base\" config file can specify `-includeconf` config file, but those included config files cannot themselves include other config files). I think that would be a simpler model and would remove a whole bunch of potential bugs (circular references, blowing the stack through too many `-includeconf` redirects, etc). ",
                    "id": "MDEyOklzc3VlQ29tbWVudDMwMTU4NjcxOQ==",
                    "publishedAt": "2017-05-15T19:57:19Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10267#issuecomment-301586719"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/250224?v=4",
                        "login": "kallewoof"
                    },
                    "body": "@jnewbery Hm, no the datadir cache is cleared after any recursions happen, which means it is always cleared, just not directly after the config file has been parsed. There are two cases:\r\n1. ParseParameters ([util.cpp:407](https://github.com/kallewoof/bitcoin/blame/feature-config-readconfig-unsquashed/src/util.cpp#L407) called from [bitcoind.cpp:75](https://github.com/kallewoof/bitcoin/blame/feature-config-readconfig-unsquashed/src/bitcoind.cpp#L75)) -- this will work as normal and does not require cache clearing.\r\n2. Nested ReadConfigs from the initial bitcoin.conf file: [bitcoind:107](https://github.com/kallewoof/bitcoin/blame/feature-config-readconfig-unsquashed/src/bitcoind.cpp#L107) calls `ReadConfigFile` with the `lockAndClear` flag set; recursion then happens in ProcessSetting (L401) via ReadConfigStream (L622) with `lockAndClear` unset. Eventually this gets back to original caller which leaves ReadConfigStream and gets to [util.cpp:649](https://github.com/kallewoof/bitcoin/blame/feature-config-readconfig-unsquashed/src/util.cpp#L649) which clears the datadir cache.\r\nOr am I missing something?\r\n\r\nAs for forbidding multiple levels of recursion, I think the value outweighs the issues personally (and I addressed circular refs I believe), but if people think it's not worth it I'll restrict it to one include.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMwMTY0NDYzOA==",
                    "publishedAt": "2017-05-16T00:54:23Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10267#issuecomment-301644638"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1063656?v=4",
                        "login": "jnewbery"
                    },
                    "body": "@kallewoof yes you're right. datadir cache is cleared after all files are read. My mistake.\r\n\r\nI still don't like the recursion and the fact that there can be multiple levels of imports. It means there are more edge cases and unexpected behaviour. For example, if `-includeconf` is included as a command line parameter, then the includeconf file is read *before* the regular conf file, and so takes precedence. If an includeconf line is included in the regular conf file, then it is read *during* the regular config file, and which settings are taken from the regular conf file and which are taken from the includeconf file depend on the ordering of settings in the regular conf file.\r\n\r\nThe new `warnOnFailure` and `lockAndClear` bool arguments to `ReadConfigFile()` seem pretty strange to me. They're only used when `ReadConfigFile()` is being called recursively, and they control a large chunk of the behaviour within `ReadConfigFile()`. That's a clue to me that maybe the functionality isn't split up correctly - perhaps the locking/clearing should be in an outer function which calls an inner function for each of the config files?\r\n\r\nFinally, you've introduced a new crash bug. If `-conf` or `-includeconf` don't refer to a valid file, the bitcoind will crash on startup. Here's the backtrace:\r\n\r\n```\r\nCore was generated by `bitcoind -datadir=/tmp/user/1000/test6p7xn_xt/856/node0 -server -keypool=1 -dis'.\r\nProgram terminated with signal SIGABRT, Aborted.\r\n#0  0x00007f3b77df0428 in __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:54\r\n54\t../sysdeps/unix/sysv/linux/raise.c: No such file or directory.\r\n(gdb) bt\r\n#0  0x00007f3b77df0428 in __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:54\r\n#1  0x00007f3b77df202a in __GI_abort () at abort.c:89\r\n#2  0x00007f3b7873284d in __gnu_cxx::__verbose_terminate_handler() () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6\r\n#3  0x00007f3b787306b6 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6\r\n#4  0x00007f3b78730701 in std::terminate() () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6\r\n#5  0x00007f3b78730919 in __cxa_throw () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6\r\n#6  0x00007f3b79f29f82 in boost::filesystem::detail::canonical(boost::filesystem::path const&, boost::filesystem::path const&, boost::system::error_code*) () from /usr/lib/x86_64-linux-gnu/libboost_filesystem.so.1.58.0\r\n#7  0x000055e5c58b2ae2 in boost::filesystem::canonical (base=..., p=...) at /usr/include/boost/filesystem/operations.hpp:459\r\n#8  GetConfigFile (confPath=\"global.conf\", relativePath=\"\") at util.cpp:603\r\n#9  0x000055e5c58b4353 in ArgsManager::ProcessSetting (this=this@entry=0x55e5c5db1fa0 <gArgs>, strKey=\"-includeconf\", strValue=\"global.conf\", relativePath=\"\") at util.cpp:386\r\n#10 0x000055e5c58b487d in ArgsManager::ParseParameters (this=0x55e5c5db1fa0 <gArgs>, argc=<optimized out>, argv=<optimized out>) at util.cpp:424\r\n#11 0x000055e5c5653d4a in ParseParameters (argv=0x7fff5492e618, argc=14) at util.h:263\r\n#12 AppInit (argc=14, argv=0x7fff5492e618) at bitcoind.cpp:75\r\n#13 0x000055e5c5648bef in main (argc=14, argv=0x7fff5492e618) at bitcoind.cpp:196\r\n(gdb) quit\r\n```\r\n\r\nIf I use an invalid filename for `-conf` on master. I don't see this crash.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMwMTgxMDI2Mw==",
                    "publishedAt": "2017-05-16T15:00:40Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10267#issuecomment-301810263"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/250224?v=4",
                        "login": "kallewoof"
                    },
                    "body": "@jnewbery Thanks a lot for all the feedback.\r\n\r\n> I still don't like the recursion and the fact that there can be multiple levels of imports. It means there are more edge cases and unexpected behaviour. For example, if -includeconf is included as a command line parameter, then the includeconf file is read before the regular conf file, and so takes precedence. If an includeconf line is included in the regular conf file, then it is read during the regular config file, and which settings are taken from the regular conf file and which are taken from the includeconf file depend on the ordering of settings in the regular conf file.\r\n\r\nThat is the case without recursion as well, unless we forbid command line case. (Which I can do already, even while keeping recursion.)\r\n\r\n> The new warnOnFailure and lockAndClear bool arguments to ReadConfigFile() seem pretty strange to me. They're only used when ReadConfigFile() is being called recursively, and they control a large chunk of the behaviour within ReadConfigFile(). That's a clue to me that maybe the functionality isn't split up correctly - perhaps the locking/clearing should be in an outer function which calls an inner function for each of the config files?\r\n\r\nHm.. the warnOnFailure was just a nice-to-have to inform the user when an explicitly included file didn't actually exist, but I can remove it for cleanliness. Since I moved most of ReadConfigFile into ReadConfigStream, the only remaining stuff was the caching stuff, which doesn't feel odd to me. I'm not actually sure why you consider this to be a problem: the ReadConfigFile is mostly there to do or not do the locking and data cache clearing, and the ReadConfigStream is there to do the actual reading/parsing part.\r\n\r\nThat said, I'm not overly attached to the idea of allowing recursion, so unless someone speaks *for* it I am going to try to simplify the code to only allow one single include and to only allow it in the file, i.e. not from command line. I believe that would address most of your concerns.\r\n\r\nEdit: Oh, and thanks for finding the crash -- I was sure I tested that, but I guess not.\r\n\r\nEdit 2: Yeah, I never tested the case where the path was not a valid path, only when it was a non-existent one.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMwMTk2NzAxMw==",
                    "publishedAt": "2017-05-17T02:22:53Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10267#issuecomment-301967013"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/250224?v=4",
                        "login": "kallewoof"
                    },
                    "body": "Updated and squashed. [Unsquashed history](https://github.com/kallewoof/bitcoin/tree/feature-config-readconfig-unsquashed).",
                    "id": "MDEyOklzc3VlQ29tbWVudDMwNTM5NDg1Ng==",
                    "publishedAt": "2017-06-01T05:45:24Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10267#issuecomment-305394856"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1063656?v=4",
                        "login": "jnewbery"
                    },
                    "body": "Looks great. Tested ACK bc4f7a4b3f614dc2125c6af60da448606b622688\r\n\r\nOne suggestion for adding to the testcase. Up to you whether you want to take it.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMwNTUwMDY3Mg==",
                    "publishedAt": "2017-06-01T13:56:08Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10267#issuecomment-305500672"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1008458?v=4",
                        "login": "jtimon"
                    },
                    "body": "This conflicts a little bit with https://github.com/bitcoin/bitcoin/pull/8994/commits/7246faea3e4421e609e6a24294bd23a45d2343de\r\n\r\nThere I use the old ArgsManager::ReadConfigFile(path) which this PR remove.\r\nCould you conserve that method even if it's temporarily unused (although preferrably using it internally like \"ArgsManager::ReadConfigFile(fs::ifstream& streamConfig)\")?\r\n\r\n```\r\nvoid ArgsManager::ReadConfigFile(const std::string& confPath)\r\n{\r\n     fs::ifstream streamConfig(GetConfigFile(confPath));\r\n      if (!streamConfig.good())\r\n          return; // No bitcoin.conf file is OK\r\n// ...\r\n}\r\n```\r\nOr perhaps I should restore it later if this PR gets merged first.\r\nutACK bc4f7a4b3f614dc2125c6af60da448606b622688 beyond that.\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDMwNTUxMTY1OA==",
                    "publishedAt": "2017-06-01T14:32:38Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10267#issuecomment-305511658"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/250224?v=4",
                        "login": "kallewoof"
                    },
                    "body": "@jtimon The method was not removed, it was renamed. If you change to `ReadConfigFiles` you should get the exact same result after this is merged. Let me know if that is not the case!",
                    "id": "MDEyOklzc3VlQ29tbWVudDMwNjA3NjY2MA==",
                    "publishedAt": "2017-06-05T00:06:30Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10267#issuecomment-306076660"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1008458?v=4",
                        "login": "jtimon"
                    },
                    "body": "The method that is removed is the one that allows you to call with a path, ```ArgsManager::ReadConfigFile(const std::string& confPath)```.  The new ```ReadConfigFiles()``` will work just fine here, but in #8994 I cannot use it, because want I want is precisely to load from a different file (and not allow -includeconf or command line for \"custom chainparams\" configuration). If I use ```AgsManager::ReadConfigFile(fs::ifstream& streamConfig)``` directly from chainparams.cpp, not only I will duplicate code, but also call things like GetConfigFile(), which I would prefer not to call from chainparams.cpp. So my conclusion is that I would just restore ```ArgsManager::ReadConfigFile(const std::string& confPath)```. That's why I ask that you maintain it even if you don't need it for anything (but it can also be removed and then restored, it's not a big deal)\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDMwNjI3NDQ1NA==",
                    "publishedAt": "2017-06-05T19:01:13Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10267#issuecomment-306274454"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/250224?v=4",
                        "login": "kallewoof"
                    },
                    "body": "Ohh, damn... It seems the removal of the path may have been premature. What do you think of `ReadConfigFiles()` \u2192 `ReadConfigFiles(std::string path = \"\", bool allowIncludes = true)` whose default does exactly what `ReadConfigFiles` does now? @jtimon @jnewbery",
                    "id": "MDEyOklzc3VlQ29tbWVudDMwNjM0ODM4MA==",
                    "publishedAt": "2017-06-06T00:35:21Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10267#issuecomment-306348380"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1063656?v=4",
                        "login": "jnewbery"
                    },
                    "body": "I think ReadConfigFiles() shouldn't take any arguments and should be responsible for finding and reading all config files. I don't understand why you'd want to read config files from other places in the codebase in #8994. It seems to me to be much simpler to reason about what config is loaded if it all happens in one place.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMwNjU1NTE4OA==",
                    "publishedAt": "2017-06-06T17:14:47Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10267#issuecomment-306555188"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1008458?v=4",
                        "login": "jtimon"
                    },
                    "body": "@kallewoof yeah, I think that would work too, and you could still call it without parameters. That solution is very simple for me to \"restore\" on #8994 if people don't like it here. There's no need to slow this down if other people don't like my request. Thank you for offering a good and simple solution to my concern.\r\n\r\n@jnewbery I don't want the chain custom parameters to be perceived as \"config\". They select the chain you will be on, it is mostly intended to create new testnets, and sharing a \"testnet config file\" for a newly created one could be a useful thing. But perhaps that's something to discuss on #8994 rather than here. I still have it on a separated commit in case people prefer to allow consensus critical parameters to be passed from command line or the other config files that con be loaded.\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDMwNjY0NjYxNg==",
                    "publishedAt": "2017-06-06T23:53:45Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10267#issuecomment-306646616"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1063656?v=4",
                        "login": "jnewbery"
                    },
                    "body": "@jtimon \r\n\r\n> I don't want the chain custom parameters to be perceived as \"config\".\r\n\r\nI actually think having the customchain config file contain general config could be useful. There seemed to be some enthusiasm for #9374 , which is similar in nature - it allows a separate config file for each separate chain.\r\n\r\nThis is a bit of a sidetrack from this PR though, which I think is a good and useful improvement. This needs rebasing because of a conflict in test_runner.py. Assuming just that needs changing, then I still ACK this. I'll give some more feedback in #9374.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMwODU1OTY1Mw==",
                    "publishedAt": "2017-06-14T21:12:11Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10267#issuecomment-308559653"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1063656?v=4",
                        "login": "jnewbery"
                    },
                    "body": "alternative: this PR could move the:\r\n\r\n```\r\nfs::ifstream streamConfig(GetConfigFile(confPath));\r\nif (!streamConfig.good())\r\n```\r\nlines into the new `ReadConfigFile()` function instead of leaving them in `ReadConfigFiles()`, and have `ReadConfigFile()` take a `std::string` instead of a `fs::ifstream&`. That would remove some code duplication (since that's called for both the 'base' config file and the -includeconf file).\r\n\r\n#9374 could then call `ReadConfigFile()` exactly as before.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMwODU2NDA1OA==",
                    "publishedAt": "2017-06-14T21:30:49Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10267#issuecomment-308564058"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/250224?v=4",
                        "login": "kallewoof"
                    },
                    "body": "@jnewbery I would need to either change the return value to be a success flag for `streamConfig.good()`, or add an additional `bool warnOnFailure` flag, like I had before, as we currently don't warn for the main config missing, but we do warn for `includeconf`s.\r\n\r\nRebased, btw.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMwODYyMDM1OQ==",
                    "publishedAt": "2017-06-15T03:44:16Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10267#issuecomment-308620359"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1063656?v=4",
                        "login": "jnewbery"
                    },
                    "body": "Required rebase after `gArgs` PR #10607. I've rebased here: https://github.com/jnewbery/bitcoin/tree/pr10267\r\n\r\nI've also implemented my suggested change to make `ReadConfigFile` take a `std::string` here: https://github.com/jnewbery/bitcoin/tree/pr10267.1.\r\n\r\n@kallewoof - can you let me know what you think? I think this resolves @jtimon's concerns so this doesn't conflict badly with his PR.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMyMjI2NjQwMQ==",
                    "publishedAt": "2017-08-14T18:14:39Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10267#issuecomment-322266401"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/250224?v=4",
                        "login": "kallewoof"
                    },
                    "body": "@jnewbery Looks great! I rebased and adopted your changes. I tried to pull your commits into my branch but things exploded. Sorry about that. :/\r\nWill squash if you think ca507fc looks OK. (I picked slightly different varnames from you -- any reason for using snake case? I don't see it used elsewhere.)",
                    "id": "MDEyOklzc3VlQ29tbWVudDMyMjM2NjE5Mw==",
                    "publishedAt": "2017-08-15T03:12:25Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10267#issuecomment-322366193"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1063656?v=4",
                        "login": "jnewbery"
                    },
                    "body": "@kallewoof - no problem. My branch was just an example. Feel free to do whatever you want with it. (for future reference if you want to take the commits from my branch, easiest way is to add github.com/jnewbery/bitcoin as a remote, then `git fetch` from my remote, then `git reset --hard <sha of my branch>` from your branch).\r\n\r\nFor snake case convention, see 'symbol naming conventions' here: https://github.com/bitcoin/bitcoin/blob/master/doc/developer-notes.md#developer-notes . No need to change old code to use the conventions, but new PRs should follow them if possible.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMyMjQ3Njk5MA==",
                    "publishedAt": "2017-08-15T14:09:14Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10267#issuecomment-322476990"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/250224?v=4",
                        "login": "kallewoof"
                    },
                    "body": "@jnewbery That's what I did, but when I tried rebasing master on top of it things exploded. I'll try again.\r\n\r\nAs for the symbol naming convention, I'm amazed I didn't catch that considering I'm a big fan of conventions myself. Will definitely start using it. The `m_foo` thing for class member vars looks ugly as hell to me, but ah well.\r\n\r\nEdit: worked fine this time. Must've fatfingered something. Thanks!",
                    "id": "MDEyOklzc3VlQ29tbWVudDMyMjY2ODE0NA==",
                    "publishedAt": "2017-08-16T05:12:52Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10267#issuecomment-322668144"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/250224?v=4",
                        "login": "kallewoof"
                    },
                    "body": "@jnewbery Digging, but:\r\n```\r\nPOTENTIAL DEADLOCK DETECTED\r\nPrevious lock order was:\r\n (1) cs_args  util.cpp:628\r\n (2) csPathCached  util.cpp:558\r\nCurrent lock order is:\r\n (2) csPathCached  util.cpp:558\r\n (1) cs_args  util.cpp:432\r\nAssertion failed: (false), function potential_deadlock_detected, file sync.cpp, line 98.\r\n```\r\nIt looks like there are two paths that may end up in a deadlock:\r\n1. First:\r\n   * `ReadConfigFiles()` [locks `cs_args`]\r\n   * `ReadConfigFile(conf_path)`\r\n   * `GetConfigFile(conf_path)`\r\n   * `GetDataDir(false)` [locks `csPathCached`]\r\n   * `gArgs.IsArgSet(\"-datadir\")` [locks `cs_args`]\r\n2. Second:\r\n   * `GetDataDir(_)` [locks `csPathCached`]\r\n   * `gArgs.IsArgSet(\"-datadir\")` [locks `cs_args`]\r\n\r\nPath 1 will lock `cs_args`, then `csPathCached`, and path 2 will lock `csPathCached`, then `cs_args`. I'm not sure the effect of path 1 locking `cs_args` twice. Perhaps it's a NOP when already locked, but in either case, this seems to be the issue.\r\n\r\nI've reset to the original version (rebased) for now as I can't figure this one out right now.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMyMjcxMzA3NA==",
                    "publishedAt": "2017-08-16T09:14:20Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10267#issuecomment-322713074"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
                        "login": "promag"
                    },
                    "body": "Needs rebase. Is this still valid?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0NjYwMTgzNw==",
                    "publishedAt": "2017-11-23T12:08:48Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10267#issuecomment-346601837"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/250224?v=4",
                        "login": "kallewoof"
                    },
                    "body": "Rebased. It is valid, yes.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0Njc0MDA2MA==",
                    "publishedAt": "2017-11-24T04:20:46Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10267#issuecomment-346740060"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/3211283?v=4",
                        "login": "MeshCollider"
                    },
                    "body": "Concept ACK\r\nN.B. this could be very useful in the context of https://github.com/bitcoin/bitcoin/pull/11862, using `-regtest.includeconf` for example",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1MDY4NjY2OQ==",
                    "publishedAt": "2017-12-11T10:40:17Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10267#issuecomment-350686669"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/250224?v=4",
                        "login": "kallewoof"
                    },
                    "body": "@laanwj Ping (since you self-assigned)",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2Nzk0MDIyMQ==",
                    "publishedAt": "2018-02-23T08:16:26Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10267#issuecomment-367940221"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/250224?v=4",
                        "login": "kallewoof"
                    },
                    "body": "@jnewbery Thanks a lot for review / code suggestions. I'll add multiple includeconf support and then push updated code.\r\n\r\nEdit: I put some comments on your commit, and made the changes on my end.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NTU0MTcyMQ==",
                    "publishedAt": "2018-03-23T04:30:02Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10267#issuecomment-375541721"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/250224?v=4",
                        "login": "kallewoof"
                    },
                    "body": "This PR times out on job 2 without the timeout bump in 47848d0. I have not investigated the cause for this increase, and I find it unlikely that the new tests would be the actual cause.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NTU3NDc0Mw==",
                    "publishedAt": "2018-03-23T08:09:23Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10267#issuecomment-375574743"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1063656?v=4",
                        "login": "jnewbery"
                    },
                    "body": "The travis job is timing out when running `make check` (the unit tests):\r\n\r\n```\r\n$ if [ \"$RUN_TESTS\" = \"true\" ]; then travis_wait 40 make $MAKEJOBS check VERBOSE=1; fi    1913.41s\r\n```\r\n\r\nHere's the end of the output from that command:\r\n\r\n```\r\nmake[1]: Leaving directory `/home/travis/build/bitcoin/bitcoin/build/bitcoin-i686-w64-mingw32'\r\n/home/travis/.travis/job_stages: line 169: 28077 Terminated              travis_jigger $! $timeout $cmd\r\n```\r\n\r\n@MarcoFalke / @laanwj - any idea why the unit tests would stall for half an hour here?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NTc3MDIyNA==",
                    "publishedAt": "2018-03-23T19:10:20Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10267#issuecomment-375770224"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/7133040?v=4",
                        "login": "ryanofsky"
                    },
                    "body": "> @MarcoFalke / @laanwj - any idea why the unit tests would stall for half an hour here?\r\n\r\nSomething must have changed recently, but I think one reason why tests are slow is that they are running using wine to emulate windows. I'm also seeing the same timeouts with 11851.\r\n\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NTc3NDEyNA==",
                    "publishedAt": "2018-03-23T19:26:37Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10267#issuecomment-375774124"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
                        "login": "MarcoFalke"
                    },
                    "body": "I am fine with bumping to 40 or 50 minutes. In case we need that much time, it will time out due to the global limit anyway. The long term solution would be to somehow speed up the unit tests on Wine, but that doesn't have to block this (and other) pull requests.\r\n\r\nCould cherry-pick that change to a separate pull request, though.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NTc3NTcwOA==",
                    "publishedAt": "2018-03-23T19:33:29Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10267#issuecomment-375775708"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1063656?v=4",
                        "login": "jnewbery"
                    },
                    "body": "> Could cherry-pick that change to a separate pull request, though.\r\n\r\nHere you go: #12772",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NTc4MjA5MA==",
                    "publishedAt": "2018-03-23T20:00:13Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10267#issuecomment-375782090"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1063656?v=4",
                        "login": "jnewbery"
                    },
                    "body": "#11862 is merged. Please rebase.\r\n\r\nI'll commit to re-reviewing this once it's rebased.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MTcxNjU3Ng==",
                    "publishedAt": "2018-04-16T19:11:55Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10267#issuecomment-381716576"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/250224?v=4",
                        "login": "kallewoof"
                    },
                    "body": "Edit: resolved. I am now checking both `\"-includeconf\"` and `\"-\" + GetChainName() + \".includeconf\"` explicitly.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MTgzODI2NQ==",
                    "publishedAt": "2018-04-17T04:40:39Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10267#issuecomment-381838265"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/250224?v=4",
                        "login": "kallewoof"
                    },
                    "body": "Addressed @jnewbery nits (sans bracket removal).",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MjIxNDc1Ng==",
                    "publishedAt": "2018-04-18T01:30:44Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10267#issuecomment-382214756"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/250224?v=4",
                        "login": "kallewoof"
                    },
                    "body": "@ajtowns \r\n\r\n> I think this is subtly \"wrong\" fwiw: if you have [main] includeconf=foo.conf in bitcoin.conf, and then set testnet=1 in foo.conf, you'll have foo.conf included, and be running testnet not mainnet, so you \"shouldn't\" have included foo.conf (and any other settings from the [main] section won't have been used). That might be too subtle to worry about though.\r\n\r\nI don't think we need to care about that. If the user explicitly includes foo.conf from [main] and foo.conf sets to testnet, arguably they would want to use testnet \"whenever main is used\". Maybe they want to guarantee never mainnet?\r\n\r\n> A thought I had was that maybe [regtest] includeconf=rt.conf should treat all the options in rt.conf as being network-specific, so if rt.conf says connect=10.10.10.10 [main] connect=10.10.10.20 [regtest] connect=10.10.10.30, that would get interpreted as if it was [regtest] connect=10.10.10.10 connect=10.10.10.30. That would avoid the inconsistency above, in that it would turn [main] includeconf=foo.conf into essentially [main] testnet=1 which would just be ignored.\r\n\r\nI'm not sure I follow here. `includeconf` has the exact same semantics as `#include` in C++. The current default behavior seems the most logical one.\r\n\r\n> I think it might be better to do it as four phases though: (1) read \"-conf\", (2) read the includeconfs that aren't under a section, (3) work out the chain based on everything noted so far, and (4) read the \"-chain.includeconf\" options from -conf (but not letting that change the chain).\r\n\r\nI noted above a case where a user want an included conf to change the chain. Is it worth the effort to prevent this?\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MjI2NTUxMA==",
                    "publishedAt": "2018-04-18T05:22:43Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10267#issuecomment-382265510"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/250224?v=4",
                        "login": "kallewoof"
                    },
                    "body": "@ajtowns Thanks for review! I believe I addressed your concerns, except for the discussion ^.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MjI2Nzg3NA==",
                    "publishedAt": "2018-04-18T05:37:23Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10267#issuecomment-382267874"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1063656?v=4",
                        "login": "jnewbery"
                    },
                    "body": "ACK f083a0e57ca7c991af56425e44cb5aeeaa383a50 with a couple of comments.\r\n\r\nI agree with @kallewoof that the include precedence in the current implementation is fine. Perhaps more detailed documentation would satisfy @ajtowns ?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MjM5OTIyOA==",
                    "publishedAt": "2018-04-18T14:08:13Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10267#issuecomment-382399228"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/127186?v=4",
                        "login": "ajtowns"
                    },
                    "body": "I'd be happier if there weren't any weird edge cases, but I'm okay with not fixing them. I'll have another look over the latest commits tomorrow, but expect I'd beh appy to ack them as is.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MjQyODQ5NA==",
                    "publishedAt": "2018-04-18T15:30:41Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10267#issuecomment-382428494"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/250224?v=4",
                        "login": "kallewoof"
                    },
                    "body": "After testing `-noincludeconf`, I did some tweaks so that you *can* do `-noincludeconf` from command line to disable `includeconf` stuff inside the main config file.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MjU3NTc1Mg==",
                    "publishedAt": "2018-04-19T01:01:12Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10267#issuecomment-382575752"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/250224?v=4",
                        "login": "kallewoof"
                    },
                    "body": "Addressed @promag nits.\r\n\r\nEdit: Actually, hm. I didn't address the release note point. Will make another update after verifying behavior.\r\n\r\nEdit 2: I believe I covered the specific case @promag is talking about now.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MjU5NTUwMw==",
                    "publishedAt": "2018-04-19T03:06:44Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10267#issuecomment-382595503"
                }
            ],
            "totalCount": 54
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "3c4dd4f3862ba93c88e83b394df426ceb1c157d9"
                    }
                }
            ],
            "totalCount": 3
        },
        "createdAt": "2017-04-24T01:09:49Z",
        "deletions": 7,
        "id": "MDExOlB1bGxSZXF1ZXN0MTE3MTc0NDEz",
        "labels": {
            "nodes": [
                {
                    "color": "0052cc",
                    "id": "MDU6TGFiZWw5ODI3OTE3Nw==",
                    "name": "RPC/REST/ZMQ"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "number": 10267,
        "state": "OPEN",
        "title": "New -includeconf argument for including external configuration files",
        "updatedAt": "2018-04-24T16:32:27Z"
    },
    {
        "additions": 9,
        "author": {
            "avatarUrl": "https://avatars0.githubusercontent.com/u/894059?v=4",
            "login": "CodeShark",
            "url": "https://github.com/CodeShark"
        },
        "body": "After much deliberation and a few attempts at other approaches to provide a workable near-term sync mechanism for thin clients that require witness data, I decided to just go with the simplest short-term path with the least amount of complications expecting BIP37 to be completely replaced eventually - hopefully in the not-very-distant future.\r\n\r\nI believe the approach of filtering blocks on the client is a simpler and superior approach for most use cases than requiring the server to perform the filtering. I believe @Roasbeef has something written up for this that he's using for lnd. I would love to see that approach used in Bitcoin Core as well.\r\n\r\nBut given the good likelihood of nearterm SegWit activation on the Bitcoin mainnet, I believe this solution will suffice for all essential use cases of BIP37 for now - and I don't believe it's worth the effort to try to make more complex additions to BIP37 since it will eventually be entirely replaced.\r\n\r\nPeers can request MSG_FILTERED_WITNESS_BLOCK and will receive a merkleblock structure with transactions serialized with witnesses. The merkle proof for the witnesses is not supplied. This means that the client cannot verify that the witness data is what's actually in the block. However, the attack vectors here given the actual intended use cases seem extremely slim for several reasons:\r\n\r\n1) The witness data contains signatures which the client can still verify. Spoofing the witness would require supplying signatures that still redeem the output, meaning that only parties that can sign for the output could produce false witness data.\r\n\r\n2) In order to use BIP37 with any real degree of privacy and security, you need to connect to a trusted node. If this is your setup, adding merkle proofs for witnesses is an unnecessary complication.\r\n\r\n3) The foreseen intended use cases here are wallets that support multisignature scripts or scripts with multiple execution paths where you want to be able to check which signatures are provided or which execution path has been taken. In anticipated use cases, there is not much an attacker could gain from a transaction being signed in two different ways - and typically, the attacker would be easily identifiable.",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/858454?v=4",
                        "login": "gmaxwell"
                    },
                    "body": "Why trash privacy, create additional CPU attack vectors, dos attack vectors for the client, etc. to save at most 26kbit/sec?  It doesn't seem like a useful tradeoff.",
                    "id": "MDEyOklzc3VlQ29tbWVudDI5OTY3NTQ3NQ==",
                    "publishedAt": "2017-05-07T01:05:31Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10350#issuecomment-299675475"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/894059?v=4",
                        "login": "CodeShark"
                    },
                    "body": "Bandwidth isn't the main concern. Code complexity is. It's only intended to be a very short-term solution until we can introduce clientside block filtering.",
                    "id": "MDEyOklzc3VlQ29tbWVudDI5OTY3NTU1Ng==",
                    "publishedAt": "2017-05-07T01:08:18Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10350#issuecomment-299675556"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/894059?v=4",
                        "login": "CodeShark"
                    },
                    "body": "I should add that using BIP37 with untrusted nodes is already quite insecure.",
                    "id": "MDEyOklzc3VlQ29tbWVudDI5OTY3NTYxOQ==",
                    "publishedAt": "2017-05-07T01:10:51Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10350#issuecomment-299675619"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/649246?v=4",
                        "login": "TheBlueMatt"
                    },
                    "body": "I also dont see the rush...SegWit isn't gonna activate any time soon, why extend the current crap isntead of replacing it properly when there is no rush?",
                    "id": "MDEyOklzc3VlQ29tbWVudDI5OTY3NTg4MA==",
                    "publishedAt": "2017-05-07T01:19:18Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10350#issuecomment-299675880"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/894059?v=4",
                        "login": "CodeShark"
                    },
                    "body": "@TheBlueMatt It's already active on testnet as well as on several alts which seek to minimize the code diff.",
                    "id": "MDEyOklzc3VlQ29tbWVudDI5OTY3NjEzNA==",
                    "publishedAt": "2017-05-07T01:27:05Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10350#issuecomment-299676134"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/649246?v=4",
                        "login": "TheBlueMatt"
                    },
                    "body": "@CodeShark testnet is for testing Bitcoin, I dont generally consider it a target for features? As you point out this is a rather simple patch, if some alts have a need for it, they can easily take and maintain this patch.",
                    "id": "MDEyOklzc3VlQ29tbWVudDI5OTY3Njc3OA==",
                    "publishedAt": "2017-05-07T01:48:08Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10350#issuecomment-299676778"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/894059?v=4",
                        "login": "CodeShark"
                    },
                    "body": "My entire stack currently relies on BIP37 for synching with a node, including a number of testing tools I use. The alternatives of either maintaining a custom server (one more thick dependency) or using RPC (excruciatingly and impractically slow and inefficient) aren't really options for me at this point. So until we do something like clientside block filtering I'm left with either using this patch or having to hack something up that's really ugly on my end.\r\n\r\nI understand that there's a desire to not pollute the codebase with stuff that most people probably will not use - so I fully understand if other devs are reluctant to want to merge this. But I do not believe it is particularly intrusive - it doesn't really get in the way of anyone else and is easy to review and test for correctness. And it would save at least some people a nontrivial amount of additional effort in having to maintain separate branches and patches.\r\n\r\nI'm eager to contribute to the effort of finding a good long-term solution to the thin client sync issue and helping to implement it. But right now I need to make some important software releases, and the more I need to worry about my own software's short-term compatibility issues the less I can focus on the bigger picture.\r\n\r\nAnyhow, I appreciate the consideration.",
                    "id": "MDEyOklzc3VlQ29tbWVudDI5OTc2NDIyMQ==",
                    "publishedAt": "2017-05-08T03:25:12Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10350#issuecomment-299764221"
                }
            ],
            "totalCount": 7
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "fcf7d60071dcde32353b410a6d2e0ea238887aad"
                    }
                }
            ],
            "totalCount": 2
        },
        "createdAt": "2017-05-07T00:59:39Z",
        "deletions": 6,
        "id": "MDExOlB1bGxSZXF1ZXN0MTE5MzIxODQ0",
        "labels": {
            "nodes": [
                {
                    "color": "006b75",
                    "id": "MDU6TGFiZWw5ODI5ODAwNw==",
                    "name": "P2P"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "CONFLICTING",
        "mergedAt": null,
        "number": 10350,
        "state": "OPEN",
        "title": "Added support for MSG_FILTERED_WITNESS_BLOCK messages.",
        "updatedAt": "2017-12-30T11:11:04Z"
    },
    {
        "additions": 766,
        "author": {
            "avatarUrl": "https://avatars2.githubusercontent.com/u/7133040?v=4",
            "login": "ryanofsky",
            "url": "https://github.com/ryanofsky"
        },
        "body": "This PR adds an `-estlog` option for saving live fee estimation data from a bitcoin node, and a `fee_est` command line tool for processing the data and testing fee estimation code.\r\n\r\nThe idea is to make it easier to test improvements to fee estimation like https://github.com/bitcoin/bitcoin/pull/10199 in a more systematic and reproducible way.\r\n\r\nSome documentation is in [`src/test/fee_est/README.md`](https://github.com/ryanofsky/bitcoin/blob/pr/fee/src/test/fee_est/README.md)\r\n\r\nSample log file: [`est.log.xz`](https://storage.googleapis.com/ryanofsky/est.log.xz) (65M)\r\n\r\nSample [`fee_est.cpp`](https://github.com/ryanofsky/bitcoin/blob/pr/fee/src/test/fee_est/fee_est.cpp)  graph output: \r\n\r\n![graph](https://cloud.githubusercontent.com/assets/7133040/26331057/f2de8d0c-3f1c-11e7-99ea-de1801d13b05.png)\r\n\r\n",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/6848764?v=4",
                        "login": "paveljanik"
                    },
                    "body": "This is interesting but still no comment.\r\n\r\nConcept ACK\r\n\r\nI'll play around with this a bit.\r\n\r\n```\r\nWshadow statistics: \r\n   1 policy/fees_input.cpp:127:23: warning: declaration shadows a local variable [-Wshadow]\r\n   1 policy/fees_input.cpp:197:38: warning: declaration shadows a local variable [-Wshadow]\r\n   1 policy/fees_input.cpp:229:22: warning: declaration shadows a local variable [-Wshadow]\r\n   1 policy/fees_input.cpp:233:27: warning: declaration shadows a local variable [-Wshadow]\r\n   1 policy/fees_input.cpp:27:61: warning: declaration shadows a field of 'CBlockPolicyInput' [-Wshadow]\r\n   1 test/fee_est/fee_est.cpp:301:34: warning: declaration shadows a local variable [-Wshadow]\r\n   1 test/fee_est/fee_est.cpp:79:20: warning: declaration shadows a field of 'TxData' [-Wshadow]\r\n   1 test/fee_est/fee_est.cpp:79:29: warning: declaration shadows a field of 'TxData' [-Wshadow]\r\n   1 test/fee_est/fee_est.cpp:79:39: warning: declaration shadows a field of 'TxData' [-Wshadow]\r\n```",
                    "id": "MDEyOklzc3VlQ29tbWVudDMwODI0MzM4OQ==",
                    "publishedAt": "2017-06-13T20:46:19Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10443#issuecomment-308243389"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/6848764?v=4",
                        "login": "paveljanik"
                    },
                    "body": "When estimate log doesn't have enough data, `fee_est` is generating empty data in the HTML file. Emit some warning in such cases?\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDMwODM0MjYxOQ==",
                    "publishedAt": "2017-06-14T07:21:25Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10443#issuecomment-308342619"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/6848764?v=4",
                        "login": "paveljanik"
                    },
                    "body": "For perfect output, there should be 3rd dimension - time or current block height when the tx was first seen :-)",
                    "id": "MDEyOklzc3VlQ29tbWVudDMwODM0MzM4MA==",
                    "publishedAt": "2017-06-14T07:24:27Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10443#issuecomment-308343380"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1063656?v=4",
                        "login": "jnewbery"
                    },
                    "body": "Concept ACK. I think this could be a useful tool.\r\n\r\nCould this be split into two PRs to aid reviewers? The first PR would cover the `-estlog` option and writing the fee estimation data to disk. The second PR would be for a tool to read and graph the logs.\r\n\r\nParsing and graphing json files seems like a problem that has probably been solved many times before. If I was approaching this, I'd look at implementing this as a script in /contrib or a separate repository. Was there a particular reason you chose to implement this as a new C++ program?",
                    "id": "MDEyOklzc3VlQ29tbWVudDMxMTY0MDA5NQ==",
                    "publishedAt": "2017-06-28T12:05:12Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10443#issuecomment-311640095"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "> Could this be split into two PRs to aid reviewers? The first PR would cover the -estlog option and writing the fee estimation data to disk. The second PR would be for a tool to read and graph the logs.\r\n\r\nI think this is useful.\r\n\r\nHowever I'm not sure the analysis tool belongs in this repository. As it's specific to developers debugging the fee estimation code it's not something we want to ship with the distribution, or install by default. One place it could be is e.g. https://github.com/bitcoin-core/bitcoin-maintainer-tools . You could still document or refer to it from here.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MDE5OTE1MQ==",
                    "publishedAt": "2018-04-10T18:20:01Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10443#issuecomment-380199151"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/7133040?v=4",
                        "login": "ryanofsky"
                    },
                    "body": "Agree that fee_est tool shouldn't be installed, since it's a tool specifically for made for modifying and debugging fee estimation code.\r\n\r\nBut it would be awkward to use and maintain from a separate repository because it links and calls into the fee estimation code. (The tool works by piping historical data into the fee estimator so it's possible to make experimental changes to fee estimation and see how those changes affect its output and internal state.)\r\n\r\nAs far as build / distribution is concerned I think it makes sense to think of it more like a unit test or benchmark than like a maintainer tool.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MDIwOTI4MQ==",
                    "publishedAt": "2018-04-10T18:53:12Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10443#issuecomment-380209281"
                }
            ],
            "totalCount": 6
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "925281ae7e98a5063c43db878053ac7434603ac5"
                    }
                }
            ],
            "totalCount": 2
        },
        "createdAt": "2017-05-22T22:40:55Z",
        "deletions": 64,
        "id": "MDExOlB1bGxSZXF1ZXN0MTIxODgwMDE0",
        "labels": {
            "nodes": [
                {
                    "color": "5319e7",
                    "id": "MDU6TGFiZWw4MjQyODI1MQ==",
                    "name": "TX fees and policy"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "number": 10443,
        "state": "OPEN",
        "title": "Add fee_est tool for debugging fee estimation code",
        "updatedAt": "2018-04-10T18:53:12Z"
    },
    {
        "additions": 56,
        "author": {
            "avatarUrl": "https://avatars0.githubusercontent.com/u/19847568?v=4",
            "login": "mchrostowski",
            "url": "https://github.com/mchrostowski"
        },
        "body": "Fix for issue #8752 which, if merged, replaces PR #8757 \r\n\r\nI prepped functional/listsinceblock.py for additional tests.\r\nWrote a test for the above issue.\r\nMade a fix to rpcwallet.cpp:listsinceblock(...).\r\n\r\nThe fix takes advantage of CMerkleTx::GetDepthInMainChain() returning a negative value for conflicted transactions. The negative value represents the depth of the transaction with which it is conflicted. Taking abs(...) of this lets us use the same logic for filtering un-conflicted transactions to filter the conflicted ones.",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/9326759?v=4",
                        "login": "RHavar"
                    },
                    "body": "ACK - I can reproduce the problem, and this does fix it =)",
                    "id": "MDEyOklzc3VlQ29tbWVudDMxMDUyMTY4Nw==",
                    "publishedAt": "2017-06-22T22:37:18Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10470#issuecomment-310521687"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "utACK df09c3aaca3d261a0679a2fcc04da9ee01fb824a",
                    "id": "MDEyOklzc3VlQ29tbWVudDMyMjU2NTg5Mg==",
                    "publishedAt": "2017-08-15T19:34:23Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10470#issuecomment-322565892"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "Needs rebase though now.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMyMjU2NTk1MQ==",
                    "publishedAt": "2017-08-15T19:34:39Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10470#issuecomment-322565951"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/649246?v=4",
                        "login": "TheBlueMatt"
                    },
                    "body": "@mchrostowski any plans to rebase this?",
                    "id": "MDEyOklzc3VlQ29tbWVudDMzMzIxMDM5OQ==",
                    "publishedAt": "2017-09-29T18:58:22Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10470#issuecomment-333210399"
                }
            ],
            "totalCount": 4
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "df09c3aaca3d261a0679a2fcc04da9ee01fb824a"
                    }
                }
            ],
            "totalCount": 3
        },
        "createdAt": "2017-05-27T20:59:49Z",
        "deletions": 2,
        "id": "MDExOlB1bGxSZXF1ZXN0MTIyNzc0NDg4",
        "labels": {
            "nodes": [
                {
                    "color": "0052cc",
                    "id": "MDU6TGFiZWw5ODI3OTE3Nw==",
                    "name": "RPC/REST/ZMQ"
                },
                {
                    "color": "08a781",
                    "id": "MDU6TGFiZWwxNDk0MjQ=",
                    "name": "Wallet"
                }
            ],
            "totalCount": 2
        },
        "mergeable": "CONFLICTING",
        "mergedAt": null,
        "number": 10470,
        "state": "OPEN",
        "title": "Fix for listsinceblock not filtering conflicted transactions",
        "updatedAt": "2017-12-30T11:11:09Z"
    },
    {
        "additions": 0,
        "author": {
            "avatarUrl": "https://avatars3.githubusercontent.com/u/3782274?v=4",
            "login": "achow101",
            "url": "https://github.com/achow101"
        },
        "body": "Removed because these RPCs are for tests only and are now unused",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/548488?v=4",
                        "login": "sipa"
                    },
                    "body": "@theuni These RPCs were added in #8680, and never used (only `waitforblockatheight` was ever used). Is there a plan or expectation that they'll ever be needed?",
                    "id": "MDEyOklzc3VlQ29tbWVudDMwNjA1ODcwNw==",
                    "publishedAt": "2017-06-04T18:42:25Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10519#issuecomment-306058707"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/3020646?v=4",
                        "login": "NicolasDorier"
                    },
                    "body": "I did not know it existed, but I think it is very useful, I would use it if I am sure it stays.\r\n\r\nEasier to use than configuring blocknotify or ZMQ.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMwNjExOTY5OA==",
                    "publishedAt": "2017-06-05T07:11:30Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10519#issuecomment-306119698"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "Would be nice to have a test for them, if we keep them.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMwNjE5MjE1Ng==",
                    "publishedAt": "2017-06-05T13:50:06Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10519#issuecomment-306192156"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/417043?v=4",
                        "login": "theuni"
                    },
                    "body": "@sipa If ever used, I figured it'd only be to make some python tests less cumbersome.\r\n\r\n@jnewbery Do you have any use for these? Otherwise, I'd be fine with removing.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMwNjIxODI5OA==",
                    "publishedAt": "2017-06-05T15:28:19Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10519#issuecomment-306218298"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1063656?v=4",
                        "login": "jnewbery"
                    },
                    "body": "> @jnewbery Do you have any use for these? Otherwise, I'd be fine with removing.\r\n\r\nNot currently, although they may be useful for some tests. On the other hand, it's just as easy to call `getbestblockhash` or `getblock` in a loop until the desired block has been accepted.\r\n\r\nI have no issue with these being removed or staying (as long as they remain hidden and not part of the public API).",
                    "id": "MDEyOklzc3VlQ29tbWVudDMwNjIyNTI3MQ==",
                    "publishedAt": "2017-06-05T15:52:59Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10519#issuecomment-306225271"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
                        "login": "MarcoFalke"
                    },
                    "body": "I am ok with removing or keeping and adding tests. Though, it seems the functionality is redundant:\r\n\r\n* waitfornewblock() ---> waitforblockheight(current_height + 1)\r\n* waitforblock(hash) ---> waitforblockheight(hash_height) && getblockhash(hash_height) == hash",
                    "id": "MDEyOklzc3VlQ29tbWVudDMwNjI0NjE1NA==",
                    "publishedAt": "2017-06-05T17:10:18Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10519#issuecomment-306246154"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
                        "login": "MarcoFalke"
                    },
                    "body": "utACK 5fc1253bb8b95d34880e565cb2aa193caab06d71",
                    "id": "MDEyOklzc3VlQ29tbWVudDMwNjI0NjIyNA==",
                    "publishedAt": "2017-06-05T17:10:32Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10519#issuecomment-306246224"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/417043?v=4",
                        "login": "theuni"
                    },
                    "body": "@MarcoFalke They're intended to be atomic operations as we were dealing with some test race issues a while back. They're indeed redundant if atomicity isn't needed.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMwNjI0OTg1OQ==",
                    "publishedAt": "2017-06-05T17:23:56Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10519#issuecomment-306249859"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/3020646?v=4",
                        "login": "NicolasDorier"
                    },
                    "body": "well, I think they are useful. Instead of polling for new block I would definitively use that. I just did not know it existed.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMwNjM1NDg4MA==",
                    "publishedAt": "2017-06-06T01:23:30Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10519#issuecomment-306354880"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/548488?v=4",
                        "login": "sipa"
                    },
                    "body": "utACK b69194916c5fc8ebdaebb04e3cc6c4aab37e1c49",
                    "id": "MDEyOklzc3VlQ29tbWVudDMwNjQwMDA5NA==",
                    "publishedAt": "2017-06-06T07:02:40Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10519#issuecomment-306400094"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/3782274?v=4",
                        "login": "achow101"
                    },
                    "body": "rebased",
                    "id": "MDEyOklzc3VlQ29tbWVudDMyMjYwMTA4Nw==",
                    "publishedAt": "2017-08-15T21:56:50Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10519#issuecomment-322601087"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
                        "login": "promag"
                    },
                    "body": "utACK b691949.\r\n\r\nIMO blocking or long pool RPC/REST calls should be avoided. ",
                    "id": "MDEyOklzc3VlQ29tbWVudDMyMjY4OTA1Ng==",
                    "publishedAt": "2017-08-16T07:27:06Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10519#issuecomment-322689056"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/3020646?v=4",
                        "login": "NicolasDorier"
                    },
                    "body": "I think this should not be removed, but documented. Right now the only way to get block notification is to connect to to the P2P layer or use ZeroMQ. Both requires additional configuration. (also, I have never managed to make ZeroMQ notifications works with a .NET Client)\r\nI end up connecting to my node by P2P to get new blocks.\r\n\r\nI would have known that such RPC method existed, I would have definitively used it in place of my current solution.\r\n\r\nI think a `WaitWalletTransaction` would also be higly helpful, as right now, I either end up with polling `listtransactions` or even implement my own tracking not relying on Core, just because polling `listtransaction` is not reactive enough.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMyMjk1MzcxNw==",
                    "publishedAt": "2017-08-17T02:43:15Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10519#issuecomment-322953717"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/1095675?v=4",
                        "login": "luke-jr"
                    },
                    "body": "@NicolasDorier FYI there is also `blocknotify`",
                    "id": "MDEyOklzc3VlQ29tbWVudDMyMjk1NDQzMg==",
                    "publishedAt": "2017-08-17T02:48:37Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10519#issuecomment-322954432"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/3020646?v=4",
                        "login": "NicolasDorier"
                    },
                    "body": "Same problem as ZeroMQ. It requires additional configuration on the bitcoin node, but it is even worse, because you need additional plumbing code so the `blocknotify` program can notify the program interested by the event (by pipe, other queueing mechanism, or HTTP callback which add a dependency to curl, which is not easy to install on all environments).... It add one more layer to the problem than ZeroMQ, this is a pain. \r\n\r\nWaitBlock/WaitWalletTransaction makes things so much easy, it introduces zero dependency and require zero conf. Please do not remove it. :/",
                    "id": "MDEyOklzc3VlQ29tbWVudDMyMjk2NTU0MA==",
                    "publishedAt": "2017-08-17T04:25:24Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10519#issuecomment-322965540"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1063656?v=4",
                        "login": "jnewbery"
                    },
                    "body": "@NicolasDorier - Be careful about using these RPCs in product code. They were introduced as test tools only and there is no guarantee that they will work as you expect. For example, I just managed to break bitcoind's RPC server by running 4 `waitfornewblock` requests in parallel. Any request after that fails, and I don't think there's any way to cancel the `waitfornewblock` requests.\r\n\r\nThere are also no tests for them and they are hidden debug RPCs, so it's likely you'd be the only one using them, which increases the risk of regressions.\r\n\r\nI'm slightly averse to long-polling RPCs in general, but I'm also not too concerned if these stay (with the provisos above).",
                    "id": "MDEyOklzc3VlQ29tbWVudDMyMzA5NDE5NA==",
                    "publishedAt": "2017-08-17T14:42:28Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10519#issuecomment-323094194"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
                        "login": "promag"
                    },
                    "body": "Agree with @jnewbery. You can have a small utility to listen zmq messages and forward in the most suitable transport for your .NET app.\r\n\r\nAnd I think doing that to some kind of queue would benefit both parts, specially if the queue has means to easily notify your app.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMyMzEwMjExNA==",
                    "publishedAt": "2017-08-17T15:10:33Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10519#issuecomment-323102114"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/3020646?v=4",
                        "login": "NicolasDorier"
                    },
                    "body": "@jnewbery I know there is a maximum number of concurrent requests, this can be notified to the user when it happens.\r\n\r\n@promag I enumerated the problems of using ZMQ above. This just make it harder to build stuff on top of Core by making it require more configuration and dependency.\r\nIt is easier to connect to the P2P layer and listen for new block than it is to setup ZMQ, and listening through it with a cross plateform library.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMyMzI4NjA3MA==",
                    "publishedAt": "2017-08-18T07:54:15Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10519#issuecomment-323286070"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
                        "login": "promag"
                    },
                    "body": "> making it require more configuration\r\n\r\n@NicolasDorier IMO that\u00b4s fine. Even if there was websocket support, it should have/require configuration before it could be used. You also configure RPC right?\r\n\r\n> and dependency.\r\n\r\nI agree that there should be pure HTTP notifications but for the moment adding some zmq client to the playground doesn't seem like a real issue.\r\n\r\nAnother option is to allow only one waitforblock and waitfornewblock consumer?",
                    "id": "MDEyOklzc3VlQ29tbWVudDMyMzI4ODI5Nw==",
                    "publishedAt": "2017-08-18T08:05:27Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10519#issuecomment-323288297"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/3020646?v=4",
                        "login": "NicolasDorier"
                    },
                    "body": "@promag no I do not configure RPC. If bitcoin is running with default parameters, I can connect to it through the wellknown port and wellknown cookiefile.\r\n\r\nI do not use either blocknotify and ZMQ because it makes my users config stuff and add dependencies. This requires me to document and to know how to install those dependencies on the plateforms I support (as well as testing them).\r\n\r\nAt one point it will be easier to develop a wallet connected via P2P to a trusted node from scratch than using RPC, which is a shame.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMyMzMwMDU4MQ==",
                    "publishedAt": "2017-08-18T09:03:04Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10519#issuecomment-323300581"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/3782274?v=4",
                        "login": "achow101"
                    },
                    "body": "Rebased",
                    "id": "MDEyOklzc3VlQ29tbWVudDMzMDQwNzY3OA==",
                    "publishedAt": "2017-09-19T02:11:29Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10519#issuecomment-330407678"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/3020646?v=4",
                        "login": "NicolasDorier"
                    },
                    "body": "If https://github.com/bitcoin/bitcoin/pull/7949 would be merged, I would see no problem removing this rpc method.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1NjY0OTk2OA==",
                    "publishedAt": "2018-01-10T16:09:59Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10519#issuecomment-356649968"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "Needs rebase, if still relevant. (seems to have been dorment for a long time)",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MTI0NDY4NA==",
                    "publishedAt": "2018-03-07T18:54:46Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10519#issuecomment-371244684"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/3020646?v=4",
                        "login": "NicolasDorier"
                    },
                    "body": "Seems like nobody is using it, and on my side I am not at ease using something that might disappear tomorrow, so feel free to delete it.\r\n\r\nBut I still think it is a shame, this is the most useful RPC call ever! :(",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MTI1MDYxNQ==",
                    "publishedAt": "2018-03-07T19:12:30Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10519#issuecomment-371250615"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/3782274?v=4",
                        "login": "achow101"
                    },
                    "body": "Rebased",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MTI1MjA4NA==",
                    "publishedAt": "2018-03-07T19:17:15Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10519#issuecomment-371252084"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
                        "login": "MarcoFalke"
                    },
                    "body": "utACK c26ffdb5adcbab58ab12509d22123b96ae2ae4a8, but I'd prefer if we removed all of their kind.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MTM1NDM2Ng==",
                    "publishedAt": "2018-03-08T02:11:41Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10519#issuecomment-371354366"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/9156103?v=4",
                        "login": "nopara73"
                    },
                    "body": "NACK.\r\n\r\n`waitfor...` RPC calls are very useful. They should be documented rather than removed. If they ruin some coding best practices, then remove it, otherwise don't.\r\n\r\nImagine a wallet daemon that gives you p2pkh only through RPC, it gives you p2wpkh only through ZMQ and it gives you p2wpkh over p2sh only through websockets. Sure that works, but you must have 3 different communication channels properly implemented and configured in order to get all three of them. **The more communication protocols a software uses the less reliable it is.** Networking may be the trickiest coding challenge, where so many little things can go wrong.\r\n\r\nhttps://github.com/MetacoSA/NBitcoin/pull/363\r\nhttps://github.com/nopara73/MagicalCryptoWallet/issues/32\r\nhttps://github.com/nopara73/MagicalCryptoWallet/issues/40",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MTQ2NTg4Mw==",
                    "publishedAt": "2018-03-08T11:52:45Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10519#issuecomment-371465883"
                }
            ],
            "totalCount": 27
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "adf30f96bf2cf8cc43ebb73da2edb510f09ac313"
                    }
                }
            ],
            "totalCount": 1
        },
        "createdAt": "2017-06-03T16:36:30Z",
        "deletions": 84,
        "id": "MDExOlB1bGxSZXF1ZXN0MTIzODQ4MTA5",
        "labels": {
            "nodes": [
                {
                    "color": "0052cc",
                    "id": "MDU6TGFiZWw5ODI3OTE3Nw==",
                    "name": "RPC/REST/ZMQ"
                },
                {
                    "color": "d4c5f9",
                    "id": "MDU6TGFiZWw2Mjk2MzUxNg==",
                    "name": "Tests"
                }
            ],
            "totalCount": 2
        },
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "number": 10519,
        "state": "OPEN",
        "title": "[RPC] Remove waitforblock and waitfornewblock",
        "updatedAt": "2018-03-08T21:35:20Z"
    },
    {
        "additions": 138,
        "author": {
            "avatarUrl": "https://avatars1.githubusercontent.com/u/2715638?v=4",
            "login": "somdoron",
            "url": "https://github.com/somdoron"
        },
        "body": "There is no way to only get real time notifications of transaction that affect the wallet.\r\nYou have to do that manually by enabling zmqrawtx and filter out transactions.\r\n\r\nI'm suggesting adding two new publisers, both for hash and raw wallet transactions.\r\n\r\nAlso topic will indicate if transaction came from mempool or block so developers can handle the transaction accordingly without a RPC round trip to bitcoind.\r\n\r\nTests and documentation are updated.",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "Concept ACK - however some comments:\r\n\r\n- This should respect `ENABLE_WALLET`, for compiling without wallet support\r\n- It should respect runtime `-wallet=0`\r\n- Wallet events should not go through `CValidationInterface`, it is for validation events only.  To do this correctly, zmq should subscribe to wallet events through `CWallet` directly.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMwNzEyNDY4NQ==",
                    "publishedAt": "2017-06-08T14:41:41Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10554#issuecomment-307124685"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/2715638?v=4",
                        "login": "somdoron"
                    },
                    "body": "@ryanofsky fixed the type, wrapped the docs and using `const uint256 &hashBlock`\r\n@laanwj using wallet directly (without going through CValidationInterface)  and respecting  `ENABLE_WALLET`. Respecting `-wallet=0` by checking if `pwalletMain` is not null.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMwNzI1MTA2Mg==",
                    "publishedAt": "2017-06-08T23:05:28Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10554#issuecomment-307251062"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/2715638?v=4",
                        "login": "somdoron"
                    },
                    "body": "@ryanofsky @laanwj rebased the pull request on top of @jnewbery pull request #10555 and now all tests are passing",
                    "id": "MDEyOklzc3VlQ29tbWVudDMwNzU4ODk1OA==",
                    "publishedAt": "2017-06-10T20:39:46Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10554#issuecomment-307588958"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/548488?v=4",
                        "login": "sipa"
                    },
                    "body": "Does ZMQ have any authentication? I believe originally nothing wallet-related was exposed through it, as there may at least by privacy issues from publishing this.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMwNzk1NzYyMQ==",
                    "publishedAt": "2017-06-12T22:52:35Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10554#issuecomment-307957621"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/2715638?v=4",
                        "login": "somdoron"
                    },
                    "body": "zeromq does have authentication, but it is not being used within bitcoind.\r\nDo you think it is needed here? my only counter argument is that it should be exposed to internal network and trusted peers only.\r\n\r\nBut if you feel that it is needed I can add authentication for the wallet publishers.\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDMwODAyMjIwMA==",
                    "publishedAt": "2017-06-13T06:41:29Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10554#issuecomment-308022200"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "> Do you think it is needed here? my only counter argument is that it should be exposed to internal network and trusted peers only.\r\n\r\nWe could just add a warning (to the option help enabling this) that the API is unauthenticated, and thus wallet notifications should not be used when the zmq endpoints are accessible to other users - they can be restricted by other means, e.g. binding locally, binding to UNIX socket, firewall, etc.\r\n\r\n> But if you feel that it is needed I can add authentication for the wallet publishers.\r\n\r\nI'd insist on that only when adding control of the wallet to the ZMQ interface.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMwODAyOTAwMQ==",
                    "publishedAt": "2017-06-13T07:17:07Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10554#issuecomment-308029001"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/548488?v=4",
                        "login": "sipa"
                    },
                    "body": "I have no strong opinion on the need for authentication; I just wanted to bring up that I believed that was the reason for not having wallet specific notifications in ZMQ before.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMwODA0MjEzMw==",
                    "publishedAt": "2017-06-13T08:16:16Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10554#issuecomment-308042133"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
                        "login": "MarcoFalke"
                    },
                    "body": "Needs rebase.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMwOTI3NDc2MA==",
                    "publishedAt": "2017-06-18T12:27:42Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10554#issuecomment-309274760"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/2715638?v=4",
                        "login": "somdoron"
                    },
                    "body": "@MarcoFalke rebased",
                    "id": "MDEyOklzc3VlQ29tbWVudDMwOTgzMTE2NQ==",
                    "publishedAt": "2017-06-20T17:31:36Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10554#issuecomment-309831165"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/2715638?v=4",
                        "login": "somdoron"
                    },
                    "body": "@MarcoFalke fixed and rebased",
                    "id": "MDEyOklzc3VlQ29tbWVudDMwOTg3Nzk3NA==",
                    "publishedAt": "2017-06-20T20:14:56Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10554#issuecomment-309877974"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/7133040?v=4",
                        "login": "ryanofsky"
                    },
                    "body": "@somdoron are you still working on this? IIUC, luke's improvements could be implemented later without breaking backwards compatibility, if they are what's holding this up.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMzNjIxOTExNA==",
                    "publishedAt": "2017-10-12T18:05:46Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10554#issuecomment-336219114"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/2715638?v=4",
                        "login": "somdoron"
                    },
                    "body": "@ryanofsky yes, will rebase today and send a PR",
                    "id": "MDEyOklzc3VlQ29tbWVudDMzNzE1MzEzMA==",
                    "publishedAt": "2017-10-17T08:12:25Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10554#issuecomment-337153130"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/2715638?v=4",
                        "login": "somdoron"
                    },
                    "body": "@ryanofsky rebased and all tests passed. Doesn't yet include @luke-jr comments.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMzODQ1MzE2MQ==",
                    "publishedAt": "2017-10-22T05:38:31Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10554#issuecomment-338453161"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "I'm still unsure about this, if wtxs (protected by http auth) should be something we broadcast via ZMQ.\r\nAlternative would be HTTP based long polling (#7949).\r\n\r\nAlso, how does this handle multiwallet? Should we somehow integrate the wallet identifier in the notifications?",
                    "id": "MDEyOklzc3VlQ29tbWVudDMzODUyNTQxNA==",
                    "publishedAt": "2017-10-23T01:26:59Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10554#issuecomment-338525414"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/7133040?v=4",
                        "login": "ryanofsky"
                    },
                    "body": "For some reason travis is failing with `contrib/devtools/lint-python.sh: 10: contrib/devtools/lint-python.sh: flake8: not found`. It's possible a rebase might fix this.\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1NjQwMjU0Nw==",
                    "publishedAt": "2018-01-09T20:20:48Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10554#issuecomment-356402547"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
                        "login": "promag"
                    },
                    "body": "> Alternative would be HTTP based long polling (#7949).\r\n\r\nI tend to agree with @jonasschnelli alternative.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1NjY0MzY1Ng==",
                    "publishedAt": "2018-01-10T15:51:09Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10554#issuecomment-356643656"
                }
            ],
            "totalCount": 16
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "ed4fd266f78f9fea8dd0e4cb94553e55171fb7d2"
                    }
                }
            ],
            "totalCount": 2
        },
        "createdAt": "2017-06-08T13:21:56Z",
        "deletions": 8,
        "id": "MDExOlB1bGxSZXF1ZXN0MTI0NjQ4OTEy",
        "labels": {
            "nodes": [
                {
                    "color": "0052cc",
                    "id": "MDU6TGFiZWw5ODI3OTE3Nw==",
                    "name": "RPC/REST/ZMQ"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "CONFLICTING",
        "mergedAt": null,
        "number": 10554,
        "state": "OPEN",
        "title": "ZMQ: add publishers for wallet transactions.",
        "updatedAt": "2018-01-10T15:51:10Z"
    },
    {
        "additions": 4,
        "author": {
            "avatarUrl": "https://avatars3.githubusercontent.com/u/3782274?v=4",
            "login": "achow101",
            "url": "https://github.com/achow101"
        },
        "body": "Rationale:\r\n\r\nSafe mode is useless. It only disables some RPC commands when large work forks are detected. Nothing else is affected by safe mode. It seems that very few people would be affected by safe mode. The people who use Core as a wallet are primarily using it through the GUI, which safe mode does not effect. In the GUI, transactions will still be made as normal; only a warning is displayed. \r\n\r\nI also don't think that we should be disabling RPC commands or any functionality in general. If we do, it should be done consistently, which safe mode is not. If we want to keep the idea of a safe mode around, I think that the current system needs to go first before a new system can be implemented.",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/858454?v=4",
                        "login": "gmaxwell"
                    },
                    "body": "Hm! It's not clear if we should be removing this, or making it better, or removing it as a first step in making it better.\r\n\r\nI think it's desirable to have your wallet be able to fail-safe when it has detected something awful is going on with the network.  Right now this ability is underused and inconsistent. \r\n\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDMwNzI3Mzk0NQ==",
                    "publishedAt": "2017-06-09T01:55:07Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10563#issuecomment-307273945"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/3782274?v=4",
                        "login": "achow101"
                    },
                    "body": "I should probably be made better, but its current state, IMO, isn't very useful. It only disables a couple of RPC commands in the event of a large fork (and detection of those are apparently broken - see #9443). The wallet itself and the GUI (which most users use) don't actually do anything when safe mode is triggered. All they do is display a warning about the large work fork that it has detected.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMwNzI3NTEyNA==",
                    "publishedAt": "2017-06-09T02:03:29Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10563#issuecomment-307275124"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "You don't provide *any* rationale.\r\nAs is, NACK.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMwNzM2MTk2Nw==",
                    "publishedAt": "2017-06-09T11:11:00Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10563#issuecomment-307361967"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/3782274?v=4",
                        "login": "achow101"
                    },
                    "body": "@laanwj I added some rationale in the first post.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMwNzQ1NTY2Nw==",
                    "publishedAt": "2017-06-09T17:50:03Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10563#issuecomment-307455667"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "What to do with safe mode should be discussed some time before 0.16.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMxNzcyMDI2MQ==",
                    "publishedAt": "2017-07-25T12:20:34Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10563#issuecomment-317720261"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/494411?v=4",
                        "login": "jgarzik"
                    },
                    "body": "concept ACK\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDMxNzc4MDM4OA==",
                    "publishedAt": "2017-07-25T15:44:33Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10563#issuecomment-317780388"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/649246?v=4",
                        "login": "TheBlueMatt"
                    },
                    "body": "Yea, I really think this should be improved, not removed, but should be discussed in a meeting, likely.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMxNzg0MTIwNQ==",
                    "publishedAt": "2017-07-25T19:09:59Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10563#issuecomment-317841205"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/3782274?v=4",
                        "login": "achow101"
                    },
                    "body": "rebased",
                    "id": "MDEyOklzc3VlQ29tbWVudDMyMjYwMDQwOQ==",
                    "publishedAt": "2017-08-15T21:53:26Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10563#issuecomment-322600409"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
                        "login": "MarcoFalke"
                    },
                    "body": "Needs rebase if still relevant.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMyNzI0MjQxNw==",
                    "publishedAt": "2017-09-05T17:09:42Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10563#issuecomment-327242417"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/3782274?v=4",
                        "login": "achow101"
                    },
                    "body": "Rebased (rewritten really).",
                    "id": "MDEyOklzc3VlQ29tbWVudDMyNzI4MzcwMg==",
                    "publishedAt": "2017-09-05T19:49:32Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10563#issuecomment-327283702"
                }
            ],
            "totalCount": 10
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "809519da9a912e8a1b7313d433a646f9fc371086"
                    }
                }
            ],
            "totalCount": 1
        },
        "createdAt": "2017-06-09T01:06:56Z",
        "deletions": 67,
        "id": "MDExOlB1bGxSZXF1ZXN0MTI0NzczODE2",
        "labels": {
            "nodes": [
                {
                    "color": "0052cc",
                    "id": "MDU6TGFiZWw5ODI3OTE3Nw==",
                    "name": "RPC/REST/ZMQ"
                },
                {
                    "color": "E6F6D6",
                    "id": "MDU6TGFiZWwxMzU5NjE=",
                    "name": "Refactoring"
                }
            ],
            "totalCount": 2
        },
        "mergeable": "CONFLICTING",
        "mergedAt": null,
        "number": 10563,
        "state": "OPEN",
        "title": "Remove safe mode",
        "updatedAt": "2017-12-30T11:11:10Z"
    },
    {
        "additions": 99,
        "author": {
            "avatarUrl": "https://avatars2.githubusercontent.com/u/1095675?v=4",
            "login": "luke-jr",
            "url": "https://github.com/luke-jr"
        },
        "body": "Supercedes #10512 by simply restricting punishments to our outgoing non-feeler connections, and only punishing with a disconnect, not a ban.\r\n\r\nThis is necessary to avoid banning peers that merely run old formerly-full nodes, after a softfork. We disconnect primary peers because we want compatible full nodes for that role, but allow non-full nodes to remain connected to inbound slots so they can sync the correct chain from us.",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/127186?v=4",
                        "login": "ajtowns"
                    },
                    "body": "This seems like a reasonable approach to me; any idea why stop_node in the zapwallettxes test isn't getting a 0 exit code?",
                    "id": "MDEyOklzc3VlQ29tbWVudDMwOTcyNzEyNA==",
                    "publishedAt": "2017-06-20T11:39:15Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10593#issuecomment-309727124"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/1095675?v=4",
                        "login": "luke-jr"
                    },
                    "body": "@ajtowns Not sure what you're asking? The tests are passing...",
                    "id": "MDEyOklzc3VlQ29tbWVudDMxMjc5MjIwNg==",
                    "publishedAt": "2017-07-04T06:32:28Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10593#issuecomment-312792206"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/127186?v=4",
                        "login": "ajtowns"
                    },
                    "body": "I guess whatever I saw was a transient error then (or I was just confused)...",
                    "id": "MDEyOklzc3VlQ29tbWVudDMxMjk4NDc1MA==",
                    "publishedAt": "2017-07-05T02:56:35Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10593#issuecomment-312984750"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/649246?v=4",
                        "login": "TheBlueMatt"
                    },
                    "body": "Have we considered preferring a relatively short-time-period ban instead of purely disconnecting? If the peer is somehow braindead and tries to reconnect immediately we may prefer to keep them gone for 30 minutes or an hour instead of letting them get into some loop of connect-relay-disconnect.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMzNDYwNzQ5NQ==",
                    "publishedAt": "2017-10-05T22:16:36Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10593#issuecomment-334607495"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/7463573?v=4",
                        "login": "sdaftuar"
                    },
                    "body": "It seems like this reverts #8305 with no mechanism to replace that functionality. Rationale?  This looks like a regression.  NACK.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMzNDgzOTQxNg==",
                    "publishedAt": "2017-10-06T18:48:46Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10593#issuecomment-334839416"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/3782274?v=4",
                        "login": "achow101"
                    },
                    "body": "It was mentioned during the IRC meeting that this already did what I am planning on doing in #11446. However this doesn't seem to cover the case that I am concerned about: receiving a header for a block we have already marked as invalid. In such a case, `nDos` will be 0 and thus the peer won't be punished for relaying us the duplicate header.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMzNDk0NjY5MQ==",
                    "publishedAt": "2017-10-07T16:16:37Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10593#issuecomment-334946691"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/1095675?v=4",
                        "login": "luke-jr"
                    },
                    "body": "> It seems like this reverts #8305 with no mechanism to replace that functionality. \r\n\r\nI don't see how. The conditions this disconnects peers is a superset of the conditions #8305 did.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMzOTc3NjMwOQ==",
                    "publishedAt": "2017-10-26T19:33:21Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10593#issuecomment-339776309"
                }
            ],
            "totalCount": 7
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "36da9f1f9d00f2b6e6d221ae6dc00ba8425abf19"
                    }
                }
            ],
            "totalCount": 6
        },
        "createdAt": "2017-06-14T21:42:09Z",
        "deletions": 52,
        "id": "MDExOlB1bGxSZXF1ZXN0MTI1Njk5MzIw",
        "labels": {
            "nodes": [
                {
                    "color": "006b75",
                    "id": "MDU6TGFiZWw5ODI5ODAwNw==",
                    "name": "P2P"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "CONFLICTING",
        "mergedAt": null,
        "number": 10593,
        "state": "OPEN",
        "title": "Relax punishment for peers relaying invalid blocks and headers",
        "updatedAt": "2018-03-12T06:03:12Z"
    },
    {
        "additions": 5,
        "author": {
            "avatarUrl": "https://avatars2.githubusercontent.com/u/1095675?v=4",
            "login": "luke-jr",
            "url": "https://github.com/luke-jr"
        },
        "body": "Whitelisting currently only works for inbound connections, but would be useful for outgoing just as well.",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "Concept ACK, but the [documentation for `-whitelist`](https://github.com/bitcoin/bitcoin/blob/228c319a944b0ba7c835b1909ee1c2056c652eb1/src/init.cpp#L418-L419) would need to be updated updated as well?",
                    "id": "MDEyOklzc3VlQ29tbWVudDMwODU3MTI4OA==",
                    "publishedAt": "2017-06-14T22:03:04Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10594#issuecomment-308571288"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/1095675?v=4",
                        "login": "luke-jr"
                    },
                    "body": "(Updated docs)",
                    "id": "MDEyOklzc3VlQ29tbWVudDMwODY0MTczMg==",
                    "publishedAt": "2017-06-15T06:31:38Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10594#issuecomment-308641732"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "utACK a511b894f310bb88fab32b3004c7a6671e296cee",
                    "id": "MDEyOklzc3VlQ29tbWVudDMwODY1NDA1MQ==",
                    "publishedAt": "2017-06-15T07:38:51Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10594#issuecomment-308654051"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/548488?v=4",
                        "login": "sipa"
                    },
                    "body": "utACK",
                    "id": "MDEyOklzc3VlQ29tbWVudDMwOTE2MTUyNw==",
                    "publishedAt": "2017-06-16T23:30:08Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10594#issuecomment-309161527"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "What is the difference with  #10051 by @rubensayshi?\r\nAnyhow, at least @gmaxwell didn't think it was a good idea there, should probably keep the discussion in one place...",
                    "id": "MDEyOklzc3VlQ29tbWVudDMxMDg0MDU1NQ==",
                    "publishedAt": "2017-06-24T14:07:06Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10594#issuecomment-310840555"
                }
            ],
            "totalCount": 5
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "416f9b9541f0df793762a188abe17fafdde8fabc"
                    }
                }
            ],
            "totalCount": 1
        },
        "createdAt": "2017-06-14T21:43:02Z",
        "deletions": 2,
        "id": "MDExOlB1bGxSZXF1ZXN0MTI1Njk5NDU3",
        "labels": {
            "nodes": [
                {
                    "color": "006b75",
                    "id": "MDU6TGFiZWw5ODI5ODAwNw==",
                    "name": "P2P"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "number": 10594,
        "state": "OPEN",
        "title": "Bugfix: net: Apply whitelisting criteria to outgoing connections",
        "updatedAt": "2017-12-30T11:11:11Z"
    },
    {
        "additions": 8,
        "author": {
            "avatarUrl": "https://avatars2.githubusercontent.com/u/1095675?v=4",
            "login": "luke-jr",
            "url": "https://github.com/luke-jr"
        },
        "body": "",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/548488?v=4",
                        "login": "sipa"
                    },
                    "body": "utACK 4292a752c7eb59ef2cbee70b5cd186eedf16d0dc",
                    "id": "MDEyOklzc3VlQ29tbWVudDMwOTE2MTczMw==",
                    "publishedAt": "2017-06-16T23:31:40Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10595#issuecomment-309161733"
                }
            ],
            "totalCount": 1
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "4292a752c7eb59ef2cbee70b5cd186eedf16d0dc"
                    }
                }
            ],
            "totalCount": 1
        },
        "createdAt": "2017-06-15T07:20:31Z",
        "deletions": 2,
        "id": "MDExOlB1bGxSZXF1ZXN0MTI1NzU2ODY3",
        "labels": {
            "nodes": [
                {
                    "color": "c7def8",
                    "id": "MDU6TGFiZWwxMTgzNzg5NjA=",
                    "name": "Mining"
                },
                {
                    "color": "0052cc",
                    "id": "MDU6TGFiZWw5ODI3OTE3Nw==",
                    "name": "RPC/REST/ZMQ"
                }
            ],
            "totalCount": 2
        },
        "mergeable": "CONFLICTING",
        "mergedAt": null,
        "number": 10595,
        "state": "OPEN",
        "title": "Bugfix: RPC/Mining: Use pre-segwit sigops and limits, when working with non-segwit GBT clients",
        "updatedAt": "2017-12-30T11:11:12Z"
    },
    {
        "additions": 15,
        "author": {
            "avatarUrl": "https://avatars2.githubusercontent.com/u/7133040?v=4",
            "login": "ryanofsky",
            "url": "https://github.com/ryanofsky"
        },
        "body": "Fixes TODO from #10295",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/548488?v=4",
                        "login": "sipa"
                    },
                    "body": "utACK 5c7a7de7b38a84a3ba1e6c26dd1af67236dad891",
                    "id": "MDEyOklzc3VlQ29tbWVudDMwOTE0NDEzNQ==",
                    "publishedAt": "2017-06-16T21:59:08Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10605#issuecomment-309144135"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "**Be careful here: this is dependent on a PR that has not been merged yet. Do not merge.**",
                    "id": "MDEyOklzc3VlQ29tbWVudDMxMDgyNzY0Mg==",
                    "publishedAt": "2017-06-24T09:23:22Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10605#issuecomment-310827642"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/7133040?v=4",
                        "login": "ryanofsky"
                    },
                    "body": "> Be careful here: this is dependent on a PR that has not been merged yet. Do not merge.\r\n\r\nDependent PR #10244 got merged, so this is now safe to merge too.\r\n\r\n---\r\n\r\nRebased 5c7a7de7b38a84a3ba1e6c26dd1af67236dad891 -> 8392051595c615216f3857d54a80cf708ed1f29e ([pr/listlock.1](https://github.com/ryanofsky/bitcoin/commits/pr/listlock.1) -> [pr/listlock.2](https://github.com/ryanofsky/bitcoin/commits/pr/listlock.2)) due to conflict with #11126\r\nRebased 8392051595c615216f3857d54a80cf708ed1f29e -> cc69e88921725bed4b1e11823914aa8e418b7220 ([pr/listlock.2](https://github.com/ryanofsky/bitcoin/commits/pr/listlock.2) -> [pr/listlock.3](https://github.com/ryanofsky/bitcoin/commits/pr/listlock.3))\r\nRebased cc69e88921725bed4b1e11823914aa8e418b7220 -> a6c634013b7cf5d74bea68e51c011effcd7fc11d ([pr/listlock.3](https://github.com/ryanofsky/bitcoin/commits/pr/listlock.3) -> [pr/listlock.4](https://github.com/ryanofsky/bitcoin/commits/pr/listlock.4)) due to conflicts with #10295 and #12333\r\nRebased a6c634013b7cf5d74bea68e51c011effcd7fc11d -> 8740c61a334b3774984cfd1a3d67e33e68adb96a ([pr/listlock.4](https://github.com/ryanofsky/bitcoin/commits/pr/listlock.4) -> [pr/listlock.5](https://github.com/ryanofsky/bitcoin/commits/pr/listlock.5))\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3OTMyOTk1Nw==",
                    "publishedAt": "2018-04-06T17:58:40Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10605#issuecomment-379329957"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
                        "login": "promag"
                    },
                    "body": "utACK 8740c61.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3OTM4MzM1Mg==",
                    "publishedAt": "2018-04-06T21:19:13Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10605#issuecomment-379383352"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/7133040?v=4",
                        "login": "ryanofsky"
                    },
                    "body": "Rebased 8740c61a334b3774984cfd1a3d67e33e68adb96a -> 545e85eccc2441c6d7745bb90d88dc14718455a2 ([pr/listlock.5](https://github.com/ryanofsky/bitcoin/commits/pr/listlock.5) -> [pr/listlock.6](https://github.com/ryanofsky/bitcoin/commits/pr/listlock.6)) due to conflict with #12920",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MDUwMDI0Mg==",
                    "publishedAt": "2018-04-11T15:45:07Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10605#issuecomment-380500242"
                }
            ],
            "totalCount": 5
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "545e85eccc2441c6d7745bb90d88dc14718455a2"
                    }
                }
            ],
            "totalCount": 1
        },
        "createdAt": "2017-06-15T19:44:09Z",
        "deletions": 13,
        "id": "MDExOlB1bGxSZXF1ZXN0MTI1ODk3MzE2",
        "labels": {
            "nodes": [
                {
                    "color": "08a781",
                    "id": "MDU6TGFiZWwxNDk0MjQ=",
                    "name": "Wallet"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "number": 10605,
        "state": "OPEN",
        "title": "Add AssertLockHeld assertions in CWallet::ListCoins",
        "updatedAt": "2018-04-11T15:45:08Z"
    },
    {
        "additions": 294,
        "author": {
            "avatarUrl": "https://avatars2.githubusercontent.com/u/1095675?v=4",
            "login": "luke-jr",
            "url": "https://github.com/luke-jr"
        },
        "body": "Simple rebase of current RPC stuff. No endpoints yet.",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1063656?v=4",
                        "login": "jnewbery"
                    },
                    "body": "Multi-user for multiwallet is definitely a very useful feature and one that we should be aiming for long-term, so this is good to see. I think the implementation some more work before its ready:\r\n\r\n- most importantly, having individual user wallet access authentication will give users the impression that it's safe to open RPC access to multiple users, which it absolutely isn't. Just using the standard RPC commands, a malicious user could cause mischief by stopping the node, changing consensus state using invalidateblock/preciousblock, eclipse the node using disconnectnode/addnode, etc. RPC is not a secure interface and we should be very careful to not give users the impression that it is.\r\n- this implementation adds a lot of `#ifdef ENABLE_WALLET`s to libbitcoin_server.a. We should be trying to remove those in order to remove circular dependency between libbitcoin_server.a and libbitcoin_wallet.a (see #7965). This PR would make future work to cleanly separate wallet from server more difficult.\r\n- this implementation needlessly binds multiwallet to multi-user. It does not allow a single user to have access to multiple wallets or select a wallet on a per-call basis.\r\n\r\nSo, definite concept ACK that we should do this, but I think it should be sequenced *after* wallet separation. That would make the implementation a lot cleaner and make it easier to provide an implementation that is secure and safe for users.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMxMTY1Nzc1Nw==",
                    "publishedAt": "2017-06-28T13:20:35Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10615#issuecomment-311657757"
                }
            ],
            "totalCount": 1
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "eef48ee325fd08842e02df28f896395237a24524"
                    }
                }
            ],
            "totalCount": 12
        },
        "createdAt": "2017-06-16T20:52:49Z",
        "deletions": 67,
        "id": "MDExOlB1bGxSZXF1ZXN0MTI2MTEzMjQw",
        "labels": {
            "nodes": [
                {
                    "color": "0052cc",
                    "id": "MDU6TGFiZWw5ODI3OTE3Nw==",
                    "name": "RPC/REST/ZMQ"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "CONFLICTING",
        "mergedAt": null,
        "number": 10615,
        "state": "OPEN",
        "title": "RPC: Allow rpcauth configs to specify a 4th parameter naming a specific wallet (multiwallet RPC support)",
        "updatedAt": "2018-03-06T19:19:57Z"
    },
    {
        "additions": 20,
        "author": {
            "avatarUrl": "https://avatars3.githubusercontent.com/u/1008458?v=4",
            "login": "jtimon",
            "url": "https://github.com/jtimon"
        },
        "body": "This simplifies generateBlocks and further encapsulates the use of nNonce and nBits inside pow.o by introducing a new function MaybeGenerateProof.\r\n\r\nThis should be helpful for any attempt to support a testnet with signed blocks (see #9177 )",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/3211283?v=4",
                        "login": "MeshCollider"
                    },
                    "body": "utACK https://github.com/bitcoin/bitcoin/pull/10669/commits/f91c9df38bfb74c897896a0d0c59a77539e9e26a",
                    "id": "MDEyOklzc3VlQ29tbWVudDMyNTA3NzI3OA==",
                    "publishedAt": "2017-08-26T02:54:13Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10669#issuecomment-325077278"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1008458?v=4",
                        "login": "jtimon"
                    },
                    "body": "Fixed @sipa 's nit.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMyNTUwOTA0Ng==",
                    "publishedAt": "2017-08-28T23:15:08Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10669#issuecomment-325509046"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1008458?v=4",
                        "login": "jtimon"
                    },
                    "body": "Rebased for no reason.\r\n  ",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1NjE3NDIzOQ==",
                    "publishedAt": "2018-01-09T04:06:11Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10669#issuecomment-356174239"
                }
            ],
            "totalCount": 3
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "2382bf75a06b72072dcd0825e4de9808ae44c50c"
                    }
                }
            ],
            "totalCount": 1
        },
        "createdAt": "2017-06-25T08:55:57Z",
        "deletions": 10,
        "id": "MDExOlB1bGxSZXF1ZXN0MTI3MzU3NDk0",
        "labels": {
            "nodes": [
                {
                    "color": "c7def8",
                    "id": "MDU6TGFiZWwxMTgzNzg5NjA=",
                    "name": "Mining"
                },
                {
                    "color": "E6F6D6",
                    "id": "MDU6TGFiZWwxMzU5NjE=",
                    "name": "Refactoring"
                }
            ],
            "totalCount": 2
        },
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "number": 10669,
        "state": "OPEN",
        "title": "Pow: Introduce MaybeGenerateProof",
        "updatedAt": "2018-01-31T21:57:16Z"
    },
    {
        "additions": 49,
        "author": {
            "avatarUrl": "https://avatars1.githubusercontent.com/u/177646?v=4",
            "login": "narula",
            "url": "https://github.com/narula"
        },
        "body": "During a large reorg, the number of blocks kept in memory could grow to be very large.  This change makes it so that only the last 10 blocks are kept in memory, and if necessary, older blocks are re-read from disk.\r\n\r\nAlso introduce a parameter to FlushStateToDisk to ensure that we do not try to prune during the life of a ConnectTrace, because we might need to re-read the block from disk.\r\n\r\nAddresses https://github.com/bitcoin/bitcoin/issues/9027",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "Concept ACK (not looked to closely at the code yet).\r\n10 blocks seems to be little... maybe it should be configurable (most memory consuming processes are configurable right now).\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDMxMjA5MDkwNw==",
                    "publishedAt": "2017-06-29T20:13:33Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10708#issuecomment-312090907"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/858454?v=4",
                        "login": "gmaxwell"
                    },
                    "body": "why would ten be too little?  If it made the code simpler I would have expected it to just do one, reading them isn't free but it's not that expensive-- shouldn't be the limiting factor in reorg performance.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMxMjA5MzExNA==",
                    "publishedAt": "2017-06-29T20:22:31Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10708#issuecomment-312093114"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "> why would ten be too little?\r\n\r\nI kinda followed the assumption that some users want to reorg as fast as possible (I's probably often a tiny difference) regardless of the depth of the reorganisation. I guess those users do not care about using 200MB+ for tracing the blocks in mem during a reorg. But it's a wild assumptions and maybe I'm wrong.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMxMjA5OTY1NQ==",
                    "publishedAt": "2017-06-29T20:40:48Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10708#issuecomment-312099655"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/649246?v=4",
                        "login": "TheBlueMatt"
                    },
                    "body": "Well I'm not sure how many users are really focused on how long a 20 block reorg will take...should be sufficiently rare that a user spending a lot of time thinking about it is probably less than useful.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMxMjEwNjM4OQ==",
                    "publishedAt": "2017-06-29T20:56:46Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10708#issuecomment-312106389"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/858454?v=4",
                        "login": "gmaxwell"
                    },
                    "body": "@jonasschnelli reorgs are slow but for reasons that have nothing to do with reading blocks from the disk.  it can easily take many seconds to reorg 20 blocks, reading them will take a few milliseconds.  Making reorgs faster is great but I think this is the wrong place to optimize for that. ",
                    "id": "MDEyOklzc3VlQ29tbWVudDMxMjEwOTQxMg==",
                    "publishedAt": "2017-06-29T21:09:46Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10708#issuecomment-312109412"
                }
            ],
            "totalCount": 5
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "b7077bd98e218983d81be893195733c07efb62a6"
                    }
                }
            ],
            "totalCount": 2
        },
        "createdAt": "2017-06-29T20:04:31Z",
        "deletions": 28,
        "id": "MDExOlB1bGxSZXF1ZXN0MTI4MjM1NTcw",
        "labels": {
            "nodes": [
                {
                    "color": "6060aa",
                    "id": "MDU6TGFiZWwxMTgzNzk2NTI=",
                    "name": "Validation"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "CONFLICTING",
        "mergedAt": null,
        "number": 10708,
        "state": "OPEN",
        "title": "Connecttrace fewer blocks",
        "updatedAt": "2017-12-30T11:11:15Z"
    },
    {
        "additions": 35,
        "author": {
            "avatarUrl": "https://avatars2.githubusercontent.com/u/1095675?v=4",
            "login": "luke-jr",
            "url": "https://github.com/luke-jr"
        },
        "body": "When we last discussed making scripts debuggable (sometime after #3901), the plan was to instead trace execution rather than single-step through it.\r\n\r\nThis is the first step toward that goal. The full implementation can be found on my `script_debugger` branch.",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/1095675?v=4",
                        "login": "luke-jr"
                    },
                    "body": "Rebased",
                    "id": "MDEyOklzc3VlQ29tbWVudDMyNjcyNDA5OQ==",
                    "publishedAt": "2017-09-02T05:48:29Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10729#issuecomment-326724099"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1008458?v=4",
                        "login": "jtimon"
                    },
                    "body": "Concept ACK, will review",
                    "id": "MDEyOklzc3VlQ29tbWVudDMyNzM0MzkwMg==",
                    "publishedAt": "2017-09-06T00:58:07Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10729#issuecomment-327343902"
                }
            ],
            "totalCount": 2
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "caa09054cc8177a1cc386605bd7b71e85009973e"
                    }
                }
            ],
            "totalCount": 2
        },
        "createdAt": "2017-07-03T08:29:10Z",
        "deletions": 8,
        "id": "MDExOlB1bGxSZXF1ZXN0MTI4NTc3MTU1",
        "labels": {
            "nodes": [
                {
                    "color": "6060aa",
                    "id": "MDU6TGFiZWwxMTgzNzk2NTI=",
                    "name": "Validation"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "CONFLICTING",
        "mergedAt": null,
        "number": 10729,
        "state": "OPEN",
        "title": "Wrap EvalScript in a ScriptExecution class",
        "updatedAt": "2017-12-30T11:11:15Z"
    },
    {
        "additions": 1393,
        "author": {
            "avatarUrl": "https://avatars2.githubusercontent.com/u/1095675?v=4",
            "login": "luke-jr",
            "url": "https://github.com/luke-jr"
        },
        "body": "When we last discussed making scripts debuggable (sometime after #3901), the plan was to instead trace execution rather than single-step through it.\r\n\r\nThis is a dependency step toward that, and is eventually used for the RPC `verifyscript` to parse its `\"flags\"` option.\r\n\r\nSee also #10729 ",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "Needs rebase",
                    "id": "MDEyOklzc3VlQ29tbWVudDMxNDk5NTE5OA==",
                    "publishedAt": "2017-07-13T07:26:05Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10730#issuecomment-314995198"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/1095675?v=4",
                        "login": "luke-jr"
                    },
                    "body": "Rebased",
                    "id": "MDEyOklzc3VlQ29tbWVudDMyNjcyMTQ0MQ==",
                    "publishedAt": "2017-09-02T04:37:08Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10730#issuecomment-326721441"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "I'm okay with moving this out of the tests if it's necessary in another place, however the from/to string stuff doesn't belong with the interpreter consensus code IMO. Better to keep it in a separate compilation unit, like with the CBitcoinAddress split done in #11117.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMyNzYyODY3Nw==",
                    "publishedAt": "2017-09-06T22:23:08Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10730#issuecomment-327628677"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "@luke-jr ping?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0NTYzMTkxNg==",
                    "publishedAt": "2017-11-20T09:01:41Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10730#issuecomment-345631916"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/1095675?v=4",
                        "login": "luke-jr"
                    },
                    "body": "Hmm, so where would you suggest? Bundle it in with RPC-specific stuff?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0NTg0MDQyOA==",
                    "publishedAt": "2017-11-20T21:39:13Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10730#issuecomment-345840428"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/1095675?v=4",
                        "login": "luke-jr"
                    },
                    "body": "Rebased, and moved it to script/script_flags.{h,cpp} for now.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3Nzc2NzU1NA==",
                    "publishedAt": "2018-04-01T07:06:10Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10730#issuecomment-377767554"
                }
            ],
            "totalCount": 6
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "e2e183bc1f06e05b6d2aabe573689a8d111a97cc"
                    }
                }
            ],
            "totalCount": 3
        },
        "createdAt": "2017-07-03T08:32:08Z",
        "deletions": 1336,
        "id": "MDExOlB1bGxSZXF1ZXN0MTI4NTc3NjM4",
        "labels": {
            "nodes": [
                {
                    "color": "6060aa",
                    "id": "MDU6TGFiZWwxMTgzNzk2NTI=",
                    "name": "Validation"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "CONFLICTING",
        "mergedAt": null,
        "number": 10730,
        "state": "OPEN",
        "title": "Move script flag to/from-string logic from tests to script/interpreter",
        "updatedAt": "2018-04-01T07:06:10Z"
    },
    {
        "additions": 584,
        "author": {
            "avatarUrl": "https://avatars1.githubusercontent.com/u/417043?v=4",
            "login": "theuni",
            "url": "https://github.com/theuni"
        },
        "body": "This is a more involved version of #10697, which instead completely gets rid of our nasty AddRef() and Release() in favor of automatic lifetime management.\r\n\r\nSpecial care must be taken, though, to only delete CNodes from a single thread, and to control which thread that is. Eventually, this should move to the message processing thread, so that it's not possible to hit cs_main from the main network thread.\r\n\r\nIn order to do this safely, this PR introduces 2 new generic smart pointer types: strong_ptr and decay_ptr. They provide a functionality that I've wanted for a long time: the ability to safely decay a shared_ptr to a unique_ptr. That sounds somewhat nonsensical at first, but it's useful to be able to make copies of a pointer for a while, stop, wait until only one remains, then delete with guaranteed safety.\r\n\r\nPlease read shared_ptr.h and check out the tests before groaning. I think this is a very cool (and completely safe) pattern.\r\n\r\nThis functionality could potentially be accomplished with a shared_ptr and polling ptr.unique(), but that's inherently racy because a new copy could be created simultaneously. Even moving to a local instance and calling .unique() on that one is not safe, as a weak_ptr could be upgraded simultaneously.\r\n\r\nInstead, a strong_ptr is created which acts like a unique_ptr but allows shared_ptrs to be \"loaned\" out. Once a strong_ptr is moved into a decay_ptr, the strong_ptr is reset and no new loans may be created. The decay_ptr tracks the lifetime of the loaned copies, and knows whether or not they have all expired. This can be queried, with no race concerns, with decay_ptr::decay().\r\n\r\nAdditionally, if the loaned shared_ptrs for some reason outlive the strong_ptr/decay_ptr, they are safely deleted once the last loaned shared_ptr expires. So there is no risk of leaks.\r\n\r\nIn order to make review easier, these changes were made in a few stages:\r\n1. Where possible, make functions agnostic to the type of pointer being used\r\n2. Switch to shared_ptr but keep existing refcounting on top\r\n3. Switch to strong_ptr\r\n4. Drop existing refcounting and now-unnecessary locking.",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/417043?v=4",
                        "login": "theuni"
                    },
                    "body": "Note that https://github.com/bitcoin/bitcoin/pull/10697#issuecomment-311811754 applies here as well.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMxMjc1MTk2Ng==",
                    "publishedAt": "2017-07-04T00:03:22Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10738#issuecomment-312751966"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/417043?v=4",
                        "login": "theuni"
                    },
                    "body": "Test failure looks unrelated and matches another one here: https://travis-ci.org/bitcoin/bitcoin/jobs/248773151. Kicking off a new build.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMxMjc1NTMzOA==",
                    "publishedAt": "2017-07-04T00:45:45Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10738#issuecomment-312755338"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "Needs rebase.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMyNDI4NzMyMw==",
                    "publishedAt": "2017-08-23T10:22:45Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10738#issuecomment-324287323"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1008458?v=4",
                        "login": "jtimon"
                    },
                    "body": "The title sounds great because is not \"reinventing the wheel\" like our own ref_count data structure.\r\nBut strong_pointer feels like reinventing the wheel again...",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NDY2MzQ1Nw==",
                    "publishedAt": "2018-02-10T15:36:43Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10738#issuecomment-364663457"
                }
            ],
            "totalCount": 4
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "6dc671a22046c6c09a6de2b1d38e9e2fa3920628"
                    }
                }
            ],
            "totalCount": 9
        },
        "createdAt": "2017-07-04T00:00:45Z",
        "deletions": 224,
        "id": "MDExOlB1bGxSZXF1ZXN0MTI4NzA3MDY4",
        "labels": {
            "nodes": [
                {
                    "color": "006b75",
                    "id": "MDU6TGFiZWw5ODI5ODAwNw==",
                    "name": "P2P"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "CONFLICTING",
        "mergedAt": null,
        "number": 10738,
        "state": "OPEN",
        "title": "net: drop custom CNode refcounting in favor of smart pointers",
        "updatedAt": "2018-04-24T14:40:40Z"
    },
    {
        "additions": 152,
        "author": {
            "avatarUrl": "https://avatars3.githubusercontent.com/u/1063656?v=4",
            "login": "jnewbery",
            "url": "https://github.com/jnewbery"
        },
        "body": "Adds a `loadwallet` RPCs. This allows wallets to be loaded dynamically during runtime without having to stop-start the node with new `-wallet` params.\r\n\r\nIncludes functional tests and release notes.\r\n\r\nLimitations:\r\n\r\n- currently this functionality is only available through the RPC interface.\r\n- wallets loaded in this way will not be displayed in the GUI.",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1063656?v=4",
                        "login": "jnewbery"
                    },
                    "body": "This overlaps significantly with #10762. Not sure how I should ask for review. Perhaps find out which one people think is the priority? Or I could split the `walletinit.cpp` commits into their own PR.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMxMzY0NjY5NQ==",
                    "publishedAt": "2017-07-07T10:30:35Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10740#issuecomment-313646695"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
                        "login": "promag"
                    },
                    "body": "@jnewbery IMO this one should rebase on the other.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMxMzY0OTA5MQ==",
                    "publishedAt": "2017-07-07T10:43:28Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10740#issuecomment-313649091"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1063656?v=4",
                        "login": "jnewbery"
                    },
                    "body": "> IMO this one should rebase on the other.\r\n\r\nMakes logical sense. Downside is that the other is a more significant change, so may take longer to get merged.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMxMzY0OTY1MA==",
                    "publishedAt": "2017-07-07T10:46:52Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10740#issuecomment-313649650"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
                        "login": "promag"
                    },
                    "body": "If this really depends on that work then there's no other way than waiting. The other downside is that the other commits will show up here too.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMxMzY1MDk0MQ==",
                    "publishedAt": "2017-07-07T10:54:19Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10740#issuecomment-313650941"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1063656?v=4",
                        "login": "jnewbery"
                    },
                    "body": "I've changed the PR sequence, so this will now depend on #10767. If I get positive concept feedbac on #10767 I'll rebase this on top of it.\r\n\r\nFor now, I'm still just looking for concept feedback.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMxMzcwOTA0Mg==",
                    "publishedAt": "2017-07-07T15:09:16Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10740#issuecomment-313709042"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1063656?v=4",
                        "login": "jnewbery"
                    },
                    "body": "Rebased on #10767 . Reviewers, please review #10767 first.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMyNTQ4NTczMg==",
                    "publishedAt": "2017-08-28T21:21:22Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10740#issuecomment-325485732"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1063656?v=4",
                        "login": "jnewbery"
                    },
                    "body": "Rebased now that #10767 is merged. Still a work in progress. PR text updated.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMyODU4NDUwMg==",
                    "publishedAt": "2017-09-11T16:31:21Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10740#issuecomment-328584502"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1063656?v=4",
                        "login": "jnewbery"
                    },
                    "body": "Bad automatic merge of the testcase. Re-merged manually.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMzMDg2NTQzMQ==",
                    "publishedAt": "2017-09-20T14:16:16Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10740#issuecomment-330865431"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1063656?v=4",
                        "login": "jnewbery"
                    },
                    "body": "Manual rebase fixed the test bug. Travis now passes.\r\n\r\nThis is ready for initial review.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMzMDkxMzM4Ng==",
                    "publishedAt": "2017-09-20T16:51:34Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10740#issuecomment-330913386"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1063656?v=4",
                        "login": "jnewbery"
                    },
                    "body": "Thanks for the review @promag!\r\n\r\nRegarding the locking: Yes, I've implemented this as a mutex for now, which as you point out would limit wallet RPCs to be single-threaded. I'd like to update this to be something a bit better before v0.16. Suggestions are either a shared mutex or (suggested by @theuni) a version of the decay pointers in #10738. The problem with using a shared mutex is that C++ doesn't have a standard library shared mutex until C++14 (std::shared_timed_mutex) so I'd either have to use boost::shared_mutex or roll my own.\r\n\r\n(apologies - I thought I'd already written a note in this PR explaining this, but I must have failed to hit send!)\r\n\r\nFor now, I think review of this PR with the mutex is helpful, and I'll change it around to use a shared_mutex later.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMzMTE2MDMyNw==",
                    "publishedAt": "2017-09-21T13:43:28Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10740#issuecomment-331160327"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/1095675?v=4",
                        "login": "luke-jr"
                    },
                    "body": "This seems to ignore the whole issue of long-term wallet references, and probably locks `cs_wallets` too long.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMzMTI2NTk1OA==",
                    "publishedAt": "2017-09-21T20:03:51Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10740#issuecomment-331265958"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "Adding 0.16.0 milestone, I think this should be merged after 0.15.1 to prevent extra rebasing in the wallet code when porting back to 0.15.1.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMzMjc0Mjg5Mw==",
                    "publishedAt": "2017-09-28T06:44:13Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10740#issuecomment-332742893"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
                        "login": "promag"
                    },
                    "body": "Needs rebase.\r\n\r\nThe `openwallet` should rescan?",
                    "id": "MDEyOklzc3VlQ29tbWVudDMzNTgzMDM2OQ==",
                    "publishedAt": "2017-10-11T14:31:38Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10740#issuecomment-335830369"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/10217?v=4",
                        "login": "Sjors"
                    },
                    "body": "Concept ACK.\r\n\r\nI was able to use `openwallet` and `closewallet`.\r\n\r\nI wonder how this interacts with #11383. E.g. I'm guessing the UI wouldn't pick up on this (not a big issue). I can try once both are rebased.\r\n\r\nIt would be nice if `bitcoin-cli -rpcwallet=X` would open `X` if it's not open yet, maybe close it when done (future PR). \r\n\r\n> Should there be a separate RPC for creating a new wallet or should that be done using openwallet? (my initial thoughts are that there should be a separate RPC)\r\n\r\nI would prefer it if `openwallet` fails for wallets that don't exist, rather than creating a new wallet. I understand it makes sense for `bitcoind -wallet` to create a new one, because that's what a new user would expect, but I don't think that's needed for `openwallet`.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0NTczODcxMw==",
                    "publishedAt": "2017-11-20T15:56:16Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10740#issuecomment-345738713"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
                        "login": "promag"
                    },
                    "body": "@Sjors this PR must be rebased with #11383 (probably when that gets merged).",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0NTc0OTU3MQ==",
                    "publishedAt": "2017-11-20T16:29:14Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10740#issuecomment-345749571"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/93665?v=4",
                        "login": "wtogami"
                    },
                    "body": "Needs rebase\r\n\r\n> Should there be a separate RPC for creating a new wallet or should that be done using openwallet? (my initial thoughts are that there should be a separate RPC)\r\n\r\nI suggest there should be a new RPC command to create new wallets. Aside from least surprise, there is more than one type of wallet that the user could want created.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1NDUzNTQxNA==",
                    "publishedAt": "2017-12-30T09:03:09Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10740#issuecomment-354535414"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "Needs rebase and issues (@ryanofsky) addressed.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1NTIxNTA5NA==",
                    "publishedAt": "2018-01-04T07:22:31Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10740#issuecomment-355215094"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/3782274?v=4",
                        "login": "achow101"
                    },
                    "body": "Closing the wallet that is in use by qt (the one at `vpwallets[0]` will result in a crash. So additional handling for Qt stuff is needed.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NTQ5MTAxOA==",
                    "publishedAt": "2018-02-14T04:13:47Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10740#issuecomment-365491018"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1063656?v=4",
                        "login": "jnewbery"
                    },
                    "body": "I plan to pick this up again in the next few days. it requires:\r\n\r\n- rebasing on top of all the recent wallet refactors\r\n- addressing the locking issues (potentially pulling in #11402)\r\n- considering how this interacts with multiwallet in the GUI #12610\r\n- potentially pulling out the Verify and Flush refactoring commits into their own PR (https://github.com/bitcoin/bitcoin/pull/10740#pullrequestreview-84849103)",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MDIzMjEzNA==",
                    "publishedAt": "2018-04-10T20:15:04Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10740#issuecomment-380232134"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/10217?v=4",
                        "login": "Sjors"
                    },
                    "body": "> considering how this interacts with multiwallet in the GUI\r\n\r\nA good enough first step would be if the dropdowns update when wallets are loaded / unloaded through the console. Adding UI to load and unload wallets can be a followup PR.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MDQwNzcxMA==",
                    "publishedAt": "2018-04-11T10:40:46Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10740#issuecomment-380407710"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1063656?v=4",
                        "login": "jnewbery"
                    },
                    "body": "This was discussed in the IRC meeting today: https://botbot.me/freenode/bitcoin-core-dev/2018-04-12/?msg=98919702&page=5\r\n\r\n```\r\n15:26 < wumpus> #topic dynamic wallet load/unload (promag)\r\n15:26 < Randolf> Ack.\r\n15:26 < promag> not sure what you guys think\r\n15:26 < instagibbs_> what's the controversy in this topic :)\r\n15:27 < jonasschnelli> #10740\r\n15:27 < sipa> it should happen, duh\r\n15:27 < gribble> https://github.com/bitcoin/bitcoin/issues/10740 | [WIP] [wallet] dynamic loading/unloading of wallets by jnewbery \u00b7 Pull Request #10740 \u00b7 bitcoin/bitcoin \u00b7 GitHub\r\n15:27 < wumpus> seems like something we want to have at some point...\r\n15:27 < promag> but I think luke agrees that wallet management should be with shared pointers\r\n15:27 < sipa> how and when is another :)\r\n15:27 < luke-jr> indeed, using names just asks for chaos with runtime-changing wallets\r\n15:28 < promag> please read #11402 for some reasons to switch\r\n15:28 < gribble> https://github.com/bitcoin/bitcoin/issues/11402 | Use shared pointer for wallet instances by promag \u00b7 Pull Request #11402 \u00b7 bitcoin/bitcoin \u00b7 GitHub\r\n15:28 < jonasschnelli> IMO 10740 can't create wallets, IMO first step would be to add a createwallet RPC call\r\n15:29 < jonasschnelli> the whole creation/configuration setup if flawed since multiwallet\r\n15:29 < jonasschnelli> stuff like -keypool should be per wallet\r\n15:29 < jnewbery> jonasschnelli: you think createwallet should go in *before* load/unload?\r\n15:29 < jonasschnelli> and persisted in the wallet file (as configuration section)\r\n15:29 < jonasschnelli> jnewbery: not sure,.. just thinking\r\n15:30 < jnewbery> seems reasonable to me\r\n15:30 < jonasschnelli> createwallet could also *not* load the wallet in the first step (not ideal, but maybe reduces complexity)\r\n15:30 < sipa> that seems strange... you could create a new wallet at run time but not use it?\r\n15:30 < jonasschnelli> sipa: createwallet could also directly load/use the wallet\r\n15:30 < jnewbery> I think createwallet would also load the new wallet, no?\r\n15:30 < promag> create implies loading\r\n15:30 < luke-jr> sipa: iow, 0 to 1 only.\r\n15:31 < sipa> jonasschnelli: well then you need to have loading functionality first!\r\n15:31 < sipa> and if you have it, why not expose it\r\n15:31 < jonasschnelli> sipa: yes. That's a point.\r\n15:31 < jnewbery> createwallet could also be done by bitcoin-wallet-tool\r\n15:32 < jnewbery> (#8745)\r\n15:32 < gribble> https://github.com/bitcoin/bitcoin/issues/8745 | [PoC] Add wallet inspection and modification tool \"bitcoin-wallet-tool\" by jonasschnelli \u00b7 Pull Request #8745 \u00b7 bitcoin/bitcoin \u00b7 GitHub\r\n15:32 < jonasschnelli> Yes. Would be possible...\r\n15:32 < jonasschnelli> I just think the create-during-startup approach is not good\r\n15:33 < promag> also related #10973\r\n15:33 < jnewbery> jonasschnelli: I agree\r\n15:33 < gribble> https://github.com/bitcoin/bitcoin/issues/10973 | Refactor: separate wallet from node by ryanofsky \u00b7 Pull Request #10973 \u00b7 bitcoin/bitcoin \u00b7 GitHub\r\n15:33 < sipa> jonasschnelli: agree\r\n15:33 < jonasschnelli> And as a first step I though createwallet would make sense.. but not loading it seems after a strange use-case\r\n15:33 < luke-jr> load -> create -> unload\r\n15:33 < jonasschnelli> but a nice first code/impl. step\r\n15:33 < luke-jr> unload is the complex part tbh\r\n15:33 < jnewbery> luke-jr: agree\r\n15:34 < jonasschnelli> Agree with luke-jr. Maybe split unload away from the existing PR jnewbery ?\r\n15:34 < jnewbery> yes\r\n15:34 < jnewbery> I intend to pick up 10740 again soon, rebase and rework it\r\n15:34 < promag> consider the use case: 1) rpc rescan wallet 2) in parallel unload wallet - should 2) wait for 1) ?\r\n15:34 < luke-jr> probably\r\n15:35 < jonasschnelli> Great. Dynamic loading/creating is a nice feature that we probably want for 0.17!\r\n15:35 < promag> luke-jr: and if the unload is from the UI?\r\n15:35 < jnewbery> promag: do you consider 11402 a prereq for load/unload? What about just load?\r\n15:36 < jonasschnelli> the wallet-tool is IMO orthogonal to wallet creation\r\n15:36 < jonasschnelli> *via RPC\r\n15:36 < luke-jr> promag: probably the same\r\n15:36 < promag> jnewbery: IMHO for both\r\n15:36 < jonasschnelli> RPC seems to be a must, wallet-tool can be a better place to create some sorts of wallets (or inspect it), .. like encrypted wallets\r\n15:36 < luke-jr> promag: at least initially\r\n15:37 < jnewbery> promag: want to rebase and put on high priority for review then, if you consider it a blocker?\r\n15:37 < promag> luke-jr: my point is that it should not block, you request the unload and go on, when the wallet is not used anymore it gets unloaded\r\n15:38 < jonasschnelli> #11402\r\n15:38 < gribble> https://github.com/bitcoin/bitcoin/issues/11402 | Use shared pointer for wallet instances by promag \u00b7 Pull Request #11402 \u00b7 bitcoin/bitcoin \u00b7 GitHub\r\n15:38 < luke-jr> promag: you mean leave the wallet loaded, but invisible? that seems worst outcome IMO\r\n15:38 < luke-jr> user may unload and just shut off the PC\r\n15:38 < wumpus> the unload should probably be in two stages: after requesting it, RPC and the GUI lose access to it. Then it waits for current operations tofinish. Then the thing really gets delted.\r\n15:38 < luke-jr> yes\r\n15:38 < promag> luke-jr: then the application will wait for wallets to unload\r\n15:38 < jnewbery> I don't think we need to worry about unload at this stage. First step is add load functionality, then createwallet functionality\r\n15:38 < luke-jr> and make it visible to the user in the meantime\r\n15:39 < luke-jr> jnewbery: +1\r\n15:39 < promag> wumpus: right, hence shared pointers\r\n```\r\n\r\nI should reduce the scope of this PR to just a `loadwallet` RPC. A `createwallet` RPC should come next, followed by `unloadwallet`. (`unloadwallet` is where most of the difficulties are).",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MDk1MDEwOQ==",
                    "publishedAt": "2018-04-12T21:28:49Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10740#issuecomment-380950109"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1063656?v=4",
                        "login": "jnewbery"
                    },
                    "body": "Updated PR text since this PR is now only for loading wallets (not creating or unloading).\r\n\r\nOriginal text also had the following motivation:\r\n\r\n> Main motivation for this was the fact that several wallet parameters are actions for individual wallet load/creation, rather than properties of the wallet component. Examples are `-salvagewallet`, `-rescan`, `-usehd` and `-upgradewallet`. Continuing with that config/loading model is difficult in a multi-wallet world - how can users run those actions on individual wallets when loading multiple wallets? This PR offers a solution: individual wallets can be loaded at run-time, and RPC parameters can be passed in to carry out the various wallet-loading actions. Note that none of those load actions are yet implemented in this PR, but can easily be added.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MjUyODUyMw==",
                    "publishedAt": "2018-04-18T21:03:10Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10740#issuecomment-382528523"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1063656?v=4",
                        "login": "jnewbery"
                    },
                    "body": "Overhauled this PR to just contain the `loadwallet` functionality.\r\n\r\nIt is built on @promag's PR #13017. Please review that first.\r\n\r\nThis also needs the `cs_wallets` locking functionality from #11402 to be thread-safe.\r\n\r\nI'll rebase once those PRs are merged. I've pushed the branch now in case anyone wants to do early review.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MjUyOTQ4OA==",
                    "publishedAt": "2018-04-18T21:06:29Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10740#issuecomment-382529488"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
                        "login": "promag"
                    },
                    "body": "@jnewbery Nice. BTW I was thinking creating a different PR to just make #13017 thread safe.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MjUzMDc3Nw==",
                    "publishedAt": "2018-04-18T21:11:22Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10740#issuecomment-382530777"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1063656?v=4",
                        "login": "jnewbery"
                    },
                    "body": "> I was thinking creating a different PR to just make #13017 thread safe.\r\n\r\nGreat. I'll keep an eye out and rebase on top of that when it's ready.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MjUzMTE5Mg==",
                    "publishedAt": "2018-04-18T21:13:00Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10740#issuecomment-382531192"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1063656?v=4",
                        "login": "jnewbery"
                    },
                    "body": "Thanks for the review @promag - I've done as you suggested and called `CWallet::postInitProcess()`. Because rpc doesn't have the CScheduler reference when loading the wallet, I had to change the `WalletInit::Start()` function to always schedule background wallet flushes, even when started with no wallets (ie `-nowallet`). Note that when started with `-disablewallet`, the entire wallet module is disabled and it's not possible to load wallets later.\r\n\r\nI've also rebased on [#13028 rebased on master].\r\n\r\nRemoved the **[WIP]** tag since I think this implementation is now complete and ready for review.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4Mjg5MjcwMA==",
                    "publishedAt": "2018-04-19T21:54:31Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10740#issuecomment-382892700"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
                        "login": "promag"
                    },
                    "body": "> I had to change the WalletInit::Start() function to always schedule background wallet flushes\r\n\r\nMuch better out of CWallet IMO.\r\n\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MjkzMTE5NQ==",
                    "publishedAt": "2018-04-20T01:09:35Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10740#issuecomment-382931195"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "Needs rebase again.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MzU0ODE4Mg==",
                    "publishedAt": "2018-04-23T11:51:05Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10740#issuecomment-383548182"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1063656?v=4",
                        "login": "jnewbery"
                    },
                    "body": "Rebased on #13028",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MzY0MzEyNQ==",
                    "publishedAt": "2018-04-23T16:44:46Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10740#issuecomment-383643125"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1063656?v=4",
                        "login": "jnewbery"
                    },
                    "body": "Rebased on master and addressed @promag's comments.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4NDAzODExOQ==",
                    "publishedAt": "2018-04-24T18:42:20Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10740#issuecomment-384038119"
                }
            ],
            "totalCount": 30
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "0569d2cd1324304ba2d78d1299454126c9d82b51"
                    }
                }
            ],
            "totalCount": 7
        },
        "createdAt": "2017-07-04T14:24:10Z",
        "deletions": 56,
        "id": "MDExOlB1bGxSZXF1ZXN0MTI4ODE0MTY5",
        "labels": {
            "nodes": [
                {
                    "color": "08a781",
                    "id": "MDU6TGFiZWwxNDk0MjQ=",
                    "name": "Wallet"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "number": 10740,
        "state": "OPEN",
        "title": "[wallet] `loadwallet` RPC - load wallet at runtime",
        "updatedAt": "2018-04-24T19:07:04Z"
    },
    {
        "additions": 685,
        "author": {
            "avatarUrl": "https://avatars3.githubusercontent.com/u/1008458?v=4",
            "login": "jtimon",
            "url": "https://github.com/jtimon"
        },
        "body": "It returns per block statistics about several things. It should be easy to add more if people think of other things to add or remove some if I went too far (but once written, why not keep it? EDIT: answer: not to test or maintain them).\r\n\r\nThe currently available options are: minfee,maxfee,totalfee,minfeerate,maxfeerate,avgfee,avgfeerate,txs,ins,outs (EDIT: see updated list in the rpc call documentation)\r\n\r\nFor the x axis, one can use height or block.nTime (I guess I could add mediantime if there's interest [EDIT: nobody showed interest but I implemented mediantime nonetheless, in fact there's no distinction between x or y axis anymore, that's for the caller to judge]).\r\n\r\nTo calculate fees, -txindex is required.\r\n",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/1562417?v=4",
                        "login": "clarkmoody"
                    },
                    "body": "Some ideas for additions:\r\n- Non-fee total output amount\r\n- Coinbase reward\r\n- Money supply including this block\r\n- Transaction weight `txweight` (it can be derived from existing fields, however)\r\n\r\nI would prefer to see both `time` and `mediantime` returned, since they are available.\r\n\r\nShould we return non-independent fields, such as `avgfee` when also including `totalfee` and `txs`?\r\n\r\nI find that for bitcoin-related data, the median is often more useful than the average of a distribution. Including `medianweight`, `medianfee`, `medianfeerate`, `medianoutput` etc would expose these useful quantities to the user.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMxMzcwNzM5Nw==",
                    "publishedAt": "2017-07-07T15:03:31Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10757#issuecomment-313707397"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1063656?v=4",
                        "login": "jnewbery"
                    },
                    "body": "> but once written, why not keep it?\r\n\r\nBecause more code => more bugs and more maintenance effort. I prefer:\r\n\r\nIf it's not really needed, why add it?\r\n\r\nThis is perhaps a nice-to-have, but since #8704, `getblock` can return all transactions in a block (without requiring `txindex`). Those can then be parsed and analysed offline.\r\n\r\nIs there a compelling use-case I'm missing here? This seems like a feature only a small subset of users would be interested in, in which case an offline tools seems more appropriate.\r\n\r\nSorry - not meaning to be negative, but my default reaction to new RPCs/arguments tends towards NACK unless I can see a compelling and widespread use-case.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMxMzcxNDIxNQ==",
                    "publishedAt": "2017-07-07T15:28:30Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10757#issuecomment-313714215"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/1562417?v=4",
                        "login": "clarkmoody"
                    },
                    "body": "> This is perhaps a nice-to-have, but since #8704, getblock can return all transactions in a block (without requiring txindex). Those can then be parsed and analysed offline.\r\n\r\nThis code pulls each transaction input's previous outpoint in order to compute transaction fees. Replicating that in RPC would require thousands of calls for most blocks.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMxMzcyMDA5Mg==",
                    "publishedAt": "2017-07-07T15:50:38Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10757#issuecomment-313720092"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1063656?v=4",
                        "login": "jnewbery"
                    },
                    "body": "> This code pulls each transaction input's previous outpoint\r\n\r\nAh yes, of course. Concept ACK in that case. Doing this with `getblock` / `getrawtransaction` is infeasible.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMxMzcyMDk3Ng==",
                    "publishedAt": "2017-07-07T15:53:50Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10757#issuecomment-313720976"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1008458?v=4",
                        "login": "jtimon"
                    },
                    "body": "> Because more code => more bugs and more maintenance effort. I prefer:\r\n\r\nSure, but I mean, removing for example the avgfee or avgfeerate won't  safe much code or testing code, just a few lines. Forget I said this, if there's specific functions to remove because nobody will want them, let's remove those and focus on the ones people want. Adding specific things only a few people want can also happen in their own branches, so it's no big deal.\r\n\r\nThe only use case is gather statistics, presumably to plot things, create charts. That is, at least, compelling to me, but I don't think that will have widespread usage. I also don't think all rpc calls have it. Is getchaintxstats, for example, a widespread use case?\r\n\r\nIf that's enough reason not to merge this, it's fine, I can maintain it as a separate branch that I periodically rebase, it is simple enough, so that won't be a big deal. On the other hand, if I can get it reviewed and merged it'll be less work for me in the long run and I also get the review.\r\n\r\n> Non-fee total output amount\r\n> Coinbase reward\r\n\r\nSounds good.\r\n\r\n> Money supply including this block\r\n\r\nMhmm, it would be simpler to calculate here from start to end here than from genesis. But it's pretty trivial to write a function in any language that returns the total supply for a given height without access to any historic data. Unless you are talking about discounting op_return outputs or something like that. I don't think this is very interesting here. Perhaps that can be done in getchaintxstats ?\r\n\r\n> Transaction weight txweight (it can be derived from existing fields, however)\r\n\r\nIn fact I'm using weight for everything. I should s/size/weight/ and probably also show size separately. \r\nMaybe separate feerates in by weight and serialize size? I don't know...\r\n\r\n> I would prefer to see both time and mediantime returned, since they are available.\r\n\r\nYeah, the mediantime takes a little bit longer to be calculated but not much and one can always disable anything. In fact, the height and time shouldn't be treated in any special way for being \"the x axis\" and should be allowed to be disabled like the rest.\r\n\r\n> Should we return non-independent fields, such as avgfee when also including totalfee and txs?\r\n\r\nThis is a good question. This is mostly what I meant by \"why not if it's this easy?\".\r\nBut yeah, I guess non-independent are good candidates to be removed.\r\n\r\nre median: yeah, that sounds interesting too, good idea!\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDMxMzcyOTkxNg==",
                    "publishedAt": "2017-07-07T16:29:24Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10757#issuecomment-313729916"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/1562417?v=4",
                        "login": "clarkmoody"
                    },
                    "body": "> Mhmm, it would be simpler to calculate here from start to end here than from genesis. But it's pretty trivial to write a function in any language that returns the total supply for a given height without access to any historic data. Unless you are talking about discounting op_return outputs or something like that. I don't think this is very interesting here. Perhaps that can be done in getchaintxstats ?\r\n\r\nI was thinking of the more trivial version, rather than the `supply - provably_unspendable` version, so keeping that as external code makes more sense. Maintaining the sum of spendable outputs against block height is a much more ambitious idea, and it may make sense in the future. However, it is probably out of scope of this PR.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMxMzczMTkyMg==",
                    "publishedAt": "2017-07-07T16:37:46Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10757#issuecomment-313731922"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1008458?v=4",
                        "login": "jtimon"
                    },
                    "body": "Thanks again for the great feedback!\r\n\r\n@promag I think I solved all your nits except for https://github.com/bitcoin/bitcoin/pull/10757#discussion_r126261101\r\n\r\n@clarkmoody I think I added most of your suggestions, explicitly excluding anything that involved accumulations neither from height=1 nor from height=start.\r\nThe former potentially implies a world of complexity and the latter can be trivially calculated on the visual side: I would completely discard any accumulator redundancy in this rpc beforehand.\r\n\r\nAnd for the rest of the redundancies, @jnewbery and @clarkmoody - thanks again for pointing it out -, it's never too late to remove them before merging like a trivial squash and it's never too soon to start saying which ones you would bikesay* out first. Also bikesay the names for the curves and even the order in the list (duplicated for c++ and python).\r\n\r\nIn the meantime, I embraced redundancy since, as said, it will be trivial for me to remove later. And also the pertinent optimizations to skip calculations when plot_values.count(\"minfee\") == 0 or actually only when the extra calculation is more expensive than the searching in plot_values which is a set of strings.\r\n\r\nFor example, we have blockfees, reward, subsidy, complying with consensus rule ```reward == blockfees + subsidy```. Only 2 of the 3 are necessary, at least one is redundant. My personal preference is removing either subsidy or reward or subsidy, but not blockfees. But at said once written there's no problem with me in just making sure their tests don't surprise me until we decide which ones didn't deserve it. \r\n\r\nWhich one seems bikesaying in principle. But not in this case. \r\nblockfees/total_fees serves for other calculations like avgfeerate. Let's not remove that one, just rename it.\r\n\r\nBut it is more interesting to propose new ones than to rename or vote for removal IMO. I believe the most interesting addition to this point was utxo_size_inc, which would welcomed some review from people who measures sizes more carefully like @sipa , since this doesn't use GetSerializeSize for Coin intentionally, independently of the optimization to read Coin if available in the utxo before calling RpcGetTx. I'm still not sure what to do with pre/post segwit feerates, does anybody care about the pre ones? which one needs the scale factor? none?\r\n\r\nREM CalculateTruncatedMedian doesn't need to be a template at this point, but there's no harm being static IMO\r\n\r\nEDIT: still some TODOs, mostly documentation and pending decisions\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDMxMzg0MDM0NA==",
                    "publishedAt": "2017-07-08T07:27:36Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10757#issuecomment-313840344"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
                        "login": "promag"
                    },
                    "body": "@jtimon no problem. There are some nits to fix but I'll review more in depth later.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMxMzg0MDcwNw==",
                    "publishedAt": "2017-07-08T07:36:50Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10757#issuecomment-313840707"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1008458?v=4",
                        "login": "jtimon"
                    },
                    "body": "Here are some images generated using this branch in combination with (WIP): https://github.com/jtimon/rpc-explorer\r\n\r\nGUI detail:\r\n\r\n![screenshot_plotter](https://user-images.githubusercontent.com/1008458/28092233-ed1cb2ca-6692-11e7-9374-38a98cd6c258.png)\r\n\r\nGUI detail zoom:\r\n\r\n![screenshot_plotter_zoom](https://user-images.githubusercontent.com/1008458/28092271-048e594a-6693-11e7-9572-81f80980a087.png)\r\n\r\nHide some:\r\n\r\n![plotter1](https://user-images.githubusercontent.com/1008458/28092276-083a4518-6693-11e7-815d-c45d0acbfc4d.png)\r\n\r\nHide more:\r\n\r\n![plotter2](https://user-images.githubusercontent.com/1008458/28092279-0ac02fd2-6693-11e7-87c5-84d230985d6c.png)\r\n\r\nFees:\r\n\r\n![plotterfees](https://user-images.githubusercontent.com/1008458/28092284-0d22c2a8-6693-11e7-937d-451bfe0c5da5.png)\r\n\r\nUtxo size increase:\r\n\r\n![plotter_utxo](https://user-images.githubusercontent.com/1008458/28092288-0f6bc3d4-6693-11e7-910e-b18e3bfa44a2.png)\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDMxNDU4MTkxMw==",
                    "publishedAt": "2017-07-11T21:47:09Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10757#issuecomment-314581913"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1008458?v=4",
                        "login": "jtimon"
                    },
                    "body": "Without the documentation for the result it was impossible to distinguish a weird choice to spring discussion from an implementation mistake. Removed the other TODO comments.\r\nCoded more pending suggestions by @promag (hopefully all pending ones? if not, please insist) with some extra bikeshedding derived from s/plotvalues/stats/ and adapt tests to start and end being allowed to be negative.\r\n\r\nMore cleanups can be done, specially in the tests if we go further with https://github.com/bitcoin/bitcoin/pull/10757#discussion_r126462704 and not calculate in inverse order (there's no point if we don't get the slight optimization).\r\n\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDMxNDY1OTIwMQ==",
                    "publishedAt": "2017-07-12T05:54:14Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10757#issuecomment-314659201"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1008458?v=4",
                        "login": "jtimon"
                    },
                    "body": "Needed rebase.\r\nIf somebody made a web for it, it may be interesting to show number of segwit txs too http://segwit.5gbfree.com/countsegwit\r\n\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDMyNDc0Nzc1Nw==",
                    "publishedAt": "2017-08-24T20:27:13Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10757#issuecomment-324747757"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/31221696?v=4",
                        "login": "forklol"
                    },
                    "body": "Just wanted to say that this would be massively helpful to track statistics. I hope this finds it's way into a release soon.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMyNTU5NDE2NA==",
                    "publishedAt": "2017-08-29T08:35:27Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10757#issuecomment-325594164"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1008458?v=4",
                        "login": "jtimon"
                    },
                    "body": "Reversed the order of the values to the natural one, since as discussed the optimization of doing fetching the blocks in reverse order is not worth the loss in clarity of the code.\r\nAdded segwit tx counter stat, and also the total size and weight for those txs (txs that at least have one sw input, txs sending to sw outputs don't count).\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDMyNjIwNzc1Ng==",
                    "publishedAt": "2017-08-31T06:57:27Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10757#issuecomment-326207756"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/31451072?v=4",
                        "login": "trippysalmon"
                    },
                    "body": "Perhaps a better name for \\<stat\\>_old is \\<stat\\>_virtual, _virt or _v. Or perhaps prepend it with \"v\"  just like the tx size in the output of `getrawtransaction` (vsize).\r\n\r\nFor example:\r\n\r\n`avgfeerate_old` becomes `vavgfeerate`\r\n`maxfeerate_old` becomes `vmaxfeerate`\r\n`medianfeerate_old` becomes `vmedianfeerate`\r\n\r\netc.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMyNjYxMDg5Mg==",
                    "publishedAt": "2017-09-01T15:29:09Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10757#issuecomment-326610892"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/31451072?v=4",
                        "login": "trippysalmon"
                    },
                    "body": "I just finished calling `getblockstats` on every block in the chain and saving it into a database. I didn't encounter any issues and the performance is quite good (100-1000ms per \"full\" block on an i7 6900k /w 32gb ram + nvme ssd).\r\n\r\nBtw, if anyone is interested in the dataset I can share it. Just convo me at freenode irc (nick: \"trippysalmon\"). It includes some other stats as well, like rolling average hashrates.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMyNjgxOTE4Mw==",
                    "publishedAt": "2017-09-03T17:34:35Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10757#issuecomment-326819183"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/288011?v=4",
                        "login": "jlopp"
                    },
                    "body": "Just noticed this PR; I'll definitely be incorporating it into Statoshi once it's merged! :+1: ",
                    "id": "MDEyOklzc3VlQ29tbWVudDMyNjgzNDQwMQ==",
                    "publishedAt": "2017-09-03T22:09:21Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10757#issuecomment-326834401"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1008458?v=4",
                        "login": "jtimon"
                    },
                    "body": "@trippysalmon I think you mean replacing s/<stat>feerate/v<stat>feerate/ and s/<stat>feerate_old/<stat>feerate/.\r\nAs discussed with @sipa the *feerate_old are using old size and the *feerate ones are using vsize.\r\n\r\nHow much interest there is in maintaining the old ones?\r\nPre-segwit both are identical and post segwit the old ones mean the how high the feerate would have been for mempool and mining purposes if you weren't using segwit.\r\nFor example, the same tx can have feerate 4 sat/vbyte (new) and 2 sat/byte (old), meaning for the same fee, your tx gets propagated/mined as if you had paid twice as much thanks to segwit's discount.\r\n\r\nIf there's not much interest, perhaps it's just better to just remove all the old ones.\r\nBy the way, I said before that we hold on removing redundant or uninteresting stats.\r\nI would start with reward, which the caller can calculate by simply adding subsidy and totalfees.\r\n\r\nNeeds rebase.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMyNzY1NTE4NA==",
                    "publishedAt": "2017-09-07T01:19:18Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10757#issuecomment-327655184"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1008458?v=4",
                        "login": "jtimon"
                    },
                    "body": "Rebased",
                    "id": "MDEyOklzc3VlQ29tbWVudDMyNzY5OTE3Ng==",
                    "publishedAt": "2017-09-07T06:22:49Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10757#issuecomment-327699176"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/31451072?v=4",
                        "login": "trippysalmon"
                    },
                    "body": "@jtimon ah yes, I got it now. I misinterpreted the meaning of the `_old` statistics.\r\n\r\nIn that case the `_old` statistics are indeed not that interesting. I would however like to see a pre segwit `total_size` statistic. That one is currently missing and it's kind of a hassle to calculate it through RPC calls.\r\n\r\nI will update my pre segwit total_vsize [PR](https://github.com/jtimon/bitcoin/pull/9) soon.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMyNzgyOTg3OA==",
                    "publishedAt": "2017-09-07T15:10:58Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10757#issuecomment-327829878"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1008458?v=4",
                        "login": "jtimon"
                    },
                    "body": "@trippysalmon not sure what you mean by \"pre segwit total size\". Total size is included, but size it's size post and pre segwit. You mean you want a stat for total vsize ? Not sure that's very interesting...",
                    "id": "MDEyOklzc3VlQ29tbWVudDMyODEwOTIwMQ==",
                    "publishedAt": "2017-09-08T13:53:43Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10757#issuecomment-328109201"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/31451072?v=4",
                        "login": "trippysalmon"
                    },
                    "body": "@jtimon yes I'm talking about total_vsize. Perhaps it depends on my particular use-case (comparing and graphing total_size vs total_vsize). My reasoning is that it is easy to add and compute inside core but not so much through RPC calls.\r\n\r\nIf you think total_vsize is not useful/interesting to others I don't mind maintaining it in a custom patch. I'm actually already using it in a project atm.\r\n\r\nedit: never mind, total_vsize can be calculated by `total_weight / 4`",
                    "id": "MDEyOklzc3VlQ29tbWVudDMyODE0MjczMg==",
                    "publishedAt": "2017-09-08T15:54:52Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10757#issuecomment-328142732"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1008458?v=4",
                        "login": "jtimon"
                    },
                    "body": "Removed reward and *feerate_old as discussed, but didn't squashed just in case.\r\nDiscussing with @trippysalmon we thought could show vsize instead of weight, but the former is just the latter / 4 (ie WITNESS_SCALE_FACTOR) and presenting the weight we can completely forget about rounding concerns (plus that's what getblock presents too, perhaps that's a reason to exclude it here).\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDMyODIzODkwNA==",
                    "publishedAt": "2017-09-08T23:52:20Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10757#issuecomment-328238904"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1008458?v=4",
                        "login": "jtimon"
                    },
                    "body": "Using this branch more, at first a range of heights was convenient but I was ready to wait even if I had to call this rpc block by block.\r\nRight now, that's what I'm doing since once you start caching, calling this function is never a success but a cache failure. It is completely understandable that one doesn't want to manage failure ranges when failures can be discovered individually and thus processed in parallel.\r\nThat's probably opinionated, but perhaps others trying to use this got many errors forgetting \"[0]\" in some places.\r\n\r\nSupporting ranges may be an optimization for users, but since I have been lucky enough to attract some potential users of this rpc call, I can ask: will anybody miss the height ranges?\r\n\r\nSince I'm indexing my cache by block height and that's inherently \"reorg unfriendly\" I mostly see 2 options going forward:\r\n\r\n1) Subscribe to the zmq interface, detect reorgs and remove block stats above the reorg height (while at it, one can put new blocks in the cache preemtively even if nobody asked for them yet)\r\n\r\n2) Stop indexing the block stat cache by  height, do it by block hash. This is compatible with reorgs (more space but less disk writing and it's also required for advanced features like plotting abandoned/orphan chains).\r\n\r\nI am inclined to trying both as a user since I want to subscribe to blocks but I also don't want to erase blocks I have seen and don't want to lose the option to chart reorged chains.\r\n\r\nA second question is simply, assuming the height ranges are removed, would anyone else apart from me use the option to search by single block hash instead of single height?\r\n\r\nAnyway, that would be my preference: replace height ranges with single height or single block hash (both options).\r\nPlease let me know what you think.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMzNDQ5OTg5OA==",
                    "publishedAt": "2017-10-05T15:23:54Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10757#issuecomment-334499898"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/31451072?v=4",
                        "login": "trippysalmon"
                    },
                    "body": "I use this RPC call extensively (and persist the results in a DB) and never used the block height range, only single blocks.\r\n\r\n> Anyway, that would be my preference: replace height ranges with single height or single block height (both options).\r\n\r\nI think you meant block hash as the second option? For my use-case it doesn't really matter if I have to use the block height or block hash. Either option works for me.\r\n\r\n--\r\n\r\nAlso, something that I needed today was the median transaction size. I don't think it can be calculated using the existing statistics or am I wrong?\r\n\r\nIt's only a [minor change](https://github.com/trippysalmon/bitcoin/commit/4a1d4d06e4c20356fe0e4359a3af2acfda06b1fc) and could be interesting to track over time to see it change when more complex scripts are made available.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMzNjU1MzIzMA==",
                    "publishedAt": "2017-10-13T20:00:48Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10757#issuecomment-336553230"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1008458?v=4",
                        "login": "jtimon"
                    },
                    "body": "Rebased, squashed, added \"mintxsize\", \"maxtxsize\", \"mediantxsize\" and \"avgtxsize\" stats.\r\n\r\nRegarding the ranges, thanks for the feedback, I'll wait to hear from other people.\r\n\r\nEDIT: btw, some of the tests are commented because tx sizes don't seem to be deterministic, I suspect due to coin selection. Not sure what to do about that.\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDMzNzIxMjEwNg==",
                    "publishedAt": "2017-10-17T12:15:05Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10757#issuecomment-337212106"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1008458?v=4",
                        "login": "jtimon"
                    },
                    "body": "Fixed all nits by @ryanofsky except for https://github.com/bitcoin/bitcoin/pull/10757#discussion_r148039141 . Instead of solving it, I added a few new commits for people to discuss on.\r\n\r\nThe tests still can't test size or feerates while passing/failing in a deterministic fashion, but just by rebasing now \"swtxs\" seems to be actually tested without me doing anything (probably by https://github.com/bitcoin/bitcoin/pull/11403 being merged), as requested in  https://github.com/bitcoin/bitcoin/pull/10757#discussion_r145659877\r\n\r\nI thought of a simpler way to deterministacally get sizes and feerates: simply force the desired/expected size for each of the few txs this test creates. Using something like:\r\n\r\n```\r\nwhile not desired_size(tx, desired_size)\r\n     tx = try_creating_tx_again()\r\n```\r\n\r\nor something of the sort. \r\n\r\nI'll try that next, but please comment on the latest commits.\r\n ",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1Nzg1MTY2Ng==",
                    "publishedAt": "2018-01-16T04:37:00Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10757#issuecomment-357851666"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1008458?v=4",
                        "login": "jtimon"
                    },
                    "body": "This needs rebase, but some feedback on the latest things and potential squashes would be nice before doing so.\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2MjA4NTAzNw==",
                    "publishedAt": "2018-01-31T21:59:09Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10757#issuecomment-362085037"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/127186?v=4",
                        "login": "ajtowns"
                    },
                    "body": "What do you think about using a static blockchain so that testing is deterministic? I added some code to save the generated chain, and to reuse it if it's present and it doesn't seem too bad -- just using getblock(__,0) to get hex encoded blocks, and dumping them gives a 56kB file (or 10kB gzipped). That seems within the ballpark of something that could easily just be added as a static data file to the test suite?\r\n\r\nI don't think `while tx_isnt_what_i_want: try_again()` is a good approach -- it seems a bit too easy to accidentally become `while i_trigger_a_bug: try_again()` which kind-of defeats the point of testing.\r\n\r\nI'm not a huge fan of the `for(stat:stats) { if (stat == \"x\") m[stat] = x(); else if ...; }` approach. What about something along the lines of:\r\n\r\n```\r\n    auto set_stat = [&](const char* stat, const UniValue val)\r\n                    { if (stats.count(stat) != 0) map_stats[stat] = val; };\r\n\r\n    set_stat(\"height\", (int64_t)pindex->nHeight);\r\n    set_stat(\"time\", pindex->GetBlockTime());\r\n    set_stat(\"mediantime\", pindex->GetMedianTimePast());\r\n    ...\r\n```\r\n? I don't think any of the calculations at that point are particularly heavy, so it shouldn't make things much slower (and any that are could probably just be put in an `if (is_loop_outputs_required) { .. }` block or similar).\r\n\r\nI think the optimisation commits make sense. Maybe add bools for `medianfeerate`, `medianfee`, `mediantxsize` so you're not calling `.count()` inside the loops. The naming of the bools is annoyingly ungrammatical (\"is_loop_inputs_required\" should be \"are_loop_inputs_required\" in english), but I don't have a better suggestion.\r\n\r\nMight be good to explicitly say which stats want -txindex enabled and won't work with pruning in the help (fee related and utxo size I think?) Could make the default be \"whatever stats we can output efficiently\" rather than \"everything\", though not sure that's a good idea.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2MjE2MDcwOQ==",
                    "publishedAt": "2018-02-01T05:13:23Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10757#issuecomment-362160709"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1008458?v=4",
                        "login": "jtimon"
                    },
                    "body": "> What do you think about using a static blockchain so that testing is deterministic? I added some code to save the generated chain, and to reuse it if it's present and it doesn't seem too bad -- just using getblock(__,0) to get hex encoded blocks, and dumping them gives a 56kB file (or 10kB gzipped). That seems within the ballpark of something that could easily just be added as a static data file to the test suite?\r\n\r\nI didn't found the time to try that but if you can share that code that would be great. What you're saying seems reasonable to me, I don't know if other people would have a problem with that. And I cannot think of a simpler way to make this test deterministic.\r\n\r\nI will look into the other suggestions, thanks.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2MjkyODM5NA==",
                    "publishedAt": "2018-02-04T18:29:59Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10757#issuecomment-362928394"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1008458?v=4",
                        "login": "jtimon"
                    },
                    "body": "@MarcoFalke what is the status of this in terms of testing?\r\n\r\nI think @ajtowns is right that *size, and *feerate fields can only be deterministically tested, but I don't have the time to write that at this point. I would be happy to review and test if anybody wants to take over though.\r\n\r\nIn the meantime, I would be happy to include the new call even if it's without any stat that depends on signature size or coin selection for deterministic testing and those fields and their tests are already written.\r\n  ",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NTIzMzkxNA==",
                    "publishedAt": "2018-03-22T09:35:28Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10757#issuecomment-375233914"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1008458?v=4",
                        "login": "jtimon"
                    },
                    "body": "Needed rebase. And still needs squashing pending on requested feedback.\r\n\r\nAlso, since testing some of the stats deterministically is not trivial, I think the new rpc call should be introduced only with the stats that can be deterministacally tested (even though we will miss some of the most interesting ones like sizes, fees and feerates) and then make the tests deterministic and add the missing stats.\r\nThoughts?\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NzQ0MDE4MA==",
                    "publishedAt": "2018-03-30T04:07:52Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10757#issuecomment-377440180"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/127186?v=4",
                        "login": "ajtowns"
                    },
                    "body": "Proposed patch that makes testing of the stats kind of deterministic at https://github.com/jtimon/bitcoin/pull/11/commits\r\n\r\nIdea is you do `./feature_rpc_getblockstats --gen-test-data` to  generate a test blockchain and the expected statistics for that blockchain, and will write it to data/rpc_getblockstats.json file (about 50kB uncompressed text). You then check the stats look reasonable, and commit that file to git, and then when you/travis runs the test case without --gen-test-data it will load the chain from the file and check that the calculated stats still match what was recorded as being expected.\r\n\r\nIf additional stats are added, you'll need to edit the test case to update the EXPECTED_STATS variable; and you'll need to add the expected values to the json file (by hand I guess), both of which should show up nicely in git diff.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NzQ2ODkxMg==",
                    "publishedAt": "2018-03-30T07:45:42Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10757#issuecomment-377468912"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1008458?v=4",
                        "login": "jtimon"
                    },
                    "body": "Thanks a lot, incorporated those changes. Fixed some older nits too.\r\nPlease re-review.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3OTQxOTQ0Ng==",
                    "publishedAt": "2018-04-07T00:41:13Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10757#issuecomment-379419446"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1008458?v=4",
                        "login": "jtimon"
                    },
                    "body": "Fixed @jimpo 's nits, thanks.\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MjY4NTg0NA==",
                    "publishedAt": "2018-04-19T10:22:52Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10757#issuecomment-382685844"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1008458?v=4",
                        "login": "jtimon"
                    },
                    "body": "Fixed nits. The latest commit I did not squash because I'm not convinced it is an improvement even though is +32-48 (see https://github.com/bitcoin/bitcoin/pull/10757#discussion_r182942644 )",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MzIwMzE5Ng==",
                    "publishedAt": "2018-04-20T19:48:45Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10757#issuecomment-383203196"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1008458?v=4",
                        "login": "jtimon"
                    },
                    "body": "> I'm a bit confused by the bit about the x-axis in the PR description -- isn't plotting stuff in a different PR?\r\n\r\nSorry about the confusing edits. At first, height, time and mediantime were treated separately as I was using them as potential x-axis with my caller. Now they're just treated as like any other stat.\r\n\r\n> Seems a bit strange to exclude the coinbase from total_out; there's no way to tell from the output you've got if the coinbase failed to claim all its reward.\r\n\r\nIf the coinbase tx doesn't claim subsidy + totalfee then it failed to claim all its reward.\r\nFor seeing if miners claimed all the reward, perhaps we can add a new stat coinbase_total_out or better, unclaimed_reward, since subsidy + totalfee = coinbase_total_out + unclaimed_reward.\r\n\r\nI don't see how adding the claimed reward to the total_out helps with this. The idea of discarding the coinbase is that, even if we can't discard change outputs or pay to yourself txs or similar to approximate real throughput, we definitely can clearly discard the subsidy and the fees, but if people feel strongly about this it is easy to change. Perhaps we can have this as \"total_moved\" or \"total_paid\"\r\nAnd another redundant one total_out that's total_moved + coinbase_total_out (redundant only assuming we add coinbase_total_out or unclaimed_reward).\r\n\r\nBtw, the only person who answered the question about selecting by height or block hash was @trippysalmon who said he didn't care.\r\nShould I move from height to block hash to be more consistent with getblock ?\r\nShould both options be allowed?\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MzIxMTY5Nw==",
                    "publishedAt": "2018-04-20T20:21:56Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10757#issuecomment-383211697"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/127186?v=4",
                        "login": "ajtowns"
                    },
                    "body": "I don't really have a strong opinion on `total_out`, I guess I just found it a little weird it doesn't include the coinbase outputs.\r\n\r\nAs far as height vs blockhash is concerned, I think specifying by height is probably easiest for people using the api, but maybe it would be good to include the blockhash in the output (so if you get different results for a given height due to a reorg, it's easy to tell why), and/or allow either height/hash as the first param? I don't feel strongly about this either way, either.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MzI3NjQxNQ==",
                    "publishedAt": "2018-04-21T08:03:37Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10757#issuecomment-383276415"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1008458?v=4",
                        "login": "jtimon"
                    },
                    "body": "Yeah, my concern is precisely that, asking for a given height and getting the results for a block it's not what you were expecting, and yeah, both solutions (optionally accepting hash instead of height or always returning the block hash work) solve that problem.\r\nI guess I like more the first option because it's less data sent, but I guess the \"hash_or_height\" param name is ugly. I will do that and ask for \"squash or remove\"?\r\n\r\nBy the way, thoughts on the \"squash or remove\" for \"?? f'RPC: Introduce getblockstats'\"?\r\nIs that what you were expecting? Oh, wait, you have a nit on that commit. I'll solve them and then ask again (unless you say \"yeah it's not worth it\" now and I skip solving that nit).\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MzMwNDE3Ng==",
                    "publishedAt": "2018-04-21T15:12:56Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10757#issuecomment-383304176"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1008458?v=4",
                        "login": "jtimon"
                    },
                    "body": "Since all the stats are optional anyway, I ended up doing both adding an optional blockhash in the result and my preference, which was moving from height to hash_or_height.\r\nAlso did some squashing and did further simplifications on both the rpc and the tests, including inling the function, since it didn't sense anymore after moving away from height ranges and removing the hardcoded list of expected stats from the tests (since they're already hardcoded in the data file).\r\n\r\nSince the diff from last review was kind of big, I took the opportunity to rebase too.\r\n ",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4Mzc0OTc5OA==",
                    "publishedAt": "2018-04-23T23:03:11Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10757#issuecomment-383749798"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1008458?v=4",
                        "login": "jtimon"
                    },
                    "body": "Fixed the remaining nits: test when there's no txindex and give a specific error when txindex is required but not set as suggested by @jimpo.\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4Mzc2MTAzNw==",
                    "publishedAt": "2018-04-24T00:07:14Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10757#issuecomment-383761037"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1008458?v=4",
                        "login": "jtimon"
                    },
                    "body": "Fixed the tests with the node 1 in travis (in my computer the sync_all wasn't needed, oops) and did some bikeshedding.\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MzkzMjk4Mg==",
                    "publishedAt": "2018-04-24T13:36:38Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10757#issuecomment-383932982"
                }
            ],
            "totalCount": 41
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "ddfe0918b0d65881c897e57e83505f7054fcbfe2"
                    }
                }
            ],
            "totalCount": 5
        },
        "createdAt": "2017-07-06T23:21:21Z",
        "deletions": 18,
        "id": "MDExOlB1bGxSZXF1ZXN0MTI5MzAxMjY0",
        "labels": {
            "nodes": [
                {
                    "color": "0052cc",
                    "id": "MDU6TGFiZWw5ODI3OTE3Nw==",
                    "name": "RPC/REST/ZMQ"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "number": 10757,
        "state": "OPEN",
        "title": "RPC: Introduce getblockstats to plot things",
        "updatedAt": "2018-04-24T22:21:48Z"
    },
    {
        "additions": 710,
        "author": {
            "avatarUrl": "https://avatars1.githubusercontent.com/u/548488?v=4",
            "login": "sipa",
            "url": "https://github.com/sipa"
        },
        "body": "This PR improves correctness (removing potentially unsafe `const_cast`s) and flexibility of the serialization code.\r\n\r\nThe main issue is that use of the current `ADD_SERIALIZE_METHODS` macro (which is the only way to not duplicate serialization and deserialization code) only expands to a single class method, and thus can only be qualified as either const or non-const - not both. In many cases, serialization needs to work on const objects however, and preferably that is done without casts that could hide const-correctness bugs.\r\n\r\nTo deal with that, this PR introduces a new approach that includes a `SERIALIZE_METHODS(obj)` macro, where `obj` is a variable name. It expands to some boilerplate and a static method to which the object itself is an argument. The advantage is that its type can be templated, and be `const` when serializing.\r\n\r\nAnother issue is the various serialization-wrapping macros (`VARINT`, `COMPACTSIZE`, `FLATDATA` and `LIMITED_STRING`). They all `const_cast` their argument in order to construct a wrapper object, which supports both serialization and deserialization. This PR makes them templated in the underlying data type (for example, `CompactSizeWrapper<uint64_t>`). This has the advantage that we can make the template type `const` when invoked on a `const` variable (so it would be `CompactSizeWrapper<const uint64_t>` in that case).\r\n\r\nA last issue is the persistent use of the `REF` macro to deal with temporary expressions being passed in. Since C++11, this is not needed anymore as temporaries are explicitly represented as rvalue references. Thus we can remove `REF` invocations and instead just make the various classes and helper functions deal correctly with references.\r\n\r\nThe above changes permit a fully const-correct version of all serialization code. However, it is cumbersome. Any existing `ADD_SERIALIZE_METHODS` instances in the code that do more than just (conditionally) serializing/deserializing some fields (in particular, it contains branches that assign to some of the variables) need to be split up into an explicit `Serialize` and `Unserialize` method instead. In some cases this is inevitable (wallet serializers do some crazy transformations while serializing!), but in many cases it is just annoying duplication.\r\n\r\nTo improve upon this, a few more primitives that are currently inlined are turned into serialization wrappers:\r\n* `BigEndianWrapper`: Serializes/deserializes an integer as big endian rather than little endian (only for 16-bit). This permits the CService serialization to become a oneliner.\r\n* `Uint48Wrapper`: Serializes/deserializes only the lower 48 bits of an integer (used in BIP152 code).\r\n* `VectorApplyWrapper`: Serializes/deserializes a vector while using a custom serializer for its elements. This simplifies the undo and blockencoding serializers a lot.\r\n\r\nBest of all, it removes 147 lines of while code adding a bunch of comments (though the increased use of vararg `READWRITE` is probably cheating a bit).\r\n\r\nThe commits are ordered into 3 sections:\r\n* First, introduce new classes that permit const-correct serialization.\r\n* Then one by one transform the various files to use the new serializers.\r\n* Finally, remove the old serializers.\r\n\r\nThis may be too much to go in at once. I'm happy to split things up as needed.",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/858454?v=4",
                        "login": "gmaxwell"
                    },
                    "body": "Should probably be tested on big endian. :)",
                    "id": "MDEyOklzc3VlQ29tbWVudDMxNDE5NDkyMg==",
                    "publishedAt": "2017-07-10T18:32:34Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10785#issuecomment-314194922"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "Concept ACK.\r\nBinaries: https://bitcoin.jonasschnelli.ch/build/210 (Currently running on a fresh node)\r\nAgree with @gmaxwell that some BE testing would be good.\r\n\r\nWill code-review soon.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMxNDQ0MjIyNQ==",
                    "publishedAt": "2017-07-11T13:24:30Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10785#issuecomment-314442225"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/548488?v=4",
                        "login": "sipa"
                    },
                    "body": "Made some changes to reduce the size of the overall diff.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMxODg2ODU2Nw==",
                    "publishedAt": "2017-07-30T00:20:53Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10785#issuecomment-318868567"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/548488?v=4",
                        "login": "sipa"
                    },
                    "body": "Rebased.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMyMjU5NzIzMQ==",
                    "publishedAt": "2017-08-15T21:38:20Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10785#issuecomment-322597231"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/548488?v=4",
                        "login": "sipa"
                    },
                    "body": "Rebased.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMyNTAwOTkzMg==",
                    "publishedAt": "2017-08-25T19:02:49Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10785#issuecomment-325009932"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "Big concept ACK, happy to get rid of FLATDATA and similar ugly macros. This is a lot to review/test though, and reasonably high-risk.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMyNzYyNjc3Ng==",
                    "publishedAt": "2017-09-06T22:12:56Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10785#issuecomment-327626776"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/548488?v=4",
                        "login": "sipa"
                    },
                    "body": "Rebased.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMzODE4MDM4Mw==",
                    "publishedAt": "2017-10-20T11:27:05Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10785#issuecomment-338180383"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
                        "login": "MarcoFalke"
                    },
                    "body": "Travis can not run the qt tests. Are they passing for you locally?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0MDkxNjg0MA==",
                    "publishedAt": "2017-10-31T21:44:14Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10785#issuecomment-340916840"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/7133040?v=4",
                        "login": "ryanofsky"
                    },
                    "body": "~~~They passed for me locally.~~~ Current travis failure appears to be:\r\n\r\nQFATAL : WalletTests::walletTests() Received signal 11\r\nFAIL!  : WalletTests::walletTests() Received a fatal error.\r\n   Loc: [Unknown file(0)]\r\n\r\nEDIT: Actually they are failing for me locally too",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0MDkxODI2NQ==",
                    "publishedAt": "2017-10-31T21:50:21Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10785#issuecomment-340918265"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
                        "login": "MarcoFalke"
                    },
                    "body": "I guess they time out and you could try setting the `QTEST_FUNCTION_TIMEOUT` env var to 600,000. Though, it might be worthwhile to check why they take longer than before.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0MDkyMDU2NA==",
                    "publishedAt": "2017-10-31T22:00:19Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10785#issuecomment-340920564"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/7133040?v=4",
                        "login": "ryanofsky"
                    },
                    "body": "Actually they are failing for me locally. Stack trace shows an infinite recursion and looks like:\r\n\r\n```\r\n(gdb) bt -50\r\n#2355058 0x00000001000dbe89 in GUIUtil::AsStdString<QString const>(QString const&) (qstring=...) at qt/guiutil.h:285\r\n#2355059 0x00000001000dbe89 in GUIUtil::AsStdString<QString const>(QString const&) (qstring=...) at qt/guiutil.h:285\r\n#2355060 0x00000001000dbe89 in GUIUtil::AsStdString<QString const>(QString const&) (qstring=...) at qt/guiutil.h:285\r\n#2355061 0x00000001000dbe89 in GUIUtil::AsStdString<QString const>(QString const&) (qstring=...) at qt/guiutil.h:285\r\n#2355062 0x00000001000dbe89 in GUIUtil::AsStdString<QString const>(QString const&) (qstring=...) at qt/guiutil.h:285\r\n#2355063 0x00000001000dbe89 in GUIUtil::AsStdString<QString const>(QString const&) (qstring=...) at qt/guiutil.h:285\r\n#2355064 0x00000001000dbe89 in GUIUtil::AsStdString<QString const>(QString const&) (qstring=...) at qt/guiutil.h:285\r\n#2355065 0x00000001000dbe89 in GUIUtil::AsStdString<QString const>(QString const&) (qstring=...) at qt/guiutil.h:285\r\n#2355066 0x00000001000dbe89 in GUIUtil::AsStdString<QString const>(QString const&) (qstring=...) at qt/guiutil.h:285\r\n#2355067 0x00000001000dbe89 in GUIUtil::AsStdString<QString const>(QString const&) (qstring=...) at qt/guiutil.h:285\r\n#2355068 0x00000001000dbe89 in GUIUtil::AsStdString<QString const>(QString const&) (qstring=...) at qt/guiutil.h:285\r\n#2355069 0x00000001000dbe89 in GUIUtil::AsStdString<QString const>(QString const&) (qstring=...) at qt/guiutil.h:285\r\n#2355070 0x00000001000dbe89 in GUIUtil::AsStdString<QString const>(QString const&) (qstring=...) at qt/guiutil.h:285\r\n#2355071 0x00000001000dbe89 in GUIUtil::AsStdString<QString const>(QString const&) (qstring=...) at qt/guiutil.h:285\r\n#2355072 0x00000001000dbe89 in GUIUtil::AsStdString<QString const>(QString const&) (qstring=...) at qt/guiutil.h:285\r\n#2355073 0x00000001000dbe89 in GUIUtil::AsStdString<QString const>(QString const&) (qstring=...) at qt/guiutil.h:285\r\n#2355074 0x00000001000dbe89 in GUIUtil::AsStdString<QString const>(QString const&) (qstring=...) at qt/guiutil.h:285\r\n#2355075 0x00000001000dbe89 in GUIUtil::AsStdString<QString const>(QString const&) (qstring=...) at qt/guiutil.h:285\r\n#2355076 0x00000001000da01d in RecentRequestsTableModel::addNewRequest(SendCoinsRecipient const&) (qstring=...) at qt/guiutil.h:285\r\n#2355077 0x00000001000da01d in RecentRequestsTableModel::addNewRequest(SendCoinsRecipient const&) (qstring=...) at qt/guiutil.h:285\r\n#2355078 0x00000001000da01d in RecentRequestsTableModel::addNewRequest(SendCoinsRecipient const&) (ser_action=..., s=..., obj=...) at qt/walletmodel.h:69\r\n#2355079 0x00000001000da01d in RecentRequestsTableModel::addNewRequest(SendCoinsRecipient const&) (s=..., this=0x7fffffffb728) at qt/walletmodel.h:66\r\n#2355080 0x00000001000da01d in RecentRequestsTableModel::addNewRequest(SendCoinsRecipient const&) (a=..., os=...) at ./serialize.h:677\r\n#2355081 0x00000001000da01d in RecentRequestsTableModel::addNewRequest(SendCoinsRecipient const&) (arg=..., s=...) at ./serialize.h:1030\r\n#2355082 0x00000001000da01d in RecentRequestsTableModel::addNewRequest(SendCoinsRecipient const&) (arg=..., s=...) at ./serialize.h:1031\r\n#2355083 0x00000001000da01d in RecentRequestsTableModel::addNewRequest(SendCoinsRecipient const&) (arg=@0x7fffffffb718: 1, s=...) at ./serialize.h:1031\r\n#2355084 0x00000001000da01d in RecentRequestsTableModel::addNewRequest(SendCoinsRecipient const&) (arg=@0x7fffffffb710: 1, s=...) at ./serialize.h:1031\r\n#2355085 0x00000001000da01d in RecentRequestsTableModel::addNewRequest(SendCoinsRecipient const&) (ser_action=..., s=...) at ./serialize.h:1049\r\n#2355086 0x00000001000da01d in RecentRequestsTableModel::addNewRequest(SendCoinsRecipient const&) (s=..., obj=..., ser_action=...) at qt/recentrequeststablemodel.h:30\r\n#2355087 0x00000001000da01d in RecentRequestsTableModel::addNewRequest(SendCoinsRecipient const&) (s=..., this=0x7fffffffb710) at qt/recentrequeststablemodel.h:28\r\n#2355088 0x00000001000da01d in RecentRequestsTableModel::addNewRequest(SendCoinsRecipient const&) (a=..., os=...) at ./serialize.h:677\r\n#2355089 0x00000001000da01d in RecentRequestsTableModel::addNewRequest(SendCoinsRecipient const&) (obj=..., this=0x7fffffffb600) at ./streams.h:399\r\n#2355090 0x00000001000da01d in RecentRequestsTableModel::addNewRequest(SendCoinsRecipient const&) (this=0x1014511d0, recipient=...) at qt/recentrequeststablemodel.cpp:173\r\n#2355091 0x00000001000d2a92 in ReceiveCoinsDialog::on_receiveButton_clicked() (this=0x7fffffffbf50) at qt/receivecoinsdialog.cpp:167\r\n#2355092 0x000000010010dd95 in ReceiveCoinsDialog::qt_static_metacall(QObject*, QMetaObject::Call, int, void**) (_o=<optimized out>, _c=<optimized out>, _id=<optimized out>, _a=<optimized out>)\r\n    at qt/moc_receivecoinsdialog.cpp:123\r\n#2355093 0x000000010010e0e5 in ReceiveCoinsDialog::qt_metacall(QMetaObject::Call, int, void**) (this=0x7fffffffbf50, _c=QMetaObject::InvokeMetaMethod, _id=3, _a=0x7fffffffbbb0) at qt/moc_receivecoinsdialog.cpp:177\r\n#2355094 0x00007ffff62b2ee0 in QMetaObject::activate(QObject*, int, int, void**) (sender=sender@entry=0x10163e380, signalOffset=<optimized out>, local_signal_index=local_signal_index@entry=2, argv=argv@entry=0x7fffffffbbb0) at kernel/qobject.cpp:3728\r\n#2355095 0x00007ffff62b3537 in QMetaObject::activate(QObject*, QMetaObject const*, int, void**) (sender=sender@entry=0x10163e380, m=m@entry=0x7ffff7098a40 <QAbstractButton::staticMetaObject>, local_signal_index=local_signal_index@entry=2, argv=argv@entry=0x7fffffffbbb0) at kernel/qobject.cpp:3578\r\n#2355096 0x00007ffff6f112b2 in QAbstractButton::clicked(bool) (this=this@entry=0x10163e380, _t1=false) at .moc/moc_qabstractbutton.cpp:303\r\n#2355097 0x00007ffff6c73f44 in QAbstractButtonPrivate::emitClicked() (this=0x1016cc1d0) at widgets/qabstractbutton.cpp:534\r\n#2355098 0x00007ffff6c745e1 in QAbstractButton::click() (this=0x10163e380) at widgets/qabstractbutton.cpp:992\r\n#2355099 0x0000000100086686 in (anonymous namespace)::TestGUI() () at qt/test/wallettests.cpp:222\r\n#2355100 0x00007ffff628f84a in QMetaMethod::invoke(QObject*, Qt::ConnectionType, QGenericReturnArgument, QGenericArgument, QGenericArgument, QGenericArgument, QGenericArgument, QGenericArgument, QGenericArgument, QGenericArgument, QGenericArgument, QGenericArgument, QGenericArgument) const (this=this@entry=0x7fffffffce98, object=object@entry=0x7fffffffd830, connectionType=Qt::DirectConnection, \r\n    connectionType@entry=4294954784, returnValue=..., val0=..., val1=..., val2=..., val3=..., val4=..., val5=..., val6=..., val7=..., val8=..., val9=...) at kernel/qmetaobject.cpp:2212\r\n#2355101 0x00007ffff6294f0d in QMetaObject::invokeMethod(QObject*, char const*, Qt::ConnectionType, QGenericReturnArgument, QGenericArgument, QGenericArgument, QGenericArgument, QGenericArgument, QGenericArgument, QGenericArgument, QGenericArgument, QGenericArgument, QGenericArgument, QGenericArgument) (obj=0x7fffffffd830, member=member@entry=0x100ca1990 \"walletTests\", type=4294954784, \r\n    type@entry=Qt::DirectConnection, ret=..., val0=..., val1=..., val2=..., val3=..., val4=..., val5=..., val6=..., val7=..., val8=..., val9=...) at kernel/qmetaobject.cpp:1479\r\n#2355102 0x00007ffff7fa408c in QTest::qInvokeTestMethod(char const*, char const*) (val9=..., val8=..., val7=..., val6=..., val5=..., val4=..., val3=..., val2=..., val1=..., val0=..., type=Qt::DirectConnection, member=0x100ca1990 \"walletTests\", obj=<optimized out>) at ../../include/QtCore/../../src/corelib/kernel/qobjectdefs.h:409\r\n#2355103 0x00007ffff7fa408c in QTest::qInvokeTestMethod(char const*, char const*) (slot=0x100ca1990 \"walletTests\") at qtestcase.cpp:1953\r\n#2355104 0x00007ffff7fa408c in QTest::qInvokeTestMethod(char const*, char const*) (slotName=0x100948698 \"walletTests()\", data=data@entry=0x0) at qtestcase.cpp:2082\r\n#2355105 0x00007ffff7fa4bb8 in QTest::qExec(QObject*, int, char**) (testObject=0x7fffffffd830) at qtestcase.cpp:2390\r\n#2355106 0x00007ffff7fa4bb8 in QTest::qExec(QObject*, int, char**) (testObject=0x7fffffffd830, argc=<optimized out>, argv=<optimized out>) at qtestcase.cpp:2652\r\n#2355107 0x000000010005d9df in main(int, char**) (argc=1, argv=0x7fffffffdd78) at qt/test/test_main.cpp:99\r\n```",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0MDkyMjk4OQ==",
                    "publishedAt": "2017-10-31T22:11:29Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10785#issuecomment-340922989"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/548488?v=4",
                        "login": "sipa"
                    },
                    "body": "Rebased.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0MTQ5MzE3Ng==",
                    "publishedAt": "2017-11-02T17:13:08Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10785#issuecomment-341493176"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/548488?v=4",
                        "login": "sipa"
                    },
                    "body": "Removed the need for creating a vector with absolute values for serializing/deserializing BlockTransactionsRequest.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0Mjk0NDcwMw==",
                    "publishedAt": "2017-11-08T20:12:40Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10785#issuecomment-342944703"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/548488?v=4",
                        "login": "sipa"
                    },
                    "body": "Rebased.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0NTk5MjY3Nw==",
                    "publishedAt": "2017-11-21T11:02:55Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10785#issuecomment-345992677"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/548488?v=4",
                        "login": "sipa"
                    },
                    "body": "Rebased.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NDIyMjI0Mw==",
                    "publishedAt": "2018-02-08T19:29:27Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10785#issuecomment-364222243"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/3514957?v=4",
                        "login": "Christewart"
                    },
                    "body": "I ran this with #8469 -- which tests serialization code pretty extensively -- and everything passed. \r\n\r\nIf anyone wants to re-run they can do with this branch: https://github.com/Christewart/bitcoin/commits/pbt_noncastserial",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NDI2Njg4OA==",
                    "publishedAt": "2018-02-08T22:14:49Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10785#issuecomment-364266888"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/548488?v=4",
                        "login": "sipa"
                    },
                    "body": "Rebased.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3Mjc3MDU4MQ==",
                    "publishedAt": "2018-03-13T18:27:57Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10785#issuecomment-372770581"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/548488?v=4",
                        "login": "sipa"
                    },
                    "body": "I've reordered the commits again a bit, and made a small (but invasive) change to the design:\r\n* Removed macro READWRITEAS (using `AsType<type>(obj)` instead)\r\n* Added a `Wrap<wrapper>(obj)` function to later avoid the need for `COMPACTSIZE`, `VARINT`, and `LIMITED_STRING`, and removing the need for helper functions for each wrapper class.\r\n\r\nFeel free to ignore the changes here; I'll keep taking small bits from it and submitting them as separate PRs.\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3Mzk2MDQ4NQ==",
                    "publishedAt": "2018-03-17T23:29:09Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10785#issuecomment-373960485"
                }
            ],
            "totalCount": 18
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "57b3884a951ecb0c175613ffd42f9d5cf8e36d9c"
                    }
                }
            ],
            "totalCount": 24
        },
        "createdAt": "2017-07-10T18:29:33Z",
        "deletions": 732,
        "id": "MDExOlB1bGxSZXF1ZXN0MTI5NzQzODQ4",
        "labels": {
            "nodes": [
                {
                    "color": "5319e7",
                    "id": "MDU6TGFiZWwyNDE4MzI5MjM=",
                    "name": "Utils/log/libs"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "number": 10785,
        "state": "OPEN",
        "title": "Serialization improvements",
        "updatedAt": "2018-04-17T01:52:52Z"
    },
    {
        "additions": 317,
        "author": {
            "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
            "login": "jonasschnelli",
            "url": "https://github.com/jonasschnelli"
        },
        "body": "This adds a simple light client mode (RPC only, no wallet support).\r\n\r\nWith this PR, It is possible to disable auto-request-blocks by passing in `-autorequestblocks=0`.\r\nIn that mode, one can request out-of-band blocks by calling `requestblock add [\"<blockhash>\", ...]`.\r\nThose blocks will then be requested/downloaded and can be loaded via `getblock` (and they will also be passed through ZMQ).\r\n\r\nThis allows a very simple light-client mode ideally when you already have a validated peer in your trusted network.\r\n\r\nThis is also a reviewable step towards light client mode for the wallet (which will ultimately allow process separation o the wallet).",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "Contains overhauled parts from #9483",
                    "id": "MDEyOklzc3VlQ29tbWVudDMxNDQ3MzMxMA==",
                    "publishedAt": "2017-07-11T15:02:43Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10794#issuecomment-314473310"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/7133040?v=4",
                        "login": "ryanofsky"
                    },
                    "body": "I'd like to help out here, and I've spent literally days reviewing previous iterations of this change (#9076 #9483 #9171), but I can't figure out if this is going anywhere and if providing more review now is a good use of time.\r\n\r\nAs I've mentioned previously, I don't think the auxiliary block download class design is great, because it duplicates functionality from the networking layer in a wholly different part of the code, and gives the wallet too much control & responsibility over low level p2p details in the case where it's used to let the wallet code prioritize which blocks to download. I've tried to describe what I think would be better alternatives in my previous review comments, like https://github.com/bitcoin/bitcoin/pull/9483#issuecomment-278799990.\r\n\r\n@jonasschnelli, assuming you don't want to take my previous suggestions, and do want to stick with the current design, I think it would be helpful if you could reach out to some other reviewers and get some concept acks for your current approach. It might help to put together some kind of design document, or at least a detailed comment to the top of `auxiliaryblockrequest.h` that lays out how the class works and what your future plans for it are in as much detail as possible, so someone can understand how it's intended to be used without having to wade through all the PRs.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMxNDUwODc0Ng==",
                    "publishedAt": "2017-07-11T17:03:13Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10794#issuecomment-314508746"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "@ryanofsky:\r\nThank you very much for the reviews in #9483. I implemented almost all of your suggesting and some of them where really great.\r\nHowever, I think the current design of having a dedicated class (`CauxiliaryBlockRequest`) makes sense, because...\r\n\r\n* An out-of-band (auxiliary) block request in an object, you could have multiple in parallel (assume multiwallet, etc.), in future, we may want to serialise them to disk, etc. Therefore I think it should be capsulated in its own class.\r\n\r\n* I think the wallet needs control. For a light-client mode, the wallet is the one that tells the node what it needs. More or less, wallet tells node: \"I need block A to E, give them to me as fast as possible\", then node may call back \"I have block A already ready (on disk), rest will follow soon\", etc. Wallet then may say: \"Okay, thats enough, you can stop at B already\", etc.\r\n\r\n* Having the implementation in a designated file makes code overview simpler. It can result in having slightly more lines of code but it should worth it. Having another `main.cpp` for everything that is network related should be avoided now, early enough. I don't think we have a lot of duplicated code, or can you point out what would be more compact if we would implement it directly in `net_processing.cpp`?\r\n\r\n* Last but not least, it allows to have a patch-set the requires less rebasing. And this is an important one to me. Eventually, this will be something that \"runs along\" with the master branch until there has been reasonable amount of testing before it gets eventually merged.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMxNDUzNDA4Ng==",
                    "publishedAt": "2017-07-11T18:36:31Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10794#issuecomment-314534086"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "Followed yesterdays discussion we had in #bitcoin-core-dev. Removed the `CAuxiliaryBlockRequests` and added a `std::map blocksToDownloadFirst`.\r\nSuch manually added, priority block downloads will not trigger `ActivateBestChain`.\r\n\r\nThis PR now also adds a new signal `BlockProcessed()`.\r\n\r\nThe scope of this PR is not to make the block download interface flexible for multiple \"users\" (like the validation and eventually the light-client wallet).",
                    "id": "MDEyOklzc3VlQ29tbWVudDMxNDgxMTg0OA==",
                    "publishedAt": "2017-07-12T15:47:29Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10794#issuecomment-314811848"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "fixed @ryanofsky points.\r\nThis does pass travis now. Thanks in advance for reviews...",
                    "id": "MDEyOklzc3VlQ29tbWVudDMxNjc4NTk4Ng==",
                    "publishedAt": "2017-07-20T18:11:11Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10794#issuecomment-316785986"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "Thanks @ryanofsky. Agree about required conceptual ACKs from other devs.\r\nThe long term goal was sketched in #9483, basically a light client mode for Bitcoin-Core that would allow node/wallet separation.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMxNjgxMzA5Mg==",
                    "publishedAt": "2017-07-20T19:58:12Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10794#issuecomment-316813092"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "Overhauled and fixed @ryanofsky points (mostly nits), also removed the new (unused) signal.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMxNzY3MjYxOA==",
                    "publishedAt": "2017-07-25T08:50:17Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10794#issuecomment-317672618"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "Overhauled first commit to make sure we request blocks in order:\r\nhttps://github.com/bitcoin/bitcoin/pull/10794/commits/5927f7f1d6c7eb1bc7fb7a39dfda277ad5e4474c#diff-eff7adeaec73a769788bb78858815c91R483\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDMxODA2MzAyNg==",
                    "publishedAt": "2017-07-26T14:04:52Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10794#issuecomment-318063026"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "* Overhauled once again. Added the processing logic to ensure blocks are processed in order (makes it much simpler to process by \"the other side\").\r\n* Added a new main signal for the processing (reusing BlockChecked seems wrong).\r\n* Priority requests are now pushed through signal\r\n\r\nThis is now tested on my SPV branch and could be the first reviewable step towards light clients / wallet process separation.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMxODI5NjM0NA==",
                    "publishedAt": "2017-07-27T08:33:19Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10794#issuecomment-318296344"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1008458?v=4",
                        "login": "jtimon"
                    },
                    "body": "Needs rebase",
                    "id": "MDEyOklzc3VlQ29tbWVudDMyNjQyNDcxMg==",
                    "publishedAt": "2017-08-31T21:24:56Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10794#issuecomment-326424712"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/9156103?v=4",
                        "login": "nopara73"
                    },
                    "body": "@ryanofsky Reflecting to your usefullness concern:  \r\nI wrote a full block downloading SPV wallet ([HiddenWallet](https://github.com/nopara73/HiddenWallet/)), the main reason is, because without such architecture [private transaction retrieval is hard](https://groups.google.com/forum/#!msg/bitcoinj/Ys13qkTwcNg/9qxnhwnkeoIJ), if not impossible.  \r\nWhen some form of light functionality gets into Core I would personally consider porting HiddenWallet to on top of Core, since I cannot compete with Core's speed and stability.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMzMzkyOTM2NQ==",
                    "publishedAt": "2017-10-03T18:06:09Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10794#issuecomment-333929365"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/7133040?v=4",
                        "login": "ryanofsky"
                    },
                    "body": "That's really interesting. @nopara73, if I understand you correctly, you are saying that if the `requestblocks` JSON-RPC API from this PR is added to bitcoin core, then [HiddenWallet](https://github.com/nopara73/HiddenWallet/) would be able to call it to download blocks instead of depending on [NBitcoin](https://github.com/MetacoSA/NBitcoin)?",
                    "id": "MDEyOklzc3VlQ29tbWVudDMzMzk0MTY5MQ==",
                    "publishedAt": "2017-10-03T18:48:50Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10794#issuecomment-333941691"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/9156103?v=4",
                        "login": "nopara73"
                    },
                    "body": "@ryanofsky \r\n\r\n> you are saying that if the requestblocks JSON-RPC API from this PR is added to bitcoin core, then HiddenWallet would be able to call it to download blocks instead of depending on NBitcoin?\r\n\r\nYes.  ",
                    "id": "MDEyOklzc3VlQ29tbWVudDMzMzk0NjMwNQ==",
                    "publishedAt": "2017-10-03T19:06:14Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10794#issuecomment-333946305"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "Rebased",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0NjQ4OTAzNQ==",
                    "publishedAt": "2017-11-22T22:23:11Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10794#issuecomment-346489035"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/9156103?v=4",
                        "login": "nopara73"
                    },
                    "body": "# Simple RPC App Example\r\n\r\nJust to be sure I understand correctly this PR and the application I am considering will work as I expect to work:\r\n\r\nHow would the wallet behave? Best effort or disabled?  \r\n\r\nSo let's say is it possible to write a software, that uses Bitcoin Core's wallet with autorequestblocks=0 in the following way:  \r\n\r\n1. Sync up the header.  \r\n2. Create a wallet, save the creation time (or block height).  \r\n3. Subscribe for new header notifications.  \r\n4. Every time a new header comes call `requestblock add blockhash`\r\n\r\nSo the wallet, from the information it has available executes the rpc commands properly based on best effort, right? And is not supposed to fail.  \r\n\r\nThis gives me the possibility to implement leapfrogging for example. (Enable the user to say: hey, I didn't do or wait for any transaction in the last 3 months and I have no intention to sync it up, it's ok if I get the blocks from now on.)  \r\n\r\n# Other Concerns\r\n\r\n1. Since this mode cannot have up to date utxo set, how do you broadcast transactions? How do you make sure it's valid?  \r\n2. How do you accept transactions to your mempool without making sure it spends an utxo? Are you also propagating them?  \r\n3. What would getblockcount return?\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0NjY4NDQ3NQ==",
                    "publishedAt": "2017-11-23T19:08:56Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10794#issuecomment-346684475"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "@nopara73 \r\n* This PR does not touch the wallet (that will come later, would be to large of a PR).\r\n* This PR does allow to disable the auto-download (sync)\r\n* This PR does allow to download random blocks (specified by block-hashes) and have them header-only-validated, ... so you can parse the blocks content\r\n\r\n> Since this mode cannot have up to date utxo set, how do you broadcast transactions? How do you make sure it's valid?\r\n\r\nThis is not done on the PR. But there is a commit available in #9483 https://github.com/bitcoin/bitcoin/pull/9483/commits/7ca1a8738a878078c0d1546f7743a05ee474dd1b that does allow broadcasting transactions without an utxo set.\r\n\r\n> How do you accept transactions to your mempool without making sure it spends an utxo? Are you also propagating them?\r\n\r\nThis is impossible in light client mode. Mempool transactions (zero confirmation txns) are pretty unsafe in light client mode.\r\n\r\n> What would getblockcount return?\r\n\r\nThe same (probably `0` in `autorequestblocks=0` mode).\r\nUse `getchaintips()` to check your headers (not super efficient).",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0NjY5MTAwOQ==",
                    "publishedAt": "2017-11-23T20:05:30Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10794#issuecomment-346691009"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/9156103?v=4",
                        "login": "nopara73"
                    },
                    "body": "@jonasschnelli I'd like to make the last couple of things clear before I compile and test it, just to know what to expect.  \r\n\r\n# 1\r\n\r\n> there is a commit available in #9483 7ca1a87 that does allow broadcasting transactions without an utxo set.\r\n\r\nMeaning, `sendrawtransaction` will always return null?\r\n\r\n# 2\r\n\r\n> This PR does not touch the wallet (that will come later, would be to large of a PR).  \r\n\r\nMeaning, (1) disables the wallet, (2) makes the wallet rpcs return sometimes incorrect results, (3) you don't know what the rpcs would return?  ",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0NjcwMjg3OQ==",
                    "publishedAt": "2017-11-23T22:04:48Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10794#issuecomment-346702879"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "> Meaning, sendrawtransaction will always return null?\r\n\r\nNo. It will return the txid (as expected). But not in this PR (that would be with something like https://github.com/bitcoin/bitcoin/commit/7ca1a8738a878078c0d1546f7743a05ee474dd1b).\r\n\r\n> Meaning, (1) disables the wallet, (2) makes the wallet rpcs return sometimes incorrect results, (3) you don't know what the rpcs would return?\r\n\r\nThe wallet runs the same way as in master.\r\nAll wallet commands do work exactly the same way as the do in standard IBD mode.\r\nBlocks processed with the new `requestblocks` will be ignored by the wallet (otherwise this PR would be too large).\r\n\r\nThe scope of this PR is to add the necessary network processing infrastructure to later add an SPV mode to the wallet.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0NzA4MjgxMA==",
                    "publishedAt": "2017-11-27T05:32:36Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10794#issuecomment-347082810"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/7133040?v=4",
                        "login": "ryanofsky"
                    },
                    "body": ">> It would be useful to get concept ACKs from @gmaxwell and @sipa to make sure concerns from the earlier design discussion (https://botbot.me/freenode/bitcoin-core-dev/msg/88437543/) are addressed now.\r\n\r\n> Agree about required conceptual ACKs from other devs.\r\n\r\nLast I looked code was in good shape, but I don't think there was ever more design feedback on this. Maybe it should be brought up at an IRC meeting?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1NjM2MDM0Ng==",
                    "publishedAt": "2018-01-09T17:46:43Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10794#issuecomment-356360346"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/9156103?v=4",
                        "login": "nopara73"
                    },
                    "body": "This will be especially useful when combined with BIP158 (Compact Block Filters for Light Clients.) \r\nhttps://github.com/bitcoin/bips/blob/master/bip-0158.mediawiki\r\n\r\nI imagine, based on this PR someone will eventually make a Bitcoin Core light client after Core starts to serve filters. At least that'll be a low hanging fruit.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2Njg5NzM4OA==",
                    "publishedAt": "2018-02-20T08:10:46Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10794#issuecomment-366897388"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/10217?v=4",
                        "login": "Sjors"
                    },
                    "body": "Though I'm not sure what it would do on its own, perhaps the `PriorityBlockRequest` could be a separate PR?\r\n\r\nSame for `requestblocks` RPC; could that be useful in pruned nodes to retrieve a pruned block?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NzAwMTE5Nw==",
                    "publishedAt": "2018-02-20T14:50:39Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10794#issuecomment-367001197"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "Rebased",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MjMwMzc3Mw==",
                    "publishedAt": "2018-04-18T08:15:11Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10794#issuecomment-382303773"
                }
            ],
            "totalCount": 22
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "77561f7a4b500d0752d64ce931ce1dd613f7ab0d"
                    }
                }
            ],
            "totalCount": 10
        },
        "createdAt": "2017-07-11T15:01:30Z",
        "deletions": 31,
        "id": "MDExOlB1bGxSZXF1ZXN0MTI5OTMwOTQ1",
        "labels": {
            "nodes": [
                {
                    "color": "006b75",
                    "id": "MDU6TGFiZWw5ODI5ODAwNw==",
                    "name": "P2P"
                },
                {
                    "color": "6060aa",
                    "id": "MDU6TGFiZWwxMTgzNzk2NTI=",
                    "name": "Validation"
                }
            ],
            "totalCount": 2
        },
        "mergeable": "CONFLICTING",
        "mergedAt": null,
        "number": 10794,
        "state": "OPEN",
        "title": "Add simple light-client mode (RPC only)",
        "updatedAt": "2018-04-18T08:58:45Z"
    },
    {
        "additions": 23,
        "author": {
            "avatarUrl": "https://avatars1.githubusercontent.com/u/417043?v=4",
            "login": "theuni",
            "url": "https://github.com/theuni"
        },
        "body": "Addresses #10616. Please see the commit messages and note that AR/RANLIB may need to be set manually!\r\n\r\nThis is testing the waters for LTO. There are a few unknowns:\r\n- A boost LTO issue was addressed here, but others may remain for different libs/versions\r\n- ar/ranlib detection will likely turn out to be annoying\r\n- Not yet tested with Gitian\r\n\r\nI propose adding this as-is (maybe after Gitian testing), and seeking feedback. I suspect that there will be quite a few platforms/toolchains where it's broken, but there's only so much we can do about it.",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "Built successfully on my gitian machine (haven't tested the build yes though): https://bitcoin.jonasschnelli.ch/build/213",
                    "id": "MDEyOklzc3VlQ29tbWVudDMxNDgwNzA1OQ==",
                    "publishedAt": "2017-07-12T15:32:16Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10800#issuecomment-314807059"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "Bleh, the boost work-around is really nasty. It breaks my use-case with cloudabi, where fs::path is not actually convertible from/to a string losslessly.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMyNzU5MzMyNg==",
                    "publishedAt": "2017-09-06T19:47:09Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10800#issuecomment-327593326"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
                        "login": "MarcoFalke"
                    },
                    "body": "@theuni This can be closed given https://github.com/bitcoin/bitcoin/issues/10616#issuecomment-372027171 ? Otherwise needs rebase",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3OTU5OTExOA==",
                    "publishedAt": "2018-04-09T01:05:51Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10800#issuecomment-379599118"
                }
            ],
            "totalCount": 3
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "e05d1c2030299212311ffa61c6c577c29180baab"
                    }
                }
            ],
            "totalCount": 2
        },
        "createdAt": "2017-07-12T05:03:11Z",
        "deletions": 9,
        "id": "MDExOlB1bGxSZXF1ZXN0MTMwMDU1ODU5",
        "labels": {
            "nodes": [
                {
                    "color": "5319e7",
                    "id": "MDU6TGFiZWw2MTg4OTQxNg==",
                    "name": "Build system"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "CONFLICTING",
        "mergedAt": null,
        "number": 10800,
        "state": "OPEN",
        "title": "build: add lto configure option",
        "updatedAt": "2018-04-09T01:05:51Z"
    },
    {
        "additions": 76,
        "author": {
            "avatarUrl": "https://avatars1.githubusercontent.com/u/5269298?v=4",
            "login": "greenaddress",
            "url": "https://github.com/greenaddress"
        },
        "body": "This PR' aim is to improve user experience around stuck transactions without\r\naffecting users of zero conf transactions.\r\n\r\ntldr: Allow transaction replacement for transactions sitting in mempool for\r\nlonger than timeout (default 6h configurable) regardless of opt-in replacement\r\nflag.\r\n\r\nThis PR affects policy/relay only.\r\n\r\nStuck transactions have been a problem for users recently. While wallets\r\nare improving (opt in replacement, Child Pays For Parent, etc) there are some\r\ncases which find users with transactions stuck for days that can't be solved\r\neasily/reliably by wallet developers, especially when the user creates the\r\nstuck transaction with old software or for some reason disabled available\r\nfeatures countering stuck transactions.\r\n\r\nFor the purpose of the below I will ignore transactions created by the core\r\nwallet when talking about transaction expiration/eviction and focus on policy.\r\n\r\nBitcoin 0.12 introduced (or in a way re-introduced) opt-in transaction\r\nreplacement (BIP125), allowing people to more explicitly flag that their\r\ntransaction can be replaced (such that users of zero conf transactions can\r\nimmediately recognize them).\r\n\r\nAt the same time mempool limiting (configurable) was introduced, making the\r\nindividual mempool drop transactions at the bottom (low fee) when full.\r\n\r\nBoth before and after these changes any transaction in mempool would be\r\nautomatically evicted after 72 hours (configurable).\r\n\r\nRecently 0.14.0 increased the eviction from 72 hours to 2 weeks. These changes\r\nallows users of the system to aim for lower fees but at the same time makes it\r\nfrustrating for users that disable opt-in transaction replacement or that use\r\nsoftware that doesn't support it in first place to bump the fee at a later time\r\nor to revert the payment as they have to wait for a while or use ad-hoc\r\nsoftware.\r\n\r\nA number of miners will mine transactions regardless of opt-in flags (5-10%\r\nmaybe) and while core nodes won't propagate those transactions, a well\r\nconnected user can generally get replacement transactions mined within a\r\nreasonable amount of time without opt-in transaction replacement flags set.\r\n\r\nThis may be convenient for attackers or ad-hoc expert use but\r\nnot ideal for wallet developers, or at least until core merges full transaction\r\nreplacement because using this functionality would requires wallets to use\r\npreferential peering and/or forks of bitcoin core.\r\n\r\nUntil then a compromise solution that doesn't impact zero conf use and that\r\nimproves user experience would be to allow transactions to be replaced after\r\nsitting for a timeout in mempool (thus unconfirmed).\r\n\r\nThe timeout should be high enough that allows current use of zero conf and at\r\nthe same time allows same working day solution for users.\r\nI suggest a 6 hours timeout and to have it configurable for testing and ability\r\nfor user to change.\r\n\r\nThe changes continue to support disabling entirely transaction replacement\r\n(-mempoolreplacement) and introduces a new command line parameter\r\n(-mempoolreplacementtimeout) which allows to pass the number of seconds after\r\nwhich a transaction can be unconditionally replaced and setting this parameter\r\nto two weeks will keep the original behavior.\r\n\r\nIf you want to test the changes using @petertodd Replace-by-Fee tools build\r\ncore with this PR applied and wallet enabled and run with\r\n-mempoolreplacementtimeout=10 and use doublespend.py (with and without\r\n -b 1) from https://github.com/petertodd/replace-by-fee-tools",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "I think such policy changes should first be discussed on the bitcoin-dev mailing list and eventually deserve a BIP.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMxNTQzMzUzNw==",
                    "publishedAt": "2017-07-14T18:31:14Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10823#issuecomment-315433537"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/649246?v=4",
                        "login": "TheBlueMatt"
                    },
                    "body": "Yea, agreed that this should get a BIP (sadly probably means endlessly trolled), but does seem awesome to me. Does this need a new option? We dont currently have an option for opt-in-rbf, why not just leave this as hardcoded policy?",
                    "id": "MDEyOklzc3VlQ29tbWVudDMxNTQ1MjE0MA==",
                    "publishedAt": "2017-07-14T19:53:28Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10823#issuecomment-315452140"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/5269298?v=4",
                        "login": "greenaddress"
                    },
                    "body": "@TheBlueMatt replacement can be disabled (as a node policy afaik rather than wallet) and the new option i added  allows for easier testing and for people to run values that they like different from the default (either to be same as previous behavior or to get the other end without running some fork/patched core).\r\n\r\n@TheBlueMatt @jonasschnelli  I am happy to do a BIP and discuss in the dev mailing list as needed.  I thought the changes may be borderline like the change from 72h to 2 weeks for mempool expiry but happy (minus potential trolling) to learn otherwise and or try to reduce the impact of the changes if this is an option.\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDMxNTQ1NDY4Mw==",
                    "publishedAt": "2017-07-14T20:05:40Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10823#issuecomment-315454683"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/7042?v=4",
                        "login": "petertodd"
                    },
                    "body": "I disagree that this needs a BIP.\r\n\r\nOpt-in RBF added a new way to interpret a transaction, which just barely qualified as something you might want to do a BIP for.\r\n\r\nThis however makes an existing behavior - transactions being replaceable in spite of them not signalling opt-in RBF - happen a little sooner in some circumstances, just like adding expiration did in the first place. We didn't create a BIP for expiry, so why does this need a BIP?\r\n\r\nSecondly, writing a BIP for such a trivial change gives the misleading impression that you could rely on the opposite behavior. We've had continual problems with people misunderstanding the security properties of zeroconf; there's no reason to add to that problem.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMxNTQ4ODA1MA==",
                    "publishedAt": "2017-07-14T23:06:49Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10823#issuecomment-315488050"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/1095675?v=4",
                        "login": "luke-jr"
                    },
                    "body": "Indeed, mere policies are not BIP material...",
                    "id": "MDEyOklzc3VlQ29tbWVudDMxNTQ5NjQ0Mw==",
                    "publishedAt": "2017-07-15T00:31:49Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10823#issuecomment-315496443"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/858454?v=4",
                        "login": "gmaxwell"
                    },
                    "body": "People might want to know about it... and a BIP might be a good way to communicate it...  but we certainly didn't write a BIP about the expiration time changes over time, and this is strictly a narrower change.\r\n\r\nDunno how ideal 6 hours is though.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMxNTUwMDI4NA==",
                    "publishedAt": "2017-07-15T01:27:24Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10823#issuecomment-315500284"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/2886147?v=4",
                        "login": "EagleTM"
                    },
                    "body": "I'd suggest to put the timeout at 72h - at least when introducing the functionality. This way the behviour is similar to pre 0.14.x code. It's less likely to create havoc / confusion for operators who are still used to regularly see 0-conf transactions being re-spent after that time-frame (but not earlier).",
                    "id": "MDEyOklzc3VlQ29tbWVudDMxNTU4NDQzNQ==",
                    "publishedAt": "2017-07-16T04:18:16Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10823#issuecomment-315584435"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/7042?v=4",
                        "login": "petertodd"
                    },
                    "body": "@gmaxwell I suggested six hours because it's more than long enough (36 blocks) that if you wanted that tx mined relatively quickly, you're probably getting annoyed that it isn't.\r\n\r\n@EagleTM Try actually doublespending some time - it's a lot easier than you think it is.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMxNTU4NjYxMA==",
                    "publishedAt": "2017-07-16T05:20:06Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10823#issuecomment-315586610"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/649160?v=4",
                        "login": "rubensayshi"
                    },
                    "body": "I think 6hrs is very short, I've seen many TXs confirmed after 24hrs+, there's plenty of people who, during bigger mempool periods, even try to aim for that...\r\n\r\nthough it might feel a bit insignificant for a BIP, this PR impacts a lot of assumptions people have about 0conf txs, it would get more significant exposure and discussion if proposed as a BIP. ",
                    "id": "MDEyOklzc3VlQ29tbWVudDMxOTE5NjE3Nw==",
                    "publishedAt": "2017-07-31T21:05:06Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10823#issuecomment-319196177"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/7042?v=4",
                        "login": "petertodd"
                    },
                    "body": "@rubensayshi You seem to be arguing that the time interval should be longer for security reasons. For that argument to be valid, you'd have to substantiate the claim that a transaction with a fee so low that it fails to confirm after 36 blocks - 10 blocks more than the fee estimator even supports - is still difficult to double spend.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMxOTI2NDIwNw==",
                    "publishedAt": "2017-08-01T04:26:21Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10823#issuecomment-319264207"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/5269298?v=4",
                        "login": "greenaddress"
                    },
                    "body": "@rubensayshi this doesn't stop those transactions from being confirmed if that's what the user wanted anyway it just allows people to replace transactions after a 6 hours long period - replacing them is already very easy to do ad-hoc even without the replacement flag but that full replacement it is currently painful to do for wallet developers without having to use different peering policies/full nodes with full replacement enabled.\r\n\r\nI'd argue for full replacement at all times given the farce that it is doing replacement even without flags but if people want to at least try to keep the illusion of zero conf then I think 6 hours gives plenty of time for people that use zero conf to keep using it at the same ~ [in]security as today inclusive of illusion while giving users the opportunity to not have txs stuck for 2 weeks and solve stuck transactions problems within a business day.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMxOTUxMDcyMA==",
                    "publishedAt": "2017-08-01T22:05:18Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10823#issuecomment-319510720"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/5269298?v=4",
                        "login": "greenaddress"
                    },
                    "body": "conflicts; should I rebase and squash while at it?",
                    "id": "MDEyOklzc3VlQ29tbWVudDMxOTUxMDkyOQ==",
                    "publishedAt": "2017-08-01T22:06:29Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10823#issuecomment-319510929"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/7042?v=4",
                        "login": "petertodd"
                    },
                    "body": "@greenaddress +1",
                    "id": "MDEyOklzc3VlQ29tbWVudDMyMDAwNTk3NQ==",
                    "publishedAt": "2017-08-03T15:35:40Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10823#issuecomment-320005975"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/5269298?v=4",
                        "login": "greenaddress"
                    },
                    "body": "@luke-jr not sure i understand your first point\r\n\r\nI rebased as there was a conflict (new gArgs) and made sure feebumper.cpp handles the timeout too and added a test.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMyNzAzOTAzOQ==",
                    "publishedAt": "2017-09-04T23:31:57Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10823#issuecomment-327039039"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
                        "login": "MarcoFalke"
                    },
                    "body": "Needs rebase",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0MzU2ODAyMQ==",
                    "publishedAt": "2017-11-10T19:44:54Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10823#issuecomment-343568021"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/5269298?v=4",
                        "login": "greenaddress"
                    },
                    "body": "@MarcoFalke rebased\r\n\r\n@promag moved to setmocktime, factored out the function, removed the white space and updated to new style - thanks!\r\n\r\nMore feedback welcome. I think it would be good to have more tests (ideas?) and I tried to be the least intrusive here but perhaps people have some refactoring suggestions.\r\n\r\nedit: there's a bit more work needed as something broke with the rebase around list transactions/mempool sync",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1MDQ1NjgwOQ==",
                    "publishedAt": "2017-12-09T12:13:04Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10823#issuecomment-350456809"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/7042?v=4",
                        "login": "petertodd"
                    },
                    "body": "utACK 927666539bd61da5038b752ee60d106b9577ca42",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1MDUwMTYxOQ==",
                    "publishedAt": "2017-12-09T19:58:56Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10823#issuecomment-350501619"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
                        "login": "promag"
                    },
                    "body": "This test is failing https://github.com/bitcoin/bitcoin/blob/59d3dc85b698430f71f6e242a01a25a70c9ef397/test/functional/listtransactions.py#L180",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1MDUxODg0OQ==",
                    "publishedAt": "2017-12-10T01:41:17Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10823#issuecomment-350518849"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/5269298?v=4",
                        "login": "greenaddress"
                    },
                    "body": "@promag added a test for parameter validation. I also think the value should be below or equal to mempool expiry/eviction (two weeks) but very open to suggestions and thanks for catching the other issues",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1MTM4MTU4Mw==",
                    "publishedAt": "2017-12-13T12:48:49Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10823#issuecomment-351381583"
                }
            ],
            "totalCount": 19
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "6ff7196e5c5c15af161293563f0a02410bdc3764"
                    }
                }
            ],
            "totalCount": 2
        },
        "createdAt": "2017-07-14T13:46:56Z",
        "deletions": 24,
        "id": "MDExOlB1bGxSZXF1ZXN0MTMwNTkyOTM0",
        "labels": {
            "nodes": [
                {
                    "color": "5319e7",
                    "id": "MDU6TGFiZWw4MjQyODI1MQ==",
                    "name": "TX fees and policy"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "CONFLICTING",
        "mergedAt": null,
        "number": 10823,
        "state": "OPEN",
        "title": "Allow all mempool txs to be replaced after a configurable timeout (default 6h)",
        "updatedAt": "2017-12-30T11:11:19Z"
    },
    {
        "additions": 172,
        "author": {
            "avatarUrl": "https://avatars0.githubusercontent.com/u/649246?v=4",
            "login": "TheBlueMatt",
            "url": "https://github.com/TheBlueMatt"
        },
        "body": "This is some stuff I did for FIBRE a while back (that @rustyrussell cleaned up a lot, thanks!) and figured could get upstreamed. It saves some milliseconds when reconstructing, but for upstream its not all that critical.",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/649246?v=4",
                        "login": "TheBlueMatt"
                    },
                    "body": "@promag definitely not for 15, so lets wait to see what people think when the focus is back on other stuff.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMxNzgzOTAxMw==",
                    "publishedAt": "2017-07-25T19:02:34Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10896#issuecomment-317839013"
                }
            ],
            "totalCount": 1
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "70b9c5a8366089bd7940660bb42c9586e45107a9"
                    }
                }
            ],
            "totalCount": 9
        },
        "createdAt": "2017-07-21T17:28:36Z",
        "deletions": 31,
        "id": "MDExOlB1bGxSZXF1ZXN0MTMxODIxODI3",
        "labels": {
            "nodes": [
                {
                    "color": "981023",
                    "id": "MDU6TGFiZWwzMjY5MTgyMzA=",
                    "name": "Resource usage"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "CONFLICTING",
        "mergedAt": null,
        "number": 10896,
        "state": "OPEN",
        "title": "Optimize compact reconstruction somewhat",
        "updatedAt": "2017-12-30T11:11:19Z"
    },
    {
        "additions": 1563,
        "author": {
            "avatarUrl": "https://avatars2.githubusercontent.com/u/7133040?v=4",
            "login": "ryanofsky",
            "url": "https://github.com/ryanofsky"
        },
        "body": "This is a refactoring PR that does not change behavior in any way. This change:\r\n\r\n1. Creates an abstract [`Chain`](https://github.com/ryanofsky/bitcoin/blob/pr/wipc-sep/src/interfaces/chain.h) interface in [`src/interfaces/`](https://github.com/ryanofsky/bitcoin/tree/pr/wipc-sep/src/interfaces).\r\n1. Updates wallet code to call the new interface. This largely consists of diffs of the form:\r\n\r\n```diff\r\n-    wtx.nTimeReceived = GetAdjustedTime();\r\n+    wtx.nTimeReceived = m_chain->getAdjustedTime();\r\n```\r\n\r\nThe main exception being commit [`34ae4333e0` Remove uses of chainActive and mapBlockIndex in wallet code](https://github.com/bitcoin/bitcoin/pull/10973/commits/34ae4333e0a9bd367be8b2c8b8f42e23170daeb6), which is also largely mechanical, but is more complicated because it involves getting rid of `CBlockIndex` pointers and replacing them with block heights and hashes.\r\n\r\nThis change allows followup PR #10102 (multiprocess gui & wallet PR) to work without any significant updates to wallet code. Additionally:\r\n\r\n* It provides a single place to describe the interface between wallet and node code.\r\n* It can make better wallet testing possible, because the Chain object consists of virtual methods that can be overloaded for mocking.\r\n\r\nCommits:\r\n\r\n- [`8be73bcb60` Add skeleton chain and client classes](https://github.com/bitcoin/bitcoin/pull/10973/commits/8be73bcb6034f2413f322ce116234a3534fa95da)\r\n- [`70750af689` Pass chain and client variables where needed](https://github.com/bitcoin/bitcoin/pull/10973/commits/70750af6892e57cd7ced9bca6cafc1eae9d7bfdd)\r\n- [`63f88a7537` Remove direct node->wallet calls in init.cpp](https://github.com/bitcoin/bitcoin/pull/10973/commits/63f88a7537807a7b6f47d6bdd2d7d45353482b6d)\r\n- [`1521410bac` Remove uses of cs_main in wallet code](https://github.com/bitcoin/bitcoin/pull/10973/commits/1521410bac557359c14d4b01ffb3b791cdbd6ecd)\r\n- [`6a638fbda0` Pass chain locked variables where needed](https://github.com/bitcoin/bitcoin/pull/10973/commits/6a638fbda0d445e0d4b206c8d1b89b592244acf9)\r\n- [`34ae4333e0` Remove uses of chainActive and mapBlockIndex in wallet code](https://github.com/bitcoin/bitcoin/pull/10973/commits/34ae4333e0a9bd367be8b2c8b8f42e23170daeb6)\r\n- [`d3ef664a18` Remove uses of CheckFinalTx in wallet code](https://github.com/bitcoin/bitcoin/pull/10973/commits/d3ef664a1842593899eb9617e752de2512165d59)\r\n- [`c31501f353` Remove use of IsWitnessEnabled in wallet code](https://github.com/bitcoin/bitcoin/pull/10973/commits/c31501f3532fac8ef8b2ea2451e91d4a6ff45c31)\r\n- [`ce24166e43` Remove use of AcceptToMemoryPool in wallet code](https://github.com/bitcoin/bitcoin/pull/10973/commits/ce24166e43ca232ba22aae8c0060437a351349f1)\r\n- [`014d810eef` Remove uses of GetVirtualTransactionSize in wallet code](https://github.com/bitcoin/bitcoin/pull/10973/commits/014d810eefad170896edfe570220400b628bfcd9)\r\n- [`b6c2e94d6a` Remove use of IsRBFOptIn in wallet code](https://github.com/bitcoin/bitcoin/pull/10973/commits/b6c2e94d6a0cb0ddede4159f216b24bd2c2ffb8a)\r\n- [`b3ea6a9a8d` Remove use of GetCountWithDescendants in wallet code](https://github.com/bitcoin/bitcoin/pull/10973/commits/b3ea6a9a8d5204b7981e73b6e86e9f5aff5938f4)\r\n- [`439346d4ad` Remove use of g_connman / PushInventory in wallet code](https://github.com/bitcoin/bitcoin/pull/10973/commits/439346d4ad974a1fdb4ab21c94be2772ec19b697)\r\n- [`acf7f4016f` Remove use of TransactionWithinChainLimit in wallet code](https://github.com/bitcoin/bitcoin/pull/10973/commits/acf7f4016f95527364ca209a49512b8b331ff7fb)\r\n- [`e191725c97` Remove use of CalculateMemPoolAncestors in wallet code](https://github.com/bitcoin/bitcoin/pull/10973/commits/e191725c97bc9127aa474b9ae9f153b6f7884d53)\r\n- [`d3ea7ce1d0` Remove uses of fee globals in wallet code](https://github.com/bitcoin/bitcoin/pull/10973/commits/d3ea7ce1d0d0c239ac541e2241d995c186155069)\r\n- [`5e35f995c4` Remove uses of fPruneMode in wallet code](https://github.com/bitcoin/bitcoin/pull/10973/commits/5e35f995c4fd4cd072d7cf3d0ba63acbc7dcfcfe)\r\n- [`07c088ea44` Remove uses of g_connman in wallet code](https://github.com/bitcoin/bitcoin/pull/10973/commits/07c088ea44a58f73125515f3bfac02f071dbd247)\r\n- [`dfb2e2c978` Remove uses of GetAdjustedTime in wallet code](https://github.com/bitcoin/bitcoin/pull/10973/commits/dfb2e2c9780f249ae0518d885bf6fb3b6fe06eeb)\r\n- [`6292396580` Remove uses of InitMessage/Warning/Error in wallet code](https://github.com/bitcoin/bitcoin/pull/10973/commits/629239658086b351ad65e703dc2ce108f26a9bb4)\r\n- [`cf4e1ea34a` Remove use CValidationInterface in wallet code](https://github.com/bitcoin/bitcoin/pull/10973/commits/cf4e1ea34aac08cdd3848df2b2dc49dddde8b1e5)\r\n- [`35f05a7f19` Remove use of CRPCTable::appendCommand in wallet code](https://github.com/bitcoin/bitcoin/pull/10973/commits/35f05a7f198a0b6ae2d33e878a723ece1eddd1a9)\r\n- [`1baaa2cf4d` Remove use of generateBlocks in wallet code](https://github.com/bitcoin/bitcoin/pull/10973/commits/1baaa2cf4daef6712668b1ed40b429cafbe27538)\r\n- [`d061f35110` Remove uses of ParseConfirmTarget in wallet code](https://github.com/bitcoin/bitcoin/pull/10973/commits/d061f3511060996421bec36bc83b701fbd47bb64)\r\n",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "Concept ACK",
                    "id": "MDEyOklzc3VlQ29tbWVudDMxOTkyMDgzNg==",
                    "publishedAt": "2017-08-03T09:41:03Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10973#issuecomment-319920836"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/7133040?v=4",
                        "login": "ryanofsky"
                    },
                    "body": "@jnewbery, the change to stop deduping link arguments is in Makefile.am [here](https://github.com/bitcoin/bitcoin/commit/7bfb409ad9e27df07108c17d63c3efc5f4bfb6a6)\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDMyNjYzMzg3Mg==",
                    "publishedAt": "2017-09-01T17:05:20Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10973#issuecomment-326633872"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/7133040?v=4",
                        "login": "ryanofsky"
                    },
                    "body": "@skeees, this PR might be relevant to the `GetDepthInMainChain` discussion from https://github.com/bitcoin/bitcoin/pull/12801#issuecomment-379930111. This PR replaces direct accesses to `chainActive` and `cs_main`  global variables in the wallet with calls to a `Chain::Lock` interface:\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/6efd1524caf008641c4ffc15e8a2b2c2586c6d0f/src/interfaces/chain.h#L42-L111\r\n\r\nIf you look at [wallet.cpp](https://github.com/ryanofsky/bitcoin/blob/pr/wipc-sep/src/wallet/wallet.cpp) and search for `locked_chain`,  you can see all the things the wallet is currently doing while assuming the chain is locked.\r\n\r\nIdeally we would like to eliminate these `locked_chain` objects, or make them very rarely used. I think the single change that would eliminate most uses of `locked_chain` would be to add an `m_last_block_processed_height` member to CWallet and an `m_block_height` member to `CMerkleTx`. These variables could get updated in `BlockConnected`, so methods like `GetDepthInMainChain`, `IsInMainChain`, and `GetBlocksToMaturity` could be implemented without external locking.\r\n\r\nThis is a change which I think could be implemented right now in a new PR that doesn't depend on anything. And there are probably other similar changes which could eliminate more locking and which your #12801 notifier might come in handy for.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MDEwMTI2OQ==",
                    "publishedAt": "2018-04-10T13:38:56Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10973#issuecomment-380101269"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/886523?v=4",
                        "login": "JeremyRubin"
                    },
                    "body": "It might also be decent to use a RW-lock -- I'd imagine *all* of the wallet code is only in read mode, and a good chunk of other code can run in read mode as well.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MDIwMDY5OA==",
                    "publishedAt": "2018-04-10T18:24:42Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10973#issuecomment-380200698"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/7133040?v=4",
                        "login": "ryanofsky"
                    },
                    "body": "> It might also be decent to use a RW-lock -- I'd imagine all of the wallet code is only in read mode,\r\n\r\nThis is a really interesting suggestion and observation. The benefit of using a RW lock would be that multiple wallets could hold the lock at same time, though I think we'd also need to prevent the wallets from blocking the `SingleThreadedSchedulerClient` notification thread to really take advantage of this.\r\n\r\nAnother way to take advantage of the read-only nature of the wallet client might be to change the `Chain::Lock` class to not even hold onto `cs_main` at all, but just present a locked view of the chain while still allowing updates to happen, [mvcc-like](https://en.wikipedia.org/wiki/Multiversion_concurrency_control). This would actually be pretty easy to implement by just saving the current chain tip in the constructor, and using it in all the other methods. But I imagine this could create subtle bugs and make generally things harder to reason about, so I'm still inclined to think getting rid of `Chain::Lock` is the best outcome, even though it will involve storing more state in the wallet. Getting rid of `Chain::Lock` could also be a nice way to avoid IPC overhead in addition to lock contention.\r\n\r\n---\r\n\r\nRebased 6efd1524caf008641c4ffc15e8a2b2c2586c6d0f -> 085519d9893a928c6bf60596305d6c257bf58725 ([pr/wipc-sep.41](https://github.com/ryanofsky/bitcoin/commits/pr/wipc-sep.41) -> [pr/wipc-sep.42](https://github.com/ryanofsky/bitcoin/commits/pr/wipc-sep.42)) due to conflicts with #12749, #12920, #12925\r\nRebased 085519d9893a928c6bf60596305d6c257bf58725 -> 22e6aad5b62545bf254df97f885635eb42f5abdd ([pr/wipc-sep.42](https://github.com/ryanofsky/bitcoin/commits/pr/wipc-sep.42) -> [pr/wipc-sep.43](https://github.com/ryanofsky/bitcoin/commits/pr/wipc-sep.43)) due to conflicts with #12977\r\nRebased 22e6aad5b62545bf254df97f885635eb42f5abdd -> daa337627f2181c360d775761a8d6829803ab915 ([pr/wipc-sep.43](https://github.com/ryanofsky/bitcoin/commits/pr/wipc-sep.43) -> [pr/wipc-sep.44](https://github.com/ryanofsky/bitcoin/commits/pr/wipc-sep.44)) due to conflicts with #12949\r\nUpdated daa337627f2181c360d775761a8d6829803ab915 -> 337d4535fe7a319f9628379378704e407dffa254 ([pr/wipc-sep.44](https://github.com/ryanofsky/bitcoin/commits/pr/wipc-sep.44) -> [pr/wipc-sep.45](https://github.com/ryanofsky/bitcoin/commits/pr/wipc-sep.45)) to remove orphaned wallet/init.h header file from previous rebase.\r\nRebased 337d4535fe7a319f9628379378704e407dffa254 -> d061f3511060996421bec36bc83b701fbd47bb64 ([pr/wipc-sep.45](https://github.com/ryanofsky/bitcoin/commits/pr/wipc-sep.45) -> [pr/wipc-sep.46](https://github.com/ryanofsky/bitcoin/commits/pr/wipc-sep.46)) due to conflict with #13017",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MDQ5MjA1Ng==",
                    "publishedAt": "2018-04-11T15:22:37Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10973#issuecomment-380492056"
                }
            ],
            "totalCount": 5
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "63f88a7537807a7b6f47d6bdd2d7d45353482b6d"
                    }
                }
            ],
            "totalCount": 24
        },
        "createdAt": "2017-08-01T22:17:26Z",
        "deletions": 663,
        "id": "MDExOlB1bGxSZXF1ZXN0MTMzNTg0NTYw",
        "labels": {
            "nodes": [
                {
                    "color": "E6F6D6",
                    "id": "MDU6TGFiZWwxMzU5NjE=",
                    "name": "Refactoring"
                },
                {
                    "color": "08a781",
                    "id": "MDU6TGFiZWwxNDk0MjQ=",
                    "name": "Wallet"
                }
            ],
            "totalCount": 2
        },
        "mergeable": "CONFLICTING",
        "mergedAt": null,
        "number": 10973,
        "state": "OPEN",
        "title": "Refactor: separate wallet from node",
        "updatedAt": "2018-04-23T11:54:07Z"
    },
    {
        "additions": 234,
        "author": {
            "avatarUrl": "https://avatars0.githubusercontent.com/u/649246?v=4",
            "login": "TheBlueMatt",
            "url": "https://github.com/TheBlueMatt"
        },
        "body": "This is a (somewhat) simpler version of #9447 based on #10652.\r\n\r\nIt allows for up to 2 simultaneous downloads of the same block at once, as long as the second one is using compact blocks and only has up to 10 transactions to request in a getblocktxn (if applicable).",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/649246?v=4",
                        "login": "TheBlueMatt"
                    },
                    "body": "Rebased and added a simple test",
                    "id": "MDEyOklzc3VlQ29tbWVudDMyMjIzNDAxNQ==",
                    "publishedAt": "2017-08-14T16:10:39Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10984#issuecomment-322234015"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/649246?v=4",
                        "login": "TheBlueMatt"
                    },
                    "body": "Rebased.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMzMjY1NTQwMA==",
                    "publishedAt": "2017-09-27T21:06:06Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10984#issuecomment-332655400"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "Nice work!\r\nObviously concept ACK (have not looked closely at the code yet).",
                    "id": "MDEyOklzc3VlQ29tbWVudDMzMjcxOTA0OA==",
                    "publishedAt": "2017-09-28T03:40:47Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10984#issuecomment-332719048"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/649246?v=4",
                        "login": "TheBlueMatt"
                    },
                    "body": "Rebased.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0NzkzMTk1Mg==",
                    "publishedAt": "2017-11-29T17:19:31Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/10984#issuecomment-347931952"
                }
            ],
            "totalCount": 4
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "ee1e8a2507474cb97ef526a4af32c037d1ec50fb"
                    }
                }
            ],
            "totalCount": 6
        },
        "createdAt": "2017-08-03T22:48:29Z",
        "deletions": 94,
        "id": "MDExOlB1bGxSZXF1ZXN0MTM0MDU4MjE0",
        "labels": {
            "nodes": [
                {
                    "color": "006b75",
                    "id": "MDU6TGFiZWw5ODI5ODAwNw==",
                    "name": "P2P"
                },
                {
                    "color": "6060aa",
                    "id": "MDU6TGFiZWwxMTgzNzk2NTI=",
                    "name": "Validation"
                }
            ],
            "totalCount": 2
        },
        "mergeable": "CONFLICTING",
        "mergedAt": null,
        "number": 10984,
        "state": "OPEN",
        "title": "Allow 2 simultaneous (compact-)block downloads",
        "updatedAt": "2018-01-11T18:52:33Z"
    },
    {
        "additions": 42,
        "author": {
            "avatarUrl": "https://avatars3.githubusercontent.com/u/250224?v=4",
            "login": "kallewoof",
            "url": "https://github.com/kallewoof"
        },
        "body": "Currently, if the wallet generates a transaction that cannot currently go into the mempool (e.g. due to too-long-mempool-chain), the wallet UTXOs related to this will vanish from `getbalance`, giving the appearance that the user has less funds than they actually do.\r\n\r\nFrom a \"get spendable balance\" perspective, this is perfectly valid, but users may sometimes want to see their actual balance, regardless of whether they can spend it or not at that time.\r\n\r\nThis PR adds an `include_unspendable` option (default=false) to `getbalance` which, when `true`, will consider non-mempool transactions as trusted, and thus display these in the tally.\r\n\r\nNote: this flag does nothing when a user specifies an account (i.e. `GetLegacyBalance`), and the legacy balance in fact already does what `include_unspendable=true` does, given the right arguments.",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/250224?v=4",
                        "login": "kallewoof"
                    },
                    "body": "Not sure why `zapwallettxes.py` is failing. It's not touching anything I changed (and the test passes on my fork's travis & when running the test locally / via `make check` ...). @jnewbery thoughts?",
                    "id": "MDEyOklzc3VlQ29tbWVudDMyMTQ5NTQ2Ng==",
                    "publishedAt": "2017-08-10T09:06:56Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11020#issuecomment-321495466"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
                        "login": "MarcoFalke"
                    },
                    "body": "The zapwallettxes' failure is intermittent. Respinned travis.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMyMTUwMjM3NA==",
                    "publishedAt": "2017-08-10T09:36:28Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11020#issuecomment-321502374"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1063656?v=4",
                        "login": "jnewbery"
                    },
                    "body": "I'd hoped that #10330 had fixed the zapwallettxes intermittency. @MarcoFalke do you have an example of it failing (the failure on this PR is no longer available since the task was restarted in Travis).\r\n\r\n(apologies for being off-topic)",
                    "id": "MDEyOklzc3VlQ29tbWVudDMyMTU4OTUwMw==",
                    "publishedAt": "2017-08-10T15:39:34Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11020#issuecomment-321589503"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
                        "login": "MarcoFalke"
                    },
                    "body": "@jnewbery Sorry I didn't keep track of the exact failure this time, I assume it was one of the known issues that popped up recently.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMyMTY1ODQ3Mw==",
                    "publishedAt": "2017-08-10T20:03:57Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11020#issuecomment-321658473"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/250224?v=4",
                        "login": "kallewoof"
                    },
                    "body": "@promag @jnewbery Thanks for the review!\r\n\r\n* https://github.com/bitcoin/bitcoin/pull/11020/commits/28e8271424b8642e825889bfaa8e51ae6a2a60dd fixes comment\r\n* https://github.com/bitcoin/bitcoin/pull/11020/commits/df7228d5dec184c92f7190265afb2c380da0a9ae fixes the inconsistency in variable names, but currently retains the `include_unspendable` name. I'm not sure I agree with the longer version @jnewbery suggested, but I'm up for changing this to something more intuitive if people feel it's worthwhile.\r\n* https://github.com/bitcoin/bitcoin/pull/11020/commits/80acc02b0e77791605eb8f0cb20263986ea87399 adds the feature to `getunconfirmedbalance` (tested in https://github.com/bitcoin/bitcoin/pull/11020/commits/36423983a1b1a473151056bb5d4e3159975c9b18). I was not entirely sure about the logic on this one, but I went with `!IsTrusted() & depth=0 & (includeUnspendable || InMempool())`, changed from `!IsTrusted() & depth=0 & InMempool()`. This means some balance will overlap between `getbalance(include_unspendable=true)` and `getunconfirmedbalance(include_unspendable=true)` but I think that's ok.\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDMyMjM2MDM3OA==",
                    "publishedAt": "2017-08-15T02:27:15Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11020#issuecomment-322360378"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/250224?v=4",
                        "login": "kallewoof"
                    },
                    "body": "zapwallettxes.py again, @jnewbery: https://pastebin.com/70bQ7CLq",
                    "id": "MDEyOklzc3VlQ29tbWVudDMyMjY2OTA3Nw==",
                    "publishedAt": "2017-08-16T05:21:07Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11020#issuecomment-322669077"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
                        "login": "promag"
                    },
                    "body": "IMO from the wallet point of view those UTXO should always be part of the balance, and in that case this should be a bug fix and not require more options. WDYT?\r\n\r\nEdit: unless `getbalance` defaults to available balance. If that's the case the option can be `include_unavailable` (default false) or `only_available` (default true).",
                    "id": "MDEyOklzc3VlQ29tbWVudDMyMjc4NjMyOA==",
                    "publishedAt": "2017-08-16T14:18:43Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11020#issuecomment-322786328"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/250224?v=4",
                        "login": "kallewoof"
                    },
                    "body": "Yes `getbalance` is available balance, I think, so I don't think it should default to including these. Of course, there is the option of making the coin select include these coins even though they're not in the mempool, in which case `getbalance` could include them, but that's for another time (and PR).\r\n\r\nHm, `include_unavailable` seems like a better name for it than `include_unspendable`.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMyMjk3MDU5Mw==",
                    "publishedAt": "2017-08-17T05:12:06Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11020#issuecomment-322970593"
                }
            ],
            "totalCount": 8
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "d30f03e93b63477fb9c81c17fa5535379210cac8"
                    }
                }
            ],
            "totalCount": 2
        },
        "createdAt": "2017-08-10T08:06:51Z",
        "deletions": 22,
        "id": "MDExOlB1bGxSZXF1ZXN0MTM1MDYzOTg2",
        "labels": {
            "nodes": [
                {
                    "color": "08a781",
                    "id": "MDU6TGFiZWwxNDk0MjQ=",
                    "name": "Wallet"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "CONFLICTING",
        "mergedAt": null,
        "number": 11020,
        "state": "OPEN",
        "title": "[wallet] getbalance: Add option to include non-mempool UTXOs",
        "updatedAt": "2018-04-24T05:39:31Z"
    },
    {
        "additions": 435,
        "author": {
            "avatarUrl": "https://avatars2.githubusercontent.com/u/1095675?v=4",
            "login": "luke-jr",
            "url": "https://github.com/luke-jr"
        },
        "body": "This is part of #7510, without the new GUI settings (ie, just the minimal framework for the RW conf file).",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/10217?v=4",
                        "login": "Sjors"
                    },
                    "body": "I'm not a big fan of multiple config files. I would prefer if QT just edited `bitcoin.conf` and tells the user to do so manually if things gets too complicated. See also #6461.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MzkyODk5OA==",
                    "publishedAt": "2018-03-17T15:33:33Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11082#issuecomment-373928998"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/10217?v=4",
                        "login": "Sjors"
                    },
                    "body": "I tried just making `bitcoin.conf` writeable instead of having two files in #12833, but that seems to raise some objections. So in that case: Concept ACK. \r\n\r\nCan you rebase this? From my experience with the other PR that should be easy and it worked quite well.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NzU0NTQ4MQ==",
                    "publishedAt": "2018-03-30T15:09:10Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11082#issuecomment-377545481"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/1095675?v=4",
                        "login": "luke-jr"
                    },
                    "body": "Rebased",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NzcyNDQ5Ng==",
                    "publishedAt": "2018-03-31T21:24:17Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11082#issuecomment-377724496"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/10217?v=4",
                        "login": "Sjors"
                    },
                    "body": "tACK aac0501 (tested through #12833)",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3ODIxMDE5Mw==",
                    "publishedAt": "2018-04-03T10:56:49Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11082#issuecomment-378210193"
                }
            ],
            "totalCount": 4
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "aac05011480f10a0feea490474e4308ad123a644"
                    }
                }
            ],
            "totalCount": 1
        },
        "createdAt": "2017-08-17T22:18:57Z",
        "deletions": 3,
        "id": "MDExOlB1bGxSZXF1ZXN0MTM2MzY1ODIy",
        "labels": {
            "nodes": [],
            "totalCount": 0
        },
        "mergeable": "CONFLICTING",
        "mergedAt": null,
        "number": 11082,
        "state": "OPEN",
        "title": "Add new bitcoin_rw.conf file that is used for settings modified by this software itself",
        "updatedAt": "2018-04-19T16:04:24Z"
    },
    {
        "additions": 50,
        "author": {
            "avatarUrl": "https://avatars0.githubusercontent.com/u/5767891?v=4",
            "login": "instagibbs",
            "url": "https://github.com/instagibbs"
        },
        "body": "Allows direct use of the proof to get block header related info without additional parsing, and more directly mirrors `gettxoutproof` arguments.",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/5767891?v=4",
                        "login": "instagibbs"
                    },
                    "body": "updated with nit fix",
                    "id": "MDEyOklzc3VlQ29tbWVudDMyNDYzNjU5OQ==",
                    "publishedAt": "2017-08-24T13:34:45Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11120#issuecomment-324636599"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/5767891?v=4",
                        "login": "instagibbs"
                    },
                    "body": "fixed @promag nits, curly-bracketed the surrounding statements since I'm touching it already",
                    "id": "MDEyOklzc3VlQ29tbWVudDMyNDkzMDcxNw==",
                    "publishedAt": "2017-08-25T14:07:45Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11120#issuecomment-324930717"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/5767891?v=4",
                        "login": "instagibbs"
                    },
                    "body": "rebased, re-added legacy behavior under deprecation",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MDg3MjY3Mg==",
                    "publishedAt": "2018-03-06T18:04:09Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11120#issuecomment-370872672"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/5767891?v=4",
                        "login": "instagibbs"
                    },
                    "body": "ping @kallewoof ",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MDg3NDEyMQ==",
                    "publishedAt": "2018-03-06T18:08:51Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11120#issuecomment-370874121"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
                        "login": "promag"
                    },
                    "body": "@instagibbs See https://github.com/bitcoin/bitcoin/pull/11872/files#diff-ef76fd6674f07db88c3422fdbf0bcf9fR65 for release note example.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MDg3NzUxNA==",
                    "publishedAt": "2018-03-06T18:19:50Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11120#issuecomment-370877514"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/5767891?v=4",
                        "login": "instagibbs"
                    },
                    "body": "fixed up deprecation message, added release notes",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MDg4MjgzOQ==",
                    "publishedAt": "2018-03-06T18:36:31Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11120#issuecomment-370882839"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/5767891?v=4",
                        "login": "instagibbs"
                    },
                    "body": "fixed up release note nit. I think the only way to return `{}` is to have a non-matching hash header... too lazy to construct one in paste it in.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MDg4NTkzMQ==",
                    "publishedAt": "2018-03-06T18:46:50Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11120#issuecomment-370885931"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
                        "login": "promag"
                    },
                    "body": "@instagibbs here is one\r\n```\r\nverifytxoutproof 0000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\r\n{\r\n}\r\n```\r\nMaybe it should throw an error in this case?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MDg5NDk4MA==",
                    "publishedAt": "2018-03-06T19:16:04Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11120#issuecomment-370894980"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/5767891?v=4",
                        "login": "instagibbs"
                    },
                    "body": "@promag yeah I'll catch the deprecated case of `[]` and throw an error for new behavior",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MTIyNDUyNQ==",
                    "publishedAt": "2018-03-07T17:53:36Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11120#issuecomment-371224525"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/5767891?v=4",
                        "login": "instagibbs"
                    },
                    "body": "done",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MTIzMzg3Mw==",
                    "publishedAt": "2018-03-07T18:21:54Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11120#issuecomment-371233873"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
                        "login": "MarcoFalke"
                    },
                    "body": "Needs rebase to fix travis (sorry)",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MTUxODk3Ng==",
                    "publishedAt": "2018-03-08T15:21:04Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11120#issuecomment-371518976"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/5767891?v=4",
                        "login": "instagibbs"
                    },
                    "body": "rebased",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MTUyMDE1Nw==",
                    "publishedAt": "2018-03-08T15:24:33Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11120#issuecomment-371520157"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
                        "login": "promag"
                    },
                    "body": "utACK ec1695e.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MjE1ODg5OA==",
                    "publishedAt": "2018-03-11T23:18:52Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11120#issuecomment-372158898"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
                        "login": "MarcoFalke"
                    },
                    "body": "Needs rebase (after merge of `LookupBlockIndex`)",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3Mjc3MTg2OA==",
                    "publishedAt": "2018-03-13T18:31:50Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11120#issuecomment-372771868"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/5767891?v=4",
                        "login": "instagibbs"
                    },
                    "body": "rebased",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3Mjc3NDMyNQ==",
                    "publishedAt": "2018-03-13T18:39:35Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11120#issuecomment-372774325"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/250224?v=4",
                        "login": "kallewoof"
                    },
                    "body": "@instagibbs Travis is timing out. I tried restarting the two jobs that timed out but it still fails. Not sure what's up.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3Mjg1MjAyNA==",
                    "publishedAt": "2018-03-13T23:21:57Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11120#issuecomment-372852024"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
                        "login": "promag"
                    },
                    "body": "master should be fixed after #12681.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3Mjg1MjU4OQ==",
                    "publishedAt": "2018-03-13T23:24:32Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11120#issuecomment-372852589"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/250224?v=4",
                        "login": "kallewoof"
                    },
                    "body": "@promag I think that's unrelated (and I don't think @instagibbs merged the commit that triggered the error that was fixed).",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3Mjg1MzYzMg==",
                    "publishedAt": "2018-03-13T23:29:20Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11120#issuecomment-372853632"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/250224?v=4",
                        "login": "kallewoof"
                    },
                    "body": "re-utACK d43e00a",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MzIyMzM1OA==",
                    "publishedAt": "2018-03-15T00:49:23Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11120#issuecomment-373223358"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/5767891?v=4",
                        "login": "instagibbs"
                    },
                    "body": "rebased due to release notes conflict",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NTY1NTgwNg==",
                    "publishedAt": "2018-03-23T12:53:50Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11120#issuecomment-375655806"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/5767891?v=4",
                        "login": "instagibbs"
                    },
                    "body": "rebased again...",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NjIwMjk3Mw==",
                    "publishedAt": "2018-03-26T15:16:29Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11120#issuecomment-376202973"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/5767891?v=4",
                        "login": "instagibbs"
                    },
                    "body": "rebased again for yet another release notes conflict",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MTY3NjExNQ==",
                    "publishedAt": "2018-04-16T16:59:10Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11120#issuecomment-381676115"
                }
            ],
            "totalCount": 22
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "674b877fadd0d5641fed1f63c9dfcbc018e8f419"
                    }
                }
            ],
            "totalCount": 2
        },
        "createdAt": "2017-08-23T15:50:58Z",
        "deletions": 19,
        "id": "MDExOlB1bGxSZXF1ZXN0MTM3MjU0NTIz",
        "labels": {
            "nodes": [
                {
                    "color": "00dd33",
                    "id": "MDU6TGFiZWw0OTMyNjcxMDQ=",
                    "name": "Needs release notes"
                },
                {
                    "color": "0052cc",
                    "id": "MDU6TGFiZWw5ODI3OTE3Nw==",
                    "name": "RPC/REST/ZMQ"
                }
            ],
            "totalCount": 2
        },
        "mergeable": "CONFLICTING",
        "mergedAt": null,
        "number": 11120,
        "state": "OPEN",
        "title": "[RPC] verifytxoutproof returns object including blockhash",
        "updatedAt": "2018-04-16T16:59:10Z"
    },
    {
        "additions": 19,
        "author": {
            "avatarUrl": "https://avatars1.githubusercontent.com/u/417043?v=4",
            "login": "theuni",
            "url": "https://github.com/theuni"
        },
        "body": "As discussed briefly last week with @morcos and @sdaftuar.\r\nRather than jumping around, visit elements in-order. This produces a noticeable speedup.\r\n\r\nI added the assertions because it's not entirely clear from the existing code if the bucket size is allowed to differ from the individual sizes. I can't imagine that that could be the case, so I'll remove them if preferred.\r\n\r\nAdditionally, I assume we could skip UpdateMovingAverages() altogether if no entries have ever been added, but it's not obvious to me how to do that without breaking something.",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/858454?v=4",
                        "login": "gmaxwell"
                    },
                    "body": "> Additionally, I assume we could skip UpdateMovingAverages() altogether if no entries have ever been added, but it's not obvious to me how to do that without breaking something.\r\n\r\nAn optimization like this would be important for IBD.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMyNTc3NzY1Ng==",
                    "publishedAt": "2017-08-29T19:42:09Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11194#issuecomment-325777656"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/417043?v=4",
                        "login": "theuni"
                    },
                    "body": "@gmaxwell Indeed. When profiling IBD for the first few hundred thousand blocks, some of my results showed this function alone accounting for ~5-10% of all cpu time spent on the message handling thread.\r\n\r\nThis change reduces those percentages to roughly half iirc, but obviously avoiding it entirely when possible would be best.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMyNTc4MDIwMw==",
                    "publishedAt": "2017-08-29T19:51:49Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11194#issuecomment-325780203"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
                        "login": "promag"
                    },
                    "body": "> Additionally, I assume we could skip UpdateMovingAverages() altogether if no entries have ever been added, but it's not obvious to me how to do that without breaking something.\r\n\r\nHow about not `Record()` it if current tip is too old? In other words, just `Record()` and `UpdateMovingAverages()` when approaching live tip?\r\n\r\nEdit: when in IBD.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMyNjE0MjA4Mw==",
                    "publishedAt": "2017-08-30T22:56:40Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11194#issuecomment-326142083"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/858454?v=4",
                        "login": "gmaxwell"
                    },
                    "body": "FWIW, I benchmarked a sync completely bypassing CBlockPolicyEstimator::processBlock and it was effectively the same speed (0.5% faster, but that could well be noise).\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDMyNjE1OTEzOA==",
                    "publishedAt": "2017-08-31T00:56:45Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11194#issuecomment-326159138"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
                        "login": "promag"
                    },
                    "body": "You mean speed in IBD, not CPU usage right?",
                    "id": "MDEyOklzc3VlQ29tbWVudDMyNjE2MDM4NA==",
                    "publishedAt": "2017-08-31T01:06:01Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11194#issuecomment-326160384"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/858454?v=4",
                        "login": "gmaxwell"
                    },
                    "body": "Yes, though on this host (and in this benchmark) IBD is more or less cpu limited.  I didn't intend to suggest that we shouldn't optimize here, but it's apparently not a huge it in IBD as cfields was initially concerned about it being.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMyNjE2MDYxMQ==",
                    "publishedAt": "2017-08-31T01:07:42Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11194#issuecomment-326160611"
                }
            ],
            "totalCount": 6
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "eb5911fa3d2b18f79d43b59fed7e19ff9b28f78e"
                    }
                }
            ],
            "totalCount": 1
        },
        "createdAt": "2017-08-29T19:15:33Z",
        "deletions": 7,
        "id": "MDExOlB1bGxSZXF1ZXN0MTM4MjYxNzUx",
        "labels": {
            "nodes": [
                {
                    "color": "E6F6D6",
                    "id": "MDU6TGFiZWwxMzU5NjE=",
                    "name": "Refactoring"
                },
                {
                    "color": "5319e7",
                    "id": "MDU6TGFiZWw4MjQyODI1MQ==",
                    "name": "TX fees and policy"
                }
            ],
            "totalCount": 2
        },
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "number": 11194,
        "state": "OPEN",
        "title": "fees: optimize decay",
        "updatedAt": "2017-12-30T11:11:24Z"
    },
    {
        "additions": 696,
        "author": {
            "avatarUrl": "https://avatars1.githubusercontent.com/u/417043?v=4",
            "login": "theuni",
            "url": "https://github.com/theuni"
        },
        "body": "Not yet ready for review. This can be considered a staging area. Chunks of this will be PR'd until only the actual libevent switch-over is ready, at which point this PR should be ready for review.\r\n\r\nThese changes remove our old select() loop for socket handling in favor of libevent, which uses epoll/kqueue/etc. as a back-end. In addition to being faster and more efficient, this allows us to drop some annoying restrictions, namely that select can only handle 1024 sockets in practice on most systems.\r\n\r\nNote that this does _not_ yet make the switch to libevent for outgoing connections, that work is happening in parallel, and will be easier to merge after this.\r\n\r\nAlso, for any reviewers, several of these commits would individually introduce some regressions or slow-downs, but they've been split up in order to clarify why some of the changes are being made.\r\n\r\nDepends on:\r\n- [x] #10663 \r\n- [x] #11363\r\n\r\nTodo:\r\n- Add a ton of documentation\r\n- RAII the libevent structures\r\n- Add some tests where possible",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/417043?v=4",
                        "login": "theuni"
                    },
                    "body": "I believe that the proxy_test failure is a false-positive.\r\n\r\nLooks like the issue is that disconnection happens so quickly now after an error that the testnode fails.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMyNjg0MTY1NQ==",
                    "publishedAt": "2017-09-04T00:16:34Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11227#issuecomment-326841655"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "Concept ACK, woohoo!",
                    "id": "MDEyOklzc3VlQ29tbWVudDMyNzMxNTA2OA==",
                    "publishedAt": "2017-09-05T21:56:02Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11227#issuecomment-327315068"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
                        "login": "promag"
                    },
                    "body": "Needs rebase.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMzNzczMTA4Mg==",
                    "publishedAt": "2017-10-18T21:19:35Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11227#issuecomment-337731082"
                }
            ],
            "totalCount": 3
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "77cee166e17e355306d2ca1a1d360e71c12d8350"
                    }
                }
            ],
            "totalCount": 23
        },
        "createdAt": "2017-09-03T21:13:29Z",
        "deletions": 481,
        "id": "MDExOlB1bGxSZXF1ZXN0MTM5MDYyMDEy",
        "labels": {
            "nodes": [
                {
                    "color": "006b75",
                    "id": "MDU6TGFiZWw5ODI5ODAwNw==",
                    "name": "P2P"
                },
                {
                    "color": "E6F6D6",
                    "id": "MDU6TGFiZWwxMzU5NjE=",
                    "name": "Refactoring"
                }
            ],
            "totalCount": 2
        },
        "mergeable": "CONFLICTING",
        "mergedAt": null,
        "number": 11227,
        "state": "OPEN",
        "title": "WIP: switch to libevent for node socket handling",
        "updatedAt": "2018-04-09T01:06:46Z"
    },
    {
        "additions": 226,
        "author": {
            "avatarUrl": "https://avatars3.githubusercontent.com/u/84245?v=4",
            "login": "danra",
            "url": "https://github.com/danra"
        },
        "body": "Making most of the implementation simpler and safer.",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/858454?v=4",
                        "login": "gmaxwell"
                    },
                    "body": "please don't add another boost dependency for a simple equality comparison.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMyNzAwODQwMg==",
                    "publishedAt": "2017-09-04T17:51:32Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11231#issuecomment-327008402"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/84245?v=4",
                        "login": "danra"
                    },
                    "body": "@gmaxwell There is already a dependency on this boost library in other places in the code. It doesn't have a standard equivalent, and it makes the code clearer here.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMyNzAwOTM1NQ==",
                    "publishedAt": "2017-09-04T18:00:12Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11231#issuecomment-327009355"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/858454?v=4",
                        "login": "gmaxwell"
                    },
                    "body": "@danra we are working on eliminating boost, and adding the additional header here visibly slows down the compile (30% longer for netaddress.cpp).  If it were for something more complex than a match there might be an argument to use it for now and replace later, but it's just a string comparison and should be doable in one fairly clean and idiomatic line (slice and match; or reverse iterators).",
                    "id": "MDEyOklzc3VlQ29tbWVudDMyNzAxMjMxNg==",
                    "publishedAt": "2017-09-04T18:27:29Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11231#issuecomment-327012316"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/84245?v=4",
                        "login": "danra"
                    },
                    "body": "@gmaxwell If you don't mind, I'd be happy to discuss this a bit, since I think the approach of just \"eliminating boost\" is wrong.\r\n\r\nFirst of all, I don't that goal listed under the github \"Projects\" - I only see a goal of transitioning from boost to C++11. If removing boost in general from the project is a goal, even for cases where there is no standard substitute, I suppose it should be listed under \"Projects\" as well.\r\n\r\nSecond, I think a reasonable compilation time increase is worth improving code clarity. Consider the \"endswith\" functionality here:\r\n- checking it inline instead of using a function requires a couple of if conditions, making it less readable and more error prone, which also means harder to review and less secure. One reading the code has only so much of an attention span, and it's bad to force details which are unnecessary in the context - implementing \"endswith\" inline is certainly out of the scope of the code where it is used.\r\n- Writing our own function is for the bitcoin repo in some utility header is fine, but it means a) using less tested code than the one boost uses and b) just more work which could be spent on more useful things.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMyNzAxMzk5Mw==",
                    "publishedAt": "2017-09-04T18:43:24Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11231#issuecomment-327013993"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/84245?v=4",
                        "login": "danra"
                    },
                    "body": "@gmaxwell Do you have a specific suggestion for an elegant one-liner? I don't see one which doesn't involve also checking the size, or doing some min() with it",
                    "id": "MDEyOklzc3VlQ29tbWVudDMyNzAyMDYyMg==",
                    "publishedAt": "2017-09-04T19:49:59Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11231#issuecomment-327020622"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/548488?v=4",
                        "login": "sipa"
                    },
                    "body": "I don't see anything wrong with \r\n\r\n```c++\r\ntemplate<typename T>\r\nbool BeginsWith(const T& a, const T& b)\r\n{\r\n    return a.size() >= b.size() && std::equal(b.begin(), b.end(), a.begin());\r\n}\r\n\r\ntemplate<typename T>\r\nbool EndWith(const T& a, const T& b)\r\n{\r\n    return a.size() >= b.size() && std::equal(b.begin(), b.end(), a.end() - b.size());\r\n}\r\n```\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDMyNzAzNTM0OQ==",
                    "publishedAt": "2017-09-04T22:36:57Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11231#issuecomment-327035349"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/3211283?v=4",
                        "login": "MeshCollider"
                    },
                    "body": "@danra It's written on there: `The long term future goal is to remove Boost as a dependency.`",
                    "id": "MDEyOklzc3VlQ29tbWVudDMyNzAzNTYyMQ==",
                    "publishedAt": "2017-09-04T22:41:02Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11231#issuecomment-327035621"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/881253?v=4",
                        "login": "jimpo"
                    },
                    "body": "Should this be using `.size()` everywhere on the `std::array`s instead of `sizeof`?",
                    "id": "MDEyOklzc3VlQ29tbWVudDMyNzI3NjM4Ng==",
                    "publishedAt": "2017-09-05T19:20:41Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11231#issuecomment-327276386"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/84245?v=4",
                        "login": "danra"
                    },
                    "body": "@MeshCollider You're right. I think it's a bad goal, though (unlike boost->C++11 migration under which it's listed). For instance, is Bitcoin Core really interested in rewriting boost::multi_index?",
                    "id": "MDEyOklzc3VlQ29tbWVudDMyNzI3ODMxMA==",
                    "publishedAt": "2017-09-05T19:28:17Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11231#issuecomment-327278310"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/84245?v=4",
                        "login": "danra"
                    },
                    "body": "@jimpo I thought `sizeof` would be the same (and compile-time evaluable) since `std::array` is an aggregate type, but it seems [that is not guaranteed](https://stackoverflow.com/questions/19103244/is-the-size-of-stdarray-defined-by-standard). Will fix, thanks!",
                    "id": "MDEyOklzc3VlQ29tbWVudDMyNzI3OTQ5MQ==",
                    "publishedAt": "2017-09-05T19:32:45Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11231#issuecomment-327279491"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/84245?v=4",
                        "login": "danra"
                    },
                    "body": "@sipa It's not wrong, but this sort of utility functions tend to pile up, and I think it's better to use well-tested (e.g. boost provided) utility functions where it's available, rather than maintain them yourself, even if the cost is some compilation time. It makes the codebase easier to maintain and review -> more secure.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMyNzI5NzY5MA==",
                    "publishedAt": "2017-09-05T20:44:09Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11231#issuecomment-327297690"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/548488?v=4",
                        "login": "sipa"
                    },
                    "body": "@danra That's a fair point, though I personally think that a boost dependency is worse than the cost of maintaining such a simple function.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMyNzI5ODg3Nw==",
                    "publishedAt": "2017-09-05T20:49:02Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11231#issuecomment-327298877"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/84245?v=4",
                        "login": "danra"
                    },
                    "body": "@gmaxwell @sipa Reverted boost dependency, due to both your review and the fact that using the boost function changed the semantics slightly - the \".onion\" address (with no preceding characters) was previously rejected immediately by the condition, which is probably safer than the situation after my modification which resulted in passing an empty string to `DecodeBase32` (that function *should* handle empty strings correctly, but it's probably better to code defensively)\r\n\r\n@jimpo Fixed `sizeof`->`size()` (hopefully that would also fix onion address-related tests failing on some platforms :)",
                    "id": "MDEyOklzc3VlQ29tbWVudDMyNzMwMTQ0OA==",
                    "publishedAt": "2017-09-05T20:58:56Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11231#issuecomment-327301448"
                }
            ],
            "totalCount": 13
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "e45306fa34b70a0a20eb8ca609c5d29b0ff7073c"
                    }
                }
            ],
            "totalCount": 4
        },
        "createdAt": "2017-09-04T17:40:59Z",
        "deletions": 201,
        "id": "MDExOlB1bGxSZXF1ZXN0MTM5MTk1NzM5",
        "labels": {
            "nodes": [
                {
                    "color": "006b75",
                    "id": "MDU6TGFiZWw5ODI5ODAwNw==",
                    "name": "P2P"
                },
                {
                    "color": "E6F6D6",
                    "id": "MDU6TGFiZWwxMzU5NjE=",
                    "name": "Refactoring"
                }
            ],
            "totalCount": 2
        },
        "mergeable": "CONFLICTING",
        "mergedAt": null,
        "number": 11231,
        "state": "OPEN",
        "title": "Improve netaddress implementation",
        "updatedAt": "2017-12-30T11:11:25Z"
    },
    {
        "additions": 40,
        "author": {
            "avatarUrl": "https://avatars0.githubusercontent.com/u/7999704?v=4",
            "login": "esotericnonsense",
            "url": "https://github.com/esotericnonsense"
        },
        "body": "Tested against master using the REST api (/rest/mempool/contents), simple addition of a field.\r\n\r\nPersonal use case is for fee analysis software.",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
                        "login": "promag"
                    },
                    "body": "No test affected \ud83d\ude1e care to improve by asserting the new field in the relevant RPC's \ud83d\ude09?",
                    "id": "MDEyOklzc3VlQ29tbWVudDMyNzUzNTg3Mg==",
                    "publishedAt": "2017-09-06T16:16:36Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11256#issuecomment-327535872"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "Concept ACK",
                    "id": "MDEyOklzc3VlQ29tbWVudDMyNzU2MjEwMw==",
                    "publishedAt": "2017-09-06T17:50:07Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11256#issuecomment-327562103"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
                        "login": "MarcoFalke"
                    },
                    "body": "I guess you need to update the documentation as well.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMyNzU2NDcwNg==",
                    "publishedAt": "2017-09-06T17:59:14Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11256#issuecomment-327564706"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/7999704?v=4",
                        "login": "esotericnonsense"
                    },
                    "body": "Tests are failing.\r\ntxid2 and txid3 work as expected.\r\ntxid1 fails on both my test and https://github.com/bitcoin/bitcoin/pull/11203 (add wtxid to mempool entry output).\r\n\r\nDo not merge as is.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMyNzY1NTEwMg==",
                    "publishedAt": "2017-09-07T01:18:43Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11256#issuecomment-327655102"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/127186?v=4",
                        "login": "ajtowns"
                    },
                    "body": "txid1 is failing because at that point \"tx\" is actually referring to the input to txid1, not the transaction for txid1. It works fine for me if I add\r\n\r\n`         tx = FromHex(CTransaction(), self.nodes[0].gettransaction(txid1)['hex'])\r\n`\r\n\r\nprior to the assert_equal lines (and uncomment them obviously).",
                    "id": "MDEyOklzc3VlQ29tbWVudDMyODAwOTc2NA==",
                    "publishedAt": "2017-09-08T06:18:24Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11256#issuecomment-328009764"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/7999704?v=4",
                        "login": "esotericnonsense"
                    },
                    "body": "Doh. You're absolutely right. Fixed.\r\n\r\nThe final commit 'Refactor segwit 3-tx-chain' changes all references to 'tx' to 'tx/tx1/tx2/tx3' in order to clarify that. It has a large diff and can be dropped if necessary (only affects code style).\r\n\r\nI have also rebased on master at 3255d63.\r\n\r\nShould be good to go now.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMyODE5Mzg4NA==",
                    "publishedAt": "2017-09-08T19:30:47Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11256#issuecomment-328193884"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/4360349?v=4",
                        "login": "morcos"
                    },
                    "body": "Concept ACK, but it turns out GetTxSize is not actually what we claim it is.  See the calculation of `GetVirtualTransactionSize` which potentially includes number of sig ops in the calculation.\r\n\r\nI thinke the right path forward is: \r\n- a small BIP documenting this usage of virtual transaction size (which is used almost everywhere in our code\r\n- documentation update pointing to this new BIP instead of 141 for defining virtual size\r\n- this PR makes even more sense given this lack of easy conversion, but I think the newly added tests should at least be documented to note that they only work in the case that sig ops don't factor in, and perhaps we should add a test with a tx that has more sigops to show what happens in that case.\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDMyODYyMTQwMQ==",
                    "publishedAt": "2017-09-11T18:43:36Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11256#issuecomment-328621401"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/1095675?v=4",
                        "login": "luke-jr"
                    },
                    "body": "@morcos AFAIK that's exclusively used for node policy, and as such isn't a topic for standardisation...?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0MzQxODM1NA==",
                    "publishedAt": "2017-11-10T09:11:02Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11256#issuecomment-343418354"
                }
            ],
            "totalCount": 8
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "d4b0d81b58f0ef989cbfd526f818225c587ed7ec"
                    }
                }
            ],
            "totalCount": 4
        },
        "createdAt": "2017-09-06T11:08:52Z",
        "deletions": 17,
        "id": "MDExOlB1bGxSZXF1ZXN0MTM5NTMzNzU1",
        "labels": {
            "nodes": [
                {
                    "color": "0052cc",
                    "id": "MDU6TGFiZWw5ODI3OTE3Nw==",
                    "name": "RPC/REST/ZMQ"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "CONFLICTING",
        "mergedAt": null,
        "number": 11256,
        "state": "OPEN",
        "title": "RPC: add weight to mempool entry output",
        "updatedAt": "2018-03-11T05:02:41Z"
    },
    {
        "additions": 23,
        "author": {
            "avatarUrl": "https://avatars3.githubusercontent.com/u/84245?v=4",
            "login": "danra",
            "url": "https://github.com/danra"
        },
        "body": "Add sanity asserts for return value of `CBlockIndex::GetAncestor()` where appropriate.\r\n\r\nIn validation.cpp `CheckSequenceLocks`, check the return value of `tip->GetAncestor(maxInputHeight)` stored into `lp->maxInputBlock`. If it ever returns `nullptr` because the ancestor isn't found, it's going to be a bad bug to keep going, since a `LockPoints` object with the `maxInputBlock` member set to `nullptr` signifies no relative lock time.\r\n\r\nIn the other places, the added asserts would prevent accidental dereferencing of a null pointer which is UB.",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
                        "login": "promag"
                    },
                    "body": "There are other places where the result of `GetAncestor` is not asserted or tested. IMO this PR could also handle those.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMzMDcxMTY1MQ==",
                    "publishedAt": "2017-09-20T00:34:37Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11342#issuecomment-330711651"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/84245?v=4",
                        "login": "danra"
                    },
                    "body": "@promag Done, `GetAncestor()`'s return value is now verified in all places where I found it is needed.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMzMTIxODkzOQ==",
                    "publishedAt": "2017-09-21T17:00:55Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11342#issuecomment-331218939"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "Any specific reason for using `assert(x != nullptr)` instead of just `assert(x)`? (this works as-is for smart pointers)",
                    "id": "MDEyOklzc3VlQ29tbWVudDMzMjc0MjI5OA==",
                    "publishedAt": "2017-09-28T06:40:28Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11342#issuecomment-332742298"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/84245?v=4",
                        "login": "danra"
                    },
                    "body": "@laanwj Yes, see my reply to the similar question by @promag above.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMzMjkxMDcwNg==",
                    "publishedAt": "2017-09-28T17:40:52Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11342#issuecomment-332910706"
                }
            ],
            "totalCount": 4
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "33ce4350139565e96a5c7e6e9801f818bed7b413"
                    }
                }
            ],
            "totalCount": 1
        },
        "createdAt": "2017-09-15T15:21:47Z",
        "deletions": 7,
        "id": "MDExOlB1bGxSZXF1ZXN0MTQxMzM3MzU1",
        "labels": {
            "nodes": [
                {
                    "color": "6060aa",
                    "id": "MDU6TGFiZWwxMTgzNzk2NTI=",
                    "name": "Validation"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "number": 11342,
        "state": "OPEN",
        "title": "Sanity assert GetAncestor() != nullptr where appropriate",
        "updatedAt": "2017-12-30T11:11:26Z"
    },
    {
        "additions": 9,
        "author": {
            "avatarUrl": "https://avatars0.githubusercontent.com/u/7999704?v=4",
            "login": "esotericnonsense",
            "url": "https://github.com/esotericnonsense"
        },
        "body": "Partial fix for issue #11315.\r\n\r\nEvery prune event flushes the dbcache to disk.\r\nBy default this happens approximately every ~160MiB so high dbcache values are negated and IBD takes far longer than without pruning enabled.\r\n\r\nThis change allows a 'high water mark' for pruning such that the actual size of blk/rev on disk can increase a reasonable amount before flushing.\r\n\r\nOn a machine with prune=550 and dbcache=3000:\r\n```\r\n2017-09-17 22:04:56 Prune: target=550MiB hwm=3540MiB actual=3510MiB diff=-2960MiB max_prune_height=292477 removed 0 blk/rev pairs\r\n2017-09-17 22:04:56 Prune: target=550MiB hwm=3540MiB actual=3516MiB diff=-2966MiB max_prune_height=292499 removed 0 blk/rev pairs\r\n2017-09-17 22:04:57 Prune: target=550MiB hwm=3540MiB actual=468MiB diff=81MiB max_prune_height=292537 removed 21 blk/rev pairs\r\n2017-09-17 22:04:57 Prune: UnlinkPrunedFiles deleted blk/rev (00103)\r\n...\r\n```\r\n\r\nI haven't changed the 'diff' column in debug log (it could perhaps be hwm - actual rather than target - actual).\r\n\r\nNot sure if this could potentially increase disk space requirements in some cases - may need documentation. With a very high dbcache value, if say 10GiB of blocks come in that only produce 2GiB of chainstate then you'd overshoot quite a bit, I think. It's a tradeoff - more frequent flushing = slower IBD.\r\n\r\nThanks to sipa and gmaxwell for helping out on IRC.",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/7999704?v=4",
                        "login": "esotericnonsense"
                    },
                    "body": "Benchmarks, syncing against a localhost node. Sending node on HDD, syncing node on SSD. Clock starts at UpdateTip height=1. prune=550 dbcache=3000.\r\n\r\n```\r\n+--------+----------+------------------+-----------------+\r\n| height | unpruned | pruned (this PR) | pruned (master) |\r\n+--------+----------+------------------+-----------------+\r\n| 250000 |     427s |             593s |            724s |\r\n| 300000 |     916s |            1076s |           1402s |\r\n| 350000 |    1443s |            1979s |           2707s |\r\n+--------+----------+------------------+-----------------+\r\n```\r\nAt height 350000, this PR results in a 529MiB dbcache vs. a 2646MiB dbcache unpruned.\r\nThe pruned node ends up with approx. 30MiB.\r\n110 seconds should be added to serialize the dbcache on the unpruned node's shutdown (the other two cases were single digit seconds).\r\n\r\nFinal result is that the node can sync to height 350000 27% faster than without the PR by giving the prune target ~3GiB leeway. I didn't want to spend the time to reach the end but I suspect results would be similar or better.\r\n\r\nAs in the above post, this is only a 'partial fix' because the dbcache is still limited empirically to far lower than the actual value.\r\n\r\nedit: Ah yes, space requirements. In this test the chainstate folder's final size is ~1GiB and the prune is allowed to overshoot by ~3GiB, so it raises the maximum disk space requirement by ~2GiB in this example.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMzMDEyMTg3OQ==",
                    "publishedAt": "2017-09-18T03:21:09Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11359#issuecomment-330121879"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/7999704?v=4",
                        "login": "esotericnonsense"
                    },
                    "body": "An additional performance gain could be gotten by tying this HWM to a percentage of the prune target. \r\n\r\nFor example, with prune=100000 you could let the data get to 100G x 1.10 before pruning, or cap it at 100G and prune down to 100G x 0.90 (similar effect on dbcache in both cases).\r\n\r\nLooking at the documentation in -help:\r\n```\r\nautomatically prune block files to stay under the specified target size in MiB\r\n```\r\nso probably the 'remain below' option makes more sense, but that retains the far slower IBD mechanic at low prune levels",
                    "id": "MDEyOklzc3VlQ29tbWVudDMzMDEyOTA5Mw==",
                    "publishedAt": "2017-09-18T04:51:30Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11359#issuecomment-330129093"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/7463573?v=4",
                        "login": "sdaftuar"
                    },
                    "body": "No strong feelings from me, but when we worked on the pruning implementation our goal was to have the target be something that should be achievable.  So if we were to decide that it's worth exceeding it intentionally (eg for performance reasons during ibd), we should remember that we need to clearly communicate that to users.\r\n\r\nBut now that we in theory support non-atomic flushes, perhaps we can use that to flush less often during IBD even while we prune.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMzMzIxMjkyMQ==",
                    "publishedAt": "2017-09-29T19:09:49Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11359#issuecomment-333212921"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/1095675?v=4",
                        "login": "luke-jr"
                    },
                    "body": "Indeed, users expect that if they set `prune=5000`, the blockchain size remains <= 5000 MB. Perhaps it would make sense to have a `prune-extra` option to specify additional space to free when doing pruning and reduce its frequency (we can default it to 10% or something).",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0MzQyNTg3OQ==",
                    "publishedAt": "2017-11-10T09:42:48Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11359#issuecomment-343425879"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/10217?v=4",
                        "login": "Sjors"
                    },
                    "body": "See also #12404.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NDY1NzQ4NA==",
                    "publishedAt": "2018-02-10T14:06:06Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11359#issuecomment-364657484"
                }
            ],
            "totalCount": 5
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "ace88465f81930662c75401849e0cfdf49df3aad"
                    }
                }
            ],
            "totalCount": 1
        },
        "createdAt": "2017-09-17T22:23:55Z",
        "deletions": 3,
        "id": "MDExOlB1bGxSZXF1ZXN0MTQxNTA1MjM4",
        "labels": {
            "nodes": [
                {
                    "color": "6060aa",
                    "id": "MDU6TGFiZWwxMTgzNzk2NTI=",
                    "name": "Validation"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "number": 11359,
        "state": "OPEN",
        "title": "Add a pruning 'high water mark' to reduce the frequency of pruning events",
        "updatedAt": "2018-02-10T14:06:07Z"
    },
    {
        "additions": 70,
        "author": {
            "avatarUrl": "https://avatars1.githubusercontent.com/u/417043?v=4",
            "login": "theuni",
            "url": "https://github.com/theuni"
        },
        "body": "This continues some of the great work that @benma has been doing.\r\n\r\nMore work towards a CConnman with no globals, so that we can test instances against themselves.",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/417043?v=4",
                        "login": "theuni"
                    },
                    "body": "Grr, serves me right for building without Qt. Will fix.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMzMTU4NTAyMA==",
                    "publishedAt": "2017-09-22T23:53:17Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11387#issuecomment-331585020"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/417043?v=4",
                        "login": "theuni"
                    },
                    "body": "@jonasschnelli Any suggestion where to stick this? The qt build fails because the global accessor has been removed. I'd hate to add the global back just for qt.\r\n\r\nIs it possible to add a QSettings value from gArgs without it ending up stored in the config file?",
                    "id": "MDEyOklzc3VlQ29tbWVudDMzMjAzMDU1Mg==",
                    "publishedAt": "2017-09-25T22:20:09Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11387#issuecomment-332030552"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "@theuni: I don't know whats the simples change. You could pass it into a GUI constant holder singleton (or pseudo global). Could be held in `guiutil.cpp/h`. Or just pass it around (to `bitcoingui.cpp`, etc., but I guess that will lead to a lot of code)",
                    "id": "MDEyOklzc3VlQ29tbWVudDMzMjM0NzI0OQ==",
                    "publishedAt": "2017-09-26T21:53:00Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11387#issuecomment-332347249"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/1225267?v=4",
                        "login": "benma"
                    },
                    "body": "This seems to be the only option that changes operations on the fly. We could just not do that (`setRestartRequired(true)`).\r\n\r\nOtherwise, a clean option might be to register a callback in qt, called when non-restart settings are changed. Could hook up the `dataChanged` signal to a slot somewhere closer in qt to where the callback can be passed.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMzMjQ1MzQ4OA==",
                    "publishedAt": "2017-09-27T08:47:26Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11387#issuecomment-332453488"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "Concept ACK",
                    "id": "MDEyOklzc3VlQ29tbWVudDMzMjcxMzMxMw==",
                    "publishedAt": "2017-09-28T02:55:11Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11387#issuecomment-332713313"
                }
            ],
            "totalCount": 5
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "10c496c156d11c1578832422a0b68a99d190b098"
                    }
                }
            ],
            "totalCount": 4
        },
        "createdAt": "2017-09-22T23:16:14Z",
        "deletions": 67,
        "id": "MDExOlB1bGxSZXF1ZXN0MTQyNjg2NDc4",
        "labels": {
            "nodes": [
                {
                    "color": "006b75",
                    "id": "MDU6TGFiZWw5ODI5ODAwNw==",
                    "name": "P2P"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "CONFLICTING",
        "mergedAt": null,
        "number": 11387,
        "state": "OPEN",
        "title": "net: remove more CConnman globals",
        "updatedAt": "2017-12-30T11:11:27Z"
    },
    {
        "additions": 74,
        "author": {
            "avatarUrl": "https://avatars3.githubusercontent.com/u/250224?v=4",
            "login": "kallewoof",
            "url": "https://github.com/kallewoof"
        },
        "body": "This lets users pick their own fees when using `sendtoaddress` if they prefer this over the estimators.",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "Not opposed to add that. Though IMO the more experience users (which are those who may use explicit fee-rates) should use create/fund/sendrawtx.\r\n\r\nConcept ACK",
                    "id": "MDEyOklzc3VlQ29tbWVudDMzMjg1MTA5NA==",
                    "publishedAt": "2017-09-28T14:19:16Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11413#issuecomment-332851094"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/7999704?v=4",
                        "login": "esotericnonsense"
                    },
                    "body": "Concept ACK. I don't like that this results in sendtoaddress having 8 parameters but I don't see an immediately obvious way to avoid that.\r\n\r\nSendmany could get it too?",
                    "id": "MDEyOklzc3VlQ29tbWVudDMzMjg5MTMxOA==",
                    "publishedAt": "2017-09-28T16:29:50Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11413#issuecomment-332891318"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/250224?v=4",
                        "login": "kallewoof"
                    },
                    "body": "Can't fix people putting too high fees in, but if they put too low, they should be able to bump the fee unless they specifically disable it. As such, RBF is default-on when fees are explicit (3d14d35).\r\n\r\n@promag Added tests (1768936).\r\n\r\n@esotericnonsense I don't know how frequently this will be used. I suggest it for sendtoaddress because I see a lot of people asking how to fire off a tx with a given fee. There's also `settxfee`.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMzMzAxMzc0Ng==",
                    "publishedAt": "2017-09-29T02:22:44Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11413#issuecomment-333013746"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/3211283?v=4",
                        "login": "MeshCollider"
                    },
                    "body": "Re: the 8 parameter issue @esotericnonsense mentioned, it would be cleaner to convert most parameters to a JSON object input like `bumpfee`, `listunspent`, etc. use since most are independent of each other and optional",
                    "id": "MDEyOklzc3VlQ29tbWVudDMzMzExNjQzNQ==",
                    "publishedAt": "2017-09-29T12:45:34Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11413#issuecomment-333116435"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/250224?v=4",
                        "login": "kallewoof"
                    },
                    "body": "Addressed @luke-jr requests (double-use `conf_target` and add feature to `sendmany`).",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0Mzc4OTcwNQ==",
                    "publishedAt": "2017-11-13T01:58:29Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11413#issuecomment-343789705"
                }
            ],
            "totalCount": 5
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "ff9f32eeac82ab714b3292c2f170ee9d715eafe0"
                    }
                }
            ],
            "totalCount": 5
        },
        "createdAt": "2017-09-28T06:44:23Z",
        "deletions": 12,
        "id": "MDExOlB1bGxSZXF1ZXN0MTQzNTY2ODkx",
        "labels": {
            "nodes": [
                {
                    "color": "0052cc",
                    "id": "MDU6TGFiZWw5ODI3OTE3Nw==",
                    "name": "RPC/REST/ZMQ"
                },
                {
                    "color": "08a781",
                    "id": "MDU6TGFiZWwxNDk0MjQ=",
                    "name": "Wallet"
                }
            ],
            "totalCount": 2
        },
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "number": 11413,
        "state": "OPEN",
        "title": "[wallet] [rpc] sendtoaddress/sendmany: Add explicit feerate option",
        "updatedAt": "2018-02-21T06:21:56Z"
    },
    {
        "additions": 83,
        "author": {
            "avatarUrl": "https://avatars0.githubusercontent.com/u/8403418?v=4",
            "login": "jl2012",
            "url": "https://github.com/jl2012"
        },
        "body": "This disables `OP_CODESEPARATOR` in non-segwit scripts (even in an unexecuted branch), and makes a positive `FindAndDelete` result invalid. This ensures that the `scriptCode` serialized in `SignatureHash` is always the same as the script passing to the `EvalScript`.",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/8403418?v=4",
                        "login": "jl2012"
                    },
                    "body": "This is part of #8755\r\n@TheBlueMatt ",
                    "id": "MDEyOklzc3VlQ29tbWVudDMzMzI0NjU3Nw==",
                    "publishedAt": "2017-09-29T21:45:32Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11423#issuecomment-333246577"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/649246?v=4",
                        "login": "TheBlueMatt"
                    },
                    "body": "Strong Concept ACK. We do ML posts for new standardness rules, right? Probably doesn't matter given their lack of use.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMzMzI0Njk4OA==",
                    "publishedAt": "2017-09-29T21:48:01Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11423#issuecomment-333246988"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/548488?v=4",
                        "login": "sipa"
                    },
                    "body": "Any reason to support OP_CODESEPARATOR inside P2WSH?",
                    "id": "MDEyOklzc3VlQ29tbWVudDMzMzI1MjI2Mg==",
                    "publishedAt": "2017-09-29T22:18:29Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11423#issuecomment-333252262"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/649246?v=4",
                        "login": "TheBlueMatt"
                    },
                    "body": "I'd prefer we be consistent. Especially if OP_CODESEPARATOR has no meaning in SegWit transactions we should just make it nonstandard everywhere.\n\nOn September 29, 2017 6:18:36 PM EDT, Pieter Wuille <notifications@github.com> wrote:\n>Any reason to support OP_CODESEPARATOR inside P2WSH?\n>\n>-- \n>You are receiving this because you were mentioned.\n>Reply to this email directly or view it on GitHub:\n>https://github.com/bitcoin/bitcoin/pull/11423#issuecomment-333252262\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDMzMzI1MzY1OA==",
                    "publishedAt": "2017-09-29T22:27:57Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11423#issuecomment-333253658"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/8403418?v=4",
                        "login": "jl2012"
                    },
                    "body": "@sipa I think @NicolasDorier has something that use CODESEPARATOR. I think it could make the size of some contracts smaller.\r\n\r\nThis is actually part of the attempt to fix the pre-segwit quadratic sighash problem. A variable `scriptCode` makes sighash caching more difficult. That's why I proposed to do it for pre-segwit only",
                    "id": "MDEyOklzc3VlQ29tbWVudDMzMzI4NTM4MQ==",
                    "publishedAt": "2017-09-30T05:33:34Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11423#issuecomment-333285381"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/3020646?v=4",
                        "login": "NicolasDorier"
                    },
                    "body": "```\r\nAny reason to support OP_CODESEPARATOR inside P2WSH?\r\n```\r\n\r\nYES, I am using it for tumblebit, it saves 33 bytes per outputs. It allows you to sign a specific branch with one key instead of having separate public key per branch. Please do not do that until we have at least MAST.  (only if signing in MAST requires the scriptCode to depends on the executed branch)\r\n\r\nOP_CODESEPARATOR is very useful, I am coupling it with SIGHASH_NONE. (The only case where SIGHASH_NONE is not similar to giving your private key)",
                    "id": "MDEyOklzc3VlQ29tbWVudDMzMzQzOTQ2Mw==",
                    "publishedAt": "2017-10-02T04:40:44Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11423#issuecomment-333439463"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/3020646?v=4",
                        "login": "NicolasDorier"
                    },
                    "body": "Just to explain my case here:\r\nImagine the following: Alice, expect Bob to publish a transaction satisfying the PAYMENT condition to get the preimage of <BOB_HASH>.\r\n\r\n```\r\nOP_DEPTH 3 EQUAL\r\nOP_IF\r\n    2 <ALICE_KEY_PAYMENT> <BOB_KEY_PAYMENT> MULTICHECKSIGVERIFY HASH160 <BOB_HASH> EQUAL\r\nOP_ELSE\r\n    <ALICE_KEY_REDEEM> CHECKSIG CLTV DROP\r\nOP_END\r\n```\r\n\r\nIf ALICE_KEY_PAYMENT == ALICE_KEY_REDEEM, this would be no good, as BOB could use Alice signature to satisfy the REDEEM condition, and get the money without revealing the pre image.\r\n\r\nNow you can save 33 bytes this way. (untested, but it get the idea of what I do for TB)\r\n\r\n```\r\n<ALICE_KEY>\r\nOP_DEPTH 3 EQUAL\r\nOP_IF\r\n    OP_SWAP <BOB_KEY_PAYMENT> CHECKSIGVERIFY HASH160 <BOB_HASH> EQUAL OP_CODESEP\r\nOP_ELSE\r\n     CLTV DROP\r\nOP_END\r\nCHECKSIG\r\n```\r\n\r\nNotice that Alice can just pass a SIGHASH_NONE signature for the first branch to Bob, so she does not have to know how bob will spend the txout, while still being sure she can get the preimage as soon as Bob try to cashout.\r\n\r\nConcept ACK for removing on non-segwit scripts, but it should be kept for segwit.\r\nUsing this trick, you can save quite a lot of data if there is lots of branches. (and also have more branches, since the scripts are limited to 512 bytes)",
                    "id": "MDEyOklzc3VlQ29tbWVudDMzMzQ0MTMyMQ==",
                    "publishedAt": "2017-10-02T05:01:00Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11423#issuecomment-333441321"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/494411?v=4",
                        "login": "jgarzik"
                    },
                    "body": "concept ACK\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDMzNDA0MTAxMw==",
                    "publishedAt": "2017-10-04T03:32:35Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11423#issuecomment-334041013"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/649246?v=4",
                        "login": "TheBlueMatt"
                    },
                    "body": "utACK effb6f9568a92ad6fe0ebf9da308cb0237df327b. One interesting test-case you may consider adding is checking that a FindAndDelete does not match (and thus the script is valid, even with CONST_SCRIPTCODE) a push with a non-minimal push encoding.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0NDM2MDk1NQ==",
                    "publishedAt": "2017-11-14T18:57:26Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11423#issuecomment-344360955"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "utACK 0575b1831cd52987c76320d304674a27a140fe1f\r\n* IMO requires bitcoin-dev ML post (if merged)\r\n* requires release notes part (can be done after merging)",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0NDUwNTY4Nw==",
                    "publishedAt": "2017-11-15T07:12:20Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11423#issuecomment-344505687"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/649246?v=4",
                        "login": "TheBlueMatt"
                    },
                    "body": "Relevant ML thread is at https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-November/015292.html",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0NzIzOTgzNg==",
                    "publishedAt": "2017-11-27T16:35:45Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11423#issuecomment-347239836"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/3020646?v=4",
                        "login": "NicolasDorier"
                    },
                    "body": "Just to clarify, OP_CODESEP could be removed completely from segwit if there is another way to explicitely sign a script path. (MAST could allow that)",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0NzQzMjI4Mw==",
                    "publishedAt": "2017-11-28T07:02:25Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11423#issuecomment-347432283"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/8403418?v=4",
                        "login": "jl2012"
                    },
                    "body": "rebased",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2MzUzOTQxNw==",
                    "publishedAt": "2018-02-06T19:35:45Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11423#issuecomment-363539417"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/7999704?v=4",
                        "login": "esotericnonsense"
                    },
                    "body": "utACK 850c41c2a33efd73eff0bbdefc6ba2762901b60e\r\nchecked the diff of tx_valid and tx_invalid.json",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NzAwMDU4OQ==",
                    "publishedAt": "2018-02-20T14:48:41Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11423#issuecomment-367000589"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/8403418?v=4",
                        "login": "jl2012"
                    },
                    "body": "Rebase with comments fixed (s/invalid/rejected/)",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NzA2NzI1OQ==",
                    "publishedAt": "2018-02-20T18:11:35Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11423#issuecomment-367067259"
                }
            ],
            "totalCount": 15
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "b69896f24840091068fcd45ee9c31a474aa3f3bb"
                    }
                }
            ],
            "totalCount": 2
        },
        "createdAt": "2017-09-29T21:44:38Z",
        "deletions": 8,
        "id": "MDExOlB1bGxSZXF1ZXN0MTQzOTg2OTg3",
        "labels": {
            "nodes": [
                {
                    "color": "6060aa",
                    "id": "MDU6TGFiZWwxMTgzNzk2NTI=",
                    "name": "Validation"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "CONFLICTING",
        "mergedAt": null,
        "number": 11423,
        "state": "OPEN",
        "title": "[Policy] Make OP_CODESEPARATOR and FindAndDelete in non-segwit scripts non-std",
        "updatedAt": "2018-02-20T18:11:36Z"
    },
    {
        "additions": 443,
        "author": {
            "avatarUrl": "https://avatars1.githubusercontent.com/u/417043?v=4",
            "login": "theuni",
            "url": "https://github.com/theuni"
        },
        "body": "BanMan is not a bad Man, he's just a different class of Man. He's an ex-ConnMan Man, looking to take a different path and make a new namespace for himself.\r\n\r\nBeware BanMan's banhammer as he banishes bandits with the bandwidth to jam him. Not standing for non-canon, he\u2019ll ban and he\u2019ll ban. Some heroes wear capes, but BanMan? A Bandana.\r\n\r\n--\r\n\r\nDespite the diff size, this is mostly move-only. It breaks the ban/unban functions out of CConnman and into a new class because, while logically bans are tied to connections, they're really just entries in a database. Like CConnman, a global is still required due to RPC (and qt). I plan to address this along with CAddrMan, which I'll be breaking out next.\r\n\r\nThis also makes testing easier as different implementations can be dropped in.\r\n\r\nThere are a few small behavioral changes here, which are pretty insignificant:\r\n- Banning no longer implies disconnecting. If you want both, you need to call both.\r\n- For simplicity, The ban db is read in the constructor, meaning that it happens in init rather than net.\r\n- RPC returns RPC_DATABASE_ERROR if the bandb is not loaded. This should not be possible now, but the idea is for future changes to allow us to disable p2p but still interact with the ban commands.",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "Concept ACK modulo `GUARDED_BY(\u2026)` addition :-)",
                    "id": "MDEyOklzc3VlQ29tbWVudDMzNDY1NTc4Mg==",
                    "publishedAt": "2017-10-06T04:33:36Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11457#issuecomment-334655782"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/886523?v=4",
                        "login": "JeremyRubin"
                    },
                    "body": "Concept Ack!",
                    "id": "MDEyOklzc3VlQ29tbWVudDMzNDc4MDE2OQ==",
                    "publishedAt": "2017-10-06T14:59:54Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11457#issuecomment-334780169"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "Nice!\r\nConcept ACK,.. will review soon.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMzNDkwOTYyNQ==",
                    "publishedAt": "2017-10-07T04:28:53Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11457#issuecomment-334909625"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/417043?v=4",
                        "login": "theuni"
                    },
                    "body": "Rebased and addressed most of the feedback here.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMzNzQ1ODU1MQ==",
                    "publishedAt": "2017-10-18T04:40:35Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11457#issuecomment-337458551"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/417043?v=4",
                        "login": "theuni"
                    },
                    "body": "Addressed @sdaftuar's feedback. I went ahead and changed the Disconnect() in qt/rpcconsole back to using IP rather than nodeid to avoid adding unnecessary behavioral changes in a PR that should otherwise be a code refactor.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMzNzk4ODk4NQ==",
                    "publishedAt": "2017-10-19T18:02:31Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11457#issuecomment-337988985"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/649246?v=4",
                        "login": "TheBlueMatt"
                    },
                    "body": "Concept ACK, needs rebase.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0NDAyMTU1Mw==",
                    "publishedAt": "2017-11-13T18:59:47Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11457#issuecomment-344021553"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/417043?v=4",
                        "login": "theuni"
                    },
                    "body": "rebased.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0NDQwNTU2Mg==",
                    "publishedAt": "2017-11-14T21:31:42Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11457#issuecomment-344405562"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/417043?v=4",
                        "login": "theuni"
                    },
                    "body": "> In commit net: Break disconnecting out of Ban(),\r\n> \r\n> Missing call DisconnectNode() after:\r\n\r\nThis is handled by setting fDisconnect directly above.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0NDQzOTMyNg==",
                    "publishedAt": "2017-11-14T23:51:06Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11457#issuecomment-344439326"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/649246?v=4",
                        "login": "TheBlueMatt"
                    },
                    "body": "Heh, rebase needed for the include change.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0NDk4ODYwNA==",
                    "publishedAt": "2017-11-16T16:59:52Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11457#issuecomment-344988604"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "I've added this to high-priority for review, would be nice to move this forward and this blocks further work in this direction.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0NzQ0NzEyNA==",
                    "publishedAt": "2017-11-28T08:19:54Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11457#issuecomment-347447124"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/417043?v=4",
                        "login": "theuni"
                    },
                    "body": "@laanwj Thanks!",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0NzY3MTMyMA==",
                    "publishedAt": "2017-11-28T21:35:34Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11457#issuecomment-347671320"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/649246?v=4",
                        "login": "TheBlueMatt"
                    },
                    "body": "Needs rebase.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1MTQ1NjQyMA==",
                    "publishedAt": "2017-12-13T17:06:16Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11457#issuecomment-351456420"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/417043?v=4",
                        "login": "theuni"
                    },
                    "body": "Addressed @TheBlueMatt's review and squashed. Diff from before (minus the rebase to master):\r\n```patch\r\ndiff --git a/src/net.cpp b/src/net.cpp\r\nindex 78c08b1..46e7783 100644\r\n--- a/src/net.cpp\r\n+++ b/src/net.cpp\r\n@@ -2125,4 +2125,2 @@ bool CConnman::Start(CScheduler& scheduler, const Options& connOptions)\r\n \r\n-    nStart = GetTimeMillis();\r\n-\r\n     uiInterface.InitMessage(_(\"Starting network threads...\"));\r\ndiff --git a/src/net_processing.cpp b/src/net_processing.cpp\r\nindex 2981413..e8d731c 100644\r\n--- a/src/net_processing.cpp\r\n+++ b/src/net_processing.cpp\r\n@@ -2852,3 +2852,2 @@ bool PeerLogicValidation::SendRejectsAndCheckIfBanned(CNode* pnode)\r\n         else {\r\n-            pnode->fDisconnect = true;\r\n             if (pnode->addr.IsLocal())\r\n@@ -2861,2 +2860,4 @@ bool PeerLogicValidation::SendRejectsAndCheckIfBanned(CNode* pnode)\r\n             }\r\n+            // Disconnect all nodes with this address\r\n+            connman->DisconnectNode(pnode->addr);\r\n         }\r\n\r\n```",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1MjYxMzMyOA==",
                    "publishedAt": "2017-12-19T01:41:08Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11457#issuecomment-352613328"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/417043?v=4",
                        "login": "theuni"
                    },
                    "body": "Rebased with only trivial changes, with one exception: https://github.com/bitcoin/bitcoin/pull/11457/commits/2335579f842607557a4742d2ec0749e459270bd0.\r\n\r\nAs @TheBlueMatt and @ryanofsky pointed out, it wasn't clear if any behavioral changes were introduced in SendRejectsAndCheckIfBanned, and it turned out that the new code indeed did not match master's behavior exactly, as pointed out by rpc tests.\r\n\r\nThat's now fixed and behavior should be exactly as before.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NzM1NjExOA==",
                    "publishedAt": "2018-03-29T20:06:20Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11457#issuecomment-377356118"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "utACK 0950d72",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NzM4MjU0NQ==",
                    "publishedAt": "2018-03-29T21:47:00Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11457#issuecomment-377382545"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/10217?v=4",
                        "login": "Sjors"
                    },
                    "body": "Did some light testing on macOS banning and unbanning unsuspecting testnet nodes. Didn't get in trouble.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NzQ4MzY3Mw==",
                    "publishedAt": "2018-03-30T09:06:35Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11457#issuecomment-377483673"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/417043?v=4",
                        "login": "theuni"
                    },
                    "body": "rebased. I just shoved g_banman into NodeImpl for now, but obviously we'll want it broken out as a next step.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MjkxNzE0MA==",
                    "publishedAt": "2018-04-19T23:55:12Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11457#issuecomment-382917140"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/881253?v=4",
                        "login": "jimpo"
                    },
                    "body": "utACK 521ebf3",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MzAyMzY0Nw==",
                    "publishedAt": "2018-04-20T08:26:28Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11457#issuecomment-383023647"
                }
            ],
            "totalCount": 18
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "521ebf37f47591b5bbb964463f28e7bac56b88bd"
                    }
                }
            ],
            "totalCount": 9
        },
        "createdAt": "2017-10-05T23:14:47Z",
        "deletions": 324,
        "id": "MDExOlB1bGxSZXF1ZXN0MTQ1MDQyNTA0",
        "labels": {
            "nodes": [
                {
                    "color": "006b75",
                    "id": "MDU6TGFiZWw5ODI5ODAwNw==",
                    "name": "P2P"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "number": 11457,
        "state": "OPEN",
        "title": "Introduce BanMan",
        "updatedAt": "2018-04-20T08:26:28Z"
    },
    {
        "additions": 17,
        "author": {
            "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
            "login": "jonasschnelli",
            "url": "https://github.com/jonasschnelli"
        },
        "body": "Partially fixes #11464\r\n\r\nThis is a simple improvement to render singe non-change output self-to-self transactions with the corresponding output-address/label.\r\nMulti non-change output self-to-self transaction do keep the `(n.a.)` label (we could show all the addresses coma separated).\r\n\r\nScreen:\r\n<img width=\"917\" alt=\"bildschirmfoto 2017-10-09 um 14 18 13\" src=\"https://user-images.githubusercontent.com/178464/31358984-c627acfa-acfc-11e7-990d-8c176c1cb201.png\">\r\n",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "Optimizing rendering sounds good, do you have FPS numbers? :)\r\n\r\nSorry. Concept ACK.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMzNTM4ODgwMw==",
                    "publishedAt": "2017-10-10T07:43:36Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11471#issuecomment-335388803"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "Fixed @promag points.\r\n\r\n> Optimizing rendering sounds good, do you have FPS numbers? :)\r\n\r\nHeh. Yes. Rending is maybe not the best word for decomposing a transactions.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMzNTYwNTczMw==",
                    "publishedAt": "2017-10-10T20:58:03Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11471#issuecomment-335605733"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/10217?v=4",
                        "login": "Sjors"
                    },
                    "body": "Concept ACK.\r\n\r\nI can't get it to work. Before & After:\r\n<img width=\"833\" alt=\"schermafbeelding 2017-11-09 om 12 56 28\" src=\"https://user-images.githubusercontent.com/10217/32604306-775a7332-c54d-11e7-8ba7-f1551907c5a1.png\">\r\n\r\nI made a transaction from one non-segwit wallet address to another non-segwit wallet address, without change.\r\n\r\nMaybe I'm doing something wrong?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0MzE0Nzg2Nw==",
                    "publishedAt": "2017-11-09T13:02:08Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11471#issuecomment-343147867"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "utACK, agree w/ luke-jr to please add `/* Falls through. */`. This will be useful when we enable `-Wimplicit-fallthrough` warnings, but also for general readability.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0NzQ3MzgzNg==",
                    "publishedAt": "2017-11-28T10:05:38Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11471#issuecomment-347473836"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/45598?v=4",
                        "login": "jb55"
                    },
                    "body": "Lightly Tested ACK a0102314df7ac9c025ef71c4ba0dee64285687d5\r\n\r\n![dec29-103140](https://user-images.githubusercontent.com/45598/34444604-1f0f9fc8-ec84-11e7-8791-59e540dd2fec.png)\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1NDQ4Mzc2Mw==",
                    "publishedAt": "2017-12-29T18:37:09Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11471#issuecomment-354483763"
                }
            ],
            "totalCount": 5
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "c23bd2892b892b91bbf29e9c7d5630e2c1074584"
                    }
                }
            ],
            "totalCount": 1
        },
        "createdAt": "2017-10-09T21:20:12Z",
        "deletions": 2,
        "id": "MDExOlB1bGxSZXF1ZXN0MTQ1NTUwMzkw",
        "labels": {
            "nodes": [
                {
                    "color": "02d7e1",
                    "id": "MDU6TGFiZWwxMzU5NDY=",
                    "name": "GUI"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "CONFLICTING",
        "mergedAt": null,
        "number": 11471,
        "state": "OPEN",
        "title": "[Qt] Optimize SendToSelf rendering with a single non-change output",
        "updatedAt": "2018-04-10T19:50:09Z"
    },
    {
        "additions": 8,
        "author": {
            "avatarUrl": "https://avatars3.githubusercontent.com/u/4319748?v=4",
            "login": "pedrobranco",
            "url": "https://github.com/pedrobranco"
        },
        "body": "This PR adds a new option `rescanUpdate` in `importmulti` RPC method to optionally do not rescan transactions that already exist in the wallet. \r\n\r\nThis is very important for large wallets when importing a single address with a old timestamp, which in this moment triggers a rescan to the whole wallet, replaying several already known wallet events (via notify-wallet). ",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/4319748?v=4",
                        "login": "pedrobranco"
                    },
                    "body": "> Maybe option should be just update? Needs a test thought.\r\n\r\nJust `update` isn't too generic? Does not refer to a rescan property. ",
                    "id": "MDEyOklzc3VlQ29tbWVudDMzNzYwMzM2MA==",
                    "publishedAt": "2017-10-18T14:08:30Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11484#issuecomment-337603360"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/4319748?v=4",
                        "login": "pedrobranco"
                    },
                    "body": "> Regarding the option name, even rescanUpdate doesn't really explain the underlying consequence. Maybe onlyNotifyNew=false or notifyExisting=true.\r\n\r\nMaybe `notifyKnownTransactions=true` or `notifyKnown=true`?\r\n\r\n> Missing test test.\r\n\r\nYes, I will add it soon.\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDMzNzYxOTI1Ng==",
                    "publishedAt": "2017-10-18T14:55:53Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11484#issuecomment-337619256"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/4319748?v=4",
                        "login": "pedrobranco"
                    },
                    "body": "After checking the `Wallet::RescanFromTime()` method, the argument which triggers the notifiers is called `fUpdate`, so I'm going by your approach of calling it `update`. \r\n\r\nThe `-help` of the command `importmulti` should be the one that should explain the underlying consequence of using `update`.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MjI3Nzg2NA==",
                    "publishedAt": "2018-03-12T11:25:04Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11484#issuecomment-372277864"
                }
            ],
            "totalCount": 3
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "dc315159db61e752f6932d89e4f6c722c40606ae"
                    }
                }
            ],
            "totalCount": 1
        },
        "createdAt": "2017-10-11T10:33:50Z",
        "deletions": 2,
        "id": "MDExOlB1bGxSZXF1ZXN0MTQ1OTEyNDE1",
        "labels": {
            "nodes": [
                {
                    "color": "0052cc",
                    "id": "MDU6TGFiZWw5ODI3OTE3Nw==",
                    "name": "RPC/REST/ZMQ"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "number": 11484,
        "state": "OPEN",
        "title": "Optional update rescan option in importmulti RPC",
        "updatedAt": "2018-03-12T14:29:24Z"
    },
    {
        "additions": 50,
        "author": {
            "avatarUrl": "https://avatars2.githubusercontent.com/u/3211283?v=4",
            "login": "MeshCollider",
            "url": "https://github.com/MeshCollider"
        },
        "body": "Modifies `listwallets` to return a list of 'available' wallets in the wallet directory, by looking for the BDB magic bytes (`0x00053162` source: https://github.com/file/file/blob/master/magic/Magdir/database) . \r\n\r\nThis is a breaking change to listwallets, but multiwallet RPC calls are experimental in 0.15 so shouldn't be a big concern to change it. c.f. @jnewbery's comment [here](https://github.com/bitcoin/bitcoin/pull/11466#discussion_r143791327). Split from #11466.\r\n\r\nWould be great if someone could confirm if this is endianness independent too :)",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
                        "login": "promag"
                    },
                    "body": "As said in https://github.com/bitcoin/bitcoin/pull/11466#discussion_r143429735, a different interface is:\r\n```json\r\n{\r\n  \"wallets\": [\r\n    { \"name\": \"foo\", \"loaded\": true },\r\n    { \"name\": \"bar\", \"loaded\": false }\r\n  ]\r\n}\r\n```\r\nWhich has the advantage of allowing to add new attributes later.\r\n\r\nAnother option is to have a different RPC. So:\r\n - `listwallets` - returns a lists of active/loaded wallets\r\n - `findwallets` - returns a list of all possible/available wallets.\r\n\r\nThis has the advantage that each RPC has it's own purpose and implementation, which happen to be very different. For those that manage (keep record of) the wallets externally `findwallets` is of no interest, only `listwallets`.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMzNTgxMzAzNA==",
                    "publishedAt": "2017-10-11T13:40:36Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11485#issuecomment-335813034"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1063656?v=4",
                        "login": "jnewbery"
                    },
                    "body": "concept ACK splitting this from #11466. And concept ACK using the BDB magic bytes rather than filename",
                    "id": "MDEyOklzc3VlQ29tbWVudDMzNTgyNDY4NA==",
                    "publishedAt": "2017-10-11T14:14:43Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11485#issuecomment-335824684"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/3211283?v=4",
                        "login": "MeshCollider"
                    },
                    "body": "Removed WIP, now uses BDB magic bytes, although I haven't confirmed that this works on big endian or also potentially on old versions of BDB wallets if the magic bytes changed",
                    "id": "MDEyOklzc3VlQ29tbWVudDMzNjM5NjI5Nw==",
                    "publishedAt": "2017-10-13T09:10:22Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11485#issuecomment-336396297"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1063656?v=4",
                        "login": "jnewbery"
                    },
                    "body": "I also tested manually that files show up as wallets when bytes 12-15 match the magic bdb bytes:\r\n\r\n```\r\n\u2192 bitcoin-cli listwallets\r\n{\r\n  \"loaded\": [\r\n    \"wallet.dat\"\r\n  ],\r\n  \"available\": [\r\n    \"wallet.dat\"\r\n  ]\r\n}\r\n[ubuntu] /home/ubuntu/.bitcoin/regtest\r\n\u2192 bitcoin-cli stop\r\nBitcoin server stopping\r\n[ubuntu] /home/ubuntu/.bitcoin/regtest\r\n\u2192 for i in {1..20}; do head wallet.dat -c $i > wallet_prefix_$i; done\r\n[ubuntu] /home/ubuntu/.bitcoin/regtest\r\n\u2192 bitcoind\r\nBitcoin server starting\r\n[ubuntu] /home/ubuntu/.bitcoin/regtest\r\n\u2192 bitcoin-cli listwallets\r\n{\r\n  \"loaded\": [\r\n    \"wallet.dat\"\r\n  ],\r\n  \"available\": [\r\n    \"wallet_prefix_20\",\r\n    \"wallet_prefix_19\",\r\n    \"wallet.dat\",\r\n    \"wallet_prefix_16\",\r\n    \"wallet_prefix_17\",\r\n    \"wallet_prefix_15\",\r\n    \"wallet_prefix_18\"\r\n  ]\r\n}\r\n```",
                    "id": "MDEyOklzc3VlQ29tbWVudDMzNjU3MzEyMw==",
                    "publishedAt": "2017-10-13T21:34:53Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11485#issuecomment-336573123"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/3211283?v=4",
                        "login": "MeshCollider"
                    },
                    "body": "Addressed @jnewbery nits and made available list mutually exclusive to loaded list. Thanks for the review :-)",
                    "id": "MDEyOklzc3VlQ29tbWVudDMzNjU4MjA0MA==",
                    "publishedAt": "2017-10-13T22:27:03Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11485#issuecomment-336582040"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/3211283?v=4",
                        "login": "MeshCollider"
                    },
                    "body": "Good idea @promag, thanks :-)",
                    "id": "MDEyOklzc3VlQ29tbWVudDMzNjU4NTc4NA==",
                    "publishedAt": "2017-10-13T22:54:19Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11485#issuecomment-336585784"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/3211283?v=4",
                        "login": "MeshCollider"
                    },
                    "body": "Rebased on master to fix travis failure due to multiwallet.py being modified",
                    "id": "MDEyOklzc3VlQ29tbWVudDMzODQ1NTc0Mg==",
                    "publishedAt": "2017-10-22T06:41:25Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11485#issuecomment-338455742"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/3211283?v=4",
                        "login": "MeshCollider"
                    },
                    "body": "Fixed @promag's nits, thanks :)\r\n\r\nBTW it would be good to have #11466 reviewed first because this is only really useful with that IMO",
                    "id": "MDEyOklzc3VlQ29tbWVudDMzODgzNTM2MA==",
                    "publishedAt": "2017-10-24T00:31:00Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11485#issuecomment-338835360"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/3211283?v=4",
                        "login": "MeshCollider"
                    },
                    "body": "Rebased and updated to work with new wallets directory from #11466 ",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0NTQ4NzY0Nw==",
                    "publishedAt": "2017-11-19T02:49:55Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11485#issuecomment-345487647"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
                        "login": "MarcoFalke"
                    },
                    "body": "Needs rebase, but I assume this won't work after  #11687 anyway?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0NzI0NjYzMQ==",
                    "publishedAt": "2017-11-27T16:55:03Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11485#issuecomment-347246631"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "> Needs rebase, but I assume this won't work after\u00a0#11687\u00a0anyway?\r\n\r\nIt won't work if someone uses external wallets, but it should still work if they have all wallets in the wallet directory? (which is the default)",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0NzQ0NTEyMA==",
                    "publishedAt": "2017-11-28T08:10:34Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11485#issuecomment-347445120"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/3211283?v=4",
                        "login": "MeshCollider"
                    },
                    "body": "I've rebased. If https://github.com/bitcoin/bitcoin/pull/11687 defaults to creating directories for each wallet rather than individual BDB files, then this may need to be modified to list directories as well as BDB files? But yes should still work",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0NzcwOTk5NA==",
                    "publishedAt": "2017-11-29T00:21:41Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11485#issuecomment-347709994"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/3211283?v=4",
                        "login": "MeshCollider"
                    },
                    "body": "Update the documentation as per @TheBlueMatt suggestion",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1MTIyMzE0Ng==",
                    "publishedAt": "2017-12-12T22:57:47Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11485#issuecomment-351223146"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/7133040?v=4",
                        "login": "ryanofsky"
                    },
                    "body": "Might be ready for merge. Unclear if \"Code looks good\" from @TheBlueMatt above is equivalent to a code ack.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1NjA5MjMxOQ==",
                    "publishedAt": "2018-01-08T20:50:45Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11485#issuecomment-356092319"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/3211283?v=4",
                        "login": "MeshCollider"
                    },
                    "body": "@ryanofsky sorry I haven't had time to work on your suggested changes above, I'm happy to let this wait until I've had time to address them",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1NjExMzE5MA==",
                    "publishedAt": "2018-01-08T22:11:50Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11485#issuecomment-356113190"
                }
            ],
            "totalCount": 15
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "3dac78f6f012196e3a4351f9a60df2fd03596f7d"
                    }
                }
            ],
            "totalCount": 3
        },
        "createdAt": "2017-10-11T11:24:45Z",
        "deletions": 12,
        "id": "MDExOlB1bGxSZXF1ZXN0MTQ1OTIyNDIz",
        "labels": {
            "nodes": [
                {
                    "color": "0052cc",
                    "id": "MDU6TGFiZWw5ODI3OTE3Nw==",
                    "name": "RPC/REST/ZMQ"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "CONFLICTING",
        "mergedAt": null,
        "number": 11485,
        "state": "OPEN",
        "title": "Add `available` field to listwallets RPC",
        "updatedAt": "2018-01-08T22:11:50Z"
    },
    {
        "additions": 117,
        "author": {
            "avatarUrl": "https://avatars3.githubusercontent.com/u/226170?v=4",
            "login": "mess110",
            "url": "https://github.com/mess110"
        },
        "body": "Relates to #7734\r\n\r\n![image](https://user-images.githubusercontent.com/226170/33406640-8ea700c6-d576-11e7-9d69-fde9a696c219.png)\r\n\r\nPlease ignore the wrong alpha in the screenshot, I couldn't get the screenshot alpha right :(\r\n\r\nI plan to extend this feature in future PRs to include:\r\n\r\n- custom Tor icon\r\n- clickable icon which opens network settings\r\n\r\nOld proposals, dropped in favor of current\r\n\r\n![image](https://user-images.githubusercontent.com/226170/32688635-979ef690-c6dd-11e7-8869-49da7e0f0a11.png)\r\n![proxy_preview](https://user-images.githubusercontent.com/226170/31521305-99c43f22-afb1-11e7-9daf-d1ed6347daa8.png)\r\n![image](https://user-images.githubusercontent.com/226170/31680585-72706098-b37d-11e7-88ad-028c4c723f42.png)",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/1095675?v=4",
                        "login": "luke-jr"
                    },
                    "body": "Hmm, a fixed icon that is disabled/enabled doesn't extend well to a tri-state when Tor is added. But that can be deferred until adding Tor I guess.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMzNjI3NzczNA==",
                    "publishedAt": "2017-10-12T21:30:29Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11491#issuecomment-336277734"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
                        "login": "promag"
                    },
                    "body": "@luke-jr We can have an icon for each state no?",
                    "id": "MDEyOklzc3VlQ29tbWVudDMzNjM5MTUwNg==",
                    "publishedAt": "2017-10-13T08:51:08Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11491#issuecomment-336391506"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/3211283?v=4",
                        "login": "MeshCollider"
                    },
                    "body": "I'm unsure, but does this also need a mention in `contrib/debian/copyright`?",
                    "id": "MDEyOklzc3VlQ29tbWVudDMzNjM5NzcyNg==",
                    "publishedAt": "2017-10-13T09:16:01Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11491#issuecomment-336397726"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/226170?v=4",
                        "login": "mess110"
                    },
                    "body": "@promag @MeshCollider Thanks for the reviews. If you think the remaining nits are very important, I can change them.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMzNjQ5ODQ3NQ==",
                    "publishedAt": "2017-10-13T16:14:57Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11491#issuecomment-336498475"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "Concept ACK.\r\nWould prefer if we could use an icon from http://s-ings.com/typicons/.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMzNjU4MzQ3Ng==",
                    "publishedAt": "2017-10-13T22:37:23Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11491#issuecomment-336583476"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/8447873?v=4",
                        "login": "wodry"
                    },
                    "body": "First seeing the icon I was confused, meaning was not intuitive for me.\r\nThe icon in the screenshot is so small, I hardly could imagine what the downgoing line is.\r\nIcon looked more like a star.\r\nBut looking at the bigger icon on https://openclipart.org/detail/190624/load-balancer I could finally see that the icon visualizes  \"technically\" correct.\r\nSince You said that You did several searches and ended up with this, I guess it's OK, the user can learn about the meaning and get used to it.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMzNjYwNDkyMw==",
                    "publishedAt": "2017-10-14T02:54:54Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11491#issuecomment-336604923"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/226170?v=4",
                        "login": "mess110"
                    },
                    "body": "@wodry guess I wasn't 100% clear. I attempted to construct a proxy icon from 3 copies of https://github.com/bitcoin/bitcoin/blob/master/src/qt/res/icons/debugwindow.png but it was too much to fit in the space and the icon ended up looking too different from the others. So I chose the icon you see because it fits and is public domain\r\n\r\n@jonasschnelli I checked the link you provided. Indeed it would be nice to include from the same set, but I couldn't find one that matches. Imo, the current icon is better. However, here are a few long shots:\r\n\r\n- flow merge\r\n- group\r\n- pinterest (as in Proxy - lol)\r\n- world",
                    "id": "MDEyOklzc3VlQ29tbWVudDMzNjY1MjEzNA==",
                    "publishedAt": "2017-10-14T17:53:59Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11491#issuecomment-336652134"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "Tested a bit:\r\n* The icon seems hard to grasp what it is (already mentioned).\r\n* IMO the icon should only be visible when proxy is enabled (not faded out, completely invisible)\r\n* Clicking on the icon should open settings and showing the network/proxy tab",
                    "id": "MDEyOklzc3VlQ29tbWVudDMzNjY4NTMwMw==",
                    "publishedAt": "2017-10-15T04:17:36Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11491#issuecomment-336685303"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/226170?v=4",
                        "login": "mess110"
                    },
                    "body": "![image](https://user-images.githubusercontent.com/226170/31680585-72706098-b37d-11e7-88ad-028c4c723f42.png)\r\n\r\nThe new icon is made from 3 device-desktop and 1 rotated chevron from http://s-ings.com/typicons/\r\n\r\nAfter talking with @jonasschnelli, I will do the clickable icon in a different PR.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMzNzMxOTA2NQ==",
                    "publishedAt": "2017-10-17T18:10:32Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11491#issuecomment-337319065"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/1530283?v=4",
                        "login": "rebroad"
                    },
                    "body": "I think it only makes sense to have this as an icon if the proxy is enableable/disableable from the GUI - otherwise, why? Why not have icons for various things, e.g. bloom filters enabled too then?",
                    "id": "MDEyOklzc3VlQ29tbWVudDMzNzMyODMyNA==",
                    "publishedAt": "2017-10-17T18:40:48Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11491#issuecomment-337328324"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/226170?v=4",
                        "login": "mess110"
                    },
                    "body": "@promag yea, I agree, the icon needs improving. Will come up with something better",
                    "id": "MDEyOklzc3VlQ29tbWVudDMzOTM5MjUxNw==",
                    "publishedAt": "2017-10-25T16:39:23Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11491#issuecomment-339392517"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/10217?v=4",
                        "login": "Sjors"
                    },
                    "body": "The icons at the bottom are already quite confusing. Some allow the user to take action (e.g. BTC), another does not allow action and never chances (HD). The network icon allows the user to take action, but unlike the BTC icon doesn't first show a dropdown menu, but instead disables your network without warning. \r\n\r\n<img width=\"93\" alt=\"schermafbeelding 2017-11-09 om 12 42 07\" src=\"https://user-images.githubusercontent.com/10217/32603828-78e93654-c54b-11e7-9823-006bce913a49.png\">\r\n\r\nInstead of adding another icon, I suggest turning the connection icon into something that opens a dialog, where you inspect and change network settings (including disconnecting, using a proxy or tor). The shape or color of the icon could give a hint as to the current state (e.g. green for Tor), but once the user clicks on it they would get the full information. That way the icon doesn't need to be perfect.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0MzEzMTc2Ng==",
                    "publishedAt": "2017-11-09T11:49:36Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11491#issuecomment-343131766"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/1095675?v=4",
                        "login": "luke-jr"
                    },
                    "body": "I wonder if a small \"P\" (and later \"T\" for Tor) in the connection icon would do the trick...",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0MzQ5NDk4Ng==",
                    "publishedAt": "2017-11-10T14:58:00Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11491#issuecomment-343494986"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/226170?v=4",
                        "login": "mess110"
                    },
                    "body": "I updated the proposal to use an icon form http://s-ings.com/typicons/ as @jonasschnelli suggested (decided to try this instead of creating an svg with P in it - curious about feedback). The set also contains a `t` icon for future Tor PR.\r\n\r\n@Sjors yea, the icons can be a bit confusing. This is why in the first version of this PR, I created proxy enabled/disabled similar to how the network icon behaves. However, each icon has slightly different behavior and needs. I think the security benefit of seeing the proxy icon is worth it though.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0MzY1NjMwMg==",
                    "publishedAt": "2017-11-11T10:50:15Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11491#issuecomment-343656302"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/1095675?v=4",
                        "login": "luke-jr"
                    },
                    "body": "This indicates proxy for me, even though I don't use a proxy (but I have Tor enabled with `-onion`).",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0MzY3ODYyMg==",
                    "publishedAt": "2017-11-11T17:02:01Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11491#issuecomment-343678622"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/1095675?v=4",
                        "login": "luke-jr"
                    },
                    "body": "> I wonder if a small \"P\" (and later \"T\" for Tor) in the connection icon would do the trick...\r\n\r\nImplemented this. It's too small. :(",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0MzY3OTczNQ==",
                    "publishedAt": "2017-11-11T17:19:11Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11491#issuecomment-343679735"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "> I think the security benefit of seeing the proxy icon is worth it though.\r\n\r\nI tend to agree. Let's be pragmatic about ACKing this when the functionality works, aesthetics can always be improved later.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0Mzg5OTgxNA==",
                    "publishedAt": "2017-11-13T12:06:35Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11491#issuecomment-343899814"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "The current P icon is probably the \"Pintrest\" logo. Feels wrong. But agree, lets try to separate functionality and aesthetics.\r\n@mess110: maybe rebase, make a pure \"P\" icon (just a default font). This PR should not go under in icon discussions.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0ODAzMzQ0Ng==",
                    "publishedAt": "2017-11-29T23:37:43Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11491#issuecomment-348033446"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/226170?v=4",
                        "login": "mess110"
                    },
                    "body": "@jonasschnelli agree and thanks. I rebased and added a proxy icon (as a simple P)\r\n\r\nShould have some time over the weekend to do the \"T\" for Tor",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0ODA0NDQyOA==",
                    "publishedAt": "2017-11-30T00:38:39Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11491#issuecomment-348044428"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "The \"T\" (tor) indicator may be more complicated. A false indication can be fatal... and unsure how to reliable detect if we are connecting via TOR ",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0ODA0ODA2Mw==",
                    "publishedAt": "2017-11-30T00:59:18Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11491#issuecomment-348048063"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/1095675?v=4",
                        "login": "luke-jr"
                    },
                    "body": "> This indicates proxy for me, even though I don't use a proxy (but I have Tor enabled with -onion).\r\n\r\nReminder this bug persists (but in theory can be easiest solved by having the Tor icon).",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0ODA1MTMxNA==",
                    "publishedAt": "2017-11-30T01:16:31Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11491#issuecomment-348051314"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/226170?v=4",
                        "login": "mess110"
                    },
                    "body": "The way I was thinking of detecting if Tor is enabled is if the n variable from https://github.com/bitcoin/bitcoin/pull/11491/files#diff-2c51f64a3430117d2f6c7cb55355be66R343 is equal to https://github.com/bitcoin/bitcoin/blob/master/src/netaddress.h#L24 (in this case 3).\r\n\r\nWould that be enough?\r\n\r\nIf not, for this PR I can just check that all n are set which does not happen for -onion (thx @luke-jr for the tip)",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0ODA1MzYxMw==",
                    "publishedAt": "2017-11-30T01:30:00Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11491#issuecomment-348053613"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/30895125?v=4",
                        "login": "lmlsna"
                    },
                    "body": "A possible kludgey check if tor is actually up and running is to just send a dummy HTTP request directly to the tor socks proxy port. If tor is running, it will politely respond with a HTTP/1.0 501 Tor is not an HTTP Proxy, if it isn't, it won't.\r\n\r\nThis misses the possibility that the tor client is running but unable to connect, however that would result in a broken connection (as opposed to an accidental clearnet connection). However, I can't think of any way to verify tor is actually working other than either asking tor-arm (which might not be there) or requesting https://check.torproject.org/ through the proxy (like the TBB does).",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0OTg2MTU0Nw==",
                    "publishedAt": "2017-12-07T04:44:11Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11491#issuecomment-349861547"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/226170?v=4",
                        "login": "mess110"
                    },
                    "body": "NET_MAX is 5. I checked to see what I get from `GetProxy` for different options:\r\n\r\n|  | 0 | 1 | 2 | 3 | 4 |\r\n| ------------- | ------------- | ------------- | ------------- | ------------- | ------------- |\r\n| with no options  | false  | false  | false  | false  | false  |\r\n| with -proxy | false | true | true | true | false |\r\n| with gui default proxy | false | true | true | true | false |\r\n| with gui separate proxy | false | false | false | true | false |\r\n| with both gui options | false | true | true | true | false |\r\n| with -onion | false | false | false | true | false |\r\n| with -onion and all gui options | false | true | true | true | false |\r\n| with -onion and gui default proxy | false | true | true | true | false |\r\n\r\nLooking at the table above, I can not reliably determine if the proxy icon should be shown by checking the return value of `GetProxy`. Any advice on how to proceed?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1MjU1Nzc2OA==",
                    "publishedAt": "2017-12-18T21:07:45Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11491#issuecomment-352557768"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/1095675?v=4",
                        "login": "luke-jr"
                    },
                    "body": "Note that the network ids aren't just arbitrary numbers - they have meanings (defined in netaddress.h).\r\n\r\nAnyhow, \"gui separate proxy\" is a Tor-specific option. So we shouldn't show \"proxy\" for that either.\r\n\r\n\"Proxy\" icon should probably only be shown if NET_IPV4 *and* NET_IPV6 have a GetProxy result.\r\n\r\nThe Tor icon might be more complicated. Ideally, clicking on it would show a popup with the hidden service address and QR Code, so mobile wallets can autoconfigure. But I guess that's out-of-scope for this PR.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1NDk3NTQxNw==",
                    "publishedAt": "2018-01-03T10:06:08Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11491#issuecomment-354975417"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/226170?v=4",
                        "login": "mess110"
                    },
                    "body": "Rebased and made sure the proxy icon is shown if NET_IPV4 *and* NET_IPV6 have a result.\r\n\r\nFor the tooltip, I am showing ToStringIPPort for NET_IPV4. I couldn't get an ipv6 to work with the -proxy argument. Also, ToStringIPPort for NET_IPV6 returns an ipv4 format.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1Nzc4NjM4NA==",
                    "publishedAt": "2018-01-15T20:51:24Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11491#issuecomment-357786384"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/226170?v=4",
                        "login": "mess110"
                    },
                    "body": "@luke-jr @promag @MeshCollider @jonasschnelli @wodry @rebroad @Sjors @laanwj @lmlsna can you please review this patch? Hope it doesn't get too buried. Thank you.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2Mzk2OTc5NA==",
                    "publishedAt": "2018-02-08T01:17:44Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11491#issuecomment-363969794"
                }
            ],
            "totalCount": 27
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "d4b6d92f53409471827cdbb7410048eccfd10347"
                    }
                }
            ],
            "totalCount": 1
        },
        "createdAt": "2017-10-12T21:24:23Z",
        "deletions": 1,
        "id": "MDExOlB1bGxSZXF1ZXN0MTQ2MzE4NzEz",
        "labels": {
            "nodes": [
                {
                    "color": "02d7e1",
                    "id": "MDU6TGFiZWwxMzU5NDY=",
                    "name": "GUI"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "number": 11491,
        "state": "OPEN",
        "title": "[gui] Add proxy icon in statusbar",
        "updatedAt": "2018-02-08T13:42:19Z"
    },
    {
        "additions": 8,
        "author": {
            "avatarUrl": "https://avatars3.githubusercontent.com/u/127186?v=4",
            "login": "ajtowns",
            "url": "https://github.com/ajtowns"
        },
        "body": "Adds a comment in the BIP9Deployment class declaration for when to set\r\nnTimeout=0, and changes the checks for (nTimeout!=0) to (nTimeout>0)\r\nfor consistency.\r\n\r\nThe remaining comparison for nTimeout is in rpc/blockchain.cpp:BIP9SoftForkDescPushBack which already checks for >0 rather than !=0.\r\n\r\nCompatible with #11389 which adds another special case behaviour (negative nStartTime) for defining \"BIP9\" deployments.",
        "closedAt": null,
        "comments": {
            "nodes": [],
            "totalCount": 0
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "313c7a4d9b5418907f6b631f3efed87e910ddaf2"
                    }
                }
            ],
            "totalCount": 1
        },
        "createdAt": "2017-10-13T07:11:54Z",
        "deletions": 5,
        "id": "MDExOlB1bGxSZXF1ZXN0MTQ2Mzg2MTkz",
        "labels": {
            "nodes": [
                {
                    "color": "009800",
                    "id": "MDU6TGFiZWwxOTIyMDIwMDA=",
                    "name": "Consensus"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "number": 11494,
        "state": "OPEN",
        "title": "Clarify BIP9 behaviour when nTimeout <= 0",
        "updatedAt": "2017-12-30T11:11:32Z"
    },
    {
        "additions": 5,
        "author": {
            "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
            "login": "promag",
            "url": "https://github.com/promag"
        },
        "body": "Replaces a comment with the actual assertion.",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "@promag This change is already in https://github.com/bitcoin/bitcoin/pull/11226/commits/4c8604e6607114fd06b9be210a25b208e9d64821 which is part of #11226 :-)",
                    "id": "MDEyOklzc3VlQ29tbWVudDMzNzI1NDY1MA==",
                    "publishedAt": "2017-10-17T14:42:50Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11515#issuecomment-337254650"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
                        "login": "promag"
                    },
                    "body": "@practicalswift removed `GUARDED_BY`, but I'm keeping the `AssertLockHeld`.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMzNzUzMDMxNQ==",
                    "publishedAt": "2017-10-18T09:49:29Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11515#issuecomment-337530315"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/649246?v=4",
                        "login": "TheBlueMatt"
                    },
                    "body": "Fails travis as DoS_Tests calls State() without cs_main.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0MjI0OTI0MA==",
                    "publishedAt": "2017-11-06T18:57:13Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11515#issuecomment-342249240"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
                        "login": "MarcoFalke"
                    },
                    "body": "@promag ping",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0MjU2NzI5Mg==",
                    "publishedAt": "2017-11-07T17:56:25Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11515#issuecomment-342567292"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "Locking added to tests in #11623 :-)",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0MjU2OTYxNQ==",
                    "publishedAt": "2017-11-07T18:03:54Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11515#issuecomment-342569615"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
                        "login": "MarcoFalke"
                    },
                    "body": "utACK afd5cd588a994ad067862652beaebe78a8d35381",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0MzUzODQ2MQ==",
                    "publishedAt": "2017-11-10T17:39:54Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11515#issuecomment-343538461"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/649246?v=4",
                        "login": "TheBlueMatt"
                    },
                    "body": "I dont know if we want to be adding new AssertLockHelds, actually. We should be adding GUARDED_BY annotations as we go, and I think just doing that here may be nice (cause merging them all in one huge #11226 probably isn't gonna happen), but AssertLockHelds dont add much of anything if we're already checking it at compile/travis-time.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0MzUzOTYwNg==",
                    "publishedAt": "2017-11-10T17:44:52Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11515#issuecomment-343539606"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "@promag Can you add the annotation please?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1MDk4Nzc3Mw==",
                    "publishedAt": "2017-12-12T09:01:45Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11515#issuecomment-350987773"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
                        "login": "promag"
                    },
                    "body": "Rebased and updated.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1MTAzNDIxMQ==",
                    "publishedAt": "2017-12-12T12:13:17Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11515#issuecomment-351034211"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "utACK 8f2616cf99d1e0b573f647cd45ee87fba1c969e9\r\n\r\nYay for annotations!",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1MTA4ODU2NQ==",
                    "publishedAt": "2017-12-12T15:38:05Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11515#issuecomment-351088565"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
                        "login": "promag"
                    },
                    "body": "Adding the annotations breaks the build, which #11226 already takes care of. Rebasing on top of that results only in the assert, which is what was initially.\r\n\r\n@laanwj wdyt?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1MTExMTE2Mg==",
                    "publishedAt": "2017-12-12T16:47:00Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11515#issuecomment-351111162"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/649246?v=4",
                        "login": "TheBlueMatt"
                    },
                    "body": "@promag the annotations are required to be applied recursively. Any function that calls State() must either LOCK(cs_main) prior to the call, or be marked with EXCLUSIVE_LOCKS_REQUIRED(cs_main) itself (and then its callers must LOCK(cs_main)). That's the magic of the new annotations - you get notified by travis for (the simple cases of) missing locks!",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1MTE1NTI0Mw==",
                    "publishedAt": "2017-12-12T19:00:58Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11515#issuecomment-351155243"
                }
            ],
            "totalCount": 12
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "8f2616cf99d1e0b573f647cd45ee87fba1c969e9"
                    }
                }
            ],
            "totalCount": 1
        },
        "createdAt": "2017-10-17T14:10:53Z",
        "deletions": 4,
        "id": "MDExOlB1bGxSZXF1ZXN0MTQ3MDUwMTQ0",
        "labels": {
            "nodes": [
                {
                    "color": "006b75",
                    "id": "MDU6TGFiZWw5ODI5ODAwNw==",
                    "name": "P2P"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "number": 11515,
        "state": "OPEN",
        "title": "Assert cs_main is held when retrieving node state",
        "updatedAt": "2017-12-30T11:11:33Z"
    },
    {
        "additions": 365,
        "author": {
            "avatarUrl": "https://avatars0.githubusercontent.com/u/886523?v=4",
            "login": "JeremyRubin",
            "url": "https://github.com/JeremyRubin"
        },
        "body": "This PR is a refactor only (i.e., any functional changes should be reported in review) which does the following:\r\n\r\n- Replace `state.DoS` with more descriptive calls where straightforward.  Rather than just call DoS or Invalid, different causes of invalidity have different functions. This makes it easier to quickly find all related causes of that class of error.\r\n- Convert all `nDoS` usage to an enum class with named levels (none 0, low 1, medium 10, elevated 20, high 50, and critical 100)\r\n- Use a custom enum class for reporting corruption to make it more clear where corruption occurs\r\n- return false directly from `CValidtationState` update call sites. state.DoS never returns true, so it makes it easier to see that the return value is not dependent on the call.\r\n- Don't pass `error()` as an argument to a function in DoS. error always returns false, and this is confusing for readers/reviewers.\r\n\r\n\r\nIf anyone is interested, there's an unsquashed version too, but I figured this is simple enough to review squashed. \r\n\r\nThe only code quality 'decrease' is that some reject codes move from `validation.h` to `consensus/validation.h`. This abstraction barrier violation is already present (the `CValidationState` class is expected to handle those reject codes appropriately) so I think that this change is a lesser evil.\r\n\r\n\r\n\r\n\r\nMotivation \r\n===\r\nI'm currently working on reworking the separation between reporting errors and DoS. As a first step in this process, I've cleaned up the interface without making any functional changes or major architecture changes. The resulting code should be easier to read and review changes to. The future plan to split `CValidationState` up into ~3 different subclasses (one to handle DoS, one to handle consensus correctness, and one to handle system errors) and then migrate the DoS completely to `net_processing.cpp`. This is a superior architecture because it better respects the boundaries between events on the network and faults in validation. I decided to start with this PR because I think it is an low hanging fruit immediate improvement independent of further modularization efforts.\r\n\r\n\r\n\r\nThanks to @ryanofsky and @TheBlueMatt for feedback on an earlier version of this PR.",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/886523?v=4",
                        "login": "JeremyRubin"
                    },
                    "body": "@promag Thanks for the review!\r\n\r\nI like your suggestion returning the class and calling modifiers on it -- not a fan of the use of default arguments -- but I think that it adds a bit more complexity to this patch that I'd like to avoid because I think that it makes it more difficult for future PRs working to separate this interface further.\r\n\r\nThe reason why I didn't do an `operator bool` is that we never return anything but false, so I think that it is more straightforward to return the literal `false` from the callsite, even if it is a little bit more verbose.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMzNzc3NzY1Nw==",
                    "publishedAt": "2017-10-19T02:00:02Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11523#issuecomment-337777657"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/10217?v=4",
                        "login": "Sjors"
                    },
                    "body": "Thanks, `state.BadTx` instead of `state.DoS` and `DoS_SEVERITY::MEDIUM` instead of `10` made things more readable to me.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMzODE3NTM2MQ==",
                    "publishedAt": "2017-10-20T11:00:01Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11523#issuecomment-338175361"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/5470?v=4",
                        "login": "Empact"
                    },
                    "body": "My 2 cents, just ideas and opinions:\r\n* Returning false everywhere is duplicative. Imo returning from DoS as before is better as those extra lines have cost.\r\n* The CorruptionPossible enum/bool seems like a smell to me - if an enum is playing the role of a bool, why not a bool? If a bool isn\u2019t clear, why not another construct?\r\n* I like the severity level enum\r\n* I don\u2019t like that the severity param is buried as the last argument, IME severity make sense as a leading param or even the method name. Compare with log level apis.\r\n* I doubt making methods for each case is the way to go. There are a few independent variables here and ones with fewer, more stable values tend to make for better / more stable codebases. Consider severity or corruption / not corruption as alternatives.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2MzY4MzU0Ng==",
                    "publishedAt": "2018-02-07T07:43:17Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11523#issuecomment-363683546"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/413395?v=4",
                        "login": "dcousens"
                    },
                    "body": "concept ACK",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2MzkwNjA5Mw==",
                    "publishedAt": "2018-02-07T20:50:48Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11523#issuecomment-363906093"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/886523?v=4",
                        "login": "JeremyRubin"
                    },
                    "body": "@Empact, thanks for the review. \r\n\r\nThe motivation for the code changes I made is that the DoS code should eventually be *completely* relegated to a net_processing construct, whereas the _validity_ code should be handled in the validation. So the goal is to make the code in validation.h as abstract as possible and descriptive of what went wrong, providing a reason, rather than ascribing a Denial of Service level. \r\n\r\nThe extra lines for 'return false' don't have cost other than LoC, and the impact there is minimal. What they do help with is stricter modularization boundaries (should failure-reason code be returning information on validity?). Also returning a value from a function that always returns false is kind of stupid and makes the code harder to read.\r\n\r\nI'm indifferent on severity levels ordering.  \r\n\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2Mzk3NTI2OA==",
                    "publishedAt": "2018-02-08T01:47:36Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11523#issuecomment-363975268"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/5470?v=4",
                        "login": "Empact"
                    },
                    "body": "Fair enough. For severity levels, if you're indifferent I'd default to maintaining consistency with the prior behavior, which is using them as the leading param.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NDI1NTA1NA==",
                    "publishedAt": "2018-02-08T21:32:16Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11523#issuecomment-364255054"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/886523?v=4",
                        "login": "JeremyRubin"
                    },
                    "body": "Hmm... now that I've thought about it a bit again, I think there is value to having it be last... because with the current API we're focusing on describing what happened, not how we should treat it for DoS. Eventually, the severity param could be completely dropped, because in validity there is only a notion of valid or invalid, and not 'how invalid' something was.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NDMwODEwNA==",
                    "publishedAt": "2018-02-09T01:38:06Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11523#issuecomment-364308104"
                }
            ],
            "totalCount": 7
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "863748bdd99f37d655921ba220705cf0bec107fd"
                    }
                }
            ],
            "totalCount": 1
        },
        "createdAt": "2017-10-19T00:51:32Z",
        "deletions": 198,
        "id": "MDExOlB1bGxSZXF1ZXN0MTQ3NDQ0ODE1",
        "labels": {
            "nodes": [
                {
                    "color": "E6F6D6",
                    "id": "MDU6TGFiZWwxMzU5NjE=",
                    "name": "Refactoring"
                },
                {
                    "color": "6060aa",
                    "id": "MDU6TGFiZWwxMTgzNzk2NTI=",
                    "name": "Validation"
                }
            ],
            "totalCount": 2
        },
        "mergeable": "CONFLICTING",
        "mergedAt": null,
        "number": 11523,
        "state": "OPEN",
        "title": "[Refactor] CValidation State",
        "updatedAt": "2018-02-09T01:38:06Z"
    },
    {
        "additions": 4742,
        "author": {
            "avatarUrl": "https://avatars0.githubusercontent.com/u/197660?v=4",
            "login": "sipsorcery",
            "url": "https://github.com/sipsorcery"
        },
        "body": "This PR allows Bitcoin Core to be relatively easily built with Visual Studio 2017. It's anticipated that it could be useful for devs familiar with Visual Studio and Microsoft's tooling. In particular the ability to use the VS debugger is a big benefit.\r\n\r\n~~Caveats:~~\r\n- ~~There are some minor code changes required on Bitcoin Core in order for msvc to be able to successfully compile. I'll submit them in a separate PR, The code changes are available in #11528 #11558 and #11562~~.\r\n- ~~The vcpkg for SECP256K1 has not yet been accepted by Microsoft. The files are available from this [PR](https://github.com/Microsoft/vcpkg/pull/2005) and should be copied into a vcpkg/ports/secp256k1 directory prior to vcpkg install steps.~~\r\n\r\n**Update:** For anyone wishing to test out the Visual Studio build with the various open pull requests the steps are:\r\n\r\n- Clone and build [Vcpkg](https://github.com/Microsoft/vcpkg) (Microsoft's new open source C/C++ package manager)\r\n    - git clone https://github.com/Microsoft/vcpkg\r\n    - .\\bootstrap-vcpkg.bat\r\n- Set up Visual Studio to automatically reference vcpkg installs: .\\vcpkg integrate install\r\n- Install the required packages (replace x86 with x64 as required):\r\n    - vcpkg install boost:x86-windows-static\r\n    - vcpkg install libevent:x86-windows-static\r\n    - vcpkg install openssl:x86-windows-static\r\n    - vcpkg install zeromq:x86-windows-static\r\n    - vcpkg install berkeleydb:x86-windows-static\r\n    - vcpkg install secp256k1:x86-windows-static\r\n    - vcpkg install leveldb:x86-windows-static\r\n- git clone https://github.com/bitcoin/bitcoin.git\r\n- git checkout -b testbuild\r\n- git pull origin pull/11526/head # Visual Studio build configuration for Bitcoin Core\r\n- ~~git pull origin pull/11558/head # Minimal code changes to allow msvc compilation~~\r\n- ~~git pull origin pull/11562/head # bench: use std::chrono rather than gettimeofday~~\r\n- ~~Copy and unzip attached bitcoin-config.h to src/config, edit as required [bitcoin-config.zip](https://github.com/bitcoin/bitcoin/files/1429484/bitcoin-config.zip)~~\r\n- git pull origin pull/13031/head # gmtime fix for msvc\r\n- Build the Visual Studio solution which, if successful, will result in all but the Qt dependent libraries/programs being built. If the build fails please add a comment.\r\n",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "Concept ACK, this is much-requested.\r\n\r\nHowever IMO to be accepted upstream this needs committed maintenance, not just a one-time drop. Will you maintain this in the future when new files are added? It's bound to break from time to time with build updates (most of us are not able to use this).",
                    "id": "MDEyOklzc3VlQ29tbWVudDMzNzg5NTAzOQ==",
                    "publishedAt": "2017-10-19T12:41:05Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11526#issuecomment-337895039"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/548488?v=4",
                        "login": "sipa"
                    },
                    "body": "Also, is there a way to have Travis do an MSVC build? That could make sure that the configuration doesn't bitrot.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMzNzg5NTQ3Mg==",
                    "publishedAt": "2017-10-19T12:43:01Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11526#issuecomment-337895472"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "> Also, is there a way to have Travis do an MSVC build? That could make sure that the configuration doesn't bitrot.\r\n\r\nMaybe. I disagree that keeping the MSVC build up to date should be required for merging anything; this would require everyone that changes things to keep MSVC up to date, which most are not able to do because they do not run that platform.\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDMzNzg5NzEyMg==",
                    "publishedAt": "2017-10-19T12:49:37Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11526#issuecomment-337897122"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "I'm not sure if we should include this in the main repository. We had similar discussions in https://github.com/bitcoin/bitcoin/pull/5276 (Xcode project).\r\nAFAIK, those \"project files\" tend to get outdated very fast. IMO the authors of MSVC and Xcode do not take too much care about backwards compatibility of their file formats...\r\nAlso, merging this may lead to someone trying to include a CMake or XCode project.\r\n\r\nI'd prefer an external gist/repository and maybe a link to that project (easier to remove if outdated).",
                    "id": "MDEyOklzc3VlQ29tbWVudDMzNzk5OTkxNQ==",
                    "publishedAt": "2017-10-19T18:41:46Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11526#issuecomment-337999915"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/3211283?v=4",
                        "login": "MeshCollider"
                    },
                    "body": "Hmm the whitespace lint checker is going crazy, it might need some modifications because its pretty hard to me to see what its catching here\r\n\r\nEdit: there's definitely some tab characters mixed up in there, maybe that's the problem\r\n\r\nEdit 2: Nope there's definitely a lot of trailing whitespace too, looks like its working fine, there's just a lot to process. Might want to do a regex find and replace to save yourself doing it manually :)",
                    "id": "MDEyOklzc3VlQ29tbWVudDMzODEwNDc2NQ==",
                    "publishedAt": "2017-10-20T04:44:22Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11526#issuecomment-338104765"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/197660?v=4",
                        "login": "sipsorcery"
                    },
                    "body": "@MeshCollider I'm tracking down the lint failure. I've already removed all tabs and trimmed all end of line whitespace with sed. Looks like there's a rule somewhere that requires certain types of files to have end of line as the last character. Will keep digging.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMzODExMTYxNQ==",
                    "publishedAt": "2017-10-20T05:45:15Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11526#issuecomment-338111615"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
                        "login": "MarcoFalke"
                    },
                    "body": "@sipsorcery When saving the file in your editor, choose \"Linux encoding\" instead of \"Windows encoding\" for new lines.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMzODEyNDEzNg==",
                    "publishedAt": "2017-10-20T07:07:26Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11526#issuecomment-338124136"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/197660?v=4",
                        "login": "sipsorcery"
                    },
                    "body": "No '\\r|\\t' are in the diff patch now so hopefully lint will be happy.\r\n\r\nIf this PR does go through there will be an issue with the lint rules. In my troubleshooting I've discovered Visual Studio will add tab characters into a solution (.sln) file whenever it's opened. It possibly does the same for it's other .vcproj, .vcxproj.user and .vcxproj.filters files as well although it didn't during my quick testing.\r\n\r\nI could add a new rule to contrib/devtools/lint-whitespace.sh for these file types but I think I'll leave it until a decision on this PR is made.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMzODEzMjY3Mw==",
                    "publishedAt": "2017-10-20T07:49:37Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11526#issuecomment-338132673"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/197660?v=4",
                        "login": "sipsorcery"
                    },
                    "body": "@laanwj \r\n\r\n> However IMO to be accepted upstream this needs committed maintenance, not just a one-time drop. Will you maintain this in the future when new files are added? It's bound to break from time to time with build updates (most of us are not able to use this).\r\n\r\nYes. \r\n\r\nIf the VS build config gets added I will commit to maintaining it for a minimum of 3 years (end of 2020) excepting death, disability etc. As character assessment I've been an open source contributor since the early noughties: sourceforge, codeplex, bitbucket, github etc; no project highlights that will impress you guys but the relevant point is that I'm capable of hanging around.\r\n\r\nI'd also expect the VS config to become popular in a short space of time which would reduce the maintenance burden. ",
                    "id": "MDEyOklzc3VlQ29tbWVudDMzODE2MzAzOQ==",
                    "publishedAt": "2017-10-20T10:00:22Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11526#issuecomment-338163039"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "@sipsorcery \r\n\r\nIs there some tool to generate the `vcxproj`, `vcxproj.filters` and `sln` files programmatically from an easy-to-read text format that allows for easy tracking over time?\r\n\r\nThe very verbose XML build files contain a lot of duplication and random artifacts, so the same data should be possible to represent in a much more compact and human friendly way.\r\n\r\nThe following files 34 files are quite hard to reason about and/or review in detail due to the large amount of redundancy and general verbosity:\r\n\r\n```\r\nbuild_msvc/bench_bitcoin/bench_bitcoin.vcxproj\r\nbuild_msvc/bench_bitcoin/bench_bitcoin.vcxproj.filters\r\nbuild_msvc/bitcoin-cli/bitcoin-cli.vcxproj\r\nbuild_msvc/bitcoin-tx/bitcoin-tx.vcxproj\r\nbuild_msvc/bitcoin-tx/bitcoin-tx.vcxproj.filters\r\nbuild_msvc/bitcoin.sln\r\nbuild_msvc/bitcoind/bitcoind.vcxproj\r\nbuild_msvc/bitcoind/bitcoind.vcxproj.filters\r\nbuild_msvc/libbitcoin_cli/libbitcoin_cli.vcxproj\r\nbuild_msvc/libbitcoin_cli/libbitcoin_cli.vcxproj.filters\r\nbuild_msvc/libbitcoin_common/libbitcoin_common.vcxproj\r\nbuild_msvc/libbitcoin_common/libbitcoin_common.vcxproj.filters\r\nbuild_msvc/libbitcoin_crypto/libbitcoin_crypto.vcxproj\r\nbuild_msvc/libbitcoin_crypto/libbitcoin_crypto.vcxproj.filters\r\nbuild_msvc/libbitcoin_qt/libbitcoin_qt.vcxproj\r\nbuild_msvc/libbitcoin_qt/libbitcoin_qt.vcxproj.filters\r\nbuild_msvc/libbitcoin_server/libbitcoin_server.vcxproj\r\nbuild_msvc/libbitcoin_server/libbitcoin_server.vcxproj.filters\r\nbuild_msvc/libbitcoin_util/libbitcoin_util.vcxproj\r\nbuild_msvc/libbitcoin_util/libbitcoin_util.vcxproj.filters\r\nbuild_msvc/libbitcoin_wallet/libbitcoin_wallet.vcxproj\r\nbuild_msvc/libbitcoin_wallet/libbitcoin_wallet.vcxproj.filters\r\nbuild_msvc/libbitcoin_zmq/libbitcoin_zmq.vcxproj\r\nbuild_msvc/libbitcoin_zmq/libbitcoin_zmq.vcxproj.filters\r\nbuild_msvc/libbitcoinconsensus/libbitcoinconsensus.vcxproj\r\nbuild_msvc/libleveldb/libleveldb.vcxproj\r\nbuild_msvc/libleveldb/libleveldb.vcxproj.filters\r\nbuild_msvc/libunivalue/libunivalue.vcxproj\r\nbuild_msvc/libunivalue/libunivalue.vcxproj.filters\r\nbuild_msvc/test_bitcoin-qt/test_bitcoin-qt.vcxproj\r\nbuild_msvc/test_bitcoin-qt/test_bitcoin-qt.vcxproj.filters\r\nbuild_msvc/test_bitcoin/test_bitcoin.vcxproj\r\nbuild_msvc/test_bitcoin/test_bitcoin.vcxproj.filters\r\nbuild_msvc/testconsensus/testconsensus.vcxproj\r\n```",
                    "id": "MDEyOklzc3VlQ29tbWVudDMzODIwMjI4MQ==",
                    "publishedAt": "2017-10-20T13:12:52Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11526#issuecomment-338202281"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "> Is there some tool to generate the vcxproj, vcxproj.filters and sln files programmatically from an easy-to-read text format that allows for easy tracking over time?\r\n\r\n[cmake](https://cmake.org/) can do that. Though I'm not sure about easy-to-read. Well easier to read than XML files, I guess. But I don't think adding an indirection step makes sense unless we'd use cmake as main build system, and that's certainly not planned and would probably piss of @theuni.\r\nThese files aren't really meant for reading, it's just the internal configuration of a GUI program.\r\n\r\n> If the VS build config gets added I will commit to maintaining it for a minimum of 3 years (end of 2020) excepting death, disability etc. As character assessment I've been an open source contributor since the early noughties: sourceforge, codeplex, bitbucket, github etc; no project highlights that will impress you guys but the relevant point is that I'm capable of hanging around.\r\n\r\nThanks. That's good enough for me :) You have the motiviation. You can never know for sure what happens in the future.\r\n\r\n@jonasschnelli \r\n> I'd prefer an external gist/repository and maybe a link to that project (easier to remove if outdated).\r\n\r\nMaybe - though it's easier for it to get lost in that case. There are AFAIK already tries at separate repositories with MSVC changes and build system, but they always get stuck at a certain version. Having it in the main repository is more of a incentive to keep it up to date. Probably.\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDMzODIwNzA0NA==",
                    "publishedAt": "2017-10-20T13:30:37Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11526#issuecomment-338207044"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "> Maybe - though it's easier for it to get lost in that case. There are AFAIK already tries at separate repositories with MSVC changes and build system, but they always get stuck at a certain version. Having it in the main repository is more of a incentive to keep it up to date. Probably.\r\n\r\nIf we do go that route with a separate repository, we should create an 'official' repository under bitcoin-core at least instead of it only existing on some user's account.\r\n\r\nAn added advantage is that we can add @sipsorcery as committer. Delegating access is easier with separate repositories.\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDMzODIwODUxNg==",
                    "publishedAt": "2017-10-20T13:35:47Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11526#issuecomment-338208516"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "@laanwj I'm also thinking in terms of reproducibility. Adding 34 files to the main Bitcoin repo with a lot of redundancy (between files and within each file) that cannot be created from scratch using widely available free tools doesn't feel quite right (almost like having some magic binary blob in the repo!) :-)  I suggest we go with an approach that makes changes to the build process (read diffs) easy to reason about.\r\n\r\nThis is an approach taken by another project - a simple shell script generating the files largely from what is already in the repo: https://github.com/robotdad/vclinux/blob/master/bash/genvcxproj.sh\r\n\r\nOn the other hand if this is not part of the main repo then perhaps we can have a lower bar with regards to readability/reproducibility/understandability/reviewability :-)",
                    "id": "MDEyOklzc3VlQ29tbWVudDMzODIxMDgyOQ==",
                    "publishedAt": "2017-10-20T13:44:56Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11526#issuecomment-338210829"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "> We need an approach that makes changes to the build process (read diffs) easy to reason about.\r\n\r\nSure, that would be good, but the primary goal here is to make it easier for windows developers to build. And having to run a bash script isn't contributing to that.\r\n\r\nEdit: THough we could have a generation script that is automatically run before releases, so the actual vcproj files would be part of the tarball but never the repository. Only developers using checkouts from git would then be required to run it themselves.\r\n\r\n> On the other hand if this is not part of the main repo then perhaps we can have a lower bar with regards to readability/reproducibility/understandability/reviewability :-)\r\n\r\nOk that would be another argument for having a separate repo.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMzODIxMTY5Nw==",
                    "publishedAt": "2017-10-20T13:48:05Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11526#issuecomment-338211697"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "@laanwj I thought `bash` was widely available in Windows land these days thanks to the Windows Subsystem for Linux (WSL), but perhaps it is not yet as widely used as I thought :-) ",
                    "id": "MDEyOklzc3VlQ29tbWVudDMzODIxNDkxNw==",
                    "publishedAt": "2017-10-20T13:59:51Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11526#issuecomment-338214917"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "@laanwj Good point about scripted generation that is automatically run before releases. Seems like a good solution!",
                    "id": "MDEyOklzc3VlQ29tbWVudDMzODIxNTcwNw==",
                    "publishedAt": "2017-10-20T14:02:41Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11526#issuecomment-338215707"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/197660?v=4",
                        "login": "sipsorcery"
                    },
                    "body": "Attempting to generate the Visual Studio project files using a custom shell script will be a journey down the rabbit hole. Yes you might get a more succinct representation but maintaining the script would be a much larger burden.\r\n\r\nThe only viable approach I know of is to use cmake but even then you'll lose some devs due to the extra steps required. And while cmake is an excellent tool it does generate a lot of redundant configuration information in its VS config.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMzODMyNzY2Mw==",
                    "publishedAt": "2017-10-20T21:33:48Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11526#issuecomment-338327663"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/3020646?v=4",
                        "login": "NicolasDorier"
                    },
                    "body": "@sipsorcery this is not needed actually, you can get pretty good result by using file pattern matching in the vxproj, See https://pastebin.com/W4xmuXxy (look the ClCompile and ClInclude)\r\n\r\nMy workflow is using this csproj, and I compile through docker (shared volume with the source code).\r\nThis work quite well.\r\n\r\nI advise you to use such system, as it considerably make maintenance easier. (no need to keep in sync with bitcoin core makefile)\r\n\r\nIf there is interest to go that path, I can cleanup what I am using and commit to core.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMzODM3MTg5MA==",
                    "publishedAt": "2017-10-21T07:34:52Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11526#issuecomment-338371890"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/197660?v=4",
                        "login": "sipsorcery"
                    },
                    "body": "@NicolasDorier my assumption was that the preference would be to match the VS projects to the existing makefiles but that's probably not a particularly strong reason.\r\n\r\nThere are pros and cons to multiple projects compared to a single, or fewer, larger ones. And if you wanted all the .exe applications (bench_bitcoin, bitcoin-cli, bitcoind, bitcoin-tx, test_bitcoin) you'd still need a separate project. And at a minimum I'd recommend the Qt related source files be excluded as since when the pre-processsing steps (protoc, bincc, moc, uic, lrelease) are invoked it can take a looong time. \r\n\r\nI think the following projects \"could\" be safely consolidated if people thought it was a good idea: \r\n\r\n- libunivalue \r\n- libleveldb \r\n- libbitcoin_zmp\r\n- libbitcoinwallet\r\n- libbitcoin_util\r\n- libbitcoin_server \r\n- libbitcoin_crypto \r\n- libbitcoin_common\r\n- libbitcoin_cli\r\n\r\nMy vote is for a modular approach that mirrors the existing makefiles. Ultimately though I'd be happy with any VS build config in the bitcoin or bitcoin-core repos that empowers us poor MS devs with our emancipated command line skills.\r\n\r\nI will go ahead and remove the .vcxproj.filters files as they are only used to layout the source files in each project and given the concerns about verbosity can safely be omitted.\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDMzODM3Nzc3MQ==",
                    "publishedAt": "2017-10-21T09:19:15Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11526#issuecomment-338377771"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/3020646?v=4",
                        "login": "NicolasDorier"
                    },
                    "body": "I am neutral on this. I only tried C++ dev with the vcxproj using wildcard.\r\nWith this you can see instantly any error, pretty good auto completion, and good indexation of symbols \r\n for fast browsing which is all I ask for. I will try your way, maybe it is better.\r\n\r\nBtw, VS2017 support GDB debugging on linux. There might even be a way for us to get the interactive debugging inside VS.  (out of scope now though)\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDMzODM3ODExMg==",
                    "publishedAt": "2017-10-21T09:25:44Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11526#issuecomment-338378112"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/417043?v=4",
                        "login": "theuni"
                    },
                    "body": "@laanwj I'm certainly not opposed to a different build-system if something better comes along. I've never liked CMake, but it's been years since I last messed with it, maybe it's improved since then.\r\n\r\nThat said, for the time being, a separate repo sounds good to me. It's also a good way to gauge the demand.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMzOTExOTY2Mw==",
                    "publishedAt": "2017-10-24T20:24:21Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11526#issuecomment-339119663"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/7133040?v=4",
                        "login": "ryanofsky"
                    },
                    "body": "@sipsorcery, how are you getting Visual Studio to pick up the dependencies? When I checked out this PR, merged #11528, \"vcpkg install\"ed all the packages mentioned in the readme, ran \"vcpkg integrate install\", and tried to build the solution in visual studio, I got hundreds of include and link errors. Right clicking individual project properties and manually adding \"C:\\users\\russ\\src\\vcpkg\\installed\\x86-windows\\include\" and \"C:\\Users\\russ\\src\\bitcoin\\src\\secp256k1\\include\" (just for secp256k1_recovery.h) include directories, \"C:\\Users\\russ\\src\\vcpkg\\installed\\x86-windows\\lib\" library directory, and \"boost_date_time-vc140-mt-1_65_1.lib;boost_filesystem-vc140-mt-1_65_1.lib;boost_system-vc140-mt-1_65_1.lib\" additional dependencies fixed a lot of errors, but there are still hundreds more.\r\n\r\nIs there a bug here, or some step I'm missing?",
                    "id": "MDEyOklzc3VlQ29tbWVudDMzOTEzMDI3NA==",
                    "publishedAt": "2017-10-24T21:03:05Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11526#issuecomment-339130274"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/197660?v=4",
                        "login": "sipsorcery"
                    },
                    "body": "@ryanofsky did you restart Visual Studio after running the \"vcpkg integrate install\" and after all the vcpkg packages were installed? The way vcpkg works is to automatically import additional targets to each project when Visual Studio starts up. It should all be seamless, no need for adding libraries or directories.\r\n\r\nIf you're still getting missing dependencies and includes then there is definitely something up between Visual Studio and vcpkg. Check your vcpkg/installed/x86-windows-static directory to double check that each of the dependencies was correctly installed.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMzOTE0MDg2NQ==",
                    "publishedAt": "2017-10-24T21:39:33Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11526#issuecomment-339140865"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/7133040?v=4",
                        "login": "ryanofsky"
                    },
                    "body": "> @ryanofsky did you restart Visual Studio after running the \"vcpkg integrate install\" and after all the vcpkg packages were installed? The way vcpkg works is to automatically import additional targets to each project when Visual Studio starts up.\r\n\r\nThanks for the explanation! I restarted and now I see `cl /c /I..\\..\\src /I\"C:\\Users\\russ\\src\\vcpkg\\installed\\x64-windows-static\\include\"`... in the build output. I think the problem is that I installed the x86 libraries instead of x64 ones. Waiting for those to build now :)",
                    "id": "MDEyOklzc3VlQ29tbWVudDMzOTE0OTk0NQ==",
                    "publishedAt": "2017-10-24T22:09:51Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11526#issuecomment-339149945"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/3020646?v=4",
                        "login": "NicolasDorier"
                    },
                    "body": "@sipsorcery I missed that you said \" relatively easily *built with Visual Studio 2017*\", my solution only allow editing (build still on linux) and is thus not as good as this PR. Will give a try.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMzOTE5NjQ1MQ==",
                    "publishedAt": "2017-10-25T02:41:47Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11526#issuecomment-339196451"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/197660?v=4",
                        "login": "sipsorcery"
                    },
                    "body": "Just in case there's any confusion, this PR isn't intended as a replacement for any of the existing Bitcoin autoconf/make build mechanisms. Instead it's intended to save other devs who are interested in using Visual Studio, for whatever their own reasons, the time and effort of wrangling the bitcoin source and dependencies. It might not look like it but close to 3-4 weeks of full time work to get to this point. Admittedly probably half that time was spent on Qt5 related work and another big chunk on wrong turns managing dependencies, such as nuget. \r\n\r\n@theuni no alternative is being proposed, this PR is about adding another option. CMake isn't part of the VS/Microsoft tool chain and is not part of this PR (**Update: except where it is used by the vcpkg tool for dependency acquisition**).",
                    "id": "MDEyOklzc3VlQ29tbWVudDMzOTIwNjAwMg==",
                    "publishedAt": "2017-10-25T03:48:37Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11526#issuecomment-339206002"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/7133040?v=4",
                        "login": "ryanofsky"
                    },
                    "body": "Conditional ACK a38801c5b3bfc72a41ccbd6328c81aa10a0dca51. The project files are working for me, but could use a few changes and fixes:\r\n\r\n* I think the project files should be added to main repository, but under a `contrib/build-msvc/` directory instead of the top level `build_msvc/` because they are significant contribution that can save windows developers who want to work with bitcoin a lot of time, headaches, and effort, but are also something we need to be able to easily drop in case they stop being maintained, or become more of a burden to maintain than we are anticipating.\r\n\r\n* I needed to add `..\\..\\src\\secp256k1\\include` to \"additional include directories\" for the `libbitcoin_{common,server,wallet}` projects in order for them to be able to find `secp256k1_recovery.h`, which is part of the vcpkg secp256k1 build tree, but does not seem to get installed. (The only secp file in `C:\\Users\\russ\\src\\vcpkg\\installed\\x64-windows-static\\include` is `secp256k1.h`.) Maybe it would be better to just use the included secp sources instead of relying on the vcpkg package. That's what this PR is already doing for univalue and leveldb.\r\n\r\n* It might make sense to drop the libbitcoin_qt project for now since it doesn't seem to be working yet.\r\n\r\n* The `test_bitcoin` and `bench_bitcoin` projects which rely on generated files aren't currently working for me. Errors look like:\r\n\r\n```\r\n3>------ Build started: Project: bench_bitcoin, Configuration: Debug x64 ------\r\n3>checkblock.cpp\r\n3>c:\\users\\russ\\src\\bitcoin\\src\\bench\\checkblock.cpp(13): fatal error C1083: Cannot open include file: 'bench/data/block413567.raw.h': No such file or directory\r\n3>Done building project \"bench_bitcoin.vcxproj\" -- FAILED.\r\n```\r\n\r\n```\r\n3>------ Build started: Project: test_bitcoin, Configuration: Debug x64 ------\r\n3>transaction_tests.cpp\r\n3>c:\\users\\russ\\src\\bitcoin\\src\\test\\transaction_tests.cpp(5): fatal error C1083: Cannot open include file: 'data/tx_invalid.json.h': No such file or directory\r\n3>sighash_tests.cpp\r\n3>c:\\users\\russ\\src\\bitcoin\\src\\test\\sighash_tests.cpp(7): fatal error C1083: Cannot open include file: 'data/sighash.json.h': No such file or directory\r\n3>script_tests.cpp\r\n3>c:\\users\\russ\\src\\bitcoin\\src\\test\\script_tests.cpp(5): fatal error C1083: Cannot open include file: 'data/script_tests.json.h': No such file or directory\r\n3>base58_tests.cpp\r\n3>c:\\users\\russ\\src\\bitcoin\\src\\test\\base58_tests.cpp(7): fatal error C1083: Cannot open include file: 'data/base58_encode_decode.json.h': No such file or directory\r\n3>Generating Code...\r\n3>Done building project \"test_bitcoin.vcxproj\" -- FAILED.\r\n========== Build: 2 succeeded, 1 failed, 8 up-to-date, 0 skipped ==========\r\n```\r\n\r\nOther notes:\r\n\r\n* There are tons of compiler warnings, mostly about implicit integer conversions in serialization code which would be nice to fix separately.\r\n\r\n* I suspect maintaining a CMakeLists.txt file (if someone wanted to step up and write one) would probably be easier than maintaining all these xml project defintions. The community edition version of visual studio I downloaded has an option to explicitly open cmake files, so it doesn't seem to be true that using CMake would add an extra step the visual studio build process. I have a lot of experience with CMake on unix, and my overall impression is that while the CMake language, primitives, and workflow are gratuitously weird, they do work really well in practice.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMzOTQyNDA1NA==",
                    "publishedAt": "2017-10-25T18:22:11Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11526#issuecomment-339424054"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/197660?v=4",
                        "login": "sipsorcery"
                    },
                    "body": "@ryanofsky thanks for testing out the PR.\r\n\r\n- I did originally have the project files in contrib/build-msvc but moved them based on the way precedent in BerkeleyDB. If necessary they can be moved to wherever the consensus decides.\r\n\r\n- Thanks for the note on the missing secp256k1 headers. That's a problem with the vcpkg I created for it. I've fixed and submitted the [PR](https://github.com/Microsoft/vcpkg/pull/2058) to Microsoft.\r\n\r\n- libbitcoin_qt does build but requires the Qt5 dependency set up correctly. The vcpkg Qt5 package currently doesn't support static builds. Like anything with Qt it will take a lot of time and effort to wrangle so in this case, and assuming this PR goes ahead, stage 2 will be to document/package the Qt5 dependency.\r\n\r\n- I'd overlooked the pre-generated files for the test and bench projects. I must have copied them straight across from the mingw build. Will look into those shortly.\r\n\r\n- Maintaining CMake files would be more effort than maintaining the VS files. It would make sense if the CMake config was being used to generate other build configs but this PR is only concerned about VS. A substantial portion of Windows devs don't tend to use the *nix tool chains and aren't familiar with CMake etc. and a straight VS config will make life easier for them.\r\n\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDMzOTQ4ODUyNQ==",
                    "publishedAt": "2017-10-25T22:11:19Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11526#issuecomment-339488525"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/197660?v=4",
                        "login": "sipsorcery"
                    },
                    "body": "@ryanofsky with the latest change the missing auto-generated headers should now be fixed. I'd be interested to know if you can build without tweaks now?\r\n\r\nI ended up having to add a new project to replicate the *nix hexdump utility. I spent a day trying to integrate Visual Studio with different permutations of powershell scripts, piping to WSL and various Windows hexdump ports, but all had shortcomings. It does mean the config now contains a small C++ program but that's the simplest alternative I could come up with.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0MDU3NzcyMA==",
                    "publishedAt": "2017-10-30T20:41:42Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11526#issuecomment-340577720"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/3020646?v=4",
                        "login": "NicolasDorier"
                    },
                    "body": "@sipsorcery msbuild supports [inline C# tasks](https://msdn.microsoft.com/en-us/library/dd722601.aspx), might be good alternative to C++ prog.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0MDg4NDIyMw==",
                    "publishedAt": "2017-10-31T19:41:48Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11526#issuecomment-340884223"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/197660?v=4",
                        "login": "sipsorcery"
                    },
                    "body": "@NicolasDorier an inline task for the hexdump header generation is a much better approach. I've switched the VS config to it.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0MTA1Njc1Mg==",
                    "publishedAt": "2017-11-01T09:51:40Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11526#issuecomment-341056752"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/21988976?v=4",
                        "login": "carlton355"
                    },
                    "body": "I was able to build this with no errors by following your steps.  ",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0MTExODI2NQ==",
                    "publishedAt": "2017-11-01T14:15:30Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11526#issuecomment-341118265"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6394033?v=4",
                        "login": "donaloconnor"
                    },
                    "body": "@sipsorcery - Thanks for this effort. I was able to successfully build (x64 configuration) with VS 2017 (Community).\r\n\r\nAs mentioned earlier, there are an incredible amount of warnings. I might work on a separate PR to fix these.\r\n\r\nBTW, is it necessary that we target building with the Windows 10 fall creators upgrade SDK? It would be good if we could drop this requirement back to maybe Win7?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0MTIzNTUzMg==",
                    "publishedAt": "2017-11-01T20:40:54Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11526#issuecomment-341235532"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/197660?v=4",
                        "login": "sipsorcery"
                    },
                    "body": "@donaloconnor thx for testing. As far as the target Windows SDK version I believe Visual Studio will revert to its default if what's specified in the project file is not available but I'm not 100% on that. Apart from that it's trivial to retarget to a different Windows SDK, in the Solution Explorer pane right click the Solution->Retarget solution and then select the desired SDK version. That updates the SDK version for all projects and configurations in the solution in a couple of clicks.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0MTI0Mzg5MQ==",
                    "publishedAt": "2017-11-01T21:11:31Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11526#issuecomment-341243891"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/3020646?v=4",
                        "login": "NicolasDorier"
                    },
                    "body": "Just to note: @sipsorcery made a dockerfile based on windowsservercore internally in our company. It can be eventually used for easily Bitcoin CI on AppVeyor for native Windows builds. (AppVeyor is Travis equivalent for Windows world)\r\n\r\nMight be useful (in separate PR?) to share that later.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0NTYwNjMyMw==",
                    "publishedAt": "2017-11-20T06:50:20Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11526#issuecomment-345606323"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "> Might be useful (in separate PR?) to share that later.\r\n\r\nRegularly running the tests with a completely different compiler/platform would be really nice (but indeed, something for a future PR).",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0NTYyNjExMA==",
                    "publishedAt": "2017-11-20T08:37:50Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11526#issuecomment-345626110"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
                        "login": "MarcoFalke"
                    },
                    "body": "Jup, that would be useful. Reminds me of  #8227",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0NjQ1NjQyNQ==",
                    "publishedAt": "2017-11-22T19:51:13Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11526#issuecomment-346456425"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/16233951?v=4",
                        "login": "huhorler"
                    },
                    "body": "D:\\bitcoin\\build_msvc\\libbitcoin_qt\\libbitcoin_qt.vcxproj(923,5): error MSB3073: command \u201c\\bin\\moc.exe \"..\\..\\src\\qt\\addressbookpage.h\" -o .\\GeneratedFiles\\moc_addressbookpage.cpp \r\nHow to build the qt proj.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1MTMzNDAwNg==",
                    "publishedAt": "2017-12-13T09:29:28Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11526#issuecomment-351334006"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/197660?v=4",
                        "login": "sipsorcery"
                    },
                    "body": "@huhorler accomplishing a static build of Qt on Windows is a major feat. It took me 4 days. If you can get Qt built then building the two bitcoin Qt dependent apps is relatively straight forward.\r\n\r\nIf you do decide to give it a shot here are the config script parameters I used (you'll need to adjust the paths):\r\n\r\n`..\\configure -prefix F:\\deps\\qt\\5.9.2-static-ssl\\vc141-x86\\ -platform win32-msvc -debug-and-release -opensource -confirm-license -strip -no-shared -static -no-static-runtime -ltcg -make libs -make tools -nomake examples -no-compile-examples -no-dbus -no-qml-debug -no-icu -no-gtk -no-opengl -no-opengles3 -no-angle -no-sql-sqlite -no-sql-odbc -no-sqlite -skip qt3d -skip qtactiveqt -skip qtandroidextras -skip qtcanvas3d -skip qtcharts -skip qtconnectivity -skip qtdatavis3d -skip qtdeclarative -skip qtdoc -skip qtgamepad -skip qtgraphicaleffects -skip qtimageformats -skip qtlocation -skip qtmacextras -skip qtmultimedia -skip qtnetworkauth -skip qtpurchasing -skip qtquickcontrols -skip qtquickcontrols2 -skip qtscript -skip qtscxml -skip qtsensors -skip qtserialbus -skip qtserialport -skip qtspeech -skip qtvirtualkeyboard -skip qtwayland -skip qtwebchannel -skip qtwebengine -skip qtwebsockets -skip qtwebview -skip qtx11extras -skip qtxmlpatterns -recheck-all -ssl -openssl-linked -IF:\\deps\\openssl\\1.0.2\\vc141-x86\\include -LF:\\deps\\openssl\\1.0.2\\vc141-x86\\lib OPENSSL_LIBS_RELEASE=\"-llibeay32 -lssleay32 -lgdi32 -luser32 -lwsock32 -ladvapi32\" OPENSSL_LIBS_DEBUG=\"-llibeay32d -lssleay32d -lgdi32 -luser32 -lwsock32 -ladvapi32\"`",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1MTM0NDg3Ng==",
                    "publishedAt": "2017-12-13T10:09:53Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11526#issuecomment-351344876"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1503976?v=4",
                        "login": "vinniefalco"
                    },
                    "body": "I followed the directions and failed to build using Visual Studio Community edition. The error:\r\n\r\n```\r\n1>c:\\users\\vinnie\\src\\bitcoin\\src\\random.h(131): error C4430: missing type specifier - int assumed. Note: C++ does not support default-int\r\n1>c:\\users\\vinnie\\src\\bitcoin\\src\\random.h(131): error C2146: syntax error: missing ';' before identifier 'NUM_OS_RANDOM_BYTES'\r\n```\r\n\r\nI see no place that defines `NUM_OS_RANDOM_BYTES`.\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1Mzc0MjI3Ng==",
                    "publishedAt": "2017-12-23T18:53:19Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11526#issuecomment-353742276"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/197660?v=4",
                        "login": "sipsorcery"
                    },
                    "body": "@vinniefalco do you need to pull the master branch to get the latest updates? That constant is defined in random.h.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1Mzc3MzA1MQ==",
                    "publishedAt": "2017-12-24T08:46:48Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11526#issuecomment-353773051"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1503976?v=4",
                        "login": "vinniefalco"
                    },
                    "body": "I'll try that. Note that the instructions in the pull request indicate to use the *testbuild* branch:\r\n```\r\ngit checkout -b testbuild\r\n```\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1Mzc4NTUxOQ==",
                    "publishedAt": "2017-12-24T13:53:45Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11526#issuecomment-353785519"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/3020646?v=4",
                        "login": "NicolasDorier"
                    },
                    "body": "`bench_bitcoin.exe` seems to crash, investigating...",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MDQ1OTA4Ng==",
                    "publishedAt": "2018-03-05T15:38:08Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11526#issuecomment-370459086"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/3020646?v=4",
                        "login": "NicolasDorier"
                    },
                    "body": "@sipsorcery I manage to build on visual studio but somehow command line by using msbuild seems to unable to find vcpkg headers.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MDU2NTk0Mw==",
                    "publishedAt": "2018-03-05T21:07:53Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11526#issuecomment-370565943"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/3020646?v=4",
                        "login": "NicolasDorier"
                    },
                    "body": "@sipsorcery I made \r\n\r\nhttps://github.com/NicolasDorier/bitcoin/commit/b19dcc186a80d076c992a16c4b2731fef46e9f20\r\n\r\nIt automatically copy the bitcoin-config as part of the build process.\r\nIt also make it possible to build on Win10 without retargeting the projects.\r\n\r\nThe use of common project file will allow us later to generate the `bitcoin-config.h` (via cmake which has support from VS2017) instead of simply copying without having to change the code all over the place.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MDU3MzQ5MQ==",
                    "publishedAt": "2018-03-05T21:32:32Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11526#issuecomment-370573491"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/3020646?v=4",
                        "login": "NicolasDorier"
                    },
                    "body": "So the crashes on `bench_bitcoin` are due to assert statement being stripped by msvc.\r\n\r\nSo question is, should we keep \r\n```\r\nassert(stream.Rewind(sizeof(block_bench::block413567)));\r\n```\r\nand make sure msvc does not remove assert. Or should we make sure that no side-effect stuff is done in assert?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MDU5ODIxMQ==",
                    "publishedAt": "2018-03-05T22:58:35Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11526#issuecomment-370598211"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/197660?v=4",
                        "login": "sipsorcery"
                    },
                    "body": "@NicolasDorier common project file to generate bitcoin-config.h is a good idea. Is it worth adding it to this PR?\r\n\r\nI get the same crash in bench_bitcoin. I'd also agree with you that it would be better to do the stream.Rewind (and other side effect operations) outside of the assert. I would think the asserts should solely be used to test conditions.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MDYwNDY3Ng==",
                    "publishedAt": "2018-03-05T23:27:45Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11526#issuecomment-370604676"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/3020646?v=4",
                        "login": "NicolasDorier"
                    },
                    "body": "@sipsorcery no need to generate the config to this PR, this can come later, I included the `bitcoin-config.h` in the build process so there is no need to document it + ship the .h in a separate zip file outside of git versioning. (can you cherry pick https://github.com/NicolasDorier/bitcoin/commit/b19dcc186a80d076c992a16c4b2731fef46e9f20 ?)",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MDYzNzQzOA==",
                    "publishedAt": "2018-03-06T02:16:05Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11526#issuecomment-370637438"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/3020646?v=4",
                        "login": "NicolasDorier"
                    },
                    "body": "Added to https://github.com/NicolasDorier/bitcoin/commits/testbuildnico \r\n\r\n* Build without retargetting on Windows 10\r\n* Remove the manual step of copying the `config-bitcoin.h`\r\n* Ignore vcxproj.user files (User specific settings for the project in VS)\r\n* Remove NDEBUG in release for test stuff so assert with side effect do not get stripped\r\n\r\n`bench_bitcoin.exe` is now running properly, `test_bitcoin.exe` is passing fine.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MDc2ODQwOA==",
                    "publishedAt": "2018-03-06T12:38:12Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11526#issuecomment-370768408"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/3020646?v=4",
                        "login": "NicolasDorier"
                    },
                    "body": "I updated my branch\r\n\r\n* Now properly compiling by using MSBuild (the build error via msbuild command line was that for some reason the Plateform property was not set by default to Win32)",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MDg3NjYxMA==",
                    "publishedAt": "2018-03-06T18:17:08Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11526#issuecomment-370876610"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/3020646?v=4",
                        "login": "NicolasDorier"
                    },
                    "body": "So I ran a `bench_bitcoin` between the msvc version and the cross compiled for windows version. It is order of magnitude difference. MSVC version is very very slow for some reason... investigating.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MDg4MzUzMQ==",
                    "publishedAt": "2018-03-06T18:38:42Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11526#issuecomment-370883531"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6394033?v=4",
                        "login": "donaloconnor"
                    },
                    "body": "> So I ran a bench_bitcoin between the msvc version and the cross compiled for windows version. It is order of magnitude difference. MSVC version is very very slow for some reason... investigating.\r\n\r\nAre you compiling a release build and detached from the debugger when running the tests? (If the debugger is attached, a special (slower) debug heap is used.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MDg4NTMzNg==",
                    "publishedAt": "2018-03-06T18:44:45Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11526#issuecomment-370885336"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/3020646?v=4",
                        "login": "NicolasDorier"
                    },
                    "body": "Update: My bad I was on a very old commit actually... retrying.\r\n\r\n-----------\r\nYes, but I think the problem is different, the output of bench_bitcoin seems to be based on different version. I am trying to rebase.\r\n\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MDg4NzM0Mw==",
                    "publishedAt": "2018-03-06T18:51:22Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11526#issuecomment-370887343"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/3020646?v=4",
                        "login": "NicolasDorier"
                    },
                    "body": "Benchmark result based on f13d756cdd9445d1478a70c5387df2a444045f6e\r\n\r\nUsing MSVC:\r\n```\r\n# Benchmark, evals, iterations, total, min, max, median\r\nBase58CheckEncode, 5, 320000, 9.58107, 5.94158e-06, 6.04325e-06, 6.00087e-06\r\nBase58Decode, 5, 800000, 6.66596, 1.65218e-06, 1.69618e-06, 1.6645e-06\r\nBase58Encode, 5, 470000, 8.9089, 3.76216e-06, 3.82214e-06, 3.78687e-06\r\nBenchLockedPool, 5, 530, 7.63946, 0.00281322, 0.00294693, 0.00287078\r\nCCheckQueueSpeedPrevectorJob, 5, 1400, 7.84402, 0.00109194, 0.00113575, 0.00112266\r\nCCoinsCaching, 5, 170000, 10.7337, 1.23969e-05, 1.28584e-05, \r\nCoinSelection, 5, 650, 10.4217, 0.00311061, 0.00332764, 0.00322123\r\nDeserializeAndCheckBlockTest, 5, 160, 11.5849, 0.0142856, 0.0148326, 0.0143983\r\nDeserializeBlockTest, 5, 130, 7.29183, 0.0110195, 0.0114873, 0.0111978\r\nFastRandom_1bit, 5, 440000000, 26.4041, 1.1693e-08, 1.28368e-08, 1.1765e-08\r\nFastRandom_32bit, 5, 110000000, 12.1345, 2.18753e-08, 2.24223e-08, 2.19454e-08\r\nMempoolEviction, 5, 41000, 16.0266, 7.53468e-05, 8.64916e-05, 7.64021e-05\r\nRIPEMD160, 5, 440, 10.3656, 0.00442749, 0.0050962, 0.00458359\r\nRollingBloom, 5, 1500000, 6.84173, 8.82562e-07, 9.38626e-07, 9.25587e-07\r\nSHA1, 5, 570, 7.72847, 0.00268478, 0.00275603, 0.00269575\r\nSHA256, 5, 340, 12.3184, 0.00652333, 0.00872471, 0.0070202\r\nSHA256_32b, 5, 4700000, 11.377, 4.8046e-07, 4.85879e-07, 4.8528e-07\r\nSHA512, 5, 330, 27.845, 0.0163766, 0.0186157, 0.0164709\r\nSipHash_32b, 5, 40000000, 30.5322, 1.5218e-07, 1.53116e-07, 1.52675e-07\r\nSleep100ms, 5, 10, 5.05761, 0.100789, 0.101583, 0.101268\r\nTrig, 5, 12000000, 1.5014, 2.47625e-08, 2.53812e-08, 2.49326e-08\r\nVerifyScriptBench, 5, 6300, 29.5021, 0.00090531, 0.00101466, 0.000921225\r\n```\r\n\r\nUsing MINGW32:\r\n\r\n```\r\n# Benchmark, evals, iterations, total, min, max, median\r\nBase58CheckEncode, 5, 320000, 7.91675, 4.91435e-006, 4.96565e-006, 4.9587e-006\r\nBase58Decode, 5, 800000, 8.24757, 2.02399e-006, 2.08952e-006, 2.06045e-006\r\nBase58Encode, 5, 470000, 8.01109, 3.20622e-006, 3.62817e-006, 3.4371e-006\r\nBenchLockedPool, 5, 530, 8.55124, 0.0031643, 0.00328073, 0.0032388\r\nCCheckQueueSpeedPrevectorJob, 5, 1400, 10.3193, 0.00146465, 0.00148749, 0.00147139\r\nCCoinsCaching, 5, 170000, 9.52761, 1.10014e-005, 1.14885e-005, 1.11721e-005\r\nCoinSelection, 5, 650, 18.3554, 0.00542891, 0.00607096, 0.00551345\r\nDeserializeAndCheckBlockTest, 5, 160, 10.5187, 0.0130217, 0.0133201, 0.013142\r\nDeserializeBlockTest, 5, 130, 7.36567, 0.0108283, 0.0123782, 0.0111937\r\nFastRandom_1bit, 5, 440000000, 4.80039, 2.14043e-009, 2.24242e-009, 2.17553e-009\r\nFastRandom_32bit, 5, 110000000, 6.40718, 1.13598e-008, 1.19127e-008, 1.16302e-008\r\nMempoolEviction, 5, 41000, 21.7848, 0.000105057, 0.00010777, 0.000105685\r\nPrevectorClearNontrivial, 5, 28300, 4.86739, 3.31913e-005, 3.54666e-005, 3.44578e-005\r\nPrevectorClearTrivial, 5, 88600, 8.6593, 1.80437e-005, 2.21844e-005, 1.88127e-005\r\nPrevectorDestructorNontrivial, 5, 28800, 6.74105, 4.17441e-005, 5.38027e-005, 4.52309e-005\r\nPrevectorDestructorTrivial, 5, 88900, 7.82589, 1.6831e-005, 1.95849e-005, 1.71143e-005\r\nPrevectorResizeNontrivial, 5, 28900, 4.98257, 3.40239e-005, 3.49015e-005, 3.44035e-005\r\nPrevectorResizeTrivial, 5, 90300, 7.74884, 1.6991e-005, 1.73386e-005, 1.71626e-005\r\nRIPEMD160, 5, 440, 7.00343, 0.00311329, 0.003257, 0.00319395\r\nRollingBloom, 5, 1500000, 7.69936, 9.85285e-007, 1.08814e-006, 1.00516e-006\r\nSHA1, 5, 570, 8.3434, 0.00281848, 0.00313455, 0.00290756\r\nSHA256, 5, 340, 6.63042, 0.00379251, 0.00395742, 0.00391406\r\nSHA256_32b, 5, 4700000, 6.84698, 2.87698e-007, 2.94654e-007, 2.91159e-007\r\nSHA512, 5, 330, 5.84944, 0.00349496, 0.00357262, 0.00355178\r\nSipHash_32b, 5, 40000000, 8.00846, 3.93307e-008, 4.05576e-008, 4.01336e-008\r\nSleep100ms, 5, 10, 5.05227, 0.100605, 0.10172, 0.101045\r\nTrig, 5, 12000000, 3.2378, 5.30155e-008, 5.51471e-008, 5.37461e-008\r\nVerifyScriptBench, 5, 6300, 6.82862, 0.000201415, 0.000229147, 0.000216088\r\n```\r\n\r\nConclusion:\r\n\r\nResult similar enough, `VerifyScriptBench` is 4 to 5 times slower on msvc.\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MDkwNTUxOA==",
                    "publishedAt": "2018-03-06T19:49:30Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11526#issuecomment-370905518"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/197660?v=4",
                        "login": "sipsorcery"
                    },
                    "body": "@NicolasDorier I've updated my PR to use your two the common and common.init project files. The whole thing now builds correctly on AppVeyor without the need for the manual bitcoin-config.h copy step.\r\n\r\nOn my machine Visual Studio states that I don't have the correct SDK version installed (which could be true, I haven't looked into it yet). An my workaround was to put the specific version in common.init.vcxproj:\r\n\r\n`<WindowsTargetPlatformVersion>10.0.15063.0</WindowsTargetPlatformVersion>`\r\n\r\nSince the AppVeyor build works I'm assuming this is an issue with my machine.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MTAxNDIxNg==",
                    "publishedAt": "2018-03-07T03:52:21Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11526#issuecomment-371014216"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/3020646?v=4",
                        "login": "NicolasDorier"
                    },
                    "body": "@sipsorcery normally this https://github.com/sipsorcery/bitcoin/blob/90ffa797c1e1a02bd450329f15955fdfc360542b/build_msvc/common.init.vcxproj is auto detecting the `WindowsTargetPlatformVersion`. Can you take a look if the registry is right?\r\n\r\nWhat about running msbuild in command line? same error?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MTEzOTgwOQ==",
                    "publishedAt": "2018-03-07T13:35:17Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11526#issuecomment-371139809"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/3020646?v=4",
                        "login": "NicolasDorier"
                    },
                    "body": "@sipsorcery can you keep the commits as in https://github.com/NicolasDorier/bitcoin/commits/testbuildnico ? We can squash later, it is better for review. I see you forgot some of my commits.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MTE0MDMwMw==",
                    "publishedAt": "2018-03-07T13:37:25Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11526#issuecomment-371140303"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/197660?v=4",
                        "login": "sipsorcery"
                    },
                    "body": "@NicolasDorier updating Visual Studio fixed my platform version problem and msbuild also works fine.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MTMzNDcxOQ==",
                    "publishedAt": "2018-03-08T00:28:29Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11526#issuecomment-371334719"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/3020646?v=4",
                        "login": "NicolasDorier"
                    },
                    "body": "@sipsorcery shit I would have know why you had this problem before updating. :(",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MTM3NzQxMw==",
                    "publishedAt": "2018-03-08T04:45:34Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11526#issuecomment-371377413"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
                        "login": "MarcoFalke"
                    },
                    "body": "Has anyone had success testing this according to the steps given in the OP?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MDU4MzEzOA==",
                    "publishedAt": "2018-04-11T20:21:07Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11526#issuecomment-380583138"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/7133040?v=4",
                        "login": "ryanofsky"
                    },
                    "body": "> Has anyone had success testing this according to the steps given in the OP?\r\n\r\nIt's been a while, but this was working for me when I tried it last: https://github.com/bitcoin/bitcoin/pull/11526#issuecomment-339424054",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MDU5OTM0Ng==",
                    "publishedAt": "2018-04-11T21:20:24Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11526#issuecomment-380599346"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/197660?v=4",
                        "login": "sipsorcery"
                    },
                    "body": "@MarcoFalke this [appveyor job](https://ci.appveyor.com/project/sipsorcery/bitcoin/history) runs the same steps. \r\n\r\nThe build breaks roughly once or twice a month when a source file gets deleted, renamed or created. I then fix it when I get a chance (at the time of writing it has been broken for the last 4 days and I've just fixed it now). \r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MDYyMjIxMA==",
                    "publishedAt": "2018-04-11T23:01:13Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11526#issuecomment-380622210"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
                        "login": "MarcoFalke"
                    },
                    "body": "utACK 5fc0e252bcc2348f158cd5ccd7d332aaffdd4531 beside nits",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MDYyMzgyOQ==",
                    "publishedAt": "2018-04-11T23:10:33Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11526#issuecomment-380623829"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
                        "login": "MarcoFalke"
                    },
                    "body": "re-utACK fcc8dcb. Thanks for addressing the nits",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MDYzMDE2NQ==",
                    "publishedAt": "2018-04-11T23:47:42Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11526#issuecomment-380630165"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
                        "login": "MarcoFalke"
                    },
                    "body": "@sipsorcery Don't worry about the include guard. See #12956",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MDYzNTkwOQ==",
                    "publishedAt": "2018-04-12T00:23:44Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11526#issuecomment-380635909"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/197660?v=4",
                        "login": "sipsorcery"
                    },
                    "body": "@MarcoFalke the lint parser still catches that header as it's in the build_msvc directory.\r\n\r\n`REGEXP_EXCLUDE_FILES_WITH_PREFIX=\"src/(crypto/ctaes/|leveldb/|secp256k1/|tinyformat.h|univalue/)\"`\r\n\r\nI'll find a way to workaround it.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MDY0NDkwNw==",
                    "publishedAt": "2018-04-12T01:23:47Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11526#issuecomment-380644907"
                }
            ],
            "totalCount": 66
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "6fd771e946580e12ec2620f00ad7041cb5122f80"
                    }
                }
            ],
            "totalCount": 17
        },
        "createdAt": "2017-10-19T10:21:33Z",
        "deletions": 0,
        "id": "MDExOlB1bGxSZXF1ZXN0MTQ3NTE4NDEz",
        "labels": {
            "nodes": [
                {
                    "color": "884400",
                    "id": "MDU6TGFiZWwyMzQ4Nzc=",
                    "name": "Windows"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "number": 11526,
        "state": "OPEN",
        "title": "Visual Studio build configuration for Bitcoin Core.",
        "updatedAt": "2018-04-20T08:45:32Z"
    },
    {
        "additions": 16,
        "author": {
            "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
            "login": "practicalswift",
            "url": "https://github.com/practicalswift"
        },
        "body": "Avoid unintentional unsigned integer wraparounds.",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "@laanwj Good point. Fixed! :-)",
                    "id": "MDEyOklzc3VlQ29tbWVudDMzODQzODM5NQ==",
                    "publishedAt": "2017-10-21T23:03:35Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11535#issuecomment-338438395"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "Added commits from #11547 (\"Avoid unintended unsigned integer wraparounds in FormatScript(...) and SplitHostPort(...)\") as requested :-)",
                    "id": "MDEyOklzc3VlQ29tbWVudDMzODQ2OTEzNA==",
                    "publishedAt": "2017-10-22T11:07:39Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11535#issuecomment-338469134"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "Added a few more wrap-arounds and squashed. Now at 16 fixed wrap-arounds.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMzODg4Nzg1MQ==",
                    "publishedAt": "2017-10-24T06:30:55Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11535#issuecomment-338887851"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/548488?v=4",
                        "login": "sipa"
                    },
                    "body": "We tend to use C-style casts for primitive types... just for brevity.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMzODg4ODEzMg==",
                    "publishedAt": "2017-10-24T06:32:28Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11535#issuecomment-338888132"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "@sipa I'll change! Other than that, do the changes look reasonable? :-)",
                    "id": "MDEyOklzc3VlQ29tbWVudDMzODg4OTA2Mg==",
                    "publishedAt": "2017-10-24T06:37:50Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11535#issuecomment-338889062"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "@sipa Now using C-style casts for primitive types :-)",
                    "id": "MDEyOklzc3VlQ29tbWVudDMzOTI2NTM3NQ==",
                    "publishedAt": "2017-10-25T09:07:32Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11535#issuecomment-339265375"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "Added another wraparound fix (this time in `AcceptBlock(\u2026)`) and squashed.\r\n\r\nAnyone willing to review? :-)",
                    "id": "MDEyOklzc3VlQ29tbWVudDMzOTQ0NTg4MA==",
                    "publishedAt": "2017-10-25T19:35:19Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11535#issuecomment-339445880"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "Rebased! :-)",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0MzE5NzM2OA==",
                    "publishedAt": "2017-11-09T15:51:41Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11535#issuecomment-343197368"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "Anyone willing to review - ACK or NACK? :-)",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0OTM5NjgxNQ==",
                    "publishedAt": "2017-12-05T18:30:04Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11535#issuecomment-349396815"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "Ping? :-)",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2MTA1Mzc2MQ==",
                    "publishedAt": "2018-01-28T10:49:47Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11535#issuecomment-361053761"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "Do we not care about integer wrap-arounds? If so let me know and I'll close :-)",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NzgzMzc1NA==",
                    "publishedAt": "2018-02-22T21:48:41Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11535#issuecomment-367833754"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
                        "login": "MarcoFalke"
                    },
                    "body": "ACK test changes, they seem straightforward. The other need a cautious review, since they change behavior.\r\n\r\n(You can split the test changes into a separate pull request, if you want)",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2Nzg0NDEwNg==",
                    "publishedAt": "2018-02-22T22:27:00Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11535#issuecomment-367844106"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/4360349?v=4",
                        "login": "morcos"
                    },
                    "body": "Re: policy/fees.cpp changes   utACK   (didn't review anything else)\r\n\r\nThanks!\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MDU2Mjc4Mg==",
                    "publishedAt": "2018-03-05T20:57:39Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11535#issuecomment-370562782"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "@promag Thanks for reviewing. Switched to suggested `for` formulation. Please re-review.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MjQ3Nzc3OA==",
                    "publishedAt": "2018-03-12T22:02:23Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11535#issuecomment-372477778"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "Anyone willing to review?\r\n\r\nGetting the project to run cleanly under `-fsanitize=integer` would be very nice :-)",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MTYxODkzMQ==",
                    "publishedAt": "2018-04-16T14:29:30Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11535#issuecomment-381618931"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "@promag Thanks for reviewing! Feedback addressed!\r\n\r\n@sipa @promag Please re-review :-)",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MTY1NDE2MA==",
                    "publishedAt": "2018-04-16T15:52:50Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11535#issuecomment-381654160"
                }
            ],
            "totalCount": 16
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "1d651b375088b707483f5f945f7c7bcf6646aa15"
                    }
                }
            ],
            "totalCount": 1
        },
        "createdAt": "2017-10-20T17:23:38Z",
        "deletions": 12,
        "id": "MDExOlB1bGxSZXF1ZXN0MTQ3ODUzMDM0",
        "labels": {
            "nodes": [
                {
                    "color": "E6F6D6",
                    "id": "MDU6TGFiZWwxMzU5NjE=",
                    "name": "Refactoring"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "number": 11535,
        "state": "OPEN",
        "title": "Avoid unintentional unsigned integer wraparounds",
        "updatedAt": "2018-04-16T15:52:51Z"
    },
    {
        "additions": 1,
        "author": {
            "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
            "login": "practicalswift",
            "url": "https://github.com/practicalswift"
        },
        "body": "Fix likely unintentional unsigned integer wrap-around in `GetBlockProofEquivalentTime(...)` when `to.nChainWork <= from.nChainWork`.\r\n\r\n**Description:**\r\n\r\n`int64_t GetBlockProofEquivalentTime(const CBlockIndex& to, const CBlockIndex& from, \u2026)`\r\ncontains the following code:\r\n\r\n```\r\nint sign = 1;\r\nif (to.nChainWork > from.nChainWork) {\r\n\u2026\r\n} else {\r\n    \u2026\r\n    sign = -1;\r\n}\r\n\u2026\r\nreturn sign * r.GetLow64();\r\n```\r\n\r\n`r.GetLow64()` is of type `uint64_t`.\r\n\r\nNote that the types of the two operands in `sign * r.GetLow64()` differ in signedness.\r\n\r\nSince `uint64_t` is wider than `int` the signed operand (`sign`) is converted to the unsigned type.\r\n\r\nIn the case of `sign == -1` (`to.nChainWork <= from.nChainWork`) we wrap around and end up with `18446744073709551615 * r.GetLow64()` (`std::numeric_limits<uint64_t>::max() * r.GetLow64()`) instead of the intended `-1 * r.GetLow64()`.\r\n\r\nNote however that another conversion takes place when the result is converted into the return type \r\n(`int64_t`), so the resulting value should be the expected one (equivalent to `-1 * r.GetLow64()`).\r\n\r\nIn the case that this behaviour (wrap-around + relying on return type to fix) is intentional a comment should probably be added to indicate so :-)\r\n\r\n`GetBlockProofEquivalentTime(\u2026)` was introduced in f7303f97933be33e34d482cf8348d180c8da2a26. Friendly ping @sipa - intentional or not? :-)\r\n\r\n",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/3211283?v=4",
                        "login": "MeshCollider"
                    },
                    "body": "Again, isn't this part of #11535 too? Both are just avoiding unintentional unsigned integer wraparounds?",
                    "id": "MDEyOklzc3VlQ29tbWVudDMzODgzNTg2Mw==",
                    "publishedAt": "2017-10-24T00:34:43Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11551#issuecomment-338835863"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "@MeshCollider I thought this one was a bit more interesting than the others and deserved its own PR, but sure I can just add all unintentional unsigned integer wraparounds to #11535. I have a few more to report :-)",
                    "id": "MDEyOklzc3VlQ29tbWVudDMzODg3ODM1OQ==",
                    "publishedAt": "2017-10-24T05:30:18Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11551#issuecomment-338878359"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "@promag Nit addressed :-)",
                    "id": "MDEyOklzc3VlQ29tbWVudDMzODkyNzM2NA==",
                    "publishedAt": "2017-10-24T09:16:12Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11551#issuecomment-338927364"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
                        "login": "promag"
                    },
                    "body": "ACK de9517d.",
                    "id": "MDEyOklzc3VlQ29tbWVudDMzODkyODI3OA==",
                    "publishedAt": "2017-10-24T09:19:47Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11551#issuecomment-338928278"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "@promag Thanks a lot for reviewing! Would you mind taking a look at the wrap-arounds covered in #11535 too? :-)",
                    "id": "MDEyOklzc3VlQ29tbWVudDMzODkyODczOA==",
                    "publishedAt": "2017-10-24T09:21:33Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11551#issuecomment-338928738"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "@sipa What do you think about this change? Do you have time to review? :-)",
                    "id": "MDEyOklzc3VlQ29tbWVudDMzOTAwODgyOQ==",
                    "publishedAt": "2017-10-24T14:26:48Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11551#issuecomment-339008829"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "Do we not care about integer wrap-arounds? If so let me know and I'll close :-)",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NzgzMzcxNg==",
                    "publishedAt": "2018-02-22T21:48:31Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11551#issuecomment-367833716"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
                        "login": "MarcoFalke"
                    },
                    "body": "@practicalswift Can you add a test case that fails before this change and passes after this change. This prevents from re-introducing the issue in the future.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2Nzg1NjExOQ==",
                    "publishedAt": "2018-02-22T23:17:38Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11551#issuecomment-367856119"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "@MarcoFalke Thanks to the implicit conversion back to the return type `int64_t` the wrap-around is contained to `GetBlockProofEquivalentTime(\u2026)` so I don't think it is possible to construct a test for this.\r\n\r\nJudging from the reviews of this PR it seems like the current code's reliance on wrap-around + implicit conversion is quite surprising which in itself is a reason to be explicit here. Explicit is better than implicit!",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2Nzk0MjkxNQ==",
                    "publishedAt": "2018-02-23T08:29:16Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11551#issuecomment-367942915"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
                        "login": "MarcoFalke"
                    },
                    "body": "Ah, sorry. My bad, I didn't read OP.\r\n\r\nThen it should be possible to add a test case that (temporarily) wraps around, but passes before and after this change?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2ODAxNjM4NQ==",
                    "publishedAt": "2018-02-23T14:00:16Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11551#issuecomment-368016385"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "@MarcoFalke I'm not sure how that test would be constructed since `GetBlockProofEquivalentTime(\u2026)` returns the correct value thanks to the conversion that takes place *after* the unsigned integer wrap-around has taken place. Perhaps I'm missing something? :-)",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MzE0MjM0Mg==",
                    "publishedAt": "2018-03-14T19:14:35Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11551#issuecomment-373142342"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/548488?v=4",
                        "login": "sipa"
                    },
                    "body": "utACK de9517d59bc9943ec62ca26ed5f7111c9bc73b6c",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MzIyOTU1MA==",
                    "publishedAt": "2018-03-15T01:26:37Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11551#issuecomment-373229550"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "@laanwj Willing to review? :-)  Would be really nice to get the project to compile under `-fsantize=integer`.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MTYxOTkzMA==",
                    "publishedAt": "2018-04-16T14:32:29Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11551#issuecomment-381619930"
                }
            ],
            "totalCount": 13
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "de9517d59bc9943ec62ca26ed5f7111c9bc73b6c"
                    }
                }
            ],
            "totalCount": 1
        },
        "createdAt": "2017-10-23T21:33:08Z",
        "deletions": 1,
        "id": "MDExOlB1bGxSZXF1ZXN0MTQ4MjQ1OTkw",
        "labels": {
            "nodes": [
                {
                    "color": "E6F6D6",
                    "id": "MDU6TGFiZWwxMzU5NjE=",
                    "name": "Refactoring"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "number": 11551,
        "state": "OPEN",
        "title": "Fix unsigned integer wrap-around in GetBlockProofEquivalentTime",
        "updatedAt": "2018-04-16T14:32:29Z"
    },
    {
        "additions": 169,
        "author": {
            "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
            "login": "practicalswift",
            "url": "https://github.com/practicalswift"
        },
        "body": "* Add missing `cs_main` locks when accessing `chainActive`. (The variable `chainActive` is guarded by the mutex `cs_main`.)\r\n* Add corresponding annotations (`GUARDED_BY` + `EXCLUSIVE_LOCKS_REQUIRED`).",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "@sdaftuar @morcos Thanks for reviewing. Suggested changes incorporated! :-)",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0MTU1OTIwNA==",
                    "publishedAt": "2017-11-02T21:10:40Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11596#issuecomment-341559204"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
                        "login": "promag"
                    },
                    "body": "@practicalswift following https://github.com/bitcoin/bitcoin/pull/11596#discussion_r149104246, I believe a7eb21a is the fix.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0MjIwMDU5MQ==",
                    "publishedAt": "2017-11-06T16:19:32Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11596#issuecomment-342200591"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "@promag What is the reasoning behind the patch (a7eb21a6f64cc042e695f9f483e49a5adaed7c4e) \u2013 what are the underlying locking requirements (exact variables being guarded)? Your patch is likely correct, but I'm trying to understand exactly why :-)",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0MjIwNjkzNQ==",
                    "publishedAt": "2017-11-06T16:38:35Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11596#issuecomment-342206935"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "@TheBlueMatt Thanks for reviewing. Feedback addressed.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0MjI4MTQ5Mg==",
                    "publishedAt": "2017-11-06T20:48:40Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11596#issuecomment-342281492"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "Reverting the patch suggested by @promag. The locking is now made down in `CreateTransaction` as suggested by @TheBlueMatt.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0MjU3MTIxNA==",
                    "publishedAt": "2017-11-07T18:09:31Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11596#issuecomment-342571214"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/649246?v=4",
                        "login": "TheBlueMatt"
                    },
                    "body": "utACK 2e441c91e7806e6ae781ae0b0aefea958079d15b\r\nThanks!",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0MjU3NTc5MA==",
                    "publishedAt": "2017-11-07T18:25:20Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11596#issuecomment-342575790"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "Added commit 9b3d094894350933342b5e352785cfdd9f2d03fe addressing @luke-jr:s feedback.\r\n\r\nPlease re-review :-)",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0MzU1ODk2Mg==",
                    "publishedAt": "2017-11-10T19:05:55Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11596#issuecomment-343558962"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/649246?v=4",
                        "login": "TheBlueMatt"
                    },
                    "body": "@practicalswift why did you rebase this? It makes reviewing something that was previously reviewed much more difficult. Mind squashing the two commits? There seems to be no reason to have them separate.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0MzU4NzEzMw==",
                    "publishedAt": "2017-11-10T21:10:40Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11596#issuecomment-343587133"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "Now squashed into one commit. Please re-review! :-)\r\n\r\n@TheBlueMatt The reason for the rebase was that I wanted to get rebased on top of 76ea17c7964c15dd90e10c2c257cdeb5847b3d69 (IIRC) in order to get the build to pass \u2013 I always compile with `-Werror=thread-safety-analysis` :-)\r\n\r\nThe reason for the two commits was to allow separate review for the latter commit in the case that I had misunderstood @luke-jr:s suggestion and needed to revert.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0Mzc0NTk4Nw==",
                    "publishedAt": "2017-11-12T15:44:22Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11596#issuecomment-343745987"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "Updated:\r\n* Added a few more missing `cs_main` locks.\r\n* Added a commit with the Clang thread safety analysis annotation `chainActive GUARDED_BY(cs_main)` and the corresponding `EXCLUSIVE_LOCKS_REQUIRED(\u2026)` annotations that follow from that.\r\n\r\nPlease review :-)",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0NjYwNDk5Mg==",
                    "publishedAt": "2017-11-23T12:24:15Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11596#issuecomment-346604992"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/649246?v=4",
                        "login": "TheBlueMatt"
                    },
                    "body": "The addition of annotations here isn't complete - do you not need to add a EXCLUSIVE_LOCKS_REQUIRED annotation to the declarations, not the definitions of functions?\n\nOn November 23, 2017 4:24:23 AM PST, practicalswift <notifications@github.com> wrote:\n>Updated:\n>* Added a few more missing `cs_main` locks.\n>* Added a commit with the Clang thread safety analysis annotations\n>`chainActive GUARDED_BY(cs_main)` and the corresponding\n>`EXCLUSIVE_LOCKS_REQUIRED(\u2026)` annotations.\n>\n>Please review :-)\n>\n>-- \n>You are receiving this because you were mentioned.\n>Reply to this email directly or view it on GitHub:\n>https://github.com/bitcoin/bitcoin/pull/11596#issuecomment-346604992\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0Njk0NDkzNw==",
                    "publishedAt": "2017-11-25T14:49:49Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11596#issuecomment-346944937"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "I've now pushed an updated version adding [a missing `OpenWallets()` lock](https://github.com/bitcoin/bitcoin/pull/11596/files#diff-c865a8939105e6350a50af02766291b7R1575) and some additional annotations.\r\n\r\n@TheBlueMatt - to make the annotations 100 % complete and moved to the declarations we'll have to handle some header files for which the existence of `cs_main` is currently not known. More specifically the following header files:\r\n* `net_processing.h`\r\n* `qt/transactiondesc.h`\r\n* `qt/transactionrecord.h`\r\n* `rpc/blockchain.h`\r\n* `wallet/init.h`\r\n* `wallet/wallet.h`\r\n\r\nWhat is the most appropriate way to handle `cs_main` in the respective cases above? I guess we don't want to sprinkle `extern CCriticalSection cs_main;` all over the place? :-)",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0ODAxMzY5Ng==",
                    "publishedAt": "2017-11-29T22:10:34Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11596#issuecomment-348013696"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/649246?v=4",
                        "login": "TheBlueMatt"
                    },
                    "body": "@practicalswift No, we aren't adding the annotations just to add the annotations. In order for them to be really effective and provide the kind of guarantees we want they need to be listed everywhere the function which needs the annotation is declared, not just ate the definition. I'd rather we leave them out than add them just to function declarations. The annotations are going to be highly infective for things like cs_main - they're gonna propagate backwards through the callstack pretty deep, but that's ok, its how it should be. We shouldn't avoid it, just gotta take the dive (though preferably not in this PR, please, lets just get this one merged).",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0OTA0NTU3MA==",
                    "publishedAt": "2017-12-04T17:52:05Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11596#issuecomment-349045570"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "@TheBlueMatt Is that an utACK for this PR as-is? :-)",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0OTA3MzQ0Mg==",
                    "publishedAt": "2017-12-04T19:14:37Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11596#issuecomment-349073442"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/649246?v=4",
                        "login": "TheBlueMatt"
                    },
                    "body": "If you remove the annotation commit to revert to where people had previously reviewed this, I'm happy to review again.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0OTA3MzczOQ==",
                    "publishedAt": "2017-12-04T19:15:37Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11596#issuecomment-349073739"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "@TheBlueMatt Reverted and pushed. Now only keeping the lock addition (removed adding annotations). Looks good? :-)",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0OTA3NTQxNw==",
                    "publishedAt": "2017-12-04T19:21:01Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11596#issuecomment-349075417"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "@TheBlueMatt Thanks for reviewing! Feedback address. Would you mind re-reviewing? :-)",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NzgxODEyOA==",
                    "publishedAt": "2018-02-22T20:52:49Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11596#issuecomment-367818128"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "@luke-jr Good point! Comment updated. Please re-review :-)",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2OTg0MzYyOQ==",
                    "publishedAt": "2018-03-02T07:24:48Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11596#issuecomment-369843629"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
                        "login": "MarcoFalke"
                    },
                    "body": "Since https://github.com/bitcoin/bitcoin/pull/11226/files#diff-349fbb003d5ae550a2e8fa658e475880R447 is closed, could you amend the second commit to include the clang annotation?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2OTk4OTg2NQ==",
                    "publishedAt": "2018-03-02T17:22:32Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11596#issuecomment-369989865"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "@MarcoFalke Good idea! Annotations added. Please review :-)",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MjQ0Njc2MA==",
                    "publishedAt": "2018-03-12T20:12:04Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11596#issuecomment-372446760"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/1095675?v=4",
                        "login": "luke-jr"
                    },
                    "body": "Why did you un-remove the double-lock at \"The block database contains a block which appears to be from the future.\"?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MjgxODQxNQ==",
                    "publishedAt": "2018-03-13T21:06:35Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11596#issuecomment-372818415"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "@luke-jr I'm actually investigating a dead-lock right now which seems to have been introduced during the last rebase. Which double-lock are you referring to? Do you have a diff?\r\n\r\nI'm investigating as we speak.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MjgyMDk3NA==",
                    "publishedAt": "2018-03-13T21:15:21Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11596#issuecomment-372820974"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "@luke-jr You mean this one?\r\n\r\n```\r\ndiff --git a/src/init.cpp b/src/init.cpp\r\nindex e7544e8..f18a947 100644\r\n--- a/src/init.cpp\r\n+++ b/src/init.cpp\r\n@@ -1429,7 +1429,6 @@ bool AppInitMain()\r\n         nStart = GetTimeMillis();\r\n         do {\r\n             try {\r\n-                LOCK(cs_main);\r\n                 UnloadBlockIndex();\r\n                 pcoinsTip.reset();\r\n                 pcoinsdbview.reset();\r\n```",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MjgyNjM3Mw==",
                    "publishedAt": "2018-03-13T21:34:28Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11596#issuecomment-372826373"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/1095675?v=4",
                        "login": "luke-jr"
                    },
                    "body": "Search init.cpp for \"`The block database contains a block which appears to be from the future.`\". It grabs cs_main immediately before that. But cs_main is already held here now.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3Mjg4OTA0NA==",
                    "publishedAt": "2018-03-14T03:01:06Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11596#issuecomment-372889044"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "I've now reworked this PR and split it up in three commits:\r\n* Add missing `LOCK(cs_main)`:s where required for `chainActive` access\r\n* Annotation: Add `chainActive GUARDED_BY(cs_main)` \u2013 does **not** change run-time behaviour\r\n* Annotation: Add `EXCLUSIVE_LOCKS_REQUIRED(...)` as implied by the `chainActive` guard  \u2013 does **not** change run-time behaviour\r\n\r\nPlease re-review :-)\r\n\r\n/cc @sdaftuar @morcos @promag @TheBlueMatt @luke-jr @MarcoFalke",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NDM2NTgyNQ==",
                    "publishedAt": "2018-03-19T20:37:10Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11596#issuecomment-374365825"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "Rebased!",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3ODIyMDM3NA==",
                    "publishedAt": "2018-04-03T11:39:58Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11596#issuecomment-378220374"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "Rebased!",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3OTc0NjkwMQ==",
                    "publishedAt": "2018-04-09T13:13:05Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11596#issuecomment-379746901"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "Rebased! Please re-review :-)",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MTMyODM5OA==",
                    "publishedAt": "2018-04-14T13:14:09Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11596#issuecomment-381328398"
                }
            ],
            "totalCount": 28
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "604b60f6866b2bb602215e9c17ac4d0838504f93"
                    }
                }
            ],
            "totalCount": 4
        },
        "createdAt": "2017-11-02T17:50:24Z",
        "deletions": 104,
        "id": "MDExOlB1bGxSZXF1ZXN0MTUwMzYwOTA0",
        "labels": {
            "nodes": [
                {
                    "color": "E6F6D6",
                    "id": "MDU6TGFiZWwxMzU5NjE=",
                    "name": "Refactoring"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "CONFLICTING",
        "mergedAt": null,
        "number": 11596,
        "state": "OPEN",
        "title": "Add missing cs_main locks when accessing chainActive",
        "updatedAt": "2018-04-17T18:42:41Z"
    },
    {
        "additions": 152,
        "author": {
            "avatarUrl": "https://avatars2.githubusercontent.com/u/7133040?v=4",
            "login": "ryanofsky",
            "url": "https://github.com/ryanofsky"
        },
        "body": "Call sync.h primitives \"locks\" and \"mutexes\" instead of \"blocks\" and \"waitable critical sections\" to match current coding conventions and c++11 standard names.\r\n\r\nThis PR does not rename the \"CCriticalSection\" class (though this could be done as a followup) because it's used everywhere and would swamp the other changes in this PR. Plain mutexes should mostly be preferred instead of recursive mutexes in new code anyway.\r\n\r\n**This is based on #11640.** The non-base commits are:\r\n\r\n- [`8a02747fd4` scripted-diff: Small locking rename](https://github.com/bitcoin/bitcoin/pull/11599/commits/8a02747fd43de9b0438d90bc92558fb59a25e42f)",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
                        "login": "promag"
                    },
                    "body": "Concept ACK.\r\n\r\nDrop `C` prefix too?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0MTcxMzc3Nw==",
                    "publishedAt": "2017-11-03T14:10:37Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11599#issuecomment-341713777"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/7133040?v=4",
                        "login": "ryanofsky"
                    },
                    "body": ">Concept ACK.\r\n>\r\n>Drop C prefix too?\r\n\r\nThanks, will wait for more feedback. I didn't rename CCriticalSection because it's used everywhere and changing it would make the diff 3 times as big (22 lines -> 73 lines). Also I think we will probably lean toward using non-recursive rather than recursive locks in new code, so CCriticalSection name should not matter as much going forward. I kept the C in CCriticalLock to be consistent with CCriticalSection. CCriticalLock is only used internally in sync.h so again it shouldn't have an impact on new code, and I didn't see a reason to break consistency within sync.h.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0MTcyNjk3Mw==",
                    "publishedAt": "2017-11-03T14:56:03Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11599#issuecomment-341726973"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "utACK eec3e2261eb895b704c5153203e6b1b946213667",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0MTc0MzA4OQ==",
                    "publishedAt": "2017-11-03T15:48:20Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11599#issuecomment-341743089"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/649246?v=4",
                        "login": "TheBlueMatt"
                    },
                    "body": "To me, calling it just \"Mutex\"/\"Lock\" implies this is what people should use for new mutexs/locks, but that isn't what we want because it doesn't support DEBUG_LOCKORDER. Indeed, we maybe could make it support DEBUG_LOCKORDER and then start migrating to it over our current recursive stuff, but for now I'd prefer to make it more clear that the new typedefs should be discouraged.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0MTgzMDQzOQ==",
                    "publishedAt": "2017-11-03T21:21:20Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11599#issuecomment-341830439"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/7133040?v=4",
                        "login": "ryanofsky"
                    },
                    "body": "Is DEBUG_LOCKORDER the only reason you want to discourage these?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0MTgzMjA3MA==",
                    "publishedAt": "2017-11-03T21:29:40Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11599#issuecomment-341832070"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/649246?v=4",
                        "login": "TheBlueMatt"
                    },
                    "body": "I suppose, I mean as long as its clear that its non-recursive and someone doesn't introduce a bug on accident cause they're not paying attention, DEBUG_LOCKORDER would be my only complaint.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0MTgzMzA5Ng==",
                    "publishedAt": "2017-11-03T21:35:00Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11599#issuecomment-341833096"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/7133040?v=4",
                        "login": "ryanofsky"
                    },
                    "body": "I'll just implement DEBUG_LOCKORDER for these. It should be pretty easy.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0MTgzMzE5NA==",
                    "publishedAt": "2017-11-03T21:35:29Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11599#issuecomment-341833194"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
                        "login": "MarcoFalke"
                    },
                    "body": "Needs rebase",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0MjkzMTUyMg==",
                    "publishedAt": "2017-11-08T19:27:11Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11599#issuecomment-342931522"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "If we're renaming them anyway, why not call them what they are? RecursiveMutex. RecursiveLock, Mutex, Lock?\r\n\r\nDo we need any special, project-local names for locking constructs at all or could we do with simply the c++11 naming? (I've wondered about this many times)\r\n\r\nI'm all for using non-recursive locks in new code, using recursive locks is usually discouraged nowadays.\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0MzI2MTM4Ng==",
                    "publishedAt": "2017-11-09T19:16:52Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11599#issuecomment-343261386"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/649246?v=4",
                        "login": "TheBlueMatt"
                    },
                    "body": "Indeed, after #11640, and because this is scripted, I'd be more than happy to see us drop the \"CriticalSection\" naming - no one uses that anymore...",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0MzI2NzkzMA==",
                    "publishedAt": "2017-11-09T19:38:32Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11599#issuecomment-343267930"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "Agree with @laanwj \u2013 let's use the standard C++11 naming instead of project-local names for the locking constructs.\r\n\r\nAre there any good arguments for continuing with project-local names for the locking constructs?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0MzQzMDM4MA==",
                    "publishedAt": "2017-11-10T10:01:47Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11599#issuecomment-343430380"
                }
            ],
            "totalCount": 11
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "6e35c2e77db67853c61637484cb72e56ff2cc116"
                    }
                }
            ],
            "totalCount": 6
        },
        "createdAt": "2017-11-03T12:11:49Z",
        "deletions": 83,
        "id": "MDExOlB1bGxSZXF1ZXN0MTUwNTEyNzky",
        "labels": {
            "nodes": [
                {
                    "color": "E6F6D6",
                    "id": "MDU6TGFiZWwxMzU5NjE=",
                    "name": "Refactoring"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "number": 11599,
        "state": "OPEN",
        "title": "scripted-diff: Small locking rename",
        "updatedAt": "2018-04-13T17:21:28Z"
    },
    {
        "additions": 188,
        "author": {
            "avatarUrl": "https://avatars0.githubusercontent.com/u/649246?v=4",
            "login": "TheBlueMatt",
            "url": "https://github.com/TheBlueMatt"
        },
        "body": "They were only used in places where they really should not have been used.\r\n\r\nReplaces #10697.",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/649246?v=4",
                        "login": "TheBlueMatt"
                    },
                    "body": "Ping @theuni.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0MTg1ODE1Nw==",
                    "publishedAt": "2017-11-04T00:32:16Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11604#issuecomment-341858157"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "Strong concept ACK\r\n\r\nGetting this merged will allow removing this ugly `-Wthread-safety` work-around: https://github.com/bitcoin/bitcoin/pull/11226/commits/5a890d376f7a296a6a4a7ce0d076012ef920b239",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0MjEzNTQxNw==",
                    "publishedAt": "2017-11-06T12:33:24Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11604#issuecomment-342135417"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/417043?v=4",
                        "login": "theuni"
                    },
                    "body": "This really clashes with the libevent work, which totally reworks the disconnection logic.\r\n\r\nCan we revisit this down the road a bit? It's a bit frustrating to have some of these things already worked out, but stuck waiting on per-requisite PR review.\r\n\r\nThat said, concept ACK on moving RelayTransaction/nStartingHeight out of net.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0MjYwODI4OQ==",
                    "publishedAt": "2017-11-07T20:15:28Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11604#issuecomment-342608289"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/649246?v=4",
                        "login": "TheBlueMatt"
                    },
                    "body": "How does this conflict with libevent? The disconnect logic is still based on telling CConnman to do X with a peer, no? And FinalizeNode being moved around shouldn't matter too much, just as long as its not called at the same time as a call to one of the other NetEventsInterface calls.\r\n\r\nThis is a rather simple PR, I'm happy to rebase it on some different disconnect-order tweaks that are pulled out of libevent (I assume you're gonna reorg them prior to pulling in the whole libevent reword as a separate thing) but it'd be a shame for a fix like this which mostly just pulls net and net_processing apart further to wait on a major rework of net.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0MjYxMDI0OA==",
                    "publishedAt": "2017-11-07T20:22:32Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11604#issuecomment-342610248"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "Rebase needed :-)",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0NDQyMzIyMQ==",
                    "publishedAt": "2017-11-14T22:37:53Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11604#issuecomment-344423221"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/417043?v=4",
                        "login": "theuni"
                    },
                    "body": "Discussed this with @TheBlueMatt today and we agreed that it makes sense to split this into 2 PRs: 1 to move a bunch of stuff to CNodeState, then a follow-up to argue about how to best remove ForEachNode.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0NDQzMTg5MQ==",
                    "publishedAt": "2017-11-14T23:14:10Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11604#issuecomment-344431891"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/649246?v=4",
                        "login": "TheBlueMatt"
                    },
                    "body": "Heh, to follow up on the 2PRs comment, @theuni sent me down a rabbit hole and suddenly I found myself in a farmiliar place - trying to pull CNodeState out of cs_main...I'm probably going to revive that work soon based on an approach @theuni suggested, but this PR will have to stand alone for some time yet. Please review with that in mind.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0NDc2NjYzOA==",
                    "publishedAt": "2017-11-15T23:42:33Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11604#issuecomment-344766638"
                }
            ],
            "totalCount": 7
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "2dda567283bbac77a23deafe336f88bfece3c5b8"
                    }
                }
            ],
            "totalCount": 8
        },
        "createdAt": "2017-11-04T00:31:26Z",
        "deletions": 203,
        "id": "MDExOlB1bGxSZXF1ZXN0MTUwNjUzMjU4",
        "labels": {
            "nodes": [
                {
                    "color": "006b75",
                    "id": "MDU6TGFiZWw5ODI5ODAwNw==",
                    "name": "P2P"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "CONFLICTING",
        "mergedAt": null,
        "number": 11604,
        "state": "OPEN",
        "title": "[net] Remove ForNode/ForEachNode",
        "updatedAt": "2017-12-30T11:11:35Z"
    },
    {
        "additions": 314,
        "author": {
            "avatarUrl": "https://avatars2.githubusercontent.com/u/7133040?v=4",
            "login": "ryanofsky",
            "url": "https://github.com/ryanofsky"
        },
        "body": "Add test coverage for Qt initialization code & basic RPC console functionality\r\n\r\nMotivation for this change was a bug in #11603 which existing tests failed to catch.",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/863730?v=4",
                        "login": "fanquake"
                    },
                    "body": "Travis failures:\r\n```\r\nIn file included from /usr/include/qt4/QtGui/QLineEdit:1:0,\r\n                 from qt/test/apptests.cpp:20:\r\n/usr/include/qt4/QtGui/qlineedit.h: In function \u2018void {anonymous}::TestRpcCommand(RPCConsole*)\u2019:\r\n/usr/include/qt4/QtGui/qlineedit.h:198:10: error: \u2018void QLineEdit::returnPressed()\u2019 is protected\r\n     void returnPressed();\r\n          ^\r\nqt/test/apptests.cpp:34:29: error: within this context\r\n     lineEdit->returnPressed();\r\n                             ^\r\nmake[2]: *** [qt/test/qt_test_test_bitcoin_qt-apptests.o] Error 1\r\n```\r\n```\r\nFAIL: qt/test/test_bitcoin-qt\r\n=============================\r\n********* Start testing of AppTests *********\r\nConfig: Using QtTest library 5.7.1, Qt 5.7.1 (x86_64-little_endian-lp64 static release build; by GCC 4.8.4)\r\nPASS   : AppTests::initTestCase()\r\nQWARN  : AppTests::appTests() Backing up GUI settings to \"/tmp/test_bitcoin-qt_1510018491_71945/regtest/guisettings.ini.bak\"\r\nQWARN  : AppTests::appTests() QFont::setPointSizeF: Point size <= 0 (-1.000000), must be greater than 0\r\nQWARN  : AppTests::appTests() QFont::setPointSizeF: Point size <= 0 (-1.000000), must be greater than 0\r\nQWARN  : AppTests::appTests() QFont::setPointSizeF: Point size <= 0 (-1.000000), must be greater than 0\r\nQWARN  : AppTests::appTests() QFont::setPointSizeF: Point size <= 0 (-1.000000), must be greater than 0\r\nQWARN  : AppTests::appTests() QFont::setPointSizeF: Point size <= 0 (-1.000000), must be greater than 0\r\nQWARN  : AppTests::appTests() QFont::setPointSizeF: Point size <= 0 (-1.000000), must be greater than 0\r\nQWARN  : AppTests::appTests() QFont::setPointSizeF: Point size <= 0 (-1.000000), must be greater than 0\r\nQWARN  : AppTests::appTests() QFont::setPointSizeF: Point size <= 0 (-1.000000), must be greater than 0\r\nQDEBUG : AppTests::appTests() requestInitialize : Requesting initialize\r\nQDEBUG : AppTests::appTests() initialize : Running initialization in thread\r\nQDEBUG : AppTests::appTests() initializeResult : Initialization result:  true\r\nQWARN  : AppTests::appTests() Platform customization: \"other\"\r\n========= Received signal, dumping stack ==============\r\n========= End of stack trace ==============\r\nQFATAL : AppTests::appTests() Received signal 11\r\n         Function time: 267ms Total time: 272ms\r\nFAIL!  : AppTests::appTests() Received a fatal error.\r\n   Loc: [Unknown file(0)]\r\nTotals: 1 passed, 1 failed, 0 skipped, 0 blacklisted, 284ms\r\n********* Finished testing of AppTests *********\r\n```",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0MjM0OTMwNg==",
                    "publishedAt": "2017-11-07T01:49:40Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11625#issuecomment-342349306"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
                        "login": "promag"
                    },
                    "body": "Any hint?\r\n```sh\r\nmake clean && make\r\n\r\n...\r\n\r\n  CXXLD    qt/test/test_bitcoin-qt\r\nUndefined symbols for architecture x86_64:\r\n  \"MacNotificationHandler::instance()\", referenced from:\r\n      Notificator::Notificator(QString const&, QSystemTrayIcon*, QWidget*) in libbitcoinqt.a(qt_libbitcoinqt_a-notificator.o)\r\n      Notificator::notify(Notificator::Class, QString const&, QString const&, QIcon const&, int) in libbitcoinqt.a(qt_libbitcoinqt_a-notificator.o)\r\n  \"MacNotificationHandler::hasUserNotificationCenterSupport()\", referenced from:\r\n      Notificator::Notificator(QString const&, QSystemTrayIcon*, QWidget*) in libbitcoinqt.a(qt_libbitcoinqt_a-notificator.o)\r\n  \"MacNotificationHandler::showNotification(QString const&, QString const&)\", referenced from:\r\n      Notificator::notify(Notificator::Class, QString const&, QString const&, QIcon const&, int) in libbitcoinqt.a(qt_libbitcoinqt_a-notificator.o)\r\n  \"MacDockIconHandler::cleanup()\", referenced from:\r\n      BitcoinGUI::~BitcoinGUI() in libbitcoinqt.a(qt_libbitcoinqt_a-bitcoingui.o)\r\n  \"MacDockIconHandler::setMainWindow(QMainWindow*)\", referenced from:\r\n      BitcoinGUI::createTrayIconMenu() in libbitcoinqt.a(qt_libbitcoinqt_a-bitcoingui.o)\r\n  \"MacDockIconHandler::dockMenu()\", referenced from:\r\n      BitcoinGUI::createTrayIconMenu() in libbitcoinqt.a(qt_libbitcoinqt_a-bitcoingui.o)\r\n  \"MacDockIconHandler::instance()\", referenced from:\r\n      BitcoinGUI::BitcoinGUI(PlatformStyle const*, NetworkStyle const*, QWidget*) in libbitcoinqt.a(qt_libbitcoinqt_a-bitcoingui.o)\r\n      BitcoinGUI::createTrayIconMenu() in libbitcoinqt.a(qt_libbitcoinqt_a-bitcoingui.o)\r\n  \"MacDockIconHandler::setIcon(QIcon const&)\", referenced from:\r\n      BitcoinGUI::BitcoinGUI(PlatformStyle const*, NetworkStyle const*, QWidget*) in libbitcoinqt.a(qt_libbitcoinqt_a-bitcoingui.o)\r\nld: symbol(s) not found for architecture x86_64\r\nclang: error: linker command failed with exit code 1 (use -v to see invocation)\r\nmake[2]: *** [qt/test/test_bitcoin-qt] Error 1\r\nmake[2]: *** Waiting for unfinished jobs....\r\nmake[1]: *** [all-recursive] Error 1\r\nmake: *** [all-recursive] Error 1\r\n```",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0MzAxNTc1Ng==",
                    "publishedAt": "2017-11-09T01:16:19Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11625#issuecomment-343015756"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "Have the same compile issue (clang):\r\n```\r\nUndefined symbols for architecture x86_64:\r\n  \"MacNotificationHandler::instance()\", referenced from:\r\n      Notificator::Notificator(QString const&, QSystemTrayIcon*, QWidget*) in libbitcoinqt.a(qt_libbitcoinqt_a-notificator.o)\r\n      Notificator::notifyMacUserNotificationCenter(Notificator::Class, QString const&, QString const&, QIcon const&) in libbitcoinqt.a(qt_libbitcoinqt_a-notificator.o)\r\n  \"MacNotificationHandler::hasUserNotificationCenterSupport()\", referenced from:\r\n      Notificator::Notificator(QString const&, QSystemTrayIcon*, QWidget*) in libbitcoinqt.a(qt_libbitcoinqt_a-notificator.o)\r\n  \"MacNotificationHandler::showNotification(QString const&, QString const&)\", referenced from:\r\n      Notificator::notifyMacUserNotificationCenter(Notificator::Class, QString const&, QString const&, QIcon const&) in libbitcoinqt.a(qt_libbitcoinqt_a-notificator.o)\r\n  \"MacDockIconHandler::cleanup()\", referenced from:\r\n      BitcoinGUI::~BitcoinGUI() in libbitcoinqt.a(qt_libbitcoinqt_a-bitcoingui.o)\r\n  \"MacDockIconHandler::setMainWindow(QMainWindow*)\", referenced from:\r\n      BitcoinGUI::createTrayIconMenu() in libbitcoinqt.a(qt_libbitcoinqt_a-bitcoingui.o)\r\n  \"MacDockIconHandler::dockMenu()\", referenced from:\r\n      BitcoinGUI::createTrayIconMenu() in libbitcoinqt.a(qt_libbitcoinqt_a-bitcoingui.o)\r\n  \"MacDockIconHandler::instance()\", referenced from:\r\n      BitcoinGUI::BitcoinGUI(PlatformStyle const*, NetworkStyle const*, QWidget*) in libbitcoinqt.a(qt_libbitcoinqt_a-bitcoingui.o)\r\n      BitcoinGUI::createTrayIconMenu() in libbitcoinqt.a(qt_libbitcoinqt_a-bitcoingui.o)\r\n  \"MacDockIconHandler::setIcon(QIcon const&)\", referenced from:\r\n      BitcoinGUI::BitcoinGUI(PlatformStyle const*, NetworkStyle const*, QWidget*) in libbitcoinqt.a(qt_libbitcoinqt_a-bitcoingui.o)\r\nld: symbol(s) not found for architecture x86_64\r\nclang: error: linker command failed with exit code 1 (use -v to see invocation)\r\nmake[2]: *** [qt/test/test_bitcoin-qt] Error 1\r\nmake[1]: *** [all-recursive] Error 1\r\n```\r\n\r\nLooks like an OSX issue.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0ODAzNDAxNQ==",
                    "publishedAt": "2017-11-29T23:40:41Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11625#issuecomment-348034015"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/7133040?v=4",
                        "login": "ryanofsky"
                    },
                    "body": "Looking into the link error, but @jonasschnelli do you have an idea why the build might be failing for you even though the apple target succeeds on travis?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0ODMxNzQyNA==",
                    "publishedAt": "2017-11-30T20:53:03Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11625#issuecomment-348317424"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/7133040?v=4",
                        "login": "ryanofsky"
                    },
                    "body": "> Looking into the link error, but @jonasschnelli do you have an idea why the build might be failing for you even though the apple target succeeds on travis?\r\n\r\nSeems like the reason is that travis doesn't build tests for the apple target (it is just running `make deploy`).\r\n\r\nI also think I see the reason for the error. `BITCOIN_MM` files seem to get directly linked into the `qt/bitcoin-qt` executable instead of being part of `qt/libbitcoinqt.a`. I will try to move them there.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0ODMyMTIyOQ==",
                    "publishedAt": "2017-11-30T21:08:18Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11625#issuecomment-348321229"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
                        "login": "promag"
                    },
                    "body": "I can dig a little to see if I can find a fix.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0ODMzMzUwNg==",
                    "publishedAt": "2017-11-30T21:55:32Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11625#issuecomment-348333506"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "Travis was passing, but I just re-triggered it (to test it on top of master), now https://travis-ci.org/bitcoin/bitcoin/jobs/309721182 :(\r\n\r\nStrange:\r\n```\r\n0.01s$ if [ \"$CHECK_DOC\" = 1 -a \"$TRAVIS_EVENT_TYPE\" = \"pull_request\" ]; then contrib/devtools/lint-all.sh; fi\r\ncontrib/devtools/lint-python.sh: 10: contrib/devtools/lint-python.sh: flake8: not found\r\n^---- failure generated from contrib/devtools/lint-python.sh\r\n```",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2MTU1MDQ1MQ==",
                    "publishedAt": "2018-01-30T10:29:56Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11625#issuecomment-361550451"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
                        "login": "MarcoFalke"
                    },
                    "body": "@laanwj It is a travis bug :( They use the source code from master (merged with this pull) but the .travis.yml of only the pull...\r\n\r\nNeeds rebase",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2MTU4Mzk5NA==",
                    "publishedAt": "2018-01-30T12:51:09Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11625#issuecomment-361583994"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "Just ran this locally (on top of master) and got the error blow (while master passes):\r\n```\r\n********* Start testing of AppTests *********\r\nConfig: Using QtTest library 5.10.0, Qt 5.10.0 (x86_64-little_endian-lp64 shared (dynamic) release build; by Clang 9.0.0 (clang-900.0.39.2) (Apple))\r\nPASS   : AppTests::initTestCase()\r\nQWARN  : AppTests::appTests() Backing up GUI settings to \"/var/folders/ct/m1t1vdnj16b578f6f50jct3m0000gn/T/test_bitcoin-qt_1518433105_69222/regtest/guisettings.ini.bak\"\r\n\r\n========= Received signal, dumping stack ==============\r\n(lldb) process attach --pid 19198\r\nProcess 19198 stopped\r\n* thread #1, queue = 'com.apple.main-thread', stop reason = signal SIGSTOP\r\n    frame #0: 0x00007fffe7487406 libsystem_kernel.dylib`__wait4_nocancel + 10\r\nlibsystem_kernel.dylib`__wait4_nocancel:\r\n->  0x7fffe7487406 <+10>: jae    0x7fffe7487410            ; <+20>\r\n    0x7fffe7487408 <+12>: movq   %rax, %rdi\r\n    0x7fffe748740b <+15>: jmp    0x7fffe747fcaf            ; cerror_nocancel\r\n    0x7fffe7487410 <+20>: retq   \r\nTarget 0: (test_bitcoin-qt) stopped.\r\n\r\nExecutable module set to \"/Users/jonasschnelli/Documents/bitcoin/bitcoin/./src/qt/test/test_bitcoin-qt\".\r\nArchitecture set to: x86_64h-apple-macosx.\r\n(lldb) bt all\r\n* thread #1, queue = 'com.apple.main-thread', stop reason = signal SIGSTOP\r\n  * frame #0: 0x00007fffe7487406 libsystem_kernel.dylib`__wait4_nocancel + 10\r\n    frame #1: 0x00007fffe740de3d libsystem_c.dylib`system + 463\r\n    frame #2: 0x0000000107da0f42 QtTest`___lldb_unnamed_symbol20$$QtTest + 162\r\n    frame #3: 0x0000000107da0e4d QtTest`___lldb_unnamed_symbol19$$QtTest + 205\r\n    frame #4: 0x00007fffe7567b3a libsystem_platform.dylib`_sigtramp + 26\r\n    frame #5: 0x000000010812202a QtWidgets`QMenu::setAsDockMenu() + 42\r\n    frame #6: 0x000000010546de81 test_bitcoin-qt`MacDockIconHandler::MacDockIconHandler(this=0x00007f9578f0fee0) at macdockiconhandler.mm:60\r\n    frame #7: 0x000000010546df25 test_bitcoin-qt`MacDockIconHandler::MacDockIconHandler(this=0x00007f9578f0fee0) at macdockiconhandler.mm:50\r\n    frame #8: 0x000000010546e508 test_bitcoin-qt`MacDockIconHandler::instance() at macdockiconhandler.mm:116\r\n    frame #9: 0x00000001052e40a9 test_bitcoin-qt`BitcoinGUI::BitcoinGUI(this=0x00007f9578f0e6b0, _platformStyle=0x00007f9578deb140, networkStyle=0x00007f9578c03db0, parent=0x0000000000000000) at bitcoingui.cpp:143\r\n    frame #10: 0x00000001052ea17b test_bitcoin-qt`BitcoinGUI::BitcoinGUI(this=0x00007f9578f0e6b0, _platformStyle=0x00007f9578deb140, networkStyle=0x00007f9578c03db0, parent=0x0000000000000000) at bitcoingui.cpp:121\r\n    frame #11: 0x00000001052de9f9 test_bitcoin-qt`BitcoinApplication::createWindow(this=0x00007fff5a9d18b8, networkStyle=0x00007f9578c03db0) at bitcoin.cpp:297\r\n    frame #12: 0x0000000105236c9a test_bitcoin-qt`AppTests::appTests(this=0x00007fff5a9d1880) at apptests.cpp:58\r\n    frame #13: 0x00000001052d6b1a test_bitcoin-qt`AppTests::qt_static_metacall(_o=0x00007fff5a9d1880, _c=InvokeMetaMethod, _id=0, _a=0x00007fff5a9d0d50) at moc_apptests.cpp:81\r\n    frame #14: 0x00000001079fb19c QtCore`QMetaMethod::invoke(QObject*, Qt::ConnectionType, QGenericReturnArgument, QGenericArgument, QGenericArgument, QGenericArgument, QGenericArgument, QGenericArgument, QGenericArgument, QGenericArgument, QGenericArgument, QGenericArgument, QGenericArgument) const + 1308\r\n    frame #15: 0x0000000107d9ee01 QtTest`___lldb_unnamed_symbol11$$QtTest + 1169\r\n    frame #16: 0x0000000107d9fac9 QtTest`___lldb_unnamed_symbol13$$QtTest + 777\r\n    frame #17: 0x0000000107da09d7 QtTest`___lldb_unnamed_symbol17$$QtTest + 1031\r\n    frame #18: 0x0000000107da1557 QtTest`QTest::qRun() + 247\r\n    frame #19: 0x0000000107da11b0 QtTest`QTest::qExec(QObject*, int, char**) + 16\r\n    frame #20: 0x000000010524fb66 test_bitcoin-qt`main(argc=1, argv=0x00007fff5a9d19d8) at test_main.cpp:82\r\n    frame #21: 0x00007fffe7358235 libdyld.dylib`start + 1\r\n    frame #22: 0x00007fffe7358235 libdyld.dylib`start + 1\r\n  thread #2\r\n    frame #0: 0x00007fffe748744e libsystem_kernel.dylib`__workq_kernreturn + 10\r\n    frame #1: 0x00007fffe7571621 libsystem_pthread.dylib`_pthread_wqthread + 1426\r\n    frame #2: 0x00007fffe757107d libsystem_pthread.dylib`start_wqthread + 13\r\n  thread #3\r\n    frame #0: 0x00007fffe748744e libsystem_kernel.dylib`__workq_kernreturn + 10\r\n    frame #1: 0x00007fffe7571621 libsystem_pthread.dylib`_pthread_wqthread + 1426\r\n    frame #2: 0x00007fffe757107d libsystem_pthread.dylib`start_wqthread + 13\r\n  thread #4\r\n    frame #0: 0x00007fffe748744e libsystem_kernel.dylib`__workq_kernreturn + 10\r\n    frame #1: 0x00007fffe757148e libsystem_pthread.dylib`_pthread_wqthread + 1023\r\n    frame #2: 0x00007fffe757107d libsystem_pthread.dylib`start_wqthread + 13\r\n  thread #5, name = 'QThread'\r\n    frame #0: 0x00007fffe7486bf2 libsystem_kernel.dylib`__psynch_cvwait + 10\r\n    frame #1: 0x00007fffe75727fa libsystem_pthread.dylib`_pthread_cond_wait + 712\r\n    frame #2: 0x0000000107831c06 QtCore`___lldb_unnamed_symbol320$$QtCore + 294\r\n    frame #3: 0x000000010783195b QtCore`___lldb_unnamed_symbol319$$QtCore + 43\r\n    frame #4: 0x000000010783190c QtCore`QWaitCondition::wait(QMutex*, unsigned long) + 156\r\n    frame #5: 0x0000000107da6566 QtTest`___lldb_unnamed_symbol34$$QtTest + 70\r\n    frame #6: 0x00000001078303cc QtCore`___lldb_unnamed_symbol310$$QtCore + 364\r\n    frame #7: 0x00007fffe757193b libsystem_pthread.dylib`_pthread_body + 180\r\n    frame #8: 0x00007fffe7571887 libsystem_pthread.dylib`_pthread_start + 286\r\n    frame #9: 0x00007fffe757108d libsystem_pthread.dylib`thread_start + 13\r\n  thread #6\r\n    frame #0: 0x00007fffe748744e libsystem_kernel.dylib`__workq_kernreturn + 10\r\n    frame #1: 0x00007fffe7571621 libsystem_pthread.dylib`_pthread_wqthread + 1426\r\n    frame #2: 0x00007fffe757107d libsystem_pthread.dylib`start_wqthread + 13\r\n  thread #7\r\n    frame #0: 0x00007fffe748744e libsystem_kernel.dylib`__workq_kernreturn + 10\r\n    frame #1: 0x00007fffe7571621 libsystem_pthread.dylib`_pthread_wqthread + 1426\r\n    frame #2: 0x00007fffe757107d libsystem_pthread.dylib`start_wqthread + 13\r\n(lldb) quit\r\n========= End of stack trace ==============\r\nQFATAL : AppTests::appTests() Received signal 11\r\n         Function time: 143ms Total time: 144ms\r\nFAIL!  : AppTests::appTests() Received a fatal error.\r\n   Loc: [Unknown file(0)]\r\nTotals: 1 passed, 1 failed, 0 skipped, 0 blacklisted, 4580ms\r\n********* Finished testing of AppTests *********\r\nAbort trap: 6\r\n```",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NDg4OTk0NA==",
                    "publishedAt": "2018-02-12T10:58:56Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11625#issuecomment-364889944"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/7133040?v=4",
                        "login": "ryanofsky"
                    },
                    "body": "> Just ran this locally (on top of master) and got the error blow (while master passes):\r\n\r\nI don't have easy access to a mac, but it looks like this could be caused by the following Qt bug: https://bugreports.qt.io/browse/QTBUG-49686\r\n\r\nIssue described there is failing to check for `d->createPlatformMenu()` null return value before calling `SetDockMenuFunction` here: http://code.qt.io/cgit/qt/qtbase.git/tree/src/widgets/widgets/qmenu_mac.mm?h=5.10#n109\r\n\r\nWill look more for a workaround.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NDk0NTY0Ng==",
                    "publishedAt": "2018-02-12T14:53:26Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11625#issuecomment-364945646"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/7133040?v=4",
                        "login": "ryanofsky"
                    },
                    "body": "@jonasschnelli, added commit a6f6182fb02c38a13982e3edcd03db3da316f1b3 to try to address mac qt test crash. Do you think you could test it?\r\n\r\nRebased b67d524b69350e131dd102ef716cc095130e72d7 -> 328eb8610d123bf748f829a4db9fc4214e5d5606 ([pr/apptest.6](https://github.com/ryanofsky/bitcoin/commits/pr/apptest.6) -> [pr/apptest.7](https://github.com/ryanofsky/bitcoin/commits/pr/apptest.7)) due to conflict with #12266 (thread_group / CScheduler removal)\r\nAdded 1 commits 412fb2d06fc3a0e2337caa07ca158089be6abffe -> a6f6182fb02c38a13982e3edcd03db3da316f1b3 ([pr/apptest.7](https://github.com/ryanofsky/bitcoin/commits/pr/apptest.7) -> [pr/apptest.8](https://github.com/ryanofsky/bitcoin/commits/pr/apptest.8), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/apptest.7...pr/apptest.8))\r\nRebased a6f6182fb02c38a13982e3edcd03db3da316f1b3 -> 4aeec0ebccb4d55800e1f2271f1af15dae4d7eca ([pr/apptest.8](https://github.com/ryanofsky/bitcoin/commits/pr/apptest.8) -> [pr/apptest.9](https://github.com/ryanofsky/bitcoin/commits/pr/apptest.9)) due to conflict with new commit and #10498.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NTAwOTE2Nw==",
                    "publishedAt": "2018-02-12T18:06:40Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11625#issuecomment-365009167"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/10217?v=4",
                        "login": "Sjors"
                    },
                    "body": "`make check` on MacOS 10.13.3 fails. More specifically:\r\n\r\n```\r\niMac:bitcoin bitcoin$ src/qt/test/test_bitcoin-qt\r\n********* Start testing of AppTests *********\r\nConfig: Using QtTest library 5.10.0, Qt 5.10.0 (x86_64-little_endian-lp64 shared (dynamic) release build; by Clang 9.0.0 (clang-900.0.39.2) (Apple))\r\nPASS   : AppTests::initTestCase()\r\nQWARN  : AppTests::appTests() Backing up GUI settings to \"/var/folders/lv/01bvgc7x1fz03w1t8v7g7mrw0000gp/T/test_bitcoin-qt_1518462364_49176/regtest/guisettings.ini.bak\"\r\nQWARN  : AppTests::appTests() QFont::setPointSizeF: Point size <= 0 (-1.000000), must be greater than 0\r\nQWARN  : AppTests::appTests() QFont::setPointSizeF: Point size <= 0 (-1.000000), must be greater than 0\r\nQWARN  : AppTests::appTests() QFont::setPointSizeF: Point size <= 0 (-1.000000), must be greater than 0\r\nQWARN  : AppTests::appTests() QFont::setPointSizeF: Point size <= 0 (-1.000000), must be greater than 0\r\nQWARN  : AppTests::appTests() QFont::setPointSizeF: Point size <= 0 (-1.000000), must be greater than 0\r\nQWARN  : AppTests::appTests() QFont::setPointSizeF: Point size <= 0 (-1.000000), must be greater than 0\r\nQWARN  : AppTests::appTests() QFont::setPointSizeF: Point size <= 0 (-1.000000), must be greater than 0\r\nQWARN  : AppTests::appTests() QFont::setPointSizeF: Point size <= 0 (-1.000000), must be greater than 0\r\nQWARN  : AppTests::appTests() QFont::setPointSizeF: Point size <= 0 (-1.000000), must be greater than 0\r\nQWARN  : AppTests::appTests() QFont::setPointSizeF: Point size <= 0 (-1.000000), must be greater than 0\r\nQWARN  : AppTests::appTests() QFont::setPointSizeF: Point size <= 0 (-1.000000), must be greater than 0\r\nQDEBUG : AppTests::appTests() requestInitialize : Requesting initialize\r\nQDEBUG : AppTests::appTests() initialize : Running initialization in thread\r\nQDEBUG : AppTests::appTests() initializeResult : Initialization result:  true\r\nQWARN  : AppTests::appTests() Platform customization: \"macosx\"\r\nQDEBUG : AppTests::appTests() \"ReportInvalidCertificate: Payment server found an invalid certificate: \" \"0d:5e:99:0a:d6:9d:b7:78:ec:d8:07:56:3b:86:15:d9\" (\"DST ACES CA X6\") () (\"DST ACES\")\r\nQDEBUG : AppTests::appTests() \"ReportInvalidCertificate: Payment server found an invalid certificate: \" \"01\" (\"Izenpe.com\") () ()\r\nQDEBUG : AppTests::appTests() \"ReportInvalidCertificate: Payment server found an invalid certificate: \" \"11\" (\"T\u00dcB\u0130TAK UEKAE K\u00f6k Sertifika Hizmet Sa\u011flay\u0131c\u0131s\u0131 - S\u00fcr\u00fcm 3\") () (\"Kamu Sertifikasyon Merkezi\", \"Ulusal Elektronik ve Kriptoloji Ara\u015ft\u0131rma Enstit\u00fcs\u00fc - UEKAE\")\r\nQDEBUG : AppTests::appTests() \"ReportInvalidCertificate: Payment server found an invalid certificate: \" \"01\" (\"T\u00dcRKTRUST Elektronik Sertifika Hizmet Sa\u011flay\u0131c\u0131s\u0131\") () ()\r\nQWARN  : AppTests::appTests() PaymentServer::LoadRootCAs: Loaded  173  root certificates\r\nQFATAL : AppTests::appTests() Received signal 11\r\n         Function time: 2345ms Total time: 2346ms\r\nFAIL!  : AppTests::appTests() Received a fatal error.\r\n   Loc: [Unknown file(0)]\r\nTotals: 1 passed, 1 failed, 0 skipped, 0 blacklisted, 2346ms\r\n********* Finished testing of AppTests *********\r\nAbort trap: 6\r\n```\r\n\r\nThat test does pass on master (5dc00f68).",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NTAyODk3Mw==",
                    "publishedAt": "2018-02-12T19:08:55Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11625#issuecomment-365028973"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/10217?v=4",
                        "login": "Sjors"
                    },
                    "body": "I notice that it pops up a firewall notice on MacOS, which doesn't happen on master. That's generally the result of trying to bind on anything other than `127.0.0.*` (see also #12200). Turning the firewall off doesn't prevent the error though.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NTAzMDUwMw==",
                    "publishedAt": "2018-02-12T19:13:58Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11625#issuecomment-365030503"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/7133040?v=4",
                        "login": "ryanofsky"
                    },
                    "body": "> QFATAL : AppTests::appTests() Received signal 11\r\n\r\nWould be useful to have a stack trace to debug further. Any chance you could run the test under gdb?\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NTAzNDY2OA==",
                    "publishedAt": "2018-02-12T19:28:12Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11625#issuecomment-365034668"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/10217?v=4",
                        "login": "Sjors"
                    },
                    "body": "I'm not really familiar with how to use `gdb`... So far I was able to produce this:\r\n\r\n```\r\ngdb src/qt/test/test_bitcoin-qt\r\nGNU gdb (GDB) 8.1\r\nThis GDB was configured as \"x86_64-apple-darwin17.3.0\".\r\nReading symbols from src/qt/test/test_bitcoin-qt...\r\nwarning: can't find symbol '_Z10ParseHexUVRK8UniValueRKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE' in minsymtab\r\n\r\nwarning: can't find symbol '_Z11qMetaTypeIdIPbEiv' in minsymtab\r\n\r\nwarning: can't find symbol '_Z17qRegisterMetaTypeINSt3__18functionIFvvEEEEiPKcPT_N9QtPrivate21MetaTypeDefinedHelperIS6_Xaasr12QMetaTypeId2IS6_EE7Definedntsr12QMetaTypeId2IS6_EE9IsBuiltInEE11DefinedTypeE' in minsymtab\r\n\r\nwarning: can't find symbol '_Z17qRegisterMetaTypeIPbEiPKcPT_N9QtPrivate21MetaTypeDefinedHelperIS3_Xaasr12QMetaTypeId2IS3_EE7Definedntsr12QMetaTypeId2IS3_EE9IsBuiltInEE11DefinedTypeE' in minsymtab\r\n\r\nwarning: can't find symbol '_Z17qRegisterMetaTypeIPbEiv' in minsymtab\r\n\r\nwarning: can't find symbol '_Z17qRegisterMetaTypeIxEiPKcPT_N9QtPrivate21MetaTypeDefinedHelperIS2_Xaasr12QMetaTypeId2IS2_EE7Definedntsr12QMetaTypeId2IS2_EE9IsBuiltInEE11DefinedTypeE' in minsymtab\r\n\r\nwarning: can't find symbol '_Z19DebugMessageHandler9QtMsgTypeRK18QMessageLogContextRK7QString' in minsymtab\r\n\r\nwarning: can't find symbol '_ZTSFNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPKcE' in minsymtab\r\n\r\nwarning: can't find symbol '_ZN16FreespaceChecker16staticMetaObjectE' in minsymtab\r\n\r\nwarning: can't find symbol '_ZTI16FreespaceChecker' in minsymtab\r\n\r\nwarning: can't find symbol '_ZTS16FreespaceChecker' in minsymtab\r\n\r\nwarning: can't find symbol '_ZTV16FreespaceChecker' in minsymtab\r\n\r\nwarning: can't find symbol '_ZN15TransactionDesc11qt_metacallEN11QMetaObject4CallEiPPv' in minsymtab\r\n\r\nwarning: can't find symbol '_ZN15TransactionDesc11qt_metacastEPKc' in minsymtab\r\ndone.\r\n(gdb) run\r\nStarting program: [...]/src/qt/test/test_bitcoin-qt \r\n[New Thread 0x2803 of process 58382]\r\n[New Thread 0x1a03 of process 58382]\r\nDuring startup program terminated with signal SIGTRAP, Trace/breakpoint trap.\r\n(gdb)\r\n``` ",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NTA1MjA1Mg==",
                    "publishedAt": "2018-02-12T20:30:01Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11625#issuecomment-365052052"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/10217?v=4",
                        "login": "Sjors"
                    },
                    "body": "`lldb` output might be more useful:\r\n```\r\nlldb src/qt/test/test_bitcoin-qt\r\n(lldb) target create \"src/qt/test/test_bitcoin-qt\"\r\nCurrent executable set to 'src/qt/test/test_bitcoin-qt' (x86_64).\r\n(lldb) run\r\nProcess 58456 launched: '[...]/src/qt/test/test_bitcoin-qt' (x86_64)\r\n********* Start testing of AppTests *********\r\nConfig: Using QtTest library 5.10.0, Qt 5.10.0 (x86_64-little_endian-lp64 shared (dynamic) release build; by Clang 9.0.0 (clang-900.0.39.2) (Apple))\r\nPASS   : AppTests::initTestCase()\r\nQWARN  : AppTests::appTests() Backing up GUI settings to \"/var/folders/lv/01bvgc7x1fz03w1t8v7g7mrw0000gp/T/test_bitcoin-qt_1518467512_26673/regtest/guisettings.ini.bak\"\r\nQWARN  : AppTests::appTests() QFont::setPointSizeF: Point size <= 0 (-1.000000), must be greater than 0\r\nQWARN  : AppTests::appTests() QFont::setPointSizeF: Point size <= 0 (-1.000000), must be greater than 0\r\nQWARN  : AppTests::appTests() QFont::setPointSizeF: Point size <= 0 (-1.000000), must be greater than 0\r\nQWARN  : AppTests::appTests() QFont::setPointSizeF: Point size <= 0 (-1.000000), must be greater than 0\r\nQWARN  : AppTests::appTests() QFont::setPointSizeF: Point size <= 0 (-1.000000), must be greater than 0\r\nQWARN  : AppTests::appTests() QFont::setPointSizeF: Point size <= 0 (-1.000000), must be greater than 0\r\nQWARN  : AppTests::appTests() QFont::setPointSizeF: Point size <= 0 (-1.000000), must be greater than 0\r\nQWARN  : AppTests::appTests() QFont::setPointSizeF: Point size <= 0 (-1.000000), must be greater than 0\r\nQWARN  : AppTests::appTests() QFont::setPointSizeF: Point size <= 0 (-1.000000), must be greater than 0\r\nQWARN  : AppTests::appTests() QFont::setPointSizeF: Point size <= 0 (-1.000000), must be greater than 0\r\nQWARN  : AppTests::appTests() QFont::setPointSizeF: Point size <= 0 (-1.000000), must be greater than 0\r\nQDEBUG : AppTests::appTests() requestInitialize : Requesting initialize\r\nQDEBUG : AppTests::appTests() initialize : Running initialization in thread\r\nQDEBUG : AppTests::appTests() initializeResult : Initialization result:  true\r\nQWARN  : AppTests::appTests() Platform customization: \"macosx\"\r\nQDEBUG : AppTests::appTests() \"ReportInvalidCertificate: Payment server found an invalid certificate: \" \"0d:5e:99:0a:d6:9d:b7:78:ec:d8:07:56:3b:86:15:d9\" (\"DST ACES CA X6\") () (\"DST ACES\")\r\nQDEBUG : AppTests::appTests() \"ReportInvalidCertificate: Payment server found an invalid certificate: \" \"01\" (\"Izenpe.com\") () ()\r\nQDEBUG : AppTests::appTests() \"ReportInvalidCertificate: Payment server found an invalid certificate: \" \"11\" (\"T\u00dcB\u0130TAK UEKAE K\u00f6k Sertifika Hizmet Sa\u011flay\u0131c\u0131s\u0131 - S\u00fcr\u00fcm 3\") () (\"Kamu Sertifikasyon Merkezi\", \"Ulusal Elektronik ve Kriptoloji Ara\u015ft\u0131rma Enstit\u00fcs\u00fc - UEKAE\")\r\nQDEBUG : AppTests::appTests() \"ReportInvalidCertificate: Payment server found an invalid certificate: \" \"01\" (\"T\u00dcRKTRUST Elektronik Sertifika Hizmet Sa\u011flay\u0131c\u0131s\u0131\") () ()\r\nQWARN  : AppTests::appTests() PaymentServer::LoadRootCAs: Loaded  173  root certificates\r\nProcess 58456 stopped\r\n* thread #1, queue = 'com.apple.main-thread', stop reason = EXC_BAD_ACCESS (code=1, address=0x8)\r\n    frame #0: 0x0000000102e92c61 QtWidgets`QWidget::insertAction(QAction*, QAction*) + 33\r\nQtWidgets`QWidget::insertAction:\r\n->  0x102e92c61 <+33>: movq   0x8(%r14), %r12\r\n    0x102e92c65 <+37>: movq   0x1a0(%r12), %rax\r\n    0x102e92c6d <+45>: addq   $0x1a0, %r12              ; imm = 0x1A0 \r\n    0x102e92c74 <+52>: movl   0x8(%rax), %edx\r\nTarget 0: (test_bitcoin-qt) stopped.\r\n```",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NTA1MzE1MQ==",
                    "publishedAt": "2018-02-12T20:34:22Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11625#issuecomment-365053151"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/7133040?v=4",
                        "login": "ryanofsky"
                    },
                    "body": "Could you try typing \"bt\" at the gdb/lldb prompt to get a stack trace?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NTA1Mzg3MQ==",
                    "publishedAt": "2018-02-12T20:36:59Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11625#issuecomment-365053871"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/10217?v=4",
                        "login": "Sjors"
                    },
                    "body": "```\r\n(lldb) bt\r\n* thread #1, queue = 'com.apple.main-thread', stop reason = EXC_BAD_ACCESS (code=1, address=0x8)\r\n  * frame #0: 0x0000000102e92c61 QtWidgets`QWidget::insertAction(QAction*, QAction*) + 33\r\n    frame #1: 0x00000001000bdb84 test_bitcoin-qt`BitcoinGUI::createTrayIconMenu(this=0x00000001042125e0) at bitcoingui.cpp:614\r\n    frame #2: 0x00000001000bd665 test_bitcoin-qt`BitcoinGUI::setClientModel(this=0x00000001042125e0, _clientModel=0x000000010dfb4c30) at bitcoingui.cpp:480\r\n    frame #3: 0x00000001000b2531 test_bitcoin-qt`BitcoinApplication::initializeResult(this=0x00007ffeefbff8f8, success=true) at bitcoin.cpp:389\r\n    frame #4: 0x0000000100243a39 test_bitcoin-qt`BitcoinApplication::qt_static_metacall(_o=0x00007ffeefbff8f8, _c=InvokeMetaMethod, _id=5, _a=0x000000010dd938c0) at moc_bitcoin.cpp:266\r\n    frame #5: 0x0000000102957401 QtCore`QObject::event(QEvent*) + 769\r\n    frame #6: 0x000000010340d70b QtGui`QGuiApplication::event(QEvent*) + 267\r\n    frame #7: 0x0000000102e63b33 QtWidgets`QApplication::event(QEvent*) + 883\r\n    frame #8: 0x0000000102e653bd QtWidgets`QApplicationPrivate::notify_helper(QObject*, QEvent*) + 269\r\n    frame #9: 0x0000000102e6675a QtWidgets`QApplication::notify(QObject*, QEvent*) + 362\r\n    frame #10: 0x000000010292e1f8 QtCore`QCoreApplication::notifyInternal2(QObject*, QEvent*) + 168\r\n    frame #11: 0x000000010292f388 QtCore`QCoreApplicationPrivate::sendPostedEvents(QObject*, int, QThreadData*) + 840\r\n    frame #12: 0x0000000102982b08 QtCore`QEventDispatcherUNIX::processEvents(QFlags<QEventLoop::ProcessEventsFlag>) + 72\r\n    frame #13: 0x000000010448659e libqminimal.dylib`___lldb_unnamed_symbol47$$libqminimal.dylib + 14\r\n    frame #14: 0x0000000102929dae QtCore`QEventLoop::exec(QFlags<QEventLoop::ProcessEventsFlag>) + 398\r\n    frame #15: 0x000000010292e8f1 QtCore`QCoreApplication::exec() + 369\r\n    frame #16: 0x000000010000942a test_bitcoin-qt`AppTests::appTests(this=0x00007ffeefbff8c0) at apptests.cpp:63\r\n    frame #17: 0x00000001000a9b2a test_bitcoin-qt`AppTests::qt_static_metacall(_o=0x00007ffeefbff8c0, _c=InvokeMetaMethod, _id=0, _a=0x00007ffeefbfed90) at moc_apptests.cpp:81\r\n    frame #18: 0x000000010293819c QtCore`QMetaMethod::invoke(QObject*, Qt::ConnectionType, QGenericReturnArgument, QGenericArgument, QGenericArgument, QGenericArgument, QGenericArgument, QGenericArgument, QGenericArgument, QGenericArgument, QGenericArgument, QGenericArgument, QGenericArgument) const + 1308\r\n    frame #19: 0x0000000102cd8e01 QtTest`___lldb_unnamed_symbol11$$QtTest + 1169\r\n    frame #20: 0x0000000102cd9ac9 QtTest`___lldb_unnamed_symbol13$$QtTest + 777\r\n    frame #21: 0x0000000102cda9d7 QtTest`___lldb_unnamed_symbol17$$QtTest + 1031\r\n    frame #22: 0x0000000102cdb557 QtTest`QTest::qRun() + 247\r\n    frame #23: 0x0000000102cdb1b0 QtTest`QTest::qExec(QObject*, int, char**) + 16\r\n    frame #24: 0x00000001000222d6 test_bitcoin-qt`main(argc=1, argv=0x00007ffeefbffa18) at test_main.cpp:82\r\n    frame #25: 0x00007fff798b8115 libdyld.dylib`start + 1\r\n    frame #26: 0x00007fff798b8115 libdyld.dylib`start + 1\r\n```",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NTE5NDMyNA==",
                    "publishedAt": "2018-02-13T09:04:17Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11625#issuecomment-365194324"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/10217?v=4",
                        "login": "Sjors"
                    },
                    "body": "By the way, I can launch QT just fine, no crash.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NTE5NTY2OA==",
                    "publishedAt": "2018-02-13T09:07:45Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11625#issuecomment-365195668"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/7133040?v=4",
                        "login": "ryanofsky"
                    },
                    "body": "@theuni this is the issue I was referring to.\r\n\r\nLooking at the stack trace: https://github.com/bitcoin/bitcoin/pull/11625#issuecomment-365194324 it doesn't immediately make sense to me because BitcoinGUI::createTrayIconMenu does not appear to be directly calling QWidget::insertAction. Also, I'd be curious if the issue might be fixed by extending the workaround in a6f6182fb02c38a13982e3edcd03db3da316f1b3 to avoid the `trayIconMenu->addAction` calls in `BitcoinGUI::createTrayIconMenu()` when `MacDockIconHandler::instance()` returns null.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NjgxNjk0Mw==",
                    "publishedAt": "2018-02-19T22:25:09Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11625#issuecomment-366816943"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/417043?v=4",
                        "login": "theuni"
                    },
                    "body": "Same crash here. Here's a backtrace of relevant threads with a few things commented out as requested:\r\n```\r\n* thread #1: tid = 0x36e12a, 0x00000001018deaf5 QtWidgets`QToolBar::event(QEvent*) + 501, queue = 'com.apple.main-thread', stop reason = EXC_BAD_ACCESS (code=1, address=0x0)\r\n    frame #0: 0x00000001018deaf5 QtWidgets`QToolBar::event(QEvent*) + 501\r\nQtWidgets`QToolBar::event:\r\n->  0x1018deaf5 <+501>: movq   (%rbx), %rax\r\n    0x1018deaf8 <+504>: movq   0x88(%rax), %r15\r\n    0x1018deaff <+511>: leaq   0x2946d9(%rip), %rsi      ; \"setContentBorderAreaEnabled\"\r\n    0x1018deb06 <+518>: leaq   -0x90(%rbp), %r13\r\n\r\n* thread #1: tid = 0x36e12a, 0x00000001018deaf5 QtWidgets`QToolBar::event(QEvent*) + 501, queue = 'com.apple.main-thread', stop reason = EXC_BAD_ACCESS (code=1, address=0x0)\r\n    frame #0: 0x00000001018deaf5 QtWidgets`QToolBar::event(QEvent*) + 501\r\n    frame #1: 0x000000010173697b QtWidgets`QApplicationPrivate::notify_helper(QObject*, QEvent*) + 251\r\n    frame #2: 0x00000001017392de QtWidgets`QApplication::notify(QObject*, QEvent*) + 5630\r\n    frame #3: 0x00000001011774f3 QtCore`QCoreApplication::notifyInternal(QObject*, QEvent*) + 115\r\n    frame #4: 0x00000001017736e7 QtWidgets`QWidgetPrivate::show_helper() + 423\r\n  * frame #5: 0x000000010177416c QtWidgets`QWidget::setVisible(bool) + 956\r\n    frame #6: 0x00000001017738e0 QtWidgets`QWidgetPrivate::showChildren(bool) + 304\r\n    frame #7: 0x000000010177358c QtWidgets`QWidgetPrivate::show_helper() + 76\r\n    frame #8: 0x000000010177416c QtWidgets`QWidget::setVisible(bool) + 956\r\n    frame #9: 0x0000000100038960 test_bitcoin-qt`BitcoinApplication::initializeResult(this=0x00007fff5fbff870, success=<unavailable>) + 1008 at bitcoin.cpp:412\r\n    frame #10: 0x00000001011a018c QtCore`QObject::event(QEvent*) + 156\r\n    frame #11: 0x0000000101178d46 QtCore`QCoreApplication::event(QEvent*) + 102\r\n    frame #12: 0x0000000101df5ece QtGui`QGuiApplication::event(QEvent*) + 270\r\n    frame #13: 0x0000000101735182 QtWidgets`QApplication::event(QEvent*) + 1122\r\n    frame #14: 0x000000010173697b QtWidgets`QApplicationPrivate::notify_helper(QObject*, QEvent*) + 251\r\n    frame #15: 0x00000001017392de QtWidgets`QApplication::notify(QObject*, QEvent*) + 5630\r\n    frame #16: 0x0000000101178212 QtCore`QCoreApplicationPrivate::sendPostedEvents(QObject*, int, QThreadData*) + 1058\r\n    frame #17: 0x00000001011c77db QtCore`QEventDispatcherUNIX::processEvents(QFlags<QEventLoop::ProcessEventsFlag>) + 59\r\n    frame #18: 0x0000000105063e5e libqminimal.dylib`QUnixEventDispatcherQPA::processEvents(QFlags<QEventLoop::ProcessEventsFlag>) + 14\r\n    frame #19: 0x0000000101174c1c QtCore`QEventLoop::exec(QFlags<QEventLoop::ProcessEventsFlag>) + 412\r\n    frame #20: 0x0000000101177a95 QtCore`QCoreApplication::exec() + 341\r\n    frame #21: 0x0000000100008708 test_bitcoin-qt`AppTests::appTests(this=<unavailable>) + 360 at apptests.cpp:63\r\n    frame #22: 0x00000001011810b4 QtCore`QMetaMethod::invoke(QObject*, Qt::ConnectionType, QGenericReturnArgument, QGenericArgument, QGenericArgument, QGenericArgument, QGenericArgument, QGenericArgument, QGenericArgument, QGenericArgument, QGenericArgument, QGenericArgument, QGenericArgument) const + 1364\r\n    frame #23: 0x00000001011805a7 QtCore`QMetaObject::invokeMethod(QObject*, char const*, Qt::ConnectionType, QGenericReturnArgument, QGenericArgument, QGenericArgument, QGenericArgument, QGenericArgument, QGenericArgument, QGenericArgument, QGenericArgument, QGenericArgument, QGenericArgument, QGenericArgument) + 2199\r\n    frame #24: 0x0000000100f60124 QtTest`QTest::qInvokeTestMethod(char const*, char const*) + 1444\r\n    frame #25: 0x0000000100f5b5e0 QtTest`QTest::qExec(QObject*, int, char**) + 1328\r\n    frame #26: 0x00000001000110ff test_bitcoin-qt`main(argc=<unavailable>, argv=<unavailable>) + 575 at test_main.cpp:82\r\n    frame #27: 0x00007fff8e98b5ad libdyld.dylib`start + 1\r\n    frame #28: 0x00007fff8e98b5ad libdyld.dylib`start + 1\r\n\r\n  thread #7: tid = 0x36e172, 0x00007fff9315607a libsystem_kernel.dylib`__select + 10, name = 'QThread'\r\n    frame #0: 0x00007fff9315607a libsystem_kernel.dylib`__select + 10\r\n    frame #1: 0x00000001011c57a3 QtCore`qt_safe_select(int, fd_set*, fd_set*, fd_set*, timespec const*) + 547\r\n    frame #2: 0x00000001011c66b5 QtCore`QEventDispatcherUNIXPrivate::doSelect(QFlags<QEventLoop::ProcessEventsFlag>, timespec*) + 693\r\n    frame #3: 0x00000001011c788a QtCore`QEventDispatcherUNIX::processEvents(QFlags<QEventLoop::ProcessEventsFlag>) + 234\r\n    frame #4: 0x0000000101174c1c QtCore`QEventLoop::exec(QFlags<QEventLoop::ProcessEventsFlag>) + 412\r\n    frame #5: 0x0000000100fca07e QtCore`QThread::exec() + 110\r\n    frame #6: 0x0000000100fcdc02 QtCore`QThreadPrivate::start(void*) + 338\r\n    frame #7: 0x00007fff9721299d libsystem_pthread.dylib`_pthread_body + 131\r\n    frame #8: 0x00007fff9721291a libsystem_pthread.dylib`_pthread_start + 168\r\n    frame #9: 0x00007fff97210351 libsystem_pthread.dylib`thread_start + 13\r\n```",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NjgxOTU2Mw==",
                    "publishedAt": "2018-02-19T22:40:47Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11625#issuecomment-366819563"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/7133040?v=4",
                        "login": "ryanofsky"
                    },
                    "body": "Cory found you could get around the last crash by -passing the `-min` option to avoid showing the main window and triggering the broken window border code (`setContentBorderAreaEnabled`) that runs when the minimal platform is selected on mac:\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/4aeec0ebccb4d55800e1f2271f1af15dae4d7eca/src/qt/bitcoin.cpp#L406-L413\r\n\r\nBut there is similar crash soon after when the test tries to open the debug window:\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/4aeec0ebccb4d55800e1f2271f1af15dae4d7eca/src/qt/test/apptests.cpp#L80-L81\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/4aeec0ebccb4d55800e1f2271f1af15dae4d7eca/src/qt/bitcoingui.cpp#L660-L667\r\n\r\nCory also found the test works if you set the QT_QPA_PLATFORM environment variable to cocoa.\r\n\r\nI'm going to see if it's possible to make a small change that would try to show both windows minimized and avoid the crashes.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NjgyNTYyOQ==",
                    "publishedAt": "2018-02-19T23:23:06Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11625#issuecomment-366825629"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/7133040?v=4",
                        "login": "ryanofsky"
                    },
                    "body": "> I'm going to see if it's possible to make a small change that would try to show both windows minimized and avoid the crashes.\r\n\r\nReplacing the `showNormal` and `show` calls with `showMinimized` apparently resulted in another segfault on Cory's machine. I'd be curious to see the stack trace, but it seems easier right now to just skip the test on the mac minimal platform (while continuing to run it on linux and windows minimal platforms and the mac cocoa platform).\r\n\r\nAdded 2 commits 4aeec0ebccb4d55800e1f2271f1af15dae4d7eca -> f955ab2f2e419e865a7fb41dc109d8aae2356f3a ([pr/apptest.9](https://github.com/ryanofsky/bitcoin/commits/pr/apptest.9) -> [pr/apptest.10](https://github.com/ryanofsky/bitcoin/commits/pr/apptest.10), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/apptest.9...pr/apptest.10))\r\nSquashed f955ab2f2e419e865a7fb41dc109d8aae2356f3a -> 452367f0a46d6ea61746819680faebd8a6456633 ([pr/apptest.10](https://github.com/ryanofsky/bitcoin/commits/pr/apptest.10) -> [pr/apptest.11](https://github.com/ryanofsky/bitcoin/commits/pr/apptest.11))",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NzAyODEzNA==",
                    "publishedAt": "2018-02-20T16:10:37Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11625#issuecomment-367028134"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/10217?v=4",
                        "login": "Sjors"
                    },
                    "body": "That made make [unhappy](https://gist.github.com/Sjors/d76c9af02d7bfa619b4278d652e1d086).",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NzA1ODgwMA==",
                    "publishedAt": "2018-02-20T17:44:34Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11625#issuecomment-367058800"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/7133040?v=4",
                        "login": "ryanofsky"
                    },
                    "body": "> That made make unhappy.\r\n\r\n@Sjors thanks for testing! Added a new commit which should help.\r\n\r\nAdded 1 commits 452367f0a46d6ea61746819680faebd8a6456633 -> f5ef4a12b5d7467f17145663e3ad9ab45517ce58 ([pr/apptest.11](https://github.com/ryanofsky/bitcoin/commits/pr/apptest.11) -> [pr/apptest.12](https://github.com/ryanofsky/bitcoin/commits/pr/apptest.12), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/apptest.11...pr/apptest.12))\r\nSquashed f5ef4a12b5d7467f17145663e3ad9ab45517ce58 -> f4b25d498233cf2a894fa27616d65f56b99af390 ([pr/apptest.12](https://github.com/ryanofsky/bitcoin/commits/pr/apptest.12) -> [pr/apptest.13](https://github.com/ryanofsky/bitcoin/commits/pr/apptest.13))\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NzA4MjAyNA==",
                    "publishedAt": "2018-02-20T18:59:40Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11625#issuecomment-367082024"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/10217?v=4",
                        "login": "Sjors"
                    },
                    "body": "`make` is happy now, but `qt/test/test_bitcoin-qt` fails:\r\n[test-suite.log](https://github.com/bitcoin/bitcoin/files/1747218/test-suite.log)\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NzYxMjc5Mw==",
                    "publishedAt": "2018-02-22T09:05:12Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11625#issuecomment-367612793"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/7133040?v=4",
                        "login": "ryanofsky"
                    },
                    "body": "> make is happy now, but qt/test/test_bitcoin-qt fails: test-suite.log\r\n\r\nWow, the problems this test is causing on the Qt mac minimal platform seem to be endless. Now even though the new test is being skipped, the startup tweaks I made to support it are causing an old test to fail with a UniValue exception. I think I'm going mark this PR work in progress and wait until I have a mac handy to debug locally, instead of trying to debug more remotely now. I think next step will be to try to catch the UniValue exception and print it.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NzY5NDM1MQ==",
                    "publishedAt": "2018-02-22T14:18:44Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11625#issuecomment-367694351"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/10217?v=4",
                        "login": "Sjors"
                    },
                    "body": "What exactly does \"Qt mac minimal platform\" mean?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2Nzc3MjgyOQ==",
                    "publishedAt": "2018-02-22T18:20:19Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11625#issuecomment-367772829"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/7133040?v=4",
                        "login": "ryanofsky"
                    },
                    "body": "> What exactly does \"Qt mac minimal platform\" mean?\r\n\r\nIt means running with QT_QPA_PLATFORM=minimal on a mac Qt build. A lot of Qt bugs seem to get triggered if you try this. Running with QT_QPA_PLATFORM=minimal with a linux or windows qt build works fine. Running with QT_QPA_PLATFORM=cocoa on with a mac Qt build also seems to work fine (according to Cory).\r\n\r\nOur Qt unit tests run by default with QT_QPA_PLATFORM=minimal so the tests can run on headless machines, and to avoid windows and widgets popping up onscreen during the test on machines with displays. You can change this by using the `-platform` command line option as described here:\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/aae64a21ba25ca86fe2bbb581681dc20d613fb44/src/qt/test/wallettests.cpp#L145-L149",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2Nzc5NjUyMw==",
                    "publishedAt": "2018-02-22T19:40:32Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11625#issuecomment-367796523"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/10217?v=4",
                        "login": "Sjors"
                    },
                    "body": "Thanks. Just to clarify further, do we know any use case other than running tests that requires QT support with `QT_QPA_PLATFORM=minimal`? ",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2Nzc5OTA0MA==",
                    "publishedAt": "2018-02-22T19:48:25Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11625#issuecomment-367799040"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/7133040?v=4",
                        "login": "ryanofsky"
                    },
                    "body": "> Thanks. Just to clarify further, do we know any use case other than running tests that requires QT support with QT_QPA_PLATFORM=minimal?\r\n\r\nI don't think so. Conceivably somebody could choose to run `bitcoin-qt` with `QT_QPA_PLATFORM=minimal` instead of running `bitcoind`, in order to run be able to run a bitcoin node headlessly and still have access coin selection or some other feature that only exists in the GUI. But I doubt anybody would actually do this, and in any case, the bugs in Qt minimal platform on mac are in Qt code not our code, so if somebody wanted to get this working on mac, they would need to take any issues up with Qt project rather than ours.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NzgwOTI5NQ==",
                    "publishedAt": "2018-02-22T20:20:25Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11625#issuecomment-367809295"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/7133040?v=4",
                        "login": "ryanofsky"
                    },
                    "body": "Rebased f4b25d498233cf2a894fa27616d65f56b99af390 -> 391bd7d0acac733ade77fa37003b6dae8496b9c8 ([pr/apptest.13](https://github.com/ryanofsky/bitcoin/commits/pr/apptest.13) -> [pr/apptest.14](https://github.com/ryanofsky/bitcoin/commits/pr/apptest.14)) due to conflict with #12610.\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NjUyNjgzNw==",
                    "publishedAt": "2018-03-27T13:34:47Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11625#issuecomment-376526837"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/10217?v=4",
                        "login": "Sjors"
                    },
                    "body": "Sadly `make` fails for me on macOS 10.13.3:\r\n\r\n```\r\nmake clean\r\n./autogen.sh\r\n./configure --disable-bench --with-miniupnpc=no  --with-incompatible-bdb --with-qrencode\r\nmake -j5\r\n\r\n...\r\n\r\n CXXLD    test/test_bitcoin_fuzzy\r\nqt/test/apptests.cpp:80:7: error: no member named 'bitdb' in the global namespace\r\n    ::bitdb.Close();\r\n    ~~^\r\n```",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3Njg1ODUyOA==",
                    "publishedAt": "2018-03-28T11:49:16Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11625#issuecomment-376858528"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/10217?v=4",
                        "login": "Sjors"
                    },
                    "body": "If I remove the two `::bitdb` lines I can compile, but tests still fail. Trace (using `--enable-debug`): \r\n\r\n```\r\n********* Start testing of RPCNestedTests *********\r\nConfig: Using QtTest library 5.10.0, Qt 5.10.0 (x86_64-little_endian-lp64 shared (dynamic) release build; by Clang 9.0.0 (clang-900.0.39.2) (Apple))\r\nPASS   : RPCNestedTests::initTestCase()\r\nFAIL!  : RPCNestedTests::rpcNestedTests() Caught unhandled exception\r\n   Loc: [qtestcase.cpp(1836)]\r\nTotals: 1 passed, 1 failed, 0 skipped, 0 blacklisted, 49ms\r\n********* Finished testing of RPCNestedTests *********\r\nlibc++abi.dylib: terminating with uncaught exception of type UniValue\r\nProcess 99582 stopped\r\n* thread #1, queue = 'com.apple.main-thread', stop reason = signal SIGABRT\r\n    frame #0: 0x00007fff58a7fe3e libsystem_kernel.dylib`__pthread_kill + 10\r\nlibsystem_kernel.dylib`__pthread_kill:\r\n->  0x7fff58a7fe3e <+10>: jae    0x7fff58a7fe48            ; <+20>\r\n    0x7fff58a7fe40 <+12>: movq   %rax, %rdi\r\n    0x7fff58a7fe43 <+15>: jmp    0x7fff58a770b8            ; cerror_nocancel\r\n    0x7fff58a7fe48 <+20>: retq   \r\nTarget 0: (test_bitcoin-qt) stopped.\r\n```\r\n\r\n```\r\n(lldb) bt\r\n* thread #1, queue = 'com.apple.main-thread', stop reason = signal SIGABRT\r\n  * frame #0: 0x00007fff58a7fe3e libsystem_kernel.dylib`__pthread_kill + 10\r\n    frame #1: 0x00007fff58bbe150 libsystem_pthread.dylib`pthread_kill + 333\r\n    frame #2: 0x00007fff589dc312 libsystem_c.dylib`abort + 127\r\n    frame #3: 0x00007fff569b7f8f libc++abi.dylib`abort_message + 245\r\n    frame #4: 0x00007fff569b812b libc++abi.dylib`default_terminate_handler() + 265\r\n    frame #5: 0x00007fff57d42eab libobjc.A.dylib`_objc_terminate() + 105\r\n    frame #6: 0x00007fff569d37c9 libc++abi.dylib`std::__terminate(void (*)()) + 8\r\n    frame #7: 0x00007fff569d3478 libc++abi.dylib`__cxa_rethrow + 99\r\n    frame #8: 0x00000001016d2b1a QtTest`QTest::qRun() + 1722\r\n    frame #9: 0x00000001016d21b0 QtTest`QTest::qExec(QObject*, int, char**) + 16\r\n    frame #10: 0x0000000100011978 test_bitcoin-qt`main(argc=<unavailable>, argv=<unavailable>) at test_main.cpp:96 [opt]\r\n    frame #11: 0x00007fff58930115 libdyld.dylib`start + 1\r\n```\r\n\r\n[Gist with log](https://gist.github.com/Sjors/bfac9be079f14320209eb0873842e34d).\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NjkxNjM2OA==",
                    "publishedAt": "2018-03-28T14:54:30Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11625#issuecomment-376916368"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/7133040?v=4",
                        "login": "ryanofsky"
                    },
                    "body": "This is the same UniValue exception that was happening before: https://github.com/bitcoin/bitcoin/pull/11625#issuecomment-367694351. Next step for debugging should probably be to catch the exception and print it.\r\n\r\nThis PR is marked work in progress because the UniValue error only happens on macs and I don't currently have one to test with, but I was going to revisit this at some point (and would welcome any help debugging before then).\r\n\r\n---\r\n\r\nRebased bdc576f0720efa7fb389657719bd1ad2bc91ff1a -> 469134517a9dbea0491ac6448b0cd6044982e792 ([pr/apptest.16](https://github.com/ryanofsky/bitcoin/commits/pr/apptest.16) -> [pr/apptest.17](https://github.com/ryanofsky/bitcoin/commits/pr/apptest.17)) due to conflict with #10244\r\nRebased 469134517a9dbea0491ac6448b0cd6044982e792 -> b3c4b6a5a4c89072d4cd044b6fad757c26aa9053 ([pr/apptest.17](https://github.com/ryanofsky/bitcoin/commits/pr/apptest.17) -> [pr/apptest.18](https://github.com/ryanofsky/bitcoin/commits/pr/apptest.18)) due to conflict with #12906",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NjkxOTM5OA==",
                    "publishedAt": "2018-03-28T15:02:58Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11625#issuecomment-376919398"
                }
            ],
            "totalCount": 35
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "b3c4b6a5a4c89072d4cd044b6fad757c26aa9053"
                    }
                }
            ],
            "totalCount": 3
        },
        "createdAt": "2017-11-07T01:19:03Z",
        "deletions": 105,
        "id": "MDExOlB1bGxSZXF1ZXN0MTUxMDAyNTcz",
        "labels": {
            "nodes": [
                {
                    "color": "02d7e1",
                    "id": "MDU6TGFiZWwxMzU5NDY=",
                    "name": "GUI"
                },
                {
                    "color": "d4c5f9",
                    "id": "MDU6TGFiZWw2Mjk2MzUxNg==",
                    "name": "Tests"
                }
            ],
            "totalCount": 2
        },
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "number": 11625,
        "state": "OPEN",
        "title": "WIP: Add BitcoinApplication & RPCConsole tests",
        "updatedAt": "2018-04-09T14:58:27Z"
    },
    {
        "additions": 40,
        "author": {
            "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
            "login": "practicalswift",
            "url": "https://github.com/practicalswift"
        },
        "body": "Add missing wallet locks:\r\n\r\n* Calling the function `GetConflicts(...)` requires holding the mutex `cs_wallet`\r\n* Calling the function `IsSpent(...)` requires holding the mutex `cs_wallet`\r\n* Accessing the variables `mapKeys` and `mapCryptedKeys` requires holding the mutex `cs_KeyStore`\r\n* Accessing the variable `nTimeFirstKey` requires holding the mutex `cs_wallet`\r\n* Accessing the variable `mapWallet` requires holding the mutex `cs_wallet`\r\n* Accessing the variable `nTimeFirstKey` requires holding the mutex `cs_wallet`",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "@promag Thanks for reviewing! Feedback addressed. Looks good? :-)",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0MjgyMzY3NQ==",
                    "publishedAt": "2017-11-08T13:53:40Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11634#issuecomment-342823675"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
                        "login": "promag"
                    },
                    "body": "utACK 007fcbf.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0Mjk1MTAzMQ==",
                    "publishedAt": "2017-11-08T20:36:25Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11634#issuecomment-342951031"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "Added another commit with two more missing locks:\r\n\r\n* calling function `IsSpent` requires holding mutex `pwallet->cs_wallet` exclusively\r\n* writing variable `nWalletVersion`, `nWalletMaxVersion`, `nOrderPosNext` and `nTimeFirstKey` require holding mutex `cs_wallet`",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0NjA5MTc0NQ==",
                    "publishedAt": "2017-11-21T16:58:48Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11634#issuecomment-346091745"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "@promag Would you mind re-reviewing? :-)",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0NjA5MTg0Ng==",
                    "publishedAt": "2017-11-21T16:59:12Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11634#issuecomment-346091846"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "@TheBlueMatt Thanks for reviewing! Feedback addressed. Please re-review :-)",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NzgxMDc5OA==",
                    "publishedAt": "2018-02-22T20:25:50Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11634#issuecomment-367810798"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "Fixed build issue. Please re-review :-)",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2OTk4MjQwMA==",
                    "publishedAt": "2018-03-02T16:58:30Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11634#issuecomment-369982400"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
                        "login": "MarcoFalke"
                    },
                    "body": "Given that https://github.com/bitcoin/bitcoin/pull/11226/files#diff-12635a58447c65585f51d32b7e04075bR857 is now closed, wouldn't it make sense to add the clang annotations within this commit?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2OTk4NDczOA==",
                    "publishedAt": "2018-03-02T17:05:47Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11634#issuecomment-369984738"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "@MarcoFalke @TheBlueMatt @promag Thanks for reviewing. I've now addressed the feedback and added corresponding `GUARDED_BY`/`EXCLUSIVE_LOCKS_REQUIRED` annotations. Please re-review :-)",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MjAyOTkxNQ==",
                    "publishedAt": "2018-03-10T13:27:17Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11634#issuecomment-372029915"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "Please re-review :-)",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MjM2Mjk2MA==",
                    "publishedAt": "2018-03-12T16:02:05Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11634#issuecomment-372362960"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "Rebased!\r\n\r\nHaving this merged would have catched this locking incident: https://github.com/bitcoin/bitcoin/pull/12565/files#r171235800\r\n\r\nReviews welcome! Perhaps @promag or @Sjors could take a look? :-)",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MzE0MTYwNQ==",
                    "publishedAt": "2018-03-14T19:12:05Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11634#issuecomment-373141605"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/10217?v=4",
                        "login": "Sjors"
                    },
                    "body": "Concept ACK: anything that prevents me from making mistakes :-)\r\n\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MzE5MzU2MA==",
                    "publishedAt": "2018-03-14T22:17:17Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11634#issuecomment-373193560"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "@promag Thanks for reviewing. Feedback addressed. Please re-review :-)",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MzIwMDcxMw==",
                    "publishedAt": "2018-03-14T22:48:22Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11634#issuecomment-373200713"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/548488?v=4",
                        "login": "sipa"
                    },
                    "body": "Concept ACK",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MzIyMzQ3MA==",
                    "publishedAt": "2018-03-15T00:49:58Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11634#issuecomment-373223470"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "Rebased!",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3OTc0OTY3OA==",
                    "publishedAt": "2018-04-09T13:22:17Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11634#issuecomment-379749678"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "Rebased!",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3OTkxOTYzNQ==",
                    "publishedAt": "2018-04-09T22:58:51Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11634#issuecomment-379919635"
                }
            ],
            "totalCount": 15
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "a592b2abff2143db4c7378e981c6a5cd623affe4"
                    }
                }
            ],
            "totalCount": 2
        },
        "createdAt": "2017-11-08T09:33:55Z",
        "deletions": 31,
        "id": "MDExOlB1bGxSZXF1ZXN0MTUxMzMyMzQz",
        "labels": {
            "nodes": [
                {
                    "color": "08a781",
                    "id": "MDU6TGFiZWwxNDk0MjQ=",
                    "name": "Wallet"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "number": 11634,
        "state": "OPEN",
        "title": "wallet: Add missing cs_wallet/cs_KeyStore locks to wallet",
        "updatedAt": "2018-04-09T22:58:51Z"
    },
    {
        "additions": 249,
        "author": {
            "avatarUrl": "https://avatars0.githubusercontent.com/u/649246?v=4",
            "login": "TheBlueMatt",
            "url": "https://github.com/TheBlueMatt"
        },
        "body": "This cleans up an old main-carryover - it made sense that main could decide what DoS scores to assign things because the DoS scores were handled in a different part of main, but now validation is telling net_processing what DoS scores to assign to different things, which is utter nonsense. Instead, we replace CValidationState's nDoS and CorruptionPossible with a general ValidationInvalidReason, which net_processing can handle as it sees fit. I keep the behavior changes here to a minimum, but in the future we can utilize these changes for other smarter behavior, such as disconnecting/preferring to rotate outbound peers based on them providing things which are invalid due to SOFT_FORK because we shouldn't ban for such cases.\r\n\r\nThis is somewhat complementary with, though obviously conflicts heavily with #11523, which added enums in place of DoS scores, as well as a few other cleanups (which are still relevant).\r\n\r\nCompared with previous bans, the following changes are made:\r\n * Txn with empty vin/vout or null prevouts move from 10 DoS\r\n   points to 100.\r\n * Loose transactions with a dependency loop now result in a ban\r\n   instead of 10 DoS points.\r\n * BIP68-violation no longer results in a ban as it is SOFT_FORK.\r\n * Non-SegWit SigOp violation no longer results in a ban as it\r\n   considers P2SH sigops and is thus SOFT_FORK.\r\n * Any script violation in a block no longer results in a ban as\r\n   it may be the result of a SOFT_FORK. This should likely be\r\n   fixed in the future by differentiating between them.\r\n * Proof of work failure moves from 50 DoS points to a ban.\r\n * Blocks with timestamps under MTP now result in a ban, blocks\r\n   too far in the future continue to *not* result in a ban.\r\n * Inclusion of non-final transactions in a block now results in a\r\n   ban instead of 10 DoS points.",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/649246?v=4",
                        "login": "TheBlueMatt"
                    },
                    "body": "Rebased.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1MjEyNDU0Nw==",
                    "publishedAt": "2017-12-15T22:10:09Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11639#issuecomment-352124547"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/649246?v=4",
                        "login": "TheBlueMatt"
                    },
                    "body": "Commented on the points I disagreed with, I obviously strongly disagree about making assumptions about the net_processing layer in validation, as that's been one of my overarching goals over the past few years. Will address the other points when I get a chance to rebase.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2OTk1NDg5OQ==",
                    "publishedAt": "2018-03-02T15:35:57Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11639#issuecomment-369954899"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/7463573?v=4",
                        "login": "sdaftuar"
                    },
                    "body": "The more I think about this, the more I think we should drop the distinction between \"SOFT_FORK\" and \"CONSENSUS\" altogether.  At least when it comes to block processing, the only concept that matters is CONSENSUS.\r\n\r\nThe reason we care to distinguish SOFT_FORK from CONSENSUS is to highlight recent rule changes that our peers may not know about, so that the net_processing layer can optionally do something different for SOFT_FORK violations than it would do for CONSENSUS violations.  However I don't think this is a terribly meaningful distinction.  The main goals of the net_processing/net layers, with respect to these validation issues, is:\r\n * keep us connected to the honest network\r\n * prevent attackers from DoS'ing us\r\n * don't needlessly partition old nodes that have fallen back to SPV security because they're unaware of the consensus rules\r\n\r\nSo what is our strategy for each of these points?  For keeping us connected to the honest network, I think we mainly rely on having robust outbound peers -- any outbound peer that is not enforcing all the consensus rules should be disconnected.  Combined with the mitigations we deployed last fall for outbound peers whose tips aren't keeping up, and for protection in the case that our tip hasn't advanced in a while, I believe this is sufficient.  (See https://gist.github.com/sdaftuar/c2a3320c751efb078a7c1fd834036cb0 for more details around my thinking here.)\r\n\r\nFor not needlessly partitioning old nodes -- I think it's sufficient to not disconnect inbound peers that relay blocks that violate consensus rules, regardless of whether the rule is a recent soft fork or not.\r\n\r\nAnd to prevent DoS -- I think we just ensure that any blocks have valid proof-of-work, combined with protections against processing blocks that are too far behind our tip (or on a too-little-work-chain).\r\n\r\nIn all of these cases, I don't think we need to distinguish \"SOFT_FORK\" from \"CONSENSUS\".  And as its pretty arbitrary about when to decide to move something from the SOFT_FORK designation to CONSENSUS, I think we may as well not bother.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MDIzNDEzMw==",
                    "publishedAt": "2018-03-04T14:38:52Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11639#issuecomment-370234133"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/649246?v=4",
                        "login": "TheBlueMatt"
                    },
                    "body": "Discussed this offline with @sdaftuar for a bit - I'm OK with redefining \"SOFT_FORK\" to mean \"any future SOFT_FORK after segwit, so is currently unused\", but I'd rather leave it there as we'd certainly need it for \"any future SOFT_FORK\". Happy to do so if others like. Still want more review here, though.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3ODk4NDE0Mw==",
                    "publishedAt": "2018-04-05T15:52:14Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11639#issuecomment-378984143"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/7463573?v=4",
                        "login": "sdaftuar"
                    },
                    "body": "No objection to leaving \"SOFT_FORK\" in for future use (even if I'm not sure we'll ever use it, I am open to being convinced).  Nit: I would somewhat prefer to call it something other than \"SOFT_FORK\" -- perhaps \"RECENT_CONSENSUS_CHANGE\" or something else that indicates the relevant substance rather than the form? ",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3OTAwNTg3Ng==",
                    "publishedAt": "2018-04-05T17:01:41Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11639#issuecomment-379005876"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/548488?v=4",
                        "login": "sipa"
                    },
                    "body": "Big concept ACK, I'm happy to see the DoS scores get out of the network processing logic.\r\n\r\nAs for SOFT_FORK vs CONSENSUS: I like calling it `RECENT_CONSENSUS_CHANGE` or something similar, and making it match whatever we're currently not banning for. The discussion about how to deal with softforks and banning and DoS protection in general is more complicated and can be continued later.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3OTAyOTE1NA==",
                    "publishedAt": "2018-04-05T18:15:33Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11639#issuecomment-379029154"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/649246?v=4",
                        "login": "TheBlueMatt"
                    },
                    "body": "@sipa well, current master consider RECENT_CONSENSUS_CHANGE/not-banning as any soft fork, ever, kinda, but also some other stuff, but not SegWit things. Its kinda a grab-bag as @sdaftuar points out. This PR cleaned it up somewhat but aired on the side of \"all soft-forks\", @sdaftuar wants it to air more on the side of \"things after segwit\", which I think makes sense. Leaving it the way it is on master kinda makes no sense (and would be hard to do).",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3OTAzODYyNA==",
                    "publishedAt": "2018-04-05T18:47:03Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11639#issuecomment-379038624"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/7463573?v=4",
                        "login": "sdaftuar"
                    },
                    "body": "In the interests of advancing this refactor, I'm fine with doing whatever is least controversial (presumably, less change to existing behavior) in this PR, and saving the larger behavioral changes for a future PR.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3OTA2MjU5Mg==",
                    "publishedAt": "2018-04-05T20:15:14Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11639#issuecomment-379062592"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/649246?v=4",
                        "login": "TheBlueMatt"
                    },
                    "body": "Rebased and changed SOFT_FORK to RECENT_CONSENSUS_CHANGE, redefining it to mean \"change more recent than segwit\" (ie it is currently unused, as @sdaftuar requested).",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MTY3OTg3OQ==",
                    "publishedAt": "2018-04-16T17:11:26Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11639#issuecomment-381679879"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/195769?v=4",
                        "login": "skeees"
                    },
                    "body": "Concept ack to the motivation - while validation shouldn't be deciding how many points to assign peers, you could argue that it should be telling net processing \"this is rejected because I don't have enough information to assess that it is valid\" vs. \"this is invalid because it was maliciously constructed\" - it would be nice from a readability perspective if that were more immediately apparent (e.g. by categorizing the reason names or the like)",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MTY4MDI0OA==",
                    "publishedAt": "2018-04-16T17:12:32Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11639#issuecomment-381680248"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/649246?v=4",
                        "login": "TheBlueMatt"
                    },
                    "body": "I think the only cases where we can say \"I'm missing something this is based on\" is ValidationInvalidReason::MISSING_PREV and MISSING_INPUTS, which are pretty self-explanitory. Open to suggestions if you had something else in mind (or a comment to clarify).",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MTY4NjI4MQ==",
                    "publishedAt": "2018-04-16T17:32:33Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11639#issuecomment-381686281"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1063656?v=4",
                        "login": "jnewbery"
                    },
                    "body": "I've left a bunch of comments, mostly around making the commenting clearer.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MTc1MzIyMQ==",
                    "publishedAt": "2018-04-16T21:19:09Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11639#issuecomment-381753221"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/5470?v=4",
                        "login": "Empact"
                    },
                    "body": "Is it possible to also kill the `REJECT_*` codes here? They seem possibly duplicative with the new reason value.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MTgzODIzOQ==",
                    "publishedAt": "2018-04-17T04:40:29Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11639#issuecomment-381838239"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1063656?v=4",
                        "login": "jnewbery"
                    },
                    "body": "Much clearer to me now. Thanks for the updates!\r\n\r\nA few more comments inline.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MjExOTEyMA==",
                    "publishedAt": "2018-04-17T19:49:18Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11639#issuecomment-382119120"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/5470?v=4",
                        "login": "Empact"
                    },
                    "body": "Renaming `ValidationInvalidReason` to `InvalidReason` would save 1,130 chars. Think of all those chars. ;)\r\nhttps://github.com/Empact/bitcoin/commit/beb63f3baadbe054f12ed8847fae4e38293cc46f",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MjU0OTMzOA==",
                    "publishedAt": "2018-04-18T22:29:22Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11639#issuecomment-382549338"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
                        "login": "MarcoFalke"
                    },
                    "body": "Needs rebase. (Presumably due to #13032)",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4Mzg4MzI5MA==",
                    "publishedAt": "2018-04-24T10:28:49Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11639#issuecomment-383883290"
                }
            ],
            "totalCount": 16
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "16845004803424368167cea37a649ea2142eb9e2"
                    }
                }
            ],
            "totalCount": 8
        },
        "createdAt": "2017-11-08T21:17:00Z",
        "deletions": 171,
        "id": "MDExOlB1bGxSZXF1ZXN0MTUxNDk3NjY3",
        "labels": {
            "nodes": [
                {
                    "color": "E6F6D6",
                    "id": "MDU6TGFiZWwxMzU5NjE=",
                    "name": "Refactoring"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "CONFLICTING",
        "mergedAt": null,
        "number": 11639,
        "state": "OPEN",
        "title": "Rewrite the interface between validation and net_processing wrt DoS",
        "updatedAt": "2018-04-24T10:28:49Z"
    },
    {
        "additions": 142,
        "author": {
            "avatarUrl": "https://avatars2.githubusercontent.com/u/7133040?v=4",
            "login": "ryanofsky",
            "url": "https://github.com/ryanofsky"
        },
        "body": "Make LOCK macros work with non-recursive mutexes, and use wherever possible for better deadlock detection.\r\n\r\nAlso add unit test for DEBUG_LOCKORDER code.",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/649246?v=4",
                        "login": "TheBlueMatt"
                    },
                    "body": "Fails travis due to new lock checking in clang.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0MzIzNjUzOA==",
                    "publishedAt": "2017-11-09T17:52:46Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11640#issuecomment-343236538"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/7133040?v=4",
                        "login": "ryanofsky"
                    },
                    "body": "> Dont you need a similar DeleteLock() call as CCriticalSection?\r\n\r\nGood catch, added this.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0ODYyMjA1MA==",
                    "publishedAt": "2017-12-01T21:42:57Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11640#issuecomment-348622050"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/7133040?v=4",
                        "login": "ryanofsky"
                    },
                    "body": "Rebased f190dd6e5ebf07a75559855d04659502f6e63123 -> 674dcfea1d0a5314e39fc9731cb863995ff34ea1 ([pr/dead.7](https://github.com/ryanofsky/bitcoin/commits/pr/dead.7) -> [pr/dead.8](https://github.com/ryanofsky/bitcoin/commits/pr/dead.8)) due to new changes conflicting with AssertLockNotHeld declaration from #10286",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1MDA2Mzk5OQ==",
                    "publishedAt": "2017-12-07T19:07:02Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11640#issuecomment-350063999"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/649246?v=4",
                        "login": "TheBlueMatt"
                    },
                    "body": "utACK 674dcfea1d0a5314e39fc9731cb863995ff34ea1",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1MDI5NDM2MQ==",
                    "publishedAt": "2017-12-08T15:41:04Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11640#issuecomment-350294361"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/7133040?v=4",
                        "login": "ryanofsky"
                    },
                    "body": "Rebased 674dcfea1d0a5314e39fc9731cb863995ff34ea1 -> b6c88a148db170367abec036b6c4f2e13104f9aa ([pr/dead.8](https://github.com/ryanofsky/bitcoin/commits/pr/dead.8) -> [pr/dead.9](https://github.com/ryanofsky/bitcoin/commits/pr/dead.9)) due to trivial conflicts with #12366 and #12367.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NDEwNTYwMg==",
                    "publishedAt": "2018-02-08T13:04:53Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11640#issuecomment-364105602"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/649246?v=4",
                        "login": "TheBlueMatt"
                    },
                    "body": "Yes, I tend to agree with that point. I think just explicitly using our wrapper classes instead of the LOCK macros would suffice there.\n\nOn March 2, 2018 6:08:09 PM UTC, \"Wladimir J. van der Laan\" <notifications@github.com> wrote:\n>laanwj commented on this pull request.\n>\n>\n>\n>> @@ -115,7 +115,7 @@ class WorkQueue\n>     /** Interrupt and exit loops */\n>     void Interrupt()\n>     {\n>-        std::unique_lock<std::mutex> lock(cs);\n>\n>I agree the lock checking is important, but I dislike the non-standard\n>macro syntax as it hides what is happening. So I wondered if there is\n>an official way to 'decorate' the C++11 locking primitives, as I doubt\n>we're the only project to do checking like this. If not, this change is\n>fine with me...\n>\n>-- \n>You are receiving this because you were mentioned.\n>Reply to this email directly or view it on GitHub:\n>https://github.com/bitcoin/bitcoin/pull/11640#discussion_r171920098\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MDAwNTY0NQ==",
                    "publishedAt": "2018-03-02T18:17:01Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11640#issuecomment-370005645"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/7133040?v=4",
                        "login": "ryanofsky"
                    },
                    "body": "> Yes, I tend to agree with that point. I think just explicitly using our wrapper classes instead of the LOCK macros would suffice there.\r\n\r\nMatt, maybe I'm misunderstanding, but are you suggesting that I write something like:\r\n\r\n```c++\r\nDebugLock<CWaitableCriticalSection> lock(cs, \"cs\", __FILE__, __LINE__);\r\n```\r\n\r\nto replace current master code:\r\n\r\n```c++\r\nstd::unique_lock<std::mutex> lock(cs);\r\n```\r\n\r\ninstead of current PR code:\r\n\r\n```c++\r\nLOCK(cs);\r\n```\r\n\r\nIf this is the case, I guess I'd prefer to keep the current PR code, since it just uses one style (`LOCK`) uniformly and it seems Wladimir no longer objects (https://github.com/bitcoin/bitcoin/pull/11640#discussion_r171920098). In the future, if we want to avoid using `LOCK` in some cases without replacing it everywhere, having a documented developer guideline would probably be helpful.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MDA4MTk0MA==",
                    "publishedAt": "2018-03-02T23:08:00Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11640#issuecomment-370081940"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "Yes, I agree, my comment was somehow out of scope. Let's leave changing the style to something in the future. Or maybe just documenting how the various OS/C++ synchronization primitives map to \"bitcoin core style\" and vice versa.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MDEyOTQ0Nw==",
                    "publishedAt": "2018-03-03T08:13:48Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11640#issuecomment-370129447"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/7133040?v=4",
                        "login": "ryanofsky"
                    },
                    "body": "Rebased b6c88a148db170367abec036b6c4f2e13104f9aa -> 41dea6a481781e69a1e404a7e3d806f59b47032e ([pr/dead.9](https://github.com/ryanofsky/bitcoin/commits/pr/dead.9) -> [pr/dead.10](https://github.com/ryanofsky/bitcoin/commits/pr/dead.10)) due to conflict with #12926\r\nRebased 41dea6a481781e69a1e404a7e3d806f59b47032e -> c7c788496ee478064e00b592ac69ac2a23f70e11 ([pr/dead.10](https://github.com/ryanofsky/bitcoin/commits/pr/dead.10) -> [pr/dead.11](https://github.com/ryanofsky/bitcoin/commits/pr/dead.11)) due to conflict with #12743\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MDA4NTQxMg==",
                    "publishedAt": "2018-04-10T12:46:10Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11640#issuecomment-380085412"
                }
            ],
            "totalCount": 9
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "2695fb91c765e22ad64a096aa4993c6b8102fe11"
                    }
                }
            ],
            "totalCount": 4
        },
        "createdAt": "2017-11-08T21:44:04Z",
        "deletions": 70,
        "id": "MDExOlB1bGxSZXF1ZXN0MTUxNTAzNTg5",
        "labels": {
            "nodes": [
                {
                    "color": "E6F6D6",
                    "id": "MDU6TGFiZWwxMzU5NjE=",
                    "name": "Refactoring"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "number": 11640,
        "state": "OPEN",
        "title": "Make LOCK, LOCK2, TRY_LOCK work with CWaitableCriticalSection",
        "updatedAt": "2018-04-13T17:19:25Z"
    },
    {
        "additions": 83,
        "author": {
            "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
            "login": "practicalswift",
            "url": "https://github.com/practicalswift"
        },
        "body": "Add missing locks required when accessing:\r\n\r\n```\r\nint32_t nBlockSequenceId GUARDED_BY(cs_nBlockSequenceId) = 1;\r\nint nLastBlockFile GUARDED_BY(cs_LastBlockFile) = 0;\r\nbool fCheckForPruning GUARDED_BY(cs_LastBlockFile) = false;\r\nCuckooCache::cache<uint256, SignatureCacheHasher> scriptExecutionCache GUARDED_BY(cs_main);\r\nBlockMap& mapBlockIndex GUARDED_BY(cs_main);\r\nstd::unique_ptr<CCoinsViewDB> pcoinsdbview GUARDED_BY(cs_main);\r\nstd::unique_ptr<CCoinsViewCache> pcoinsTip GUARDED_BY(cs_main);\r\nstd::unique_ptr<CBlockTreeDB> pblocktree GUARDED_BY(cs_main);\r\n```\r\n\r\nAlso, add the locking annotations that follow from the requirements above.",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "Anyone willing to review? :-)",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0NjI2Nzg1Ng==",
                    "publishedAt": "2017-11-22T07:40:30Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11652#issuecomment-346267856"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "@ajtowns @TheBlueMatt Thanks for reviewing! I've now addressed your feedback. Would you mind re-reviewing? :-)",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1NzA2MzQzMg==",
                    "publishedAt": "2018-01-11T21:14:31Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11652#issuecomment-357063432"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
                        "login": "MarcoFalke"
                    },
                    "body": "General note: Instead of documenting the locking assumptions in the OP of this pull request, wouldn't it be better to put them in the header files? Imo, this increases review efficiency.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1NzM4MTI2OQ==",
                    "publishedAt": "2018-01-12T23:20:29Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11652#issuecomment-357381269"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "@MarcoFalke You mean as an interim before we've added `GUARDED_BY(\u2026)` annotations for each guarded variable?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MjQ5NDk0NQ==",
                    "publishedAt": "2018-03-12T23:21:21Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11652#issuecomment-372494945"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
                        "login": "MarcoFalke"
                    },
                    "body": "No, I meant adding the `GUARDED_BY` to header files whenever possible",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MjQ5ODI2NQ==",
                    "publishedAt": "2018-03-12T23:40:05Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11652#issuecomment-372498265"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "@MarcoFalke Sure! New version with `GUARDED_BY` + the implied `EXCLUSIVE_LOCKS_REQUIRED` :-)\r\n\r\nCould you please review? :-)",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MzEyMzg5MQ==",
                    "publishedAt": "2018-03-14T18:16:26Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11652#issuecomment-373123891"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "Hrmm, the `i686-w64-mingw32` build seems to timeout for some reason.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NTk5MTMzNw==",
                    "publishedAt": "2018-03-25T18:16:47Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11652#issuecomment-375991337"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/7133040?v=4",
                        "login": "ryanofsky"
                    },
                    "body": "> Hrmm, the i686-w64-mingw32 build seems to timeout for some reason.\r\n\r\nShould be fixed by rebasing after #12772",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NjM2MzM5MQ==",
                    "publishedAt": "2018-03-27T01:16:29Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11652#issuecomment-376363391"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "Rebased!",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NjQ4NjIxNg==",
                    "publishedAt": "2018-03-27T11:09:25Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11652#issuecomment-376486216"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/127186?v=4",
                        "login": "ajtowns"
                    },
                    "body": "9bd9d9f8302d4cdde2f25f4d7a008f8f0a0ccea2 looks good to me, fwiw, but it needs another rebase anyway to cope with scoped enums.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NjcyNjc1Nw==",
                    "publishedAt": "2018-03-28T01:13:00Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11652#issuecomment-376726757"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "Rebased!\r\n\r\n@ajtowns Thanks for the review. Please re-review :-)",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3Njc0MDc4OA==",
                    "publishedAt": "2018-03-28T02:36:12Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11652#issuecomment-376740788"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "Rebased! :-)",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3ODIxOTgyMw==",
                    "publishedAt": "2018-04-03T11:37:49Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11652#issuecomment-378219823"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "Rebased!",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3OTc1NDkwNA==",
                    "publishedAt": "2018-04-09T13:38:29Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11652#issuecomment-379754904"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "Thanks to @TheBlueMatt's insightful review I've now managed to reduce the size of this PR significantly (by having `LookupBlockIndex` perform `cs_main` locking). Thanks!\r\n\r\nPlease re-review :-)\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MzUwNTM3Nw==",
                    "publishedAt": "2018-04-23T09:02:41Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11652#issuecomment-383505377"
                }
            ],
            "totalCount": 14
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "b1d244eec471e3ae3bbfc83bbdbfd5448ecd1ca8"
                    }
                }
            ],
            "totalCount": 2
        },
        "createdAt": "2017-11-10T09:38:15Z",
        "deletions": 63,
        "id": "MDExOlB1bGxSZXF1ZXN0MTUxODYyOTYx",
        "labels": {
            "nodes": [
                {
                    "color": "E6F6D6",
                    "id": "MDU6TGFiZWwxMzU5NjE=",
                    "name": "Refactoring"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "CONFLICTING",
        "mergedAt": null,
        "number": 11652,
        "state": "OPEN",
        "title": "Add missing locks: validation.cpp + related",
        "updatedAt": "2018-04-23T10:01:38Z"
    },
    {
        "additions": 9,
        "author": {
            "avatarUrl": "https://avatars2.githubusercontent.com/u/1095675?v=4",
            "login": "luke-jr",
            "url": "https://github.com/luke-jr"
        },
        "body": "Pruning forces a chainstate flush, which can defeat the dbcache and harm performance significantly.\r\n\r\nAlternative to #11359",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/10217?v=4",
                        "login": "Sjors"
                    },
                    "body": "Some [IRC discussion](https://botbot.me/freenode/bitcoin-core-dev/2017-12-07/?msg=94351014&page=2).",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0OTk0MDc4Nw==",
                    "publishedAt": "2017-12-07T11:29:20Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11658#issuecomment-349940787"
                }
            ],
            "totalCount": 1
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "ac51a26bdc69dc35e1f4f89b62c3134047e93bc1"
                    }
                }
            ],
            "totalCount": 1
        },
        "createdAt": "2017-11-11T09:08:19Z",
        "deletions": 0,
        "id": "MDExOlB1bGxSZXF1ZXN0MTUyMDQ5NDAx",
        "labels": {
            "nodes": [
                {
                    "color": "6060aa",
                    "id": "MDU6TGFiZWwxMTgzNzk2NTI=",
                    "name": "Validation"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "number": 11658,
        "state": "OPEN",
        "title": "During IBD, when doing pruning, prune 10% extra to avoid pruning again soon after",
        "updatedAt": "2017-12-30T11:11:38Z"
    },
    {
        "additions": 155,
        "author": {
            "avatarUrl": "https://avatars2.githubusercontent.com/u/1095675?v=4",
            "login": "luke-jr",
            "url": "https://github.com/luke-jr"
        },
        "body": "This allows RPC code to use named parameters internally, greatly increasing readability, as well as helping avoid behaviour tied to param count rather than the presence of specific parameters.\r\n\r\nObject type checking is expanded to support multiple allowed types, making param and type-checking clean.\r\n\r\nTemporarily, a boolean is added to the end of CRPCCommand to indicate whether the function expects named params. Once all RPC functions have been converted, we can drop it (as well as old internal-positional-param code).\r\n\r\nAlternative to #11441 ",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "Haven't looked at the code to deep. Using name based arguments rather then arguments by index would increase readability a lot (and we have the position already in the RPCTable).\r\nConcept ACK.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0NDA1NDYzOA==",
                    "publishedAt": "2017-11-13T20:54:26Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11660#issuecomment-344054638"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
                        "login": "promag"
                    },
                    "body": "@ryanofsky \ud83d\udc4d ",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0NDMwMTI3OQ==",
                    "publishedAt": "2017-11-14T15:48:10Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11660#issuecomment-344301279"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1063656?v=4",
                        "login": "jnewbery"
                    },
                    "body": "I've had a quick skim and this looks like a good, clean change that maintains backwards-compatibility. @luke-jr, just so I understand the reasoning here, can you explain what the longer-term plan is:\r\n\r\n- as it stands, this PR maintains backward-compatible support for positional arguments, I assume any future PRs would do the same?\r\n- is the plan to slowly move all RPC methods to have `named_args` set to `true`, and then remove the bool and special behaviour?\r\n- Are you also planning to remove the `options` arguments and flatten them down into the regular arguments list?\r\n- Changing `bumpfee` to use the new pattern adds a `RPCTypeCheckObj()` call to the top of the function. I suppose that will be the case for all RPCs, or could we build something into the RPC framework to make that checking automatic?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0NDcxMDQzNw==",
                    "publishedAt": "2017-11-15T19:58:40Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11660#issuecomment-344710437"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/1095675?v=4",
                        "login": "luke-jr"
                    },
                    "body": "> as it stands, this PR maintains backward-compatible support for positional arguments, I assume any future PRs would do the same?\r\n\r\nPositional arguments are still fully supported. (No \"backward\" about it...)\r\n\r\n> is the plan to slowly move all RPC methods to have named_args set to true, and then remove the bool and special behaviour?\r\n\r\nRight\r\n\r\n> Are you also planning to remove the options arguments and flatten them down into the regular arguments list?\r\n\r\nThat's what this does already...?\r\n\r\n> Changing bumpfee to use the new pattern adds a RPCTypeCheckObj() call to the top of the function. I suppose that will be the case for all RPCs, or could we build something into the RPC framework to make that checking automatic?\r\n\r\nI think it's best to have as much of the stuff for a given RPC with it in the code. We already have this for most things.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0NDcxMjUzNw==",
                    "publishedAt": "2017-11-15T20:06:17Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11660#issuecomment-344712537"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1063656?v=4",
                        "login": "jnewbery"
                    },
                    "body": ">> Are you also planning to remove the options arguments and flatten them down into the regular arguments list?\r\n\r\n> That's what this does already...?\r\n\r\nPerhaps I was unclear - is the plan to remove the 'options' argument in the help text so that the 'standard' way to call the RPC is with the options as key-values in the request rather than in an options object in the request?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0NDcxMzQzOA==",
                    "publishedAt": "2017-11-15T20:09:40Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11660#issuecomment-344713438"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/1095675?v=4",
                        "login": "luke-jr"
                    },
                    "body": "I'm not sure. The help text covers both named and positional arguments, and an options Object is the ideal way to do many things with positional arguments.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0NDgwMjM0MQ==",
                    "publishedAt": "2017-11-16T03:11:34Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11660#issuecomment-344802341"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/1095675?v=4",
                        "login": "luke-jr"
                    },
                    "body": "Rebased...",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NzcyMDkzOQ==",
                    "publishedAt": "2018-03-31T20:25:01Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11660#issuecomment-377720939"
                }
            ],
            "totalCount": 7
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "83d1613850fbccba4c7e54d880b59aa9b2b0ca03"
                    }
                }
            ],
            "totalCount": 6
        },
        "createdAt": "2017-11-11T11:25:31Z",
        "deletions": 38,
        "id": "MDExOlB1bGxSZXF1ZXN0MTUyMDUzNTcx",
        "labels": {
            "nodes": [
                {
                    "color": "0052cc",
                    "id": "MDU6TGFiZWw5ODI3OTE3Nw==",
                    "name": "RPC/REST/ZMQ"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "CONFLICTING",
        "mergedAt": null,
        "number": 11660,
        "state": "OPEN",
        "title": "RPC: Internal named params",
        "updatedAt": "2018-03-31T20:25:01Z"
    },
    {
        "additions": 24,
        "author": {
            "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
            "login": "practicalswift",
            "url": "https://github.com/practicalswift"
        },
        "body": "Fix missing locking in `CTxMemPool::check(const CCoinsViewCache *pcoins)`:\r\n* reading variable `mapTx` requires holding mutex `cs`\r\n* reading variable `mapNextTx` requires holding mutex `cs`\r\n* reading variable `nCheckFrequency` requires holding mutex `cs`\r\n\r\nFix missing locking in `CTxMemPool::setSanityCheck(double dFrequency)`:\r\n* writing variable `nCheckFrequency` requires holding mutex `cs`\r\n",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
                        "login": "promag"
                    },
                    "body": "ACK 2abe610.\r\n\r\nUnrelated, but should read `nCheckFrequency` with the lock too?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0NDUzNzU2Mg==",
                    "publishedAt": "2017-11-15T09:37:22Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11689#issuecomment-344537562"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "@promag Yes, `nCheckFrequency` should probably be guarded by the mutex `cs` too. Good catch!\r\n\r\nI'll ping in @MarcoFalke and @TheBlueMatt for a comment. What do you say? :-)\r\n\r\n```\r\n$ git blame src/txmempool.h | grep nCheckFrequency\r\nfada0c42 (MarcoFalke               2016-04-03 11:49:36 +0200 415)     uint32_t nCheckFrequency; //!< Value n means that n times in 2^32 we check.\r\n53a6590f (Matt Corallo             2017-09-11 15:43:49 -0400 510)     void setSanityCheck(double dFrequency = 1.0) { nCheckFrequency = static_cast<uint32_t>(dFrequency * 4294967295.0); }\r\n$ git grep -E '(nCheckFrequency|setSanityCheck)'\r\nsrc/init.cpp:        mempool.setSanityCheck(1.0 / ratio);\r\nsrc/qt/test/rpcnestedtests.cpp:    //mempool.setSanityCheck(1.0);\r\nsrc/test/test_bitcoin.cpp:        mempool.setSanityCheck(1.0);\r\nsrc/txmempool.cpp:    nCheckFrequency = 0;\r\nsrc/txmempool.cpp:                if (nCheckFrequency != 0) assert(!coin.IsSpent());\r\nsrc/txmempool.cpp:    if (nCheckFrequency == 0)\r\nsrc/txmempool.cpp:    if (GetRand(std::numeric_limits<uint32_t>::max()) >= nCheckFrequency)\r\nsrc/txmempool.h:    uint32_t nCheckFrequency; //!< Value n means that n times in 2^32 we check.\r\nsrc/txmempool.h:    void setSanityCheck(double dFrequency = 1.0) { nCheckFrequency = static_cast<uint32_t>(dFrequency * 4294967295.0); }\r\n```",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0NDUzOTQyNA==",
                    "publishedAt": "2017-11-15T09:44:15Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11689#issuecomment-344539424"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
                        "login": "promag"
                    },
                    "body": "Actually `nCheckFrequency` doesn't change, only set in\r\n```\r\nsrc/init.cpp:        mempool.setSanityCheck(1.0 / ratio);\r\n```",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0NDU0MjE0Nw==",
                    "publishedAt": "2017-11-15T09:54:30Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11689#issuecomment-344542147"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/649246?v=4",
                        "login": "TheBlueMatt"
                    },
                    "body": "Technically there is no issue here - mempool (should only be) modified with cs_main and mempool.check is only called with cs_main. Indeed, probably just move the lock to the top of the function. Unless you want to go to the trouble of making nCheckFrequency a const, best to fix it for the static analysis just like the rest.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0NDc1NTMxNA==",
                    "publishedAt": "2017-11-15T22:47:59Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11689#issuecomment-344755314"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "@TheBlueMatt @promag Thanks for reviewing! An updated version has now been pushed taking into account the formal locking requirements of `nCheckFrequency` too. Please re-review :-)",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0NDg2MDMzMA==",
                    "publishedAt": "2017-11-16T09:10:05Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11689#issuecomment-344860330"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "Added a commit with the Clang thread safety analysis annotations to facilitate reviewing. @promag, would you mind re-reviewing? :-)",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0NjU0MTM0NA==",
                    "publishedAt": "2017-11-23T06:46:45Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11689#issuecomment-346541344"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "Updated with annotations moved over to the header files.\r\n\r\nThe `EXCLUSIVE_LOCKS_REQUIRED(mempool.cs)` annotations for `BlockAssembler::SkipMapTxEntry` and `BlockAssembler::addPackageTxs` should be placed in `miner.h` rather than `miner.cpp`, but the existence of `mempool` (and hence `mempool.cs`) is not currently not known in `miner.h`. Would `extern CTxMemPool mempool;` be acceptable in `miner.h`?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0ODAyNzA4OQ==",
                    "publishedAt": "2017-11-29T23:06:36Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11689#issuecomment-348027089"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/649246?v=4",
                        "login": "TheBlueMatt"
                    },
                    "body": "As mentioned before, please do not place EXCLUSIVE_LOCKS_REQUIRED annotations on class member function declarations instead of their definitions. Placing them on declarations makes the annotations incredibly brittle and, thus, largely useless. Better to leave them off than to add them in a place where the order of functions in a file matters.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0OTA0MzcxMg==",
                    "publishedAt": "2017-12-04T17:46:46Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11689#issuecomment-349043712"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "@TheBlueMatt Sorry, I had missed moving the annotations for `SkipMapTxEntry`, `addPackageTxs`, `UpdateChildrenForRemoval` and `CalculateDescendants`. Now fixed! Please re-review :-)",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MjQ5Mzk3MQ==",
                    "publishedAt": "2018-03-12T23:16:59Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11689#issuecomment-372493971"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/548488?v=4",
                        "login": "sipa"
                    },
                    "body": "utACK 661db1d63afcea4016ccb7f97fda6cde7f719826",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3Mzg3NzkxMw==",
                    "publishedAt": "2018-03-17T00:19:40Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11689#issuecomment-373877913"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "Rebased!",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3ODIxOTM2Ng==",
                    "publishedAt": "2018-04-03T11:35:54Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11689#issuecomment-378219366"
                }
            ],
            "totalCount": 11
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "36441afa45c36084a19ea02a4a01f400de7f1fd0"
                    }
                }
            ],
            "totalCount": 3
        },
        "createdAt": "2017-11-14T22:37:18Z",
        "deletions": 24,
        "id": "MDExOlB1bGxSZXF1ZXN0MTUyNjM3NDcw",
        "labels": {
            "nodes": [
                {
                    "color": "fef2c0",
                    "id": "MDU6TGFiZWwxNjQyMDg1NzI=",
                    "name": "Mempool"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "number": 11689,
        "state": "OPEN",
        "title": "mempool: Fix missing locking in CTxMemPool::check(\u2026) and CTxMemPool::setSanityCheck(\u2026)",
        "updatedAt": "2018-04-03T11:35:54Z"
    },
    {
        "additions": 104,
        "author": {
            "avatarUrl": "https://avatars2.githubusercontent.com/u/3211283?v=4",
            "login": "MeshCollider",
            "url": "https://github.com/MeshCollider"
        },
        "body": "Currently `signrawtransaction` works with P2SH-P2WSH which are already in wallet (e.g. `addmultisigaddress` -> `addwitnessaddress`). But when using signrawtransaction with keys which aren't in the wallet, there is currently only a `redeemScript` key so you cannot enter both the P2SH redeemScript and the witness script. There is an undocumented workaround by including the same input twice (suggested on StackExchange [here](https://bitcoin.stackexchange.com/a/62746/51948)), once with each script, but that is unnecessary and hacky. \r\n\r\nThis simply allows the optional inclusion of a witnessScript key in the JSON input to `signrawtransaction`. Because it uses JSON, this is a non-breaking change.\r\n\r\nAlso, as discussed on IRC ([see here](https://botbot.me/freenode/bitcoin-core-dev/2017-11-16/?msg=93580994&page=1)), we add a `witnessScript` output to the listunspent RPC for P2SH-P2WSH addresses because gmaxwell pointed out signrawtransaction should be able to get most of the needed info from listunspent.\r\n\r\nCloses https://github.com/bitcoin/bitcoin/issues/11693 \r\n\r\nTODO: \r\n- ~Needs tests + release notes~",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/3020646?v=4",
                        "login": "NicolasDorier"
                    },
                    "body": "NACK, redeemScript + scriptPubKey are sufficient information to know whether you are talking about P2SH-P2WSH, P2SH, P2WSH. Having one more \"witness script\" is just redundant information which can go wrong.\r\n\r\nIf you enter the witness script in \"redeemScript\" field, you can easily find out in code if it mean P2SH or Witness by comparing with the scriptPubKey, there is no ambiguity.\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0NTE0ODM4Ng==",
                    "publishedAt": "2017-11-17T05:21:45Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11708#issuecomment-345148386"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/548488?v=4",
                        "login": "sipa"
                    },
                    "body": "@NicolasDorier How so? The redeemscript only contains a hash of the witness script in the case of P2SH-P2WSH, which is not sufficient to sign with.\n\nIt would be possible to require passing only the witness script, and automatically also add the v0 P2WSH redeemscript (and any future versions?). But just the redeemscript is not enough.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0NTE1MDAwNA==",
                    "publishedAt": "2017-11-17T05:35:09Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11708#issuecomment-345150004"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/3211283?v=4",
                        "login": "MeshCollider"
                    },
                    "body": "Indeed, IMO its much cleaner implementation and user experience to have the witnessScript provided in addition to the redeemScript, not only because that avoids the ambiguous witness version issue in a nice way but also because then it is clear to the user which script the redeemScript actually refers to (because the redeemScript output of other RPCs in general would refer to the wrapper P2SH redeemScript not the witnessScript which would introduce confusion).",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0NTE1NTcxNg==",
                    "publishedAt": "2017-11-17T06:18:56Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11708#issuecomment-345155716"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "Concept ACK. Can you add a test?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0NTM2NjA2NA==",
                    "publishedAt": "2017-11-17T21:10:02Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11708#issuecomment-345366064"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/3211283?v=4",
                        "login": "MeshCollider"
                    },
                    "body": "@jonasschnelli yep will do, see TODO section :) Just trying to work out the cleanest way to test it wrt all the existing tests in segwit.py",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0NTM4ODMxMQ==",
                    "publishedAt": "2017-11-17T22:57:27Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11708#issuecomment-345388311"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/3211283?v=4",
                        "login": "MeshCollider"
                    },
                    "body": "Test and release notes added, @jonasschnelli's nits addresses",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0NTQzMjkzOA==",
                    "publishedAt": "2017-11-18T10:24:04Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11708#issuecomment-345432938"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/3020646?v=4",
                        "login": "NicolasDorier"
                    },
                    "body": "This is how I am doing with NBitcoin for long.\r\n\r\n@sipa if you have `redeemscript` and `scriptPubKey` you can know exactly wether redeemScript is a Segwit or P2SH redeem.\r\n\r\nIf `scriptPubKey` is P2WSH, then you know `redeemScript` is a segwit redeem.\r\n\r\nIf `scriptPubKey` is P2SH, you know `redeemScript` is either a P2SH redeem or a Segwit Redeem.\r\n\r\nIf `Hash(redeemScript) is contained inside scriptPubKey`, then it is a P2SH redeem else it is a segwit redeem. If it is a P2SH redeem, and inside is a segwit program, you must return error to the user.\r\n\r\nYou can then Hash(Hash(redeemScript)) and verify that it is indeed into `ScriptPubKey` to be sure the user did not messed up.\r\n\r\nYou can derive the P2SH redeem from the Segwit redeem, so no need to specify both.\r\n\r\nAgain, strong NACK on this one. This is not needed.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0NTU5MjY2Nw==",
                    "publishedAt": "2017-11-20T05:04:04Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11708#issuecomment-345592667"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/548488?v=4",
                        "login": "sipa"
                    },
                    "body": "@NicolasDorier Ah, I'm using redeemscript exclusively for P2SH.\n\nYes, if you have the witness script, and can correctly guess it is a V0 P2WSH embedded in P2SH, you can derive the redeemscript.\n\nI'm not convinced guessing is the best approach.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0NTU5MzEzMg==",
                    "publishedAt": "2017-11-20T05:08:07Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11708#issuecomment-345593132"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/3020646?v=4",
                        "login": "NicolasDorier"
                    },
                    "body": "Well the thing is that this field is called `redeemScript` which does not suppose it is P2SH or Segwit redeem, and it does not have to.\r\n\r\nIf you insist having both redeem, then I would suggest to rename `redeemScript` as `p2shRedeem`.\r\n\r\nBut then, the logic of this RPC method will need to ensure that all, `witnessScript`, `p2shRedeem` and `scriptPubKey` are coherent.\r\n\r\nI am convinced specifying both is just wrong as there is no ambiguity, no way to guess incorrectly. Just more way for the user to get wrong and confused, and more code to ensure everything is coherent on both side.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0NTU5MzQ1MQ==",
                    "publishedAt": "2017-11-20T05:11:08Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11708#issuecomment-345593451"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/548488?v=4",
                        "login": "sipa"
                    },
                    "body": "@NicolasDorier That's the fair point, the naming would be inconsistent in that case.\r\n\r\nWe also don't actually need to distinguish for our implementation. @MeshCollider perhaps we can just permit redeemScript to be a list, in which case multiple scripts gets loaded with AddCScript?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0NTYwNzU3Nw==",
                    "publishedAt": "2017-11-20T06:59:15Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11708#issuecomment-345607577"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/3211283?v=4",
                        "login": "MeshCollider"
                    },
                    "body": "Yep I'm happy with that approach too, I just definitely want to avoid guessing the witness version as mentioned. Although re: terminology, I've only ever seen redeemScript used to refer exclusively to P2SH, even the [bitcoincore.org segwit wallet dev guide](http://bitcoincore.org/en/segwit_wallet_dev/) refers to the witness redeem script as witnessScript only.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0NTY2Njg2Mw==",
                    "publishedAt": "2017-11-20T11:19:06Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11708#issuecomment-345666863"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/3020646?v=4",
                        "login": "NicolasDorier"
                    },
                    "body": "The fact that \"redeemScript\" can refer to all type of PS2SH*-P2WSH* redeems makes migration from P2SH to Segwit easier, as there is no additional fields to pass around that did not existed before.\r\n\r\nIn NBitcoin, there is a type called `ScriptCoin` which was used to represent a P2SH + Redeem. When I updated the library for  Segwit, I only needed to instruct my users that if they want to migrate to  P2SH-P2WSH they just need a different way of calculating the ScriptPubKey when generating a new address. The majority of their code did not changed. (No additional field, old non-segwit UTXO were still working fine, no additional type to know about, no if/else logic for handling both way in their code)\r\n\r\nThat said I would be fine with redeemScript being an array as well.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0NTg5Nzg1MQ==",
                    "publishedAt": "2017-11-21T02:34:47Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11708#issuecomment-345897851"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/3211283?v=4",
                        "login": "MeshCollider"
                    },
                    "body": "I've made the modification to include the witnessScript in a redeem script array in the case of P2SH-P2WSH, will squash those modification commits if that approach is acceptable",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0NjU0MzYyNg==",
                    "publishedAt": "2017-11-23T07:06:04Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11708#issuecomment-346543626"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/3211283?v=4",
                        "login": "MeshCollider"
                    },
                    "body": "Fixed, thanks @NicolasDorier \r\nSquashed fixups too",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0NzcwMjM0OQ==",
                    "publishedAt": "2017-11-28T23:42:56Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11708#issuecomment-347702349"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/3020646?v=4",
                        "login": "NicolasDorier"
                    },
                    "body": "Code review ACK",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0Nzc0MTQyOA==",
                    "publishedAt": "2017-11-29T03:25:23Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11708#issuecomment-347741428"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/3211283?v=4",
                        "login": "MeshCollider"
                    },
                    "body": "Rebased and added the extra check as suggested by @NicolasDorier. That also fixed the unused OP_0 warning.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1MTIyMTU3MA==",
                    "publishedAt": "2017-12-12T22:50:54Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11708#issuecomment-351221570"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/3020646?v=4",
                        "login": "NicolasDorier"
                    },
                    "body": "reACK",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1MTI2Mjc1Mg==",
                    "publishedAt": "2017-12-13T02:32:15Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11708#issuecomment-351262752"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/7133040?v=4",
                        "login": "ryanofsky"
                    },
                    "body": "Should passing a redeem script array to signrawtransaction be possible with bitcoin-cli? It looks this might not work currently because the param does not have an entry in vRPCConvertParams. You might be able to work around this with something like:\r\n\r\n```c++\r\nif (redeem_script.isStr() && !IsHex(redeem_script.get_str())) {\r\n    redeem_script.read(redeem_script.get_str().substr());\r\n    RPCTypeCheckArgument(redeem_script, UniValue::VARR);\r\n}\r\n```",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1MTQ0MDg5Mg==",
                    "publishedAt": "2017-12-13T16:17:32Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11708#issuecomment-351440892"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/7133040?v=4",
                        "login": "ryanofsky"
                    },
                    "body": "This PR has two code review acks (from me and NicolasDorier) so maybe it is close to being merged. The remaining comments that haven't been responded to are minor and shouldn't hold this up.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1MjQzNTQ1NQ==",
                    "publishedAt": "2017-12-18T14:09:31Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11708#issuecomment-352435455"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/3211283?v=4",
                        "login": "MeshCollider"
                    },
                    "body": "Addressed @ryanofsky feedback, thanks!",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1MjkxNTMzOQ==",
                    "publishedAt": "2017-12-19T23:12:33Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11708#issuecomment-352915339"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/3211283?v=4",
                        "login": "MeshCollider"
                    },
                    "body": "Feedback addressed, fixup commits squashed into one cleanup commit",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1MzIyMjYxMw==",
                    "publishedAt": "2017-12-21T00:29:27Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11708#issuecomment-353222613"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/3211283?v=4",
                        "login": "MeshCollider"
                    },
                    "body": "Fixed @ryanofsky's comments, thanks :) Haven't tested CLI yet though",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1Mzc2MTU2Ng==",
                    "publishedAt": "2017-12-24T02:32:59Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11708#issuecomment-353761566"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/3211283?v=4",
                        "login": "MeshCollider"
                    },
                    "body": "Rebased to fix merge conflict in rawtransactions.py",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1ODE1Nzk0Ng==",
                    "publishedAt": "2018-01-17T00:51:31Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11708#issuecomment-358157946"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/548488?v=4",
                        "login": "sipa"
                    },
                    "body": "Concept ACK. Rebase/squash last commit?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NTEwMzU5MA==",
                    "publishedAt": "2018-02-12T23:53:02Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11708#issuecomment-365103590"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/3211283?v=4",
                        "login": "MeshCollider"
                    },
                    "body": "@sipa done :)",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NTE4MTg1MA==",
                    "publishedAt": "2018-02-13T08:10:11Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11708#issuecomment-365181850"
                }
            ],
            "totalCount": 25
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "576624ce9567487f799d3a526b8f38b88c64ee80"
                    }
                }
            ],
            "totalCount": 5
        },
        "createdAt": "2017-11-17T02:18:43Z",
        "deletions": 29,
        "id": "MDExOlB1bGxSZXF1ZXN0MTUzMTk5OTI2",
        "labels": {
            "nodes": [
                {
                    "color": "0052cc",
                    "id": "MDU6TGFiZWw5ODI3OTE3Nw==",
                    "name": "RPC/REST/ZMQ"
                },
                {
                    "color": "08a781",
                    "id": "MDU6TGFiZWwxNDk0MjQ=",
                    "name": "Wallet"
                }
            ],
            "totalCount": 2
        },
        "mergeable": "CONFLICTING",
        "mergedAt": null,
        "number": 11708,
        "state": "OPEN",
        "title": "Add P2SH-P2WSH support to signrawtransaction and listunspent RPC",
        "updatedAt": "2018-03-12T23:13:46Z"
    },
    {
        "additions": 23,
        "author": {
            "avatarUrl": "https://avatars2.githubusercontent.com/u/44674?v=4",
            "login": "Elbandi",
            "url": "https://github.com/Elbandi"
        },
        "body": "This patch allow multiple out selection in coincontrol dialog.\r\nOnly for changing the checked state, locking need single select.\r\n\r\nusecase: someone gets lost of payments from zpool/miningrigrentals/nicehash/etc, its easy to select inputs for sending (no need to click many times in intems or space-down-space-down-space-down... by keyboard)\r\n",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/44674?v=4",
                        "login": "Elbandi"
                    },
                    "body": "new commit pushed",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0NjYxODU3Mw==",
                    "publishedAt": "2017-11-23T13:29:23Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11750#issuecomment-346618573"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "Tested a bit.\r\nThe multiselection works well.\r\n\r\nI got confused by the selection count indicator label.\r\nIt's confusing because you have the first button \"(un)select all\" where the new \"(1) selected\" has a different context for \"selected\".\r\n\r\nMaybe remove the label (just add the multiselection possibility) or use a different help text for the new label... though I don't think it's necessary to have a such label (rarely saw this in multiselection use-cases).",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0ODAzNzU3Mw==",
                    "publishedAt": "2017-11-29T23:59:54Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11750#issuecomment-348037573"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/44674?v=4",
                        "login": "Elbandi"
                    },
                    "body": "Rename the button to \"(un)check all\", eventually thats the right function.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0ODE3NjY2OA==",
                    "publishedAt": "2017-11-30T12:38:35Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11750#issuecomment-348176668"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "> It's confusing because you have the first button \"(un)select all\" where the new \"(1) selected\" has a different context for \"selected\".\r\n\r\nI have the same opinion here; the coin selection is already inherently multi-select, as multiple outputs can be checked. So adding another layer of multi-selection on top is confusing. It's no longer clear whether selection refers to \"toggled checkbox\" or \"selected row\".\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NDg3ODQwOA==",
                    "publishedAt": "2018-02-12T10:09:46Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11750#issuecomment-364878408"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/1095675?v=4",
                        "login": "luke-jr"
                    },
                    "body": "I agree this is confusing, yet also see the validity of the use case.\r\n\r\nMaybe @jonasschnelli 's idea + renaming the button to \"(Un)check all\" would be sufficient.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2ODU0MDM0OQ==",
                    "publishedAt": "2018-02-26T15:29:04Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11750#issuecomment-368540349"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "I think we should remove the new label. Just allow the spacebar toggling. Seems much more clear to me then confusing with \"selection\" (multiple contexts of selection)",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MDIxODUxOA==",
                    "publishedAt": "2018-04-10T19:24:55Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11750#issuecomment-380218518"
                }
            ],
            "totalCount": 6
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "7cec76f81bd0fdf2f60738e0b8941dfef57ef825"
                    }
                }
            ],
            "totalCount": 1
        },
        "createdAt": "2017-11-22T10:22:22Z",
        "deletions": 4,
        "id": "MDExOlB1bGxSZXF1ZXN0MTU0MTEzNjY4",
        "labels": {
            "nodes": [
                {
                    "color": "02d7e1",
                    "id": "MDU6TGFiZWwxMzU5NDY=",
                    "name": "GUI"
                },
                {
                    "color": "08a781",
                    "id": "MDU6TGFiZWwxNDk0MjQ=",
                    "name": "Wallet"
                }
            ],
            "totalCount": 2
        },
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "number": 11750,
        "state": "OPEN",
        "title": "Multiselect in coincontrol treewidget and display selected count",
        "updatedAt": "2018-04-10T19:24:55Z"
    },
    {
        "additions": 3,
        "author": {
            "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
            "login": "practicalswift",
            "url": "https://github.com/practicalswift"
        },
        "body": "Avoid locking mutexes that are already held by the same thread. These are reentrant mutexes, but still no need to lock them more than once per thread :-)",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
                        "login": "promag"
                    },
                    "body": "utACK 9f857d5.\r\n\r\nAre these random picks? For instance, `CTxMemPool::CalculateMemPoolAncestors` can assert the lock too right?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0NzIzNzk3NQ==",
                    "publishedAt": "2017-11-27T16:29:52Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11762#issuecomment-347237975"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
                        "login": "MarcoFalke"
                    },
                    "body": "Why would we need the runtime check when there is a compile time check?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0NzI2MzY3MQ==",
                    "publishedAt": "2017-11-27T17:44:08Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11762#issuecomment-347263671"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "@promag No, these are not random picks. They were the ones I could find, verify manually and passes both `make check` + `test/functional/test_runner.py` with nothing but trivial changes :-)\r\n\r\nThe lock in `CTxMemPool::UpdateTransactionsFromBlock` you suggested could also be removed but that would require more fine grained locking in the corresponding tests. If you have time then please post a diff of that locking change and I'll make it part of this PR :-)",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0NzI5ODA0OQ==",
                    "publishedAt": "2017-11-27T19:27:52Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11762#issuecomment-347298049"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "@MarcoFalke I replaced the `LOCK(\u2026);` with `AssertLockHeld(\u2026);` to make it easy to verify also for reviewers not building with Clang thread safety analysis warnings enabled. Should I remove them? :-)",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0NzI5ODU4Mw==",
                    "publishedAt": "2017-11-27T19:29:26Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11762#issuecomment-347298583"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "@promag Do you have any additional suggestions beyond `CTxMemPool::CalculateMemPoolAncestors(\u2026)`? :-)",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0NzMwMDM3MQ==",
                    "publishedAt": "2017-11-27T19:35:13Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11762#issuecomment-347300371"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
                        "login": "MarcoFalke"
                    },
                    "body": "I think it is fine to leave them for now, but it seems arbitrary to add run time checks to a subset of methods that already have the compile time check. I know that not everyone compiles with clang, but at least for releases we do and I am sure some developers build with clang, so it should be noticed quickly.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0NzMwMDgxNA==",
                    "publishedAt": "2017-11-27T19:36:25Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11762#issuecomment-347300814"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
                        "login": "promag"
                    },
                    "body": "I wasn't suggesting to remove more locks. Maybe these changes are preferable in small PR's.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0NzMyODA3Nw==",
                    "publishedAt": "2017-11-27T21:07:06Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11762#issuecomment-347328077"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "Added the `removeConflicts(\u2026) EXCLUSIVE_LOCKS_REQUIRED(\u2026)` annotation to `txmempool.h`. \r\n\r\n@promag Would you mind re-reviewing? ",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0NzM1NDY3Ng==",
                    "publishedAt": "2017-11-27T22:47:12Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11762#issuecomment-347354676"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "@theuni @promag @MarcoFalke Updated to address feedback. Please re-review :-)",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NzgyNjEyNA==",
                    "publishedAt": "2018-02-22T21:21:41Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11762#issuecomment-367826124"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
                        "login": "MarcoFalke"
                    },
                    "body": "utACK 96b6899e2c9b4a86698a6ea64460d045fde68c43",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NzgyNzQ1Ng==",
                    "publishedAt": "2018-02-22T21:26:44Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11762#issuecomment-367827456"
                }
            ],
            "totalCount": 10
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "96b6899e2c9b4a86698a6ea64460d045fde68c43"
                    }
                }
            ],
            "totalCount": 1
        },
        "createdAt": "2017-11-24T18:54:00Z",
        "deletions": 3,
        "id": "MDExOlB1bGxSZXF1ZXN0MTU0NTk3NTY3",
        "labels": {
            "nodes": [
                {
                    "color": "E6F6D6",
                    "id": "MDU6TGFiZWwxMzU5NjE=",
                    "name": "Refactoring"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "number": 11762,
        "state": "OPEN",
        "title": "Avoid locking mutexes that are already held by the same thread",
        "updatedAt": "2018-02-22T21:26:44Z"
    },
    {
        "additions": 108,
        "author": {
            "avatarUrl": "https://avatars0.githubusercontent.com/u/8744958?v=4",
            "login": "aaron-hanson",
            "url": "https://github.com/aaron-hanson"
        },
        "body": "Added a /rest/blockhash/<HEIGHT>.json endpoint, so that the user can fetch a block hash by height via REST (analogous to the 'getblockhash' RPC method).\r\n\r\nFor someone wanting to gather block or header data via REST only, there was no way to begin fetching blocks/headers at specific heights without knowing the block hashes at those heights.  This endpoint might also come in handy for someone wanting to quickly verify a block existing at a specific height in the active chain.",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "Nice. Thanks for contributing.\r\nConcept ACK.\r\n\r\nWhat holds you back in completing this with supporting hex/bin? Should be trivial.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0NjkyNjM5Nw==",
                    "publishedAt": "2017-11-25T08:22:33Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11765#issuecomment-346926397"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/8744958?v=4",
                        "login": "aaron-hanson"
                    },
                    "body": "@jonasschnelli Yeah I noticed the hex/bin pattern but wasn't entirely sure if I should use those here too.  I suppose I wasn't sure exactly what should be serialized in this case, as the other endpoints using bin/hex are serializing whole class/struct instances like CBlockHeader or CBlock, whereas this is a simple hash string.  I can certainly add that support.\r\n\r\nThanks for taking a look!",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0NjkyNjkxNg==",
                    "publishedAt": "2017-11-25T08:34:57Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11765#issuecomment-346926916"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "@aaron-hanson.\r\nYou can just create a data stream and push the hashes onto the stream. A rest client could save ~50% brutto bandwidth over a JSON/hexstring.\r\n```\r\nCDataStream ssFooBar(SER_NETWORK, PROTOCOL_VERSION);\r\nssGetUTXOResponse << pindex->GetBlockHash();\r\n```\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0NjkyNzA5Ng==",
                    "publishedAt": "2017-11-25T08:39:21Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11765#issuecomment-346927096"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/8744958?v=4",
                        "login": "aaron-hanson"
                    },
                    "body": "Added bin/hex formats, associated tests and documentation.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0NjkzMTU4NQ==",
                    "publishedAt": "2017-11-25T10:16:21Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11765#issuecomment-346931585"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/8744958?v=4",
                        "login": "aaron-hanson"
                    },
                    "body": "> Another option would be to overload /rest/block/[hash|height].[bin,hex.json]. Note that json response includes the hash.\r\n\r\n@promag - I thought about this too...  After researching a bit I found an older issue (#6011) about essentially the same thing, but in RPC.  I assumed from the opinions there that I should probably just add this blockhash endpoint and not overload the block endpoint.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0Njk3MzAzNw==",
                    "publishedAt": "2017-11-25T23:28:40Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11765#issuecomment-346973037"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
                        "login": "promag"
                    },
                    "body": "As others say in #6011, it was possible to query block by height but with 2 calls. With REST call there is no way unless you walk back from the tip. Unless we want to mirror the RPC interface, I think overloading sounds cooler.\r\n\r\nIn that scenario, the difference between the 2 endpoints would be cache headers, since by hash the block is immutable but not by height (at least near the tip).",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0Njk3NjI1Ng==",
                    "publishedAt": "2017-11-26T00:52:39Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11765#issuecomment-346976256"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
                        "login": "promag"
                    },
                    "body": "BTW nice first contribution.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0Njk3NjMxOA==",
                    "publishedAt": "2017-11-26T00:54:41Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11765#issuecomment-346976318"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
                        "login": "promag"
                    },
                    "body": "utACK b026c5f. Needs squash.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0NzEyNzY2OA==",
                    "publishedAt": "2017-11-27T09:38:46Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11765#issuecomment-347127668"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
                        "login": "promag"
                    },
                    "body": "Needs rebase.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2MjgxODgyNw==",
                    "publishedAt": "2018-02-03T15:01:59Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11765#issuecomment-362818827"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1063656?v=4",
                        "login": "jnewbery"
                    },
                    "body": "@aaron-hanson - are you still working on this? It needs rebasing and squashing.\r\n\r\nSuggest we close with 'up for grabs' if there's no activity on this PR soon.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3ODQxMTgxMQ==",
                    "publishedAt": "2018-04-03T21:54:02Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11765#issuecomment-378411811"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/8744958?v=4",
                        "login": "aaron-hanson"
                    },
                    "body": "@jnewbery - ah sorry, for some reason I missed the previous comments...  I'll squash/rebase and retest tonight.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3ODQxOTgzMQ==",
                    "publishedAt": "2018-04-03T22:29:44Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11765#issuecomment-378419831"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/8744958?v=4",
                        "login": "aaron-hanson"
                    },
                    "body": "@jnewbery @promag - squashed and rebased.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3ODQ1OTU1Mw==",
                    "publishedAt": "2018-04-04T02:24:14Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11765#issuecomment-378459553"
                }
            ],
            "totalCount": 12
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "1323df9ff1e9ca80ecba894254fdbba2a8a0b428"
                    }
                }
            ],
            "totalCount": 1
        },
        "createdAt": "2017-11-25T08:01:19Z",
        "deletions": 0,
        "id": "MDExOlB1bGxSZXF1ZXN0MTU0NjI4ODI4",
        "labels": {
            "nodes": [
                {
                    "color": "0052cc",
                    "id": "MDU6TGFiZWw5ODI3OTE3Nw==",
                    "name": "RPC/REST/ZMQ"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "CONFLICTING",
        "mergedAt": null,
        "number": 11765,
        "state": "OPEN",
        "title": "[REST] added blockhash api, tests and documentation",
        "updatedAt": "2018-04-04T13:50:07Z"
    },
    {
        "additions": 134,
        "author": {
            "avatarUrl": "https://avatars3.githubusercontent.com/u/10084960?v=4",
            "login": "joemphilips",
            "url": "https://github.com/joemphilips"
        },
        "body": "This could be useful if other clients want to use the core's fee estimation logic via REST.",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/10084960?v=4",
                        "login": "joemphilips"
                    },
                    "body": "Thanks for reviewing.\r\nI will update according to the review soon.\r\n> Maybe too much for REST?\r\n\r\nRationale for this PR is that some light client(or other services) wants to use information about block or mempool for estimating fee. This is pretty close to the motivation of `getutxo` in terms of it places some trust on the full node. core's fee estimation logic is likely to update to a more sophisticated scheme in the near future so many clients may want to use core's logic directly.\r\n> At least the the URI could be improved. This looks weird:\r\n\r\nYou are right. Can I use `&foo=bar` style query parameter here? I didn't because other endpoint didn't. in that case, what about\r\n`/rest/fee.json?target=<TARGET>&mode=<MODE>` and make `mode` optional? Though I'm not sure how easy this is to implement. \r\n\r\nOtherwise all I can think is enabling to omit `<MODE>` . and query in the form like\r\n`/rest/fee/5.json`",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0NzI4MDMwOA==",
                    "publishedAt": "2017-11-27T18:35:44Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11770#issuecomment-347280308"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
                        "login": "promag"
                    },
                    "body": "My vote goes to `GET /rest/fee?target=<TARGET>&mode=<MODE>`, with query parameters and without extension. IMO all endpoints should return JSON, unless `Accept: ` headers requests other format.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0NzI4OTc3MA==",
                    "publishedAt": "2017-11-27T19:03:52Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11770#issuecomment-347289770"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "Concept ACK.\r\nPlease no query string.\r\nThe in this PR proposed URL scheme seems correct and in align with other calls: https://github.com/bitcoin/bitcoin/blob/master/doc/REST-interface.md#query-utxo-set",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0NzMxMDMxMQ==",
                    "publishedAt": "2017-11-27T20:05:16Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11770#issuecomment-347310311"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "> Please no query string.\r\n> The in this PR proposed URL scheme seems correct and in align with other calls: \r\n\r\nYep, agree.\r\nConcept ACK.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0NzQ5NDkwMA==",
                    "publishedAt": "2017-11-28T11:28:03Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11770#issuecomment-347494900"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
                        "login": "promag"
                    },
                    "body": "Needs rebase.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2MjgxOTA1Nw==",
                    "publishedAt": "2018-02-03T15:03:45Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11770#issuecomment-362819057"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/10084960?v=4",
                        "login": "joemphilips"
                    },
                    "body": "rebased.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2MzEwMDY4Mw==",
                    "publishedAt": "2018-02-05T14:30:39Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11770#issuecomment-363100683"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/10084960?v=4",
                        "login": "joemphilips"
                    },
                    "body": "umm... sorry, does \"Needs rebase\" imply needs for squashing? or just rebasing onto master?\r\nI only did rebasing onto master but it needs squashing before merge.\r\n(Sorry for silly question. Forgive me, this is my first PR.) @promag ",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NTg2MjQ3Ng==",
                    "publishedAt": "2018-02-15T08:55:54Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11770#issuecomment-365862476"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/863730?v=4",
                        "login": "fanquake"
                    },
                    "body": "@joemphilips You'll need to rebase onto master, as this currently has merge conflicts in `test/functional/feature_fee_estimation.py`.\r\n\r\nAt the same time, you can also squash your changes into a single commit. See [Squashing Commits](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#squashing-commits). Use a descriptive commit message i.e \"rest: add an endpoint for estimatesmartfee\".",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NTg4ODg3MQ==",
                    "publishedAt": "2018-02-15T10:40:13Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11770#issuecomment-365888871"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/10084960?v=4",
                        "login": "joemphilips"
                    },
                    "body": "rebased (and squashed)",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NjUzMDY0MQ==",
                    "publishedAt": "2018-02-18T17:09:47Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11770#issuecomment-366530641"
                }
            ],
            "totalCount": 9
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "935b364978cfc8b8db119245acaa8413eadd7136"
                    }
                }
            ],
            "totalCount": 1
        },
        "createdAt": "2017-11-27T14:48:16Z",
        "deletions": 50,
        "id": "MDExOlB1bGxSZXF1ZXN0MTU0ODI4MzU4",
        "labels": {
            "nodes": [
                {
                    "color": "0052cc",
                    "id": "MDU6TGFiZWw5ODI3OTE3Nw==",
                    "name": "RPC/REST/ZMQ"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "CONFLICTING",
        "mergedAt": null,
        "number": 11770,
        "state": "OPEN",
        "title": "[REST] add a rest endpoint for estimatesmartfee, docs, and test",
        "updatedAt": "2018-03-09T11:19:43Z"
    },
    {
        "additions": 729,
        "author": {
            "avatarUrl": "https://avatars0.githubusercontent.com/u/649246?v=4",
            "login": "TheBlueMatt",
            "url": "https://github.com/TheBlueMatt"
        },
        "body": "This does a few things in a PR, so I'm happy to split it up if people prefer.\r\n\r\na) It clarifies the validationinterface stuff into a mempoolinterface and the validationinterface, splitting the two up into separate systems with the mempool creating events for mempoolinterface and validationinterface functions coming from validation. They are conjoined in the backend to provide ordering guarantees for listeners which are *both* mempool interfaces and validation interfaces, but are otherwise fully separated. There are a few cleanups that are enabled here, which I went ahead and did.\r\n\r\nb) fee estimator becomes a listener to the mempool interface which provides a bit of additional info about transactions being added more than just the tx (eg feerate, etc)\r\n\r\nc) a few minor edge cases in the fee estimator are handled (witness malleation changing feerate, and handling reorgs better, specifically).",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/649246?v=4",
                        "login": "TheBlueMatt"
                    },
                    "body": "Obviously this cleans up some of the interface gook from #10286, and adds some more docs that probably could have been there. Next up after this one is moving alll the remaining events all into the background thread, with associated net_processing cleanups in the process.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0NzMxNzg5MQ==",
                    "publishedAt": "2017-11-27T20:29:59Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11775#issuecomment-347317891"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/649246?v=4",
                        "login": "TheBlueMatt"
                    },
                    "body": "Rebased.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1MTU0NzAyMA==",
                    "publishedAt": "2017-12-13T22:34:05Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11775#issuecomment-351547020"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/417043?v=4",
                        "login": "theuni"
                    },
                    "body": "Concept ACK.\r\n\r\nThough I'm nervous about backgrounding more stuff before safeguarding against outside (unsynchronized) access. For example, the mempool/feeestimator may now be significantly ahead of what the wallet has processed. So calling CreateTransaction when we're in the middle of connecting 10 blocks seems... dangerous, even with the BlockUntilSyncedToCurrentChain hack.\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1MjU5ODgzMg==",
                    "publishedAt": "2017-12-19T00:13:16Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11775#issuecomment-352598832"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/649246?v=4",
                        "login": "TheBlueMatt"
                    },
                    "body": "Hmm? If anything the fee estimator should be at much lower risk there than for wallet...at worst you'll get out of date fee estimates...something you'd get anyway because you're calling the fee estimator in the middle of syncing stuff. Note that #11824 also keeps the queue depth at no more than 10, though I dont really want to rely on that and would prefer to implement the dump/reload-from-disk proposal suggested at https://github.com/bitcoin/bitcoin/pull/11775/files#diff-e8d9e22d9683f73a9fb8399be0dab640R145",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1MjYwMjIyOQ==",
                    "publishedAt": "2017-12-19T00:34:39Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11775#issuecomment-352602229"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/649246?v=4",
                        "login": "TheBlueMatt"
                    },
                    "body": "Rebased.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NjY3NzQxNg==",
                    "publishedAt": "2018-03-27T21:13:25Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11775#issuecomment-376677416"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/7463573?v=4",
                        "login": "sdaftuar"
                    },
                    "body": "I've started reviewing and testing the first few commits in this PR, but I already agree with @jimpo above, that this would be easier to review if it was split up.\r\n\r\nPerhaps we could first have a PR that changed the callback interface around, and then another PR that reworks the fee estimator to take advantage of the new interface?\r\n\r\n(also this needs rebase)",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MDIyMzI3Ng==",
                    "publishedAt": "2018-04-10T19:42:46Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11775#issuecomment-380223276"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/127186?v=4",
                        "login": "ajtowns"
                    },
                    "body": "ConceptACK for what it's worth, but definitely split this up -- it overflows my mental stack, and both times I've tried to review it it's already had conflicts with master that make a review not crazy useful...\r\n\r\nBreaking out the trivial bits, at least \"Clarify validationinterface notification ordering\" and \"Remove useless scoped (sic?) in AcceptToMemoryPool\" seems like a good first move. Maybe \"Split removeRecursive\" as well. Otherwise just splitting the remaining patches into mempool/validationinterface vs fee-estimation focused seems plausible.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MDY1ODQ4NA==",
                    "publishedAt": "2018-04-12T02:50:02Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11775#issuecomment-380658484"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1063656?v=4",
                        "login": "jnewbery"
                    },
                    "body": "I haven't looked at the changes but a +700/-600 diff is somewhat intimidating.\r\n\r\nI'd love to help you make progress on this and will happily review PRs that are a subset of this.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MDgyMjI5OA==",
                    "publishedAt": "2018-04-12T14:20:21Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11775#issuecomment-380822298"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
                        "login": "promag"
                    },
                    "body": "Tested ACK.\r\n\r\nI'm kidding :trollface: please please split up \ud83d\udc4d ",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MDgyODY5Ng==",
                    "publishedAt": "2018-04-12T14:38:21Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11775#issuecomment-380828696"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
                        "login": "MarcoFalke"
                    },
                    "body": "@bugthebluematt ^",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MDg0MTkxOA==",
                    "publishedAt": "2018-04-12T15:16:23Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11775#issuecomment-380841918"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/649246?v=4",
                        "login": "TheBlueMatt"
                    },
                    "body": "Now based on #12979.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MTIzMTM4OA==",
                    "publishedAt": "2018-04-13T18:59:22Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11775#issuecomment-381231388"
                }
            ],
            "totalCount": 11
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "ab3f927538021a89e38cfa55a312bb8c0a0adb46"
                    }
                }
            ],
            "totalCount": 14
        },
        "createdAt": "2017-11-27T19:30:34Z",
        "deletions": 622,
        "id": "MDExOlB1bGxSZXF1ZXN0MTU0ODk2MjA2",
        "labels": {
            "nodes": [
                {
                    "color": "5319e7",
                    "id": "MDU6TGFiZWw4MjQyODI1MQ==",
                    "name": "TX fees and policy"
                },
                {
                    "color": "6060aa",
                    "id": "MDU6TGFiZWwxMTgzNzk2NTI=",
                    "name": "Validation"
                }
            ],
            "totalCount": 2
        },
        "mergeable": "CONFLICTING",
        "mergedAt": null,
        "number": 11775,
        "state": "OPEN",
        "title": "Move fee estimator into validationinterface/cscheduler thread",
        "updatedAt": "2018-04-17T15:26:38Z"
    },
    {
        "additions": 20,
        "author": {
            "avatarUrl": "https://avatars0.githubusercontent.com/u/37696?v=4",
            "login": "vii",
            "url": "https://github.com/vii"
        },
        "body": "As noted in https://github.com/bitcoin/bitcoin/issues/11368 if too many connections are made to the RPC interface, then other code will fail on open(2) syscalls with EMFILE. The result can be that the block database gets into an inconsistent state.\r\n\r\nOn many Linux distributions, by default, each process has 1024 file descriptors; these are shared between open files and network connections. The main init code attempts to apportion them between uses, but neglects to constrain the RPC layer: https://github.com/bitcoin/bitcoin/blob/master/src/init.cpp#L907\r\n\r\nUnfortunately, libevent does not allow a natural way to bound the number of file-descriptors used by the evhttp server. Therefore, we have to resort to requesting to stop new connections by disabling the accept listener in the epoll event structure. This is not a good way to control load, and more connections are accepted until the next epoll cycle is triggered, but it does stop an unbounded number of connections from being created, and does prevent a high number of connections to the RPC layer from damaging the rest of the system.\r\n\r\nTo avoid problems of a similar nature, the second patch additionally raises the rlimit of number of file descriptors as high as it can go.\r\n\r\nTo repro the database crash and validate the fix, the following node.js fragment:\r\n```\r\nvar uri = 'http://127.0.0.1:8332/rest/block/000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f.json'\r\nfor (var message = 0; message < 10000; message++) {\r\n    request(uri)\r\n}\r\n```\r\n\r\nThe messages around the database crash due to open(2) failing due to too many open files\r\n \r\n> 2017-11-26 19:35:55 libevent: Error from accept() call: Too many open files\r\n> 2017-11-26 19:35:55 ERROR: WriteBlockToDisk: OpenBlockFile failed\r\n> 2017-11-26 19:35:55 libevent: timeout_next: event: 0x7f59001dcef0, in 15 seconds, 475453 useconds\r\n> 2017-11-26 19:35:55 *** Failed to write block\r\n> 2017-11-26 19:35:55 libevent: epoll_dispatch: epoll_wait reports 1\r\n> 2017-11-26 19:35:55 Error: Error: A fatal internal error occurred, see debug.log for details\r\n",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "Nice find. Thanks for reporting!",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0Nzc5MTIzNw==",
                    "publishedAt": "2017-11-29T08:44:57Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11785#issuecomment-347791237"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "Thanks!\r\n\r\nIt's kind of disappointing that evhttp has no way to limit file descriptors. This is the so-manieth hack we need to accommodate it. It's also not very actively maintained so trying to push any fix upstream will take a long time, if ever. I sometimes wonder if moving to [libevhtp](https://github.com/criticalstack/libevhtp), which seems to be the quasi-standard for http servers on top of libevent, would solve these issues.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0NzgxMDk0OQ==",
                    "publishedAt": "2017-11-29T10:01:51Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11785#issuecomment-347810949"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
                        "login": "promag"
                    },
                    "body": "Should we add a stress test to travis?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0NzgxMjgyOQ==",
                    "publishedAt": "2017-11-29T10:08:52Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11785#issuecomment-347812829"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/37696?v=4",
                        "login": "vii"
                    },
                    "body": "@laanwj yes it is disappointing that there isn't a better API to manage this systemic issue in evhttp.\r\n\r\nEven more unfortunately, some configurations in Travis use an old version of libevent that doesn't have the bevcb callback or the ability to count added file descriptors. I've updated the pull request correspondingly. Protection is only available on newer libevents :(\r\n\r\nWhat programs are available in Travis? Various configurations of https://github.com/shekyan/slowhttptest would be good tests, for example\r\n\r\n```\r\nslowhttptest -c 40000 -r 1000 -u 'http://127.0.0.1:8332/rest/block/000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f.json'\r\n```",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0Nzg2NDgzOA==",
                    "publishedAt": "2017-11-29T13:47:30Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11785#issuecomment-347864838"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "> I've updated the pull request correspondingly. Protection is only available on newer libevents :(\r\n\r\nI think it would make sense to add a \"known issue\" to the release notes, recommending people that stumble on file descriptor problems while doing a lot of separate RPC requests to upgrade their libevent.\r\n\r\nFWIW minimum seems to be 2.1.4:\r\n```bash\r\n$ git tag --contains 0fa107d8cbc652dacb722fcf650bb6b3ffbe8dac\r\nrelease-2.1.4-alpha\r\nrelease-2.1.5-beta\r\nrelease-2.1.6-beta\r\nrelease-2.1.7-rc\r\nrelease-2.1.8-stable\r\n```",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0ODE4NDIzNA==",
                    "publishedAt": "2017-11-30T13:13:24Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11785#issuecomment-348184234"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "This was discussed on IRC and according to @theuni this doesn't fully solve the problem, unfortunately. He could still fairly easy crash the server with many connections. So it will have to be solved from inside libevent.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0ODM5MzA5MA==",
                    "publishedAt": "2017-12-01T03:39:30Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11785#issuecomment-348393090"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/417043?v=4",
                        "login": "theuni"
                    },
                    "body": "Yes, I've spent the last 2 days trying to work out our best option here. The provided patch is a big help, but I think there are a few more things we can do, namely a libevent patch. I'll push up some more changes tomorrow and we can discuss what it makes sense to pull in.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0ODQwMjEzMA==",
                    "publishedAt": "2017-12-01T05:02:35Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11785#issuecomment-348402130"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/37696?v=4",
                        "login": "vii"
                    },
                    "body": "@theuni here is a libevent patch that provides sufficient functionality to constrain the number of file-descriptors to a tight bound: https://github.com/libevent/libevent/pull/578\r\n\r\nIn the meantime, as we work through the process to change libevent, the pull request here mitigates the original issue and defends against similar ones",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0ODQ5NDgxNA==",
                    "publishedAt": "2017-12-01T13:29:41Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11785#issuecomment-348494814"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/417043?v=4",
                        "login": "theuni"
                    },
                    "body": "@vii Nice work on the upstream patch. It'll be great to have a real solution for this.\r\n\r\nI have a few concerns about the approach here:\r\n-  event_base_get_num_events is not a great representative of the connection count, as our own timers and triggers will throw off the count\r\n- I think keep-alive connections need to be closed if they're re-used once the connection limit has been reached, otherwise it becomes trivial to monopolize the available slots.\r\n- It unfortunately doesn't help with libevent 2.0.x, which is by far the majority in the wild.\r\n\r\nI've adapted your approach and added in a few extras which manage to work-around the issue for libevent 2.0.x as well. With this, I'm unable to raise my fd count above the desired ceiling, no matter how hard I hammer.\r\n\r\nPlease have a look here and see what you think: https://github.com/theuni/bitcoin/commits/http-fd-limit. Note that there's an unlikely potential race at shutdown that I haven't yet addressed.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0ODY3MjQxOA==",
                    "publishedAt": "2017-12-02T06:30:20Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11785#issuecomment-348672418"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "Great!\r\n\r\n> It unfortunately doesn't help with libevent 2.0.x, which is by far the majority in the wild.\r\n\r\nYes - it would be nice to have a (potentially messy) workaround for older libevent, and a clean solution for future upstream versions.\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0ODY4MDE3NQ==",
                    "publishedAt": "2017-12-02T09:30:28Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11785#issuecomment-348680175"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/37696?v=4",
                        "login": "vii"
                    },
                    "body": "@theuni - your patch looks great! I was cautious about modifying so much.\r\n\r\nGiven the discussion, I've reduced my pull request to the simple improvement of making sure to request as many file descriptors as possible.\r\n\r\nWith @theuni's improvement to only accept connections that have data on, honest HTTP connections will go into the connection limiter. However, I suspect adversaries using things like the slowloris attack (which send incomplete requests and then pause) will not be caught and will use resources. These can be controlled if the libevent request is included, but otherwise can be detected but not perfectly controlled using the approach in the first request, which binds to the rather toothless bevcb callback.\r\n\r\nOne way to look at this is that the root issue is that there is a process wide file-descriptor allocation defined in https://github.com/bitcoin/bitcoin/blob/master/src/init.cpp#L907 but the RPC interface isn't accounted for. Would be great to integrate @theuni's ConnectionLimiter into that!\r\n\r\nIs it worth defending against slowloris style attacks given the RPC interface is generally not accessible to adversaries?\r\n\r\nIn this pull request, his small change to request as many file-descriptors as possible should help mitigate the original issue on many default configurations (e.g. Ubuntu).",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0ODg2NzI2Mw==",
                    "publishedAt": "2017-12-04T05:56:19Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11785#issuecomment-348867263"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/37696?v=4",
                        "login": "vii"
                    },
                    "body": "this small change to request more file-descriptors does not depend on the libevent patch (which is making progress towards acceptance) but alleviates the issue in many configurations - except for deliberate attacks\r\n\r\nPlease review!\r\n\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1MjI3Mzk3Mw==",
                    "publishedAt": "2017-12-17T18:05:47Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11785#issuecomment-352273973"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/37696?v=4",
                        "login": "vii"
                    },
                    "body": "the libevent change has been merged into that repo so we can have a complete fix https://github.com/libevent/libevent/pull/578 - but the limited PR here does not depend on it\r\n\r\nHappy to make a more complete fix if it would be reviewed!",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1MjMxOTkzNg==",
                    "publishedAt": "2017-12-18T03:55:03Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11785#issuecomment-352319936"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/417043?v=4",
                        "login": "theuni"
                    },
                    "body": "@vii Great work on the upstream fix!\r\n\r\nI'll clean up my changes and PR them separately. I'll go ahead and work in the bevcb for supported versions, so that we can take advantage of that when possible.\r\n\r\nAs for raising the fd limit, I have mixed feelings. I worry that this will simply mask problems. I believe @gmaxwell was in favor, though.\r\n\r\n@gmaxwell: assuming we manage to contain this issue, do you still think maxing out the fd limit is beneficial?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1MzIwNTkwMA==",
                    "publishedAt": "2017-12-20T22:50:18Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11785#issuecomment-353205900"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/37696?v=4",
                        "login": "vii"
                    },
                    "body": "the issue that it masks is that several usages of file-descriptors are not budgeted for in the process wide file-descriptor allocation defined in https://github.com/bitcoin/bitcoin/blob/master/src/init.cpp#L907 \r\n\r\nIt would be quite difficult to carefully audit for all usages of file-descriptors as library functions may use them for various purposes. Even once the budgeting is done, this will be helpful!\r\n\r\nPlease consider and merge",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1NDU1ODkyMw==",
                    "publishedAt": "2017-12-30T17:46:23Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11785#issuecomment-354558923"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "What I'd like to know is how does other software handle this? Is it frowned upon for daemons to increase the file descriptor count without being asked? I thought the usual case for UNIX is to make changing resource limits up to the user/sysadmin, and changing them un-asked is deemed rude, but this might be different for file descriptors.\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1NzAzNjA3NQ==",
                    "publishedAt": "2018-01-11T19:31:51Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11785#issuecomment-357036075"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/37696?v=4",
                        "login": "vii"
                    },
                    "body": "@laanwj we are not attempting to change the maximum, just adjusting to use the maximum we are allowed\r\n\r\nNote here is some similar code in the wine project - rather more battlehardened but with the same effect on Linux\r\n\r\nhttps://source.winehq.org/source/libs/wine/loader.c#L661\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2MTQ3NDA3MQ==",
                    "publishedAt": "2018-01-30T04:30:31Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11785#issuecomment-361474071"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/2734?v=4",
                        "login": "eklitzke"
                    },
                    "body": "@theuni brought this PR to my attention in a conversation we had earlier today. I was actually planning to implement the same behavior, for a completely different reason: I would like to increase the number of file descriptors that leveldb is allowed to use, because performance testing I have done makes me think that the low limit leveldb currently has is causing issues with which pages Linux decides to keep in the page cache. I think increasing the soft limit is safe and reasonable.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NjgzNjQ2Mw==",
                    "publishedAt": "2018-02-20T00:48:12Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11785#issuecomment-366836463"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "@eklitzke Is that an ACK on this?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MDU3MDc1Nw==",
                    "publishedAt": "2018-03-05T21:23:32Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11785#issuecomment-370570757"
                }
            ],
            "totalCount": 19
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "8aaaa68432f569f9905b4085b645554db03226b7"
                    }
                }
            ],
            "totalCount": 1
        },
        "createdAt": "2017-11-29T05:26:29Z",
        "deletions": 5,
        "id": "MDExOlB1bGxSZXF1ZXN0MTU1MjUyNTM4",
        "labels": {
            "nodes": [
                {
                    "color": "0052cc",
                    "id": "MDU6TGFiZWw5ODI3OTE3Nw==",
                    "name": "RPC/REST/ZMQ"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "number": 11785,
        "state": "OPEN",
        "title": "Raise the open fd limit to the maximum allowed",
        "updatedAt": "2018-03-05T21:23:32Z"
    },
    {
        "additions": 45,
        "author": {
            "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
            "login": "practicalswift",
            "url": "https://github.com/practicalswift"
        },
        "body": "Prior to this commit callers of `FindNode(...)` were required to be holding `cs_vNodes` in the cases where they used the returned `CNode*` for anything aside from existence-checking (see #9626).\r\n\r\nThis resulted in locking `cs_vNodes` twice since `FindNode(...)` had a `LOCK(cs_vNodes);`.\r\n\r\nTo solve this and to make the locking requirements more explicit this commit does the following:\r\n* Add explicit locking requirements for `FindNode(...)` using `EXCLUSIVE_LOCKS_REQUIRED(cs_vNodes)`.\r\n* Remove the now redundant `LOCK(cs_vNodes)` in `FindNode(...)`.\r\n* Add a method `CConnman::NodeExists(...)` for existence-checking. Calling this method does not require holding `cs_vNodes`.",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/649246?v=4",
                        "login": "TheBlueMatt"
                    },
                    "body": "Prefer #11604.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0ODY2NDMwMw==",
                    "publishedAt": "2017-12-02T03:22:12Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11795#issuecomment-348664303"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "@TheBlueMatt But #11604 doesn't touch `FindNode(\u2026)` from what I can see? :-)",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0ODc2NDQwNA==",
                    "publishedAt": "2017-12-03T12:52:12Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11795#issuecomment-348764404"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "Rebased!",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2MjkwNzg2Mw==",
                    "publishedAt": "2018-02-04T13:44:31Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11795#issuecomment-362907863"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "Rebased!",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NDA0NzA3NQ==",
                    "publishedAt": "2018-02-08T09:07:10Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11795#issuecomment-364047075"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "@TheBlueMatt Could you explain how #11604 overlaps with the `FindNode(\u2026)` work in this PR? :-)",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NDU3NzQ2NA==",
                    "publishedAt": "2018-03-20T12:19:54Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11795#issuecomment-374577464"
                }
            ],
            "totalCount": 5
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "a32bc305470ff6f48f016761e79bc222dc5cc192"
                    }
                }
            ],
            "totalCount": 1
        },
        "createdAt": "2017-11-30T09:15:59Z",
        "deletions": 13,
        "id": "MDExOlB1bGxSZXF1ZXN0MTU1NTUzODA5",
        "labels": {
            "nodes": [
                {
                    "color": "006b75",
                    "id": "MDU6TGFiZWw5ODI5ODAwNw==",
                    "name": "P2P"
                },
                {
                    "color": "E6F6D6",
                    "id": "MDU6TGFiZWwxMzU5NjE=",
                    "name": "Refactoring"
                }
            ],
            "totalCount": 2
        },
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "number": 11795,
        "state": "OPEN",
        "title": "net: Avoid locking cs_vNodes twice when calling FindNode(...). Add NodeExists(...).",
        "updatedAt": "2018-03-20T12:19:54Z"
    },
    {
        "additions": 26,
        "author": {
            "avatarUrl": "https://avatars2.githubusercontent.com/u/1095675?v=4",
            "login": "luke-jr",
            "url": "https://github.com/luke-jr"
        },
        "body": "When restoring a backup, we should restore the wallet metadata. This moves some of it out of \"comment\" sections so that it can be sensibly handled by parsing tools.\r\n\r\n(`importwallet` doesn't currently support it, but that's another matter to address)",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "@luke-jr: can you please elaborate a little bit what situation this PR does improve?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM0ODQxMTE5MA==",
                    "publishedAt": "2017-12-01T06:16:39Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11803#issuecomment-348411190"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "@luke-jr Can you please answer @jonasschnelli 's question? There is no rationale in the OP at all.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2MTUzNjk4MA==",
                    "publishedAt": "2018-01-30T09:47:30Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11803#issuecomment-361536980"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/1095675?v=4",
                        "login": "luke-jr"
                    },
                    "body": "https://github.com/bitcoin/bitcoin/pull/11803#discussion_r154275790",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2MTYyMzk1NA==",
                    "publishedAt": "2018-01-30T15:13:42Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11803#issuecomment-361623954"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
                        "login": "MarcoFalke"
                    },
                    "body": "That should probably be moved to the OP, so it is recoverable from the merge commit body. (Note that we put the OP text in the merge commit body)",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2MTczOTkxOA==",
                    "publishedAt": "2018-01-30T21:27:41Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11803#issuecomment-361739918"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
                        "login": "MarcoFalke"
                    },
                    "body": "Needs rebase if still relevant",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NDA3NDY1Nw==",
                    "publishedAt": "2018-03-19T01:13:01Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11803#issuecomment-374074657"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/1095675?v=4",
                        "login": "luke-jr"
                    },
                    "body": "Rebased",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NzcxNzk1OQ==",
                    "publishedAt": "2018-03-31T19:38:31Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11803#issuecomment-377717959"
                }
            ],
            "totalCount": 6
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "393511cb22124bf575365b4f79ae7884a24b34bd"
                    }
                }
            ],
            "totalCount": 3
        },
        "createdAt": "2017-11-30T20:32:01Z",
        "deletions": 12,
        "id": "MDExOlB1bGxSZXF1ZXN0MTU1NzExNzMx",
        "labels": {
            "nodes": [
                {
                    "color": "0052cc",
                    "id": "MDU6TGFiZWw5ODI3OTE3Nw==",
                    "name": "RPC/REST/ZMQ"
                },
                {
                    "color": "08a781",
                    "id": "MDU6TGFiZWwxNDk0MjQ=",
                    "name": "Wallet"
                }
            ],
            "totalCount": 2
        },
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "number": 11803,
        "state": "OPEN",
        "title": "Bugfix: RPC/Wallet: Include HD key metadata in dumpwallet",
        "updatedAt": "2018-03-31T19:38:31Z"
    },
    {
        "additions": 227,
        "author": {
            "avatarUrl": "https://avatars0.githubusercontent.com/u/649246?v=4",
            "login": "TheBlueMatt",
            "url": "https://github.com/TheBlueMatt"
        },
        "body": "Look at my pretty harrmer, watch as I make everything into a nail!\r\n\r\nThis de-duplicates the NotifyBlockTip/BlockTipChanged callbacks by removing the NotifyBlockTip callback from ui_interface, cleaning up a few things along the way. It does, however, add a good bit of overhead where there was previously none - instead of a simple boost::signal things are now being called on the scheduler background thread. Still, I think its worth it because a) background-threading this stuff makes us less vulnerable to latency spikes in different subsystems because some other subsystem takes forever (at least once validationitnerface is parallel across different clients) and b) avoids lockorder issues creeping in due to cs_main complexity.",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "> It does, however, add a good bit of overhead where there was previously none\r\n\r\nAdding overhead sounds bad. Can you quantify this somehow?\r\n\r\nNote that none of the GUI notifications take significant time. They already just queue a signal to Qt, to be handled later. Adding another layer sounds somewhat bad.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1MzMyNzgzNA==",
                    "publishedAt": "2017-12-21T11:26:28Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11856#issuecomment-353327834"
                }
            ],
            "totalCount": 1
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "f6837cdb865497d2e47493c17c3e871904ba99cd"
                    }
                }
            ],
            "totalCount": 9
        },
        "createdAt": "2017-12-08T20:28:03Z",
        "deletions": 130,
        "id": "MDExOlB1bGxSZXF1ZXN0MTU3MzI3MTQx",
        "labels": {
            "nodes": [
                {
                    "color": "E6F6D6",
                    "id": "MDU6TGFiZWwxMzU5NjE=",
                    "name": "Refactoring"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "CONFLICTING",
        "mergedAt": null,
        "number": 11856,
        "state": "OPEN",
        "title": "[RFC] I Have a Hammer! (Replace parts of ui_interface with validationinterface)",
        "updatedAt": "2017-12-30T11:11:45Z"
    },
    {
        "additions": 8,
        "author": {
            "avatarUrl": "https://avatars0.githubusercontent.com/u/8015558?v=4",
            "login": "vajdaz",
            "url": "https://github.com/vajdaz"
        },
        "body": "When restoring the main window from the system tray, it always was in minimized state (at least on Windows). This patch should fix this. The window should restore to the same state as it was  at the moment of minimizing it into the tray.\r\n\r\nMay be related to issue #8225 \r\n\r\nTo reproduce the bug do following under Windows:\r\n* In Options->Window enable \"Minimize to the tray instead of the taskbar\"\r\n* Optionally enable \"Minimize on close\", too\r\n* Minimize the main window\r\n* Klick on the tray icon (or right click on the tray icon and select Show/Hide)\r\n\r\nThe main window's taskbar icon appears, but the window itself is not restored to its original size.\r\n\r\nExpected behaviour: the window should appear.",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/8015558?v=4",
                        "login": "vajdaz"
                    },
                    "body": "Besides Windows 10, I also have testetd on Kubuntu 16.04 (Plasma) and Ubuntu 16.04 (Gnome) . Seems to be fine to me. However, on Gnome there is no system tray. So if you minimize to tray, you loose visual reference to your application. But this is nothing that this patch introduces, it is a conceptual problem that we have already.\r\n\r\nFailed CI test seems not to be related to my changes. Sporadic errors maybe? Could you please run the tests again?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1MDU0MDUwMw==",
                    "publishedAt": "2017-12-10T11:06:08Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11859#issuecomment-350540503"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "I've restarted the travis build.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1MDc0MTM0Nw==",
                    "publishedAt": "2017-12-11T14:35:07Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11859#issuecomment-350741347"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
                        "login": "promag"
                    },
                    "body": "@laanwj me too, about an hour ago. Was it still failing?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1MDc0MjAyNQ==",
                    "publishedAt": "2017-12-11T14:37:26Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11859#issuecomment-350742025"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "> Was it still failing?\r\n\r\nYes.\r\n\r\n> This must be tested in linux too. BTW see #941.\r\n\r\nYes we've had so much problems with this feature in the past... If it turns out it's just not possible to do this reliably with Qt it'd be better to remove it.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1MjgxMTA1OA==",
                    "publishedAt": "2017-12-19T16:28:04Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11859#issuecomment-352811058"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
                        "login": "promag"
                    },
                    "body": "> it'd be better to remove it.\r\n\r\nOnly linux, or all?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1MjgxMzQ2Nw==",
                    "publishedAt": "2017-12-19T16:35:48Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11859#issuecomment-352813467"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/8015558?v=4",
                        "login": "vajdaz"
                    },
                    "body": "Meanwhile I also read a about some past tray icon issues with different OSes. Seems that Qt can't do it right everywhere.\r\n\r\nAnyway, I have the impression, that minimizing to tray is a common thing to do on Windows. However, on Linux this is not the case (see GNOME). On Mac I don't know.\r\n\r\nWhat about keeping the minimize to tray feature only on Windows?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1MzIwMzgxNg==",
                    "publishedAt": "2017-12-20T22:40:26Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11859#issuecomment-353203816"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "> On Mac I don't know.\r\n\r\nIt's already disabled on MacOSX, along with the other window options:\r\n```c++\r\n#ifdef Q_OS_MAC\r\n    /* remove Window tab on Mac */\r\n    ui->tabWidget->removeTab(ui->tabWidget->indexOf(ui->tabWindow));\r\n#endif\r\n```\r\n\r\n> What about keeping the minimize to tray feature only on Windows?\r\n\r\nSounds good to me - but I'm not sure whether any Linux users use it, I don't at least...\r\nMaybe we could hide it for a release first, see if anyone even notices?\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1MzMyNDU0MQ==",
                    "publishedAt": "2017-12-21T11:09:21Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11859#issuecomment-353324541"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "Can reproduce the issue on Windows 8.1.\r\nTested this PR and it works,... however there is a tiny visual glich when minimising to tray (it show the main window for a couple of ms maximised after minimising), which is not really problematic.\r\n\r\nOSX does not do minimise to tray... \r\nneeds Linux testing.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1MzY2ODA2Mg==",
                    "publishedAt": "2017-12-22T20:15:50Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11859#issuecomment-353668062"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/8015558?v=4",
                        "login": "vajdaz"
                    },
                    "body": "I have made an additional change that hides the tray icon for non-Windows systems, disables the \"Hide tray icon\" and \"Minimize to tray\" options on the Settings' Winwow tab and sets the according settings in the OptionsModel (removing them from the configuration file).\r\n\r\nOn Windows, evertything works as before. On other systems, no tray icon is visible, and no tray icon settings are available. The \"Minimize on close\" option still exists on all OSes.\r\n\r\nShould I create a new PR, or should I just add those changes to this one?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1Mzc4NzYxOA==",
                    "publishedAt": "2017-12-24T14:35:14Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11859#issuecomment-353787618"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "Probably best to do so as a new PR, as the change is not directly pertinent to this one.\n\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1NDExMDQ2OQ==",
                    "publishedAt": "2017-12-27T12:58:48Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11859#issuecomment-354110469"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "Needs squash and linux testing.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MDIxNzgxMg==",
                    "publishedAt": "2018-04-10T19:22:08Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11859#issuecomment-380217812"
                }
            ],
            "totalCount": 11
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "7856bb412df9de69c3451f0a85223247f77c0181"
                    }
                }
            ],
            "totalCount": 2
        },
        "createdAt": "2017-12-10T00:31:16Z",
        "deletions": 0,
        "id": "MDExOlB1bGxSZXF1ZXN0MTU3NDExMTg5",
        "labels": {
            "nodes": [
                {
                    "color": "02d7e1",
                    "id": "MDU6TGFiZWwxMzU5NDY=",
                    "name": "GUI"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "number": 11859,
        "state": "OPEN",
        "title": "Qt: Fixing restore from system tray behaviour of main window",
        "updatedAt": "2018-04-10T19:22:08Z"
    },
    {
        "additions": 31,
        "author": {
            "avatarUrl": "https://avatars2.githubusercontent.com/u/7133040?v=4",
            "login": "ryanofsky",
            "url": "https://github.com/ryanofsky"
        },
        "body": "Instead of adding CDBEnv objects permanently to the g_dbenvs map, use reference counted shared pointers and remove map entries when the last CDBEnv reference goes out of scope.\r\n\r\nThis change was requested by @TheBlueMatt and makes code that sets up mock databases cleaner. The mock database environment will now go out of scope and be reset on destruction so there is no need to call CDBEnv::Reset() during wallet construction to clear out prior state.\r\n\r\nThis change does affect bitcoin behavior slightly. On startup, instead of same wallet environments staying open throughout VerifyWallets() and OpenWallets() calls, VerifyWallets() will open and close an environment once for each wallet, and OpenWallets() will create its own environment(s) later.\r\n",
        "closedAt": null,
        "comments": {
            "nodes": [],
            "totalCount": 0
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "e4a5ea35fb151f669144ebb856e4716ae212e569"
                    }
                }
            ],
            "totalCount": 1
        },
        "createdAt": "2017-12-15T19:18:49Z",
        "deletions": 30,
        "id": "MDExOlB1bGxSZXF1ZXN0MTU4Njc0Mzgx",
        "labels": {
            "nodes": [
                {
                    "color": "08a781",
                    "id": "MDU6TGFiZWwxNDk0MjQ=",
                    "name": "Wallet"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "number": 11911,
        "state": "OPEN",
        "title": "Free CDBEnv instances when not in use",
        "updatedAt": "2018-04-10T10:20:41Z"
    },
    {
        "additions": 84,
        "author": {
            "avatarUrl": "https://avatars0.githubusercontent.com/u/649246?v=4",
            "login": "TheBlueMatt",
            "url": "https://github.com/TheBlueMatt"
        },
        "body": "Built on #11281 and one commit from #11824, this removes almost all cs_main holds in ReadBlockFromDisk calls in net_processing/RPC/REST. Only real worry here is if something gets pruned out from under us during reading, so some previously-asserts in net_processing are now LogPrints.",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "Concept ACK. Good to have less contention on the cs_main lock, it seems a good idea to release it during I/O.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1MjE2MDA0Nw==",
                    "publishedAt": "2017-12-16T04:28:47Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11913#issuecomment-352160047"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "Needs rebase on rebased #11281 \r\nConcept ACK",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1NjY5ODQ2NQ==",
                    "publishedAt": "2018-01-10T18:47:41Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11913#issuecomment-356698465"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/649246?v=4",
                        "login": "TheBlueMatt"
                    },
                    "body": "Awaiting re-rebase of #11281. Will probably just wait for that to get merged.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1NzAxMDE2Nw==",
                    "publishedAt": "2018-01-11T18:00:56Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11913#issuecomment-357010167"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/649246?v=4",
                        "login": "TheBlueMatt"
                    },
                    "body": "@jimpo are you aware of any modern systems that have an issue reading from the middle of a file while it is being appended to? That sounds like it should be considered a critical kernel bug if anything, no?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1NzA3MTI0Nw==",
                    "publishedAt": "2018-01-11T21:45:29Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11913#issuecomment-357071247"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/881253?v=4",
                        "login": "jimpo"
                    },
                    "body": "I say that mostly because of the pruning race.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1NzA3NjQ1NA==",
                    "publishedAt": "2018-01-11T22:05:10Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11913#issuecomment-357076454"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/649246?v=4",
                        "login": "TheBlueMatt"
                    },
                    "body": "Pruning should be atomic still, no? Either we opened the file, then any unlink operations on the underlying file will result in us being able to finish reading, or we didn't open the file, so we can return false. I'm skeptical it can ever result in *corrupt* data, or am I missing some way Windows operates? It's definitely worth auditing that ReadBlockFromDisk returning false is handled properly everywhere!",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1NzA3ODQ4OA==",
                    "publishedAt": "2018-01-11T22:13:04Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11913#issuecomment-357078488"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
                        "login": "promag"
                    },
                    "body": "Needs rebase.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2MjgxNzg5Ng==",
                    "publishedAt": "2018-02-03T14:55:18Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11913#issuecomment-362817896"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/649246?v=4",
                        "login": "TheBlueMatt"
                    },
                    "body": "Rebased.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NjY2MjEzOQ==",
                    "publishedAt": "2018-03-27T20:22:36Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11913#issuecomment-376662139"
                }
            ],
            "totalCount": 8
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "7f538c1ec1db19cd51a795120ede26dcafb25f0b"
                    }
                }
            ],
            "totalCount": 3
        },
        "createdAt": "2017-12-15T21:03:57Z",
        "deletions": 75,
        "id": "MDExOlB1bGxSZXF1ZXN0MTU4NjkzMzUy",
        "labels": {
            "nodes": [
                {
                    "color": "000000",
                    "id": "MDU6TGFiZWwyMTk4OTA1NTU=",
                    "name": "Block storage"
                },
                {
                    "color": "E6F6D6",
                    "id": "MDU6TGFiZWwxMzU5NjE=",
                    "name": "Refactoring"
                }
            ],
            "totalCount": 2
        },
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "number": 11913,
        "state": "OPEN",
        "title": "Avoid cs_main during ReadBlockFromDisk Calls",
        "updatedAt": "2018-04-03T22:09:50Z"
    },
    {
        "additions": 10,
        "author": {
            "avatarUrl": "https://avatars0.githubusercontent.com/u/10647624?v=4",
            "login": "valentinewallace",
            "url": "https://github.com/valentinewallace"
        },
        "body": "Fixes: #11788\r\nShows correct value according to command line override or value in bitcoin.conf.",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "I don't think this is correct. The command line option should override the GUI setting with respect to the value used, but it should not set/change the GUI setting. Command line arguments shouldn't stick, which I think is what this does?\r\n\r\n(reason is, for example: to be able to run with `-dbcache=10000` temporarily, then quit, then run without `-dbcache` and go back to the normal setting)",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1MjE2ODE3OA==",
                    "publishedAt": "2017-12-16T07:58:11Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11915#issuecomment-352168178"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/10647624?v=4",
                        "login": "valentinewallace"
                    },
                    "body": "@laanwj Sorry I'm not sure I understand. When I run the GUI with this code, if I run with `-dbcache=10000` it will display 10000 in the options menu. If I then quit and run without the flag, I see the either number in `bitcoin.conf` or the default in the options menu. \r\n\r\nAre you saying when you run without the flag a second time it still displays the last flag value used? ",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1MjI5Mzg3NQ==",
                    "publishedAt": "2017-12-17T23:15:49Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11915#issuecomment-352293875"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "Yes. This:\r\n```\r\nsettings.setValue(\"nDatabaseCache\", (qint64)gArgs.GetArg(\"-dbcache\", nDefaultDbCache));\r\n```\r\nWrites the value from the command line / bitcoin.conf to the QSettings object persistently. That's not how it's supposed to work.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1Mjc0NTg4Mw==",
                    "publishedAt": "2017-12-19T13:17:25Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11915#issuecomment-352745883"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "To fix #11788, I would propose to show the \"underlaying\" dbcache value (set via bitcoin.conf or `-dbcache=<value>`) in the GUI settings pannel...\r\n\r\nbut only, if the value has not been overwritten by the QT settings (` (!settings.contains(\"nDatabaseCache\")`).\r\n\r\nAlso, only write the GUI set database cache to QSettings when...\r\n* Either `nDatabaseCache` is set\r\n* Or the new value is not equal to the underlaying `-dbcache` value.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1Mjg1MTYxNg==",
                    "publishedAt": "2017-12-19T18:52:00Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11915#issuecomment-352851616"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/10647624?v=4",
                        "login": "valentinewallace"
                    },
                    "body": "@jonasschnelli \r\n\r\n> but only, if the value has not been overwritten by the QT settings ((!settings.contains(\"nDatabaseCache\")).\r\n\r\nCurrently, due to `init` in optionsmodel, QSettings will always contain `nDatabaseCache`, it'll just contain the default if the user doesn't give it a different value through the GUI. However, this could be altered so it doesn't get set in `settings` unless the user sets it. \r\n\r\nIntuitively, my takeaway from your comment is that the GUI settings panel should display: \r\n- QSettings value if set by the user\r\n- else flag value if set \r\n- else bitcoin.conf if set \r\n- else default value\r\n\r\nMy one reservation is that it makes more sense to me for the GUI to display the *currently effective* settings no matter what (a la the second comment in [this thread](https://github.com/bitcoin/bitcoin/issues/1903)). If we're going with showing the effective settings, I changed my code and I'll update the PR, otherwise will keep chugging along :) ",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1MzIyOTM0Ng==",
                    "publishedAt": "2017-12-21T01:14:20Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11915#issuecomment-353229346"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "Oh. Your right...\r\nCurrent code:\r\n```\r\nif (!settings.contains(\"nDatabaseCache\"))\r\n        settings.setValue(\"nDatabaseCache\", (qint64)nDefaultDbCache);\r\n```\r\nThis seems suboptimal. After executing this, you have no way to find out if the user has set a value or if we just have copied over the default from `nDefaultDbCache`.\r\n\r\nI think it should only write a value to `nDatabaseCache` if it was set by the user and if it was different as the default.\r\nAlso, if `nDatabaseCache` is set, there could be a different color indicating that the value has been \"overwritten\".\r\n\r\nBut I agree, it should always show the current active database cache size.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1MzUzNzI4Mg==",
                    "publishedAt": "2017-12-22T07:14:03Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11915#issuecomment-353537282"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/10647624?v=4",
                        "login": "valentinewallace"
                    },
                    "body": "That line you mentioned^ was there before I touched the file so I put it back in the spirit of making as few changes as possible to solve the problem (maybe I should've done the commits differently?), but I agree it does seem suboptimal. \r\n\r\n> I think it should only write a value to `nDatabaseCache` if it was set by the user and if it was different as the default.\r\n\r\nMight it make sense to write a value even if the user sets it to the default value? Otherwise the bitcoin.conf value will override it even if the value the user wants in QSettings happens to be the default. \r\n\r\nRe: only writing a value to `nDatabaseCache` if user-set-- one tradeoff is that it makes the code for `init`ing the DatabaseCache value in QSettings different from how all the other QSettings values are initialized which is currently very uniform, adding a bit of complexity.   \r\n\r\nHowever, I'll look into making that change and the color-coding tmrw :) ",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1MzY4NTU5Ng==",
                    "publishedAt": "2017-12-22T22:39:39Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11915#issuecomment-353685596"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/10647624?v=4",
                        "login": "valentinewallace"
                    },
                    "body": "Okay, now we only write to QSettings if the user sets a non-default value! ",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1NDYzNjE0NA==",
                    "publishedAt": "2018-01-01T04:27:35Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11915#issuecomment-354636144"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "Needs rebase",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MDIxNTI2MQ==",
                    "publishedAt": "2018-04-10T19:12:34Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11915#issuecomment-380215261"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/10647624?v=4",
                        "login": "valentinewallace"
                    },
                    "body": "@jonasschnelli rebased! ",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MTc1Nzk5NQ==",
                    "publishedAt": "2018-04-16T21:36:52Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11915#issuecomment-381757995"
                }
            ],
            "totalCount": 10
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "2c71ba28e531b1acefc04d71443c3c551474768a"
                    }
                }
            ],
            "totalCount": 3
        },
        "createdAt": "2017-12-16T07:50:30Z",
        "deletions": 5,
        "id": "MDExOlB1bGxSZXF1ZXN0MTU4NzM1MTA5",
        "labels": {
            "nodes": [
                {
                    "color": "02d7e1",
                    "id": "MDU6TGFiZWwxMzU5NDY=",
                    "name": "GUI"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "number": 11915,
        "state": "OPEN",
        "title": "Qt: Reflect correct dbcache value in options panel.",
        "updatedAt": "2018-04-16T21:36:52Z"
    },
    {
        "additions": 104,
        "author": {
            "avatarUrl": "https://avatars2.githubusercontent.com/u/3824379?v=4",
            "login": "hsjoberg",
            "url": "https://github.com/hsjoberg"
        },
        "body": "Related PR #11403, needs to be merged first. I'll rebase this PR to be up to date with #11403, and rebase it to master once it has been merged.\r\n\r\nExposes the `addresstype` parameter through the GUI.\r\nCurrently directly changes the `g_address_type` global variable instead of requiring an application restart, I'm not sure if this is good practice, but could easily be changed if needed.\r\n\r\nRadio buttons seem to be acting a bit different compared to other GUI elements, so that's why the code is somewhat different than for other settings.",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/10217?v=4",
                        "login": "Sjors"
                    },
                    "body": "If you edit the pull request description, you can change the base branch from `bitcoin:master` to `sipa:201709_segwitwallet2`. That should make review here much easier. Although it might cause Github to move the whole pull request to @sipa's account, which would hurt visibility.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1MjQ3NTkxOA==",
                    "publishedAt": "2017-12-18T16:18:56Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11937#issuecomment-352475918"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/3824379?v=4",
                        "login": "hsjoberg"
                    },
                    "body": "@Sjors Yes, I tried to do that but it doesn't seem to be possible.\r\n\r\nBut opening a new PR to Wuille's repository should be possible yes.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1MjQ3OTQ0MQ==",
                    "publishedAt": "2017-12-18T16:30:42Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11937#issuecomment-352479441"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/10217?v=4",
                        "login": "Sjors"
                    },
                    "body": "No problem, it's easy to work around:\r\n<img width=\"712\" alt=\"schermafbeelding 2017-12-18 om 18 23 23\" src=\"https://user-images.githubusercontent.com/10217/34118906-94c3fa46-e420-11e7-8769-ef3d993ab5ec.png\">",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1MjQ5NTQwNw==",
                    "publishedAt": "2017-12-18T17:24:11Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11937#issuecomment-352495407"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/3824379?v=4",
                        "login": "hsjoberg"
                    },
                    "body": "> I suggest moving this the same level as Expert. Alternatively, use a dropdown.\r\n\r\n@Sjors @promag The Address type was actually intentionally in the Expert group, but I guess you are right, it makes more sense to have it separately. I will move it.\r\nWe need good tooltips and description though.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1MjU5MjU5OA==",
                    "publishedAt": "2017-12-18T23:37:29Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11937#issuecomment-352592598"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/3824379?v=4",
                        "login": "hsjoberg"
                    },
                    "body": "> Send tab has a bug: without a restart, the change address will not use newly selected address type (maybe explicitly set -changetype?).\r\n\r\n@Sjors Very true, I'll fix this.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1MjU5NzI1Mw==",
                    "publishedAt": "2017-12-19T00:03:43Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11937#issuecomment-352597253"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/3824379?v=4",
                        "login": "hsjoberg"
                    },
                    "body": "Rebased to fix some of the nits.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1MjU5ODUyMw==",
                    "publishedAt": "2017-12-19T00:11:19Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11937#issuecomment-352598523"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/1095675?v=4",
                        "login": "luke-jr"
                    },
                    "body": "GUI settings probably shouldn't influence RPC like this, and IMO it should really be exposed per-receive.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1MjYyNjIxMA==",
                    "publishedAt": "2017-12-19T03:04:07Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11937#issuecomment-352626210"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/10217?v=4",
                        "login": "Sjors"
                    },
                    "body": "@luke-jr wrote:\r\n>  IMO it should really be exposed per-receive\r\n\r\nDo you mean that it should _only_ be exposed per receive (i.e. don't add this setting)?\r\n\r\nThat would not be ideal, because the wallet wouldn't use bech32 for change in that case.\r\n\r\nIt reveals another problem with this setting: if the user changes the setting and then runs `bitcoind` instead of `bitcoin-qt`, they might expect the RPC to use bech32 as well, just like it would in the debug console inside of QT.\r\n\r\nOne counter argument to that is that we expect `bitcoind` users to know what they're doing and to aware of the fact that GUI settings, like \"spend unconfirmed change\",  don't apply to `bitcoind`. This would be worth pointing out in the release notes and such.\r\n\r\nThere's something to be said for being able to persist wallet settings, so that they apply to both `bitcoin-qt` and `bitcoind` if no flag overrides it.\r\n\r\nWriting the setting into bitcoin.conf is one way, but at least one potential problem with that, is that we can't change the default later, because all users have it set in stone in their bitcoin.conf file. That's probably an issue with the PR as well; once there is a setting, it's weird to just change it.\r\n\r\nSo I might agree with @luke-jr here in that this should be a per-receive thing, and not a setting. But then I would  suggest that we make the change address behavior more intelligent (not in this PR): its address type should match the destination. Also making it a per receive checkbox still makes it difficult to change, as the user might grow accustomed to the check-box being checked or unchecked.\r\n\r\nSo I'm not really sure. We should think about how to encourage users to try out bech32  without making it more difficult to make this the default in the future. ",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1MjY4MzQwNA==",
                    "publishedAt": "2017-12-19T09:12:39Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11937#issuecomment-352683404"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/3824379?v=4",
                        "login": "hsjoberg"
                    },
                    "body": "> Send tab has a bug: without a restart, the change address will not use newly selected address type (maybe explicitly set -changetype?).\r\n\r\n@Sjors Rebased and fixed this.\r\nRight now, changetype isn't changed if you explicitly set a type it in the configuration file, otherwise it defaults to whatever addresstype option is chosen.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1MjgzNTM2NA==",
                    "publishedAt": "2017-12-19T17:51:07Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11937#issuecomment-352835364"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/3824379?v=4",
                        "login": "hsjoberg"
                    },
                    "body": "> GUI settings probably shouldn't influence RPC like this\r\n\r\n@luke-jr Isn't this what GUI settings basically are used for? It seems like most of the settings in the GUI expose different configuration parameters.\r\n\r\n> IMO it should really be exposed per-receive.\r\n\r\nYes, I guess that makes sense too.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1MjgzNjg1Nw==",
                    "publishedAt": "2017-12-19T17:56:33Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11937#issuecomment-352836857"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/10217?v=4",
                        "login": "Sjors"
                    },
                    "body": "For a per receive address toggle, see #11991. These PR's are compatible (aside from the usual potential for merge conflicts), so we can use both, either or none.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1MzYxMzY4Ng==",
                    "publishedAt": "2017-12-22T14:57:20Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11937#issuecomment-353613686"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/45598?v=4",
                        "login": "jb55"
                    },
                    "body": "Hmm after testing this patch over #11991, I think I prefer this one. The toggle seems a bit weird. I don't see why I would ever want to selectively toggle a bech32 address, vs just eventually having it my default when I feel comfortable doing that.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1NDU3MjMwOQ==",
                    "publishedAt": "2017-12-30T22:33:12Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11937#issuecomment-354572309"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/548488?v=4",
                        "login": "sipa"
                    },
                    "body": "@jb55 The only reason for bech32 or not is whether the sender supports bech32 - which I think is something you may want to decide per address.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1NDU4NDE2Nw==",
                    "publishedAt": "2017-12-31T04:07:34Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11937#issuecomment-354584167"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/3824379?v=4",
                        "login": "hsjoberg"
                    },
                    "body": "Perhaps it makes sense to have both options available. Per receive level and as a global setting.\r\nIf not, I think @Sjors PR works very well.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1NDYwNDE0Ng==",
                    "publishedAt": "2017-12-31T13:35:33Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11937#issuecomment-354604146"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/21127776?v=4",
                        "login": "molxyz"
                    },
                    "body": "ACK!  I just compiled this PR for Windows. It is beautiful. Really love it.  Will test. \r\n\r\n![walletgui-by-coco](https://user-images.githubusercontent.com/21127776/34495853-0a1e972e-efc5-11e7-8cf4-10a1cec80a21.png)\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1NDg0NzM5MQ==",
                    "publishedAt": "2018-01-02T18:59:00Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11937#issuecomment-354847391"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "Nice!\r\nConcept ACK",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1NTIyMTczMg==",
                    "publishedAt": "2018-01-04T08:09:22Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11937#issuecomment-355221732"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "Needs rebase",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1Njg0ODA5Mw==",
                    "publishedAt": "2018-01-11T07:23:03Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11937#issuecomment-356848093"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/3824379?v=4",
                        "login": "hsjoberg"
                    },
                    "body": "@jonasschnelli I'll rebase to master as soon as I have time.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1Njg2MTk4Mw==",
                    "publishedAt": "2018-01-11T08:30:33Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11937#issuecomment-356861983"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/3824379?v=4",
                        "login": "hsjoberg"
                    },
                    "body": "Rebased to master.\r\nI intend to look at and fix the things that have been pointed out soon.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1NzA4MDg3Nw==",
                    "publishedAt": "2018-01-11T22:22:11Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11937#issuecomment-357080877"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/3824379?v=4",
                        "login": "hsjoberg"
                    },
                    "body": "Addressed some of the issues that have been pointed out as well as the compiling error, sorry for that.\r\n\r\nThere are still some outstanding things that need to be addressed, I'll look into them.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1ODE0MDI2OQ==",
                    "publishedAt": "2018-01-16T23:17:31Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11937#issuecomment-358140269"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "Tested a bit and seems to work.\r\nWhat worries me is that the code has not the right concurrency protections to have those globals change during run-time. There would be some potential races (rare and often only possible when mixing QT with RPC).\r\n\r\nWe can leave this for an follow up PR but I'd prefer the have the right instruments in place before adding runtime \"sets\" on those globals.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1ODIxNjg1NA==",
                    "publishedAt": "2018-01-17T07:09:13Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11937#issuecomment-358216854"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/858454?v=4",
                        "login": "gmaxwell"
                    },
                    "body": "I don't see any use case for the three way selection-- it just confronts users with more technical details (complete with gobbltygopy technical terms like P2SH and BIP173 ) which many won't know how to select among.\r\n\r\nThe purpose of having the legacy setting is maintaining wallet backwards compatibility.  .. but that's blown out the moment you select either P2SH or BC1 addresses.   What is the envisioned use-case for someone to set legacy but then sometimes pick P2SH?   Without understanding that I am a Concept NAK.\r\n\r\nBeing able to switch between BC1 and 3xxx addresses at receive time would _very_ useful, but that should be a per-receive selection set when the address is requested.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1ODI3NTY0Ng==",
                    "publishedAt": "2018-01-17T11:23:12Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11937#issuecomment-358275646"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "Removing 0.16 milestone since there are some concerns with this PR. Also, seems not to be a blocker for 0.16 (especially since #11991).",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1ODc2MTEwOQ==",
                    "publishedAt": "2018-01-18T19:48:58Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/11937#issuecomment-358761109"
                }
            ],
            "totalCount": 23
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "ff6abca252668e873974881666b00883de4de020"
                    }
                }
            ],
            "totalCount": 1
        },
        "createdAt": "2017-12-18T15:27:22Z",
        "deletions": 0,
        "id": "MDExOlB1bGxSZXF1ZXN0MTU4OTQyMjM5",
        "labels": {
            "nodes": [
                {
                    "color": "02d7e1",
                    "id": "MDU6TGFiZWwxMzU5NDY=",
                    "name": "GUI"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "number": 11937,
        "state": "OPEN",
        "title": "Qt: Setting for deciding address type (legacy, p2sh or bech32) ",
        "updatedAt": "2018-01-18T19:49:05Z"
    },
    {
        "additions": 9,
        "author": {
            "avatarUrl": "https://avatars3.githubusercontent.com/u/3782274?v=4",
            "login": "achow101",
            "url": "https://github.com/achow101"
        },
        "body": "This will show accurate and correct timestamps for transactions. Order in `listtransactions` is still maintained because that ordering is done separately from the timestamps.\r\n\r\nFixes #11703 and \r\nfixes #6662",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/7378120?v=4",
                        "login": "BashCo"
                    },
                    "body": "`fix-timesmart` appears to fix the issue I experienced with incorrect transaction timestamps when importing watch-only addresses. After compiling, I used `-rescan` as well as `-zapwallettxes`, neither of which resolved the issue (on my end). After making a new wallet and reimporting with `importmulti`, the timestamps are correct.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1NDAwNTQ2OA==",
                    "publishedAt": "2017-12-26T19:40:45Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12024#issuecomment-354005468"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/3211283?v=4",
                        "login": "MeshCollider"
                    },
                    "body": "Unsure on the reasoning behind this initial behaviour so can't ACK/NACK until Luke or someone else explains. But looks like src/wallet/test/wallet_tests.cpp needs updating too. \r\n\r\nNote I don't think GitHub doesn't understand \"Fixes X and Y\" when it does it's auto-close, you probably have to write Fixes X, fixes Y.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1NDAxODU0OQ==",
                    "publishedAt": "2017-12-26T22:12:04Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12024#issuecomment-354018549"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/858454?v=4",
                        "login": "gmaxwell"
                    },
                    "body": "@luke-jr ",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1NTkzNTk0Mw==",
                    "publishedAt": "2018-01-08T10:56:24Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12024#issuecomment-355935943"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/1095675?v=4",
                        "login": "luke-jr"
                    },
                    "body": "The idea IIRC was simply to ensure timestamps move forward at least in ordinary circumstances.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2ODU3ODU1NA==",
                    "publishedAt": "2018-02-26T17:20:43Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12024#issuecomment-368578554"
                }
            ],
            "totalCount": 4
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "56d9ffab7d3a30e756d757cbadd8e53eea0c9ddc"
                    }
                }
            ],
            "totalCount": 1
        },
        "createdAt": "2017-12-26T01:43:31Z",
        "deletions": 44,
        "id": "MDExOlB1bGxSZXF1ZXN0MTYwMDc0MDY3",
        "labels": {
            "nodes": [
                {
                    "color": "08a781",
                    "id": "MDU6TGFiZWwxNDk0MjQ=",
                    "name": "Wallet"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "CONFLICTING",
        "mergedAt": null,
        "number": 12024,
        "state": "OPEN",
        "title": "Remove most recent transaction timestamp stuff from nTimeSmart",
        "updatedAt": "2018-02-26T18:51:23Z"
    },
    {
        "additions": 192,
        "author": {
            "avatarUrl": "https://avatars0.githubusercontent.com/u/591860?v=4",
            "login": "lionello",
            "url": "https://github.com/lionello"
        },
        "body": "This PR implements basic Cross-Origin Resource Sharing (CORS) support to the RPC server, as per the spec at https://www.w3.org/TR/cors/#resource-requests . The spec has been quoted verbatim in the source code for easier validation and maintenance of the code.\r\n\r\n* added support for OPTIONS HTTP method\r\n* interpret CORS request headers for pre-flight requests\r\n* set CORS response headers\r\n* two test cases: standard CORS request, and pre-flight request\r\n\r\nIn practice this PR allows the REST interface to be used directly from a browser. \r\n\r\nAll the existing restrictions to the REST interface still apply: IP subnet, port, username, password. For this reason this PR doesn't explicitly check the request's `Origin` with a whitelist.",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/649246?v=4",
                        "login": "TheBlueMatt"
                    },
                    "body": "Hmm, I mean in general its probably a terrible idea to be calling bitcoind's RPC from a browser directly...I would probably be happy to see this if we force the setting of an -alloworigin=$ORIGIN option (which implies IP whitelist as well) to force users to use it at least somewhat securely.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1NTA1OTk5OA==",
                    "publishedAt": "2018-01-03T16:41:05Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12040#issuecomment-355059998"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/591860?v=4",
                        "login": "lionello"
                    },
                    "body": "There's plenty of good reason to enable RPC from browser, but I agree we have to make it opt-in. Will add that to the patch.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1NTQ0NzE4NA==",
                    "publishedAt": "2018-01-05T01:19:46Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12040#issuecomment-355447184"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/858454?v=4",
                        "login": "gmaxwell"
                    },
                    "body": "Things like this are not sufficient to make access from browsers safe, because we must also be safe even if the user has old browsers with CORS bugs on their system. (e.g. IIRC old IE was trivially bypassable).\r\n\r\nAs a result there would have to be a lot of developer resources available to implement, review, and characterize the full set of protections needed to prevent that from being a gaping vulnerability-- and a commensurate really good application for it.\r\n  ",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1NTg3MjA4Mw==",
                    "publishedAt": "2018-01-08T02:01:47Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12040#issuecomment-355872083"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/591860?v=4",
                        "login": "lionello"
                    },
                    "body": "@gmaxwell Done: I've added the flag `-rpccorsdomain` to match the existing options (and similar option in Ethereum's Geth.)\r\n\r\nI've also added tests for that flag.\r\n\r\nAs for your question: we have an internal website that we use to sign transactions with hardware wallets. We use RPC to send out the signed transactions. We'd prefer to do this without a service (which needs audits, security updates, etc..)",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2MzMwNzMwNg==",
                    "publishedAt": "2018-02-06T04:27:39Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12040#issuecomment-363307306"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/10217?v=4",
                        "login": "Sjors"
                    },
                    "body": "Needs rebase. I'm generally a fan of correct CORS / CSP headers, will review later.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NzAyNjg4Ng==",
                    "publishedAt": "2018-02-20T16:06:43Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12040#issuecomment-367026886"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/10217?v=4",
                        "login": "Sjors"
                    },
                    "body": "POST works (assuming `bitcoin:bitcoin` credentials, running on port 8085):\r\n```\r\n\r\ncurl -X POST \\\r\n  http://localhost:8085/ \\\r\n  -H 'Authorization: Basic Yml0Y29pbjpiaXRjb2lu=' \\\r\n  -H 'Cache-Control: no-cache' \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n\t\"method\": \"getblockchaininfo\"\r\n}'\r\n```\r\n\r\nBut OPTIONS doesn't:\r\n\r\n```\r\ncurl -X OPTIONS \\\r\n  http://localhost:8085/ \\\r\n  -H 'Authorization: Basic Yml0Y29pbjpiaXRjb2lu=' \\\r\n  -H 'Cache-Control: no-cache' \\\r\n  -H 'Content-Type: application/json'\r\nJSONRPC server handles only POST requests\r\n```\r\n\r\nThat was using [Postman](https://www.getpostman.com) which doesn't set the origin header, but I get the same error from a browser for the OPTIONS request.\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NzEwOTQ3NQ==",
                    "publishedAt": "2018-02-20T20:32:15Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12040#issuecomment-367109475"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/591860?v=4",
                        "login": "lionello"
                    },
                    "body": "@Sjors Just using `OPTIONS` doesn't make it a valid CORS pre-flight request. Try this:\r\n\r\n```\r\ncurl -X OPTIONS \\\r\n    http://localhost:8085/ \\\r\n    -H 'Authorization: Basic Yml0Y29pbjpiaXRjb2lu=' \\\r\n    -H 'Cache-Control: no-cache' \\\r\n    -H 'Content-Type: application/json' \\\r\n    -H 'Origin: null' \\\r\n    -H 'access-control-request-method: POST' \\\r\n    -d '{\r\n\t\"method\": \"getblockchaininfo\"\r\n  }'\r\n```",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NzE2OTI5OQ==",
                    "publishedAt": "2018-02-21T00:22:19Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12040#issuecomment-367169299"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/10217?v=4",
                        "login": "Sjors"
                    },
                    "body": "Same error unfortunately.\r\n\r\nIncorrect OPTIONS request should probably throw a unique error regardless.\r\n\r\nI tried your full example, but since the JSON payload itself shouldn't be needed in an OPTIONS request, I think it can be shortened a bit:\r\n```\r\ncurl -X OPTIONS \\\r\n    http://localhost:8085/ \\\r\n    -H 'Authorization: Basic Yml0Y29pbjpiaXRjb2lu=' \\\r\n    -H 'Cache-Control: no-cache' \\\r\n    -H 'Content-Type: application/json' \\\r\n    -H 'Origin: null' \\\r\n    -H 'access-control-request-method: POST'\r\n```",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NzYyMTY4MA==",
                    "publishedAt": "2018-02-22T09:35:59Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12040#issuecomment-367621680"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/591860?v=4",
                        "login": "lionello"
                    },
                    "body": "@Sjors Did you provide the `-rpccorsdomain` command line arg?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NzYzODAyMQ==",
                    "publishedAt": "2018-02-22T10:30:32Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12040#issuecomment-367638021"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/10217?v=4",
                        "login": "Sjors"
                    },
                    "body": "Yes, I used `-rpccorsdomain=http://localhost:8080`. However I used the wrong port in my `Origin` header.\r\n\r\nBetter error messages would be very useful here, either through the browser or `rpc` log entries.\r\n\r\nThis worked:\r\n\r\n```\r\ncurl -v -X OPTIONS \\\r\n    http://localhost:8085/ \\\r\n    -H 'Origin: http://localhost:8080' \\\r\n    -H 'Access-Control-Request-Method: POST' \\\r\n    -H 'Access-Control-Request-Headers: authorization,content-type'\r\n```\r\n\r\nI added `-v` so you can see the returned headers. I also removed the Authorization header from the OPTIONS request in this example, because browsers won't send credentials during such a request.\r\n\r\nIf anyone else wants to test a POST request:\r\n\r\n```\r\ncurl 'http://localhost:8085/' \\\r\n   -H 'Authorization: Basic Yml0Y29pbjpiaXRjb2lu=' \\\r\n   -H 'Origin: http://localhost:8080' \\\r\n   -H 'Content-Type: application/json' \\\r\n   -H 'Accept: application/json' \\\r\n   --data-binary '{\"method\":\"getblockchaininfo\"}'\r\n```\r\n\r\nNice to have: support for multiple `-rpccorsdomain` arguments.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2Nzc2MzgzMQ==",
                    "publishedAt": "2018-02-22T17:50:33Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12040#issuecomment-367763831"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/10217?v=4",
                        "login": "Sjors"
                    },
                    "body": "Any malicious website would need to trick the user into handing out RPC authentication details, as well as setting `server=1` in `bitcoin.conf`.\r\n\r\nFor HTTP Basic Auth they need to trick the user into configuring `rpcuser=` and `rpcpassword=` or run the credentials script.  Otherwise they need to make the user find and upload the cookie.\r\n\r\nI think it would be particularly useful for data visualization. E.g. a mempool chart is much easier to build using client-side javascript that just fetches the data through ajax.\r\n\r\nAlthough potentially very useful for hardware wallets, facilitating wallet access from a browser potentially opens a can of worms. For a non-wallet node I don't see much downside.\r\n\r\nPerhaps a compromise (for now) could be to only allow this flag when built with `--disable-wallet` or `--seatbelts=0`. A less strict rule could work too, but is likely more difficult to implement and maintain.\r\n\r\n@gmaxwell regarding old browsers, I think we should work under the assumption that CORS is broken and any request can be made. Afaik enabling CORS is just a way to allow modern browsers to use the RPC (they _require_ the `OPTIONS` request to return the right data), not to prevent older browsers from doing that.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2Nzc3MDQ5Ng==",
                    "publishedAt": "2018-02-22T18:12:37Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12040#issuecomment-367770496"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/591860?v=4",
                        "login": "lionello"
                    },
                    "body": "@Sjors The default is still CORS disabled. Would you still want it to only be available with `--disable-wallet` or `--seatbelts=0`?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MjMxMzYwOQ==",
                    "publishedAt": "2018-04-18T08:50:18Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12040#issuecomment-382313609"
                }
            ],
            "totalCount": 12
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "25f1000c79f0bbae6434bfe24d7309b5b695add9"
                    }
                }
            ],
            "totalCount": 2
        },
        "createdAt": "2017-12-28T14:51:19Z",
        "deletions": 10,
        "id": "MDExOlB1bGxSZXF1ZXN0MTYwMzk5MTM4",
        "labels": {
            "nodes": [
                {
                    "color": "0052cc",
                    "id": "MDU6TGFiZWw5ODI3OTE3Nw==",
                    "name": "RPC/REST/ZMQ"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "number": 12040,
        "state": "OPEN",
        "title": "fix: add support for CORS headers and pre-flight request",
        "updatedAt": "2018-04-18T08:50:18Z"
    },
    {
        "additions": 1,
        "author": {
            "avatarUrl": "https://avatars0.githubusercontent.com/u/3678296?v=4",
            "login": "puchu",
            "url": "https://github.com/puchu"
        },
        "body": "the current release is missing the debian contrib folder, add it",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/1095675?v=4",
                        "login": "luke-jr"
                    },
                    "body": "utACK",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1NDUwOTQ2Nw==",
                    "publishedAt": "2017-12-29T22:49:08Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12051#issuecomment-354509467"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/863730?v=4",
                        "login": "fanquake"
                    },
                    "body": "[This](https://github.com/bitcoin/bitcoin/pull/8568#discussion_r80602589) is the reasoning as to why it was left out when DIST_CONTRIB was added (everything in debian/ is GPL2). Looks like [that is still the case](https://github.com/bitcoin/bitcoin/blob/master/contrib/debian/copyright#L13)? Maybe now it's time to revisit writing our own desktop and protocol files?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1NDUzODQxNQ==",
                    "publishedAt": "2017-12-30T10:17:29Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12051#issuecomment-354538415"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/1095675?v=4",
                        "login": "luke-jr"
                    },
                    "body": "Everything in git should also be in the dist tarball...",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1NDUzODUxNw==",
                    "publishedAt": "2017-12-30T10:20:13Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12051#issuecomment-354538517"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/7133040?v=4",
                        "login": "ryanofsky"
                    },
                    "body": "Last word on this was\r\n\r\n>\\<wumpus\\> BlueMatt: luke-jr: making the tarball include all git files was discussed a few files already, I think everyone is okay with that in principle, it's just hard to unify with the 'make dist' makefile-isms\r\n\r\nfrom https://botbot.me/freenode/bitcoin-core-dev/msg/95342326/ which I'm not sure implies ack or nack.\r\n\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1NjA4MjMwNw==",
                    "publishedAt": "2018-01-08T20:12:45Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12051#issuecomment-356082307"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "> from https://botbot.me/freenode/bitcoin-core-dev/msg/95342326/ which I'm not sure implies ack or nack.\r\n\r\nWell I'd prefer a solution that makes the tarball contain everything, instead of doing it in dozen separate PRs.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MDU1NTU1Mw==",
                    "publishedAt": "2018-03-05T20:34:24Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12051#issuecomment-370555553"
                }
            ],
            "totalCount": 5
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "036c32dea1e9ea73a55e19788c46b45938819765"
                    }
                }
            ],
            "totalCount": 1
        },
        "createdAt": "2017-12-29T21:08:26Z",
        "deletions": 0,
        "id": "MDExOlB1bGxSZXF1ZXN0MTYwNTYwOTU3",
        "labels": {
            "nodes": [
                {
                    "color": "5319e7",
                    "id": "MDU6TGFiZWw2MTg4OTQxNg==",
                    "name": "Build system"
                },
                {
                    "color": "770000",
                    "id": "MDU6TGFiZWwyMzQ4Nzg=",
                    "name": "Linux/Unix"
                }
            ],
            "totalCount": 2
        },
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "number": 12051,
        "state": "OPEN",
        "title": "add missing debian contrib files to tarball",
        "updatedAt": "2018-03-24T04:26:26Z"
    },
    {
        "additions": 79,
        "author": {
            "avatarUrl": "https://avatars3.githubusercontent.com/u/250224?v=4",
            "login": "kallewoof",
            "url": "https://github.com/kallewoof"
        },
        "body": "",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
                        "login": "promag"
                    },
                    "body": "Missing test.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1NTUwOTY2Ng==",
                    "publishedAt": "2018-01-05T09:26:55Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12096#issuecomment-355509666"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/548488?v=4",
                        "login": "sipa"
                    },
                    "body": "This decreases the output? In some cases that may desirable, but in general I think that's very unexpected (I would think it would add a new input instead).",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1NTU0NDI0Mw==",
                    "publishedAt": "2018-01-05T12:30:56Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12096#issuecomment-355544243"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/250224?v=4",
                        "login": "kallewoof"
                    },
                    "body": "If you don't have a change address chance are fairly high that you're simply moving coins (e.g. between wallets). Especially if you only have one utxo in, you may not want to associate other utxo's with it for privacy reasons.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1NTU0NTg1MA==",
                    "publishedAt": "2018-01-05T12:40:50Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12096#issuecomment-355545850"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/93665?v=4",
                        "login": "wtogami"
                    },
                    "body": "> _\"single output transactions are special in that the exact amount doesn't usually matter (the user is emptying a wallet or using coin control to move UTXOs).\"_\r\n\r\nI would argue that this is not stated strongly enough. If they previously paid to a single output then it is *almost always* true that they do not care about the particular amount. This is especially true as the previous amount was subject to an arbitrary, variable fee.\r\n\r\nValid use cases where this behavior is necessary, where you really don't want to require adding more inputs in order to bumpfee:\r\n* Emptying a wallet\r\n* Emptying particular UTXO's\r\n\r\nI would further suggest if the receiver was expecting a particular amount then you would expect there to be a change output.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1NTU0NzI2MA==",
                    "publishedAt": "2018-01-05T12:49:03Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12096#issuecomment-355547260"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/548488?v=4",
                        "login": "sipa"
                    },
                    "body": "@kallewoof You're right that in *most* cases right now that you don't care about the amount if there is only one output, but there is certainly no guarantee. The coin selection algorithm even explicitly tries to find a solution without change first - it's just pretty terrible at its job current (#10637 will make it succeed much more often).\r\n  ",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1NTU0NzczNQ==",
                    "publishedAt": "2018-01-05T12:51:35Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12096#issuecomment-355547735"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/7133040?v=4",
                        "login": "ryanofsky"
                    },
                    "body": "I think this could be generalized and also be made safer by adding an `reduce_output` option to bumpfee (could also call it something like `output_number` or `txout`). This way you'd be able to bump single output transactions by specifying `reduce_output: 0`, but there'd be no risk of someone accidentally decreasing the amount they are trying to send by bumping the fee in other cases.\r\n  ",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1NTU0ODMyNw==",
                    "publishedAt": "2018-01-05T12:55:10Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12096#issuecomment-355548327"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/250224?v=4",
                        "login": "kallewoof"
                    },
                    "body": "I don't think it makes sense to arbitrarily add inputs to bumpfee. I don't even know if RBF allows it (since you're suggesting it, I guess it does -- I thought I tried and failed).\r\n\r\nMaybe a `bump_from_output` flag in `options` that did this behavior.\r\n \r\nEdit: @ryanofsky That looks good to me.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1NTU0ODM1NQ==",
                    "publishedAt": "2018-01-05T12:55:19Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12096#issuecomment-355548355"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/548488?v=4",
                        "login": "sipa"
                    },
                    "body": "I don't see why RBF wouldn't allow it, as long as all transactions you're replacing have been marked as replaceable.\r\n\r\nI like the idea of explicitly marking an output that can be reduced.\r\n\r\nOver time (especially after #10637), I think we'll inevitably need a way to bump transactions that don't have change. Depending on feerates and your wallet's UTXO set distribution, a large fraction of transactions may be created without change.\r\n  ",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1NTU0OTI2NA==",
                    "publishedAt": "2018-01-05T13:00:25Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12096#issuecomment-355549264"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/5767891?v=4",
                        "login": "instagibbs"
                    },
                    "body": "does the wallet track which outputs had subtractFeeFromOutput? In that case further reduction seems completely fine as well.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1NTU2MzQyNQ==",
                    "publishedAt": "2018-01-05T14:11:07Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12096#issuecomment-355563425"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
                        "login": "promag"
                    },
                    "body": "Agree that there are cases where the output(s) can't be reduced. In the cases it can be reduced, should it be re-funded?\r\n  ",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1NTU3ODQ5MQ==",
                    "publishedAt": "2018-01-05T15:14:23Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12096#issuecomment-355578491"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/7463573?v=4",
                        "login": "sdaftuar"
                    },
                    "body": "> I don't think it makes sense to arbitrarily add inputs to bumpfee. I don't even know if RBF allows it (since you're suggesting it, I guess it does -- I thought I tried and failed).\r\n\r\n@kallewoof Currently our relay policy (and BIP 125) require that if you add a new input, it must be already confirmed -- perhaps you tested with an unconfirmed input?\r\n\r\n(The idea behind that requirement was to ensure the new transaction was more likely to be mined than the ones it was replacing; now that we use ancestor feerate mining, we could perhaps relax this requirement and compare ancestor feerates of everything instead to ensure the new transaction has a higher mining score.)",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1NTU4NTQ1Ng==",
                    "publishedAt": "2018-01-05T15:41:30Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12096#issuecomment-355585456"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1008458?v=4",
                        "login": "jtimon"
                    },
                    "body": "concept ack after the current coin selection stop trying 1 output (I assume  #10637 solves that?).\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1NjA4ODkxMA==",
                    "publishedAt": "2018-01-08T20:38:19Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12096#issuecomment-356088910"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/858454?v=4",
                        "login": "gmaxwell"
                    },
                    "body": "NAK.  The only time it would be acceptable to reduce the output is if the transaction was created as subtract fee from output.  Bumping should add additional inputs as required.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1NjA4OTkzMQ==",
                    "publishedAt": "2018-01-08T20:42:22Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12096#issuecomment-356089931"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
                        "login": "promag"
                    },
                    "body": "@gmaxwell even with an option to allow the subtract, default to false (since there is no subtract from output record)?\r\n  ",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1NjA5MjExNA==",
                    "publishedAt": "2018-01-08T20:50:04Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12096#issuecomment-356092114"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/858454?v=4",
                        "login": "gmaxwell"
                    },
                    "body": "if it were behind a bunch of warnings, ... but even though if substract from wasn't initially selected should only be a last resort if it can't bump otherwise.  The wallet shouldn't quietly direct the user into behavior that might cause them to get criminally prosecuted.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1NjA5NDc2Mw==",
                    "publishedAt": "2018-01-08T21:00:21Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12096#issuecomment-356094763"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/858454?v=4",
                        "login": "gmaxwell"
                    },
                    "body": "@wtogami  The wallet has explicit information about transactions created where the user requested subtracting fees from amounts. Using that information would be  fine but you cannot use the lack of a change output to detect this,  when 2^inputs * fees_saved_from_excluding_an_output  is large relative to the amount being paid an exact match frequently exists. And the PR pieter linked to will usually find it.\r\n  ",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1NjE3MjczMQ==",
                    "publishedAt": "2018-01-09T03:53:42Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12096#issuecomment-356172731"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/250224?v=4",
                        "login": "kallewoof"
                    },
                    "body": "Summary:\r\n* Do not implicitly assume a single-output-no-change transaction can be altered due to better coin selection in the future.\r\n* Require the user to select the output if the user does not want additional inputs to be added to cover increased fees.\r\n* (Allow adding additional inputs to cover increased fees -- separate PR)\r\n\r\nFor this PR, that translates to:\r\n* Fail if no output is explicitly chosen (pre-merge behavior)\r\n* Reduce single output to cover fees if user has explicitly picked it\r\n* Allow user to arbitrarily pick the output that is reduced for existing multi-output transactions (i.e. not restricted to change output).\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1NjE3Mzk4MQ==",
                    "publishedAt": "2018-01-09T04:04:03Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12096#issuecomment-356173981"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/250224?v=4",
                        "login": "kallewoof"
                    },
                    "body": "- [x] Self-review: RPC command help needs update to reflect change\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1NjI5NTgyNw==",
                    "publishedAt": "2018-01-09T14:17:08Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12096#issuecomment-356295827"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/1095675?v=4",
                        "login": "luke-jr"
                    },
                    "body": "> The only time it would be acceptable to reduce the output is if the transaction was created as subtract fee from output.\r\n\r\n@gmaxwell What if you want to subtract-fee-from-output after the fact?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2ODU4MzMzMA==",
                    "publishedAt": "2018-02-26T17:35:14Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12096#issuecomment-368583330"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/250224?v=4",
                        "login": "kallewoof"
                    },
                    "body": "@luke-jr Now throws on negative `reduce_output` in RPC code.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2ODc0NjEwMg==",
                    "publishedAt": "2018-02-27T04:46:03Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12096#issuecomment-368746102"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/10217?v=4",
                        "login": "Sjors"
                    },
                    "body": "#12565 takes advantage of this in QT.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2OTIzMDI3Mw==",
                    "publishedAt": "2018-02-28T12:53:22Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12096#issuecomment-369230273"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/250224?v=4",
                        "login": "kallewoof"
                    },
                    "body": "@Sjors Thanks! I fixed the `wallet_bumpfee` error in 765162c.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2OTQ2MTczNw==",
                    "publishedAt": "2018-03-01T03:19:45Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12096#issuecomment-369461737"
                }
            ],
            "totalCount": 22
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "51826d4de0ea100f703675cae15bfaeef48b8e2a"
                    }
                }
            ],
            "totalCount": 2
        },
        "createdAt": "2018-01-05T09:10:48Z",
        "deletions": 20,
        "id": "MDExOlB1bGxSZXF1ZXN0MTYxMjk3OTg4",
        "labels": {
            "nodes": [
                {
                    "color": "08a781",
                    "id": "MDU6TGFiZWwxNDk0MjQ=",
                    "name": "Wallet"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "number": 12096,
        "state": "OPEN",
        "title": "[rpc] [wallet] Allow specifying the output index when using bumpfee",
        "updatedAt": "2018-04-24T06:05:44Z"
    },
    {
        "additions": 3148,
        "author": {
            "avatarUrl": "https://avatars3.githubusercontent.com/u/250224?v=4",
            "login": "kallewoof",
            "url": "https://github.com/kallewoof"
        },
        "body": "Implements BIPs [98](https://github.com/bitcoin/bips/blob/master/bip-0098.mediawiki) and [116](https://github.com/bitcoin/bips/blob/master/bip-0116.mediawiki) as policy rules for transaction relay, causing transactions which use NOP4 for things other than Merkle branch verification to be treated as non-standard. This is not the soft-fork activation logic needed to use MERKLEBRANCHVERIFY in production.\r\n\r\nMERKLEBRANCHVERIFY is a soft-fork upgradeable opcode that allows script writers to commit to a set of data elements and have one or more of these elements be provided at redemption without having to reveal the entire set. As these data elements can be used to encode policy, such as public keys or validation subscripts, the MERKLEBRANCHVERIFY opcode can be used to overcome size limitation of existing bitcoin script, and combines with tail-call semantics to provide a minimal implementation of the Merkelized Abstract Syntax Tree concept.",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/649246?v=4",
                        "login": "TheBlueMatt"
                    },
                    "body": "Are there demos of scripts based on this/BIP117 anywhere? eg has someone sat down and rewritten the Lightning scripts or TumbleBit scripts to use this stuff to compare the cost/privacy tradeoffs? What about example usage for hiding multisig?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1NjQyMzYwMA==",
                    "publishedAt": "2018-01-09T21:42:59Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12131#issuecomment-356423600"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/69154?v=4",
                        "login": "maaku"
                    },
                    "body": "There are some examples inside the BIPs:\r\n\r\nhttps://github.com/bitcoin/bips/blob/master/bip-0116.mediawiki\r\nhttps://github.com/bitcoin/bips/blob/master/bip-0117.mediawiki\r\n\r\nIt is specifically anticipated that ALL instances of MAST would be of the following:\r\n\r\n> redeemScript: `[TOALTSTACK]*N OVER HASH256 <root> 1 MERKLEBRANCHVERIFY 2DROP 2DROP`\r\n> witness: `<policyScript> <proof> <arg1> ... <argN>`",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1NjQzMjA0OA==",
                    "publishedAt": "2018-01-09T22:15:39Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12131#issuecomment-356432048"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/649246?v=4",
                        "login": "TheBlueMatt"
                    },
                    "body": "Hmm, I was hoping for somewhat larger scripts. Specifically, do you have a list of scripts which are cheaper to do using a merkle-hidden tail call than normally outside of large-multisig examples?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1NjQ0MDAzNg==",
                    "publishedAt": "2018-01-09T22:49:25Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12131#issuecomment-356440036"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/69154?v=4",
                        "login": "maaku"
                    },
                    "body": "Basically every script where you are eliding, at minimum, a hash or pubkey push. Sorry for the obtuseness, but it seems like that describes just about anything and it didn't seem appropriate to overload the BIP with examples of everything beyond what was necessary to illustrate the concept. I would certainly like a lightning developer to show how those scripts could be reformulated to use tail-call semantics, but I'm not up to speed on the latest lightning standards.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1NjQ0MjkxNQ==",
                    "publishedAt": "2018-01-09T23:02:21Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12131#issuecomment-356442915"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/649246?v=4",
                        "login": "TheBlueMatt"
                    },
                    "body": "Hmm, well my primary motivation for asking was to get a better sense of the cost of using MBV+tail-call in practice. Comparing the cost of LN + TumbleBit scripts seems like an obvious route to figure that out, as it seems to me the only obvious user of something like this would be small-n large-m multisig, which seems somewhat of a waste.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1NjQ0MzQ5OA==",
                    "publishedAt": "2018-01-09T23:05:07Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12131#issuecomment-356443498"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/69154?v=4",
                        "login": "maaku"
                    },
                    "body": "It seems rather to me that the obvious user of something like this is 'everybody' for the fungibility improvement.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1NjQ0Mzc4Mg==",
                    "publishedAt": "2018-01-09T23:06:31Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12131#issuecomment-356443782"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/649246?v=4",
                        "login": "TheBlueMatt"
                    },
                    "body": "Hence my concern - ideally \"everyone\" would use something like this for fungibility reasons, but I'm highly skeptical anyone will pay a material difference in fees to do so. Obviously I'm not suggesting we go through all the fun of SegWit again to adjust the discount to make a MAST extra branch free, but getting a good idea of exactly what that cost is for common protocols would be useful.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1NjQ0NDI1NQ==",
                    "publishedAt": "2018-01-09T23:08:51Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12131#issuecomment-356444255"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/69154?v=4",
                        "login": "maaku"
                    },
                    "body": "I think your intuition for the cost savings is off. Right now even a 2-of-3 multisig ends up costing about the same as a MAST of 2-of-2 vs having an extra (unused) pubkey. Likewise the 2of2 -or- CSV 1of1. And when we switch to Schnorr signatures basically any multisig becomes cheaper in the MAST construct because they all reduce to a MAST of 1of1's.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1NjQ0NTIzNg==",
                    "publishedAt": "2018-01-09T23:13:44Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12131#issuecomment-356445236"
                },
                {
                    "author": null,
                    "body": "Concept ACK",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1NjQ2OTQwMw==",
                    "publishedAt": "2018-01-10T01:26:34Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12131#issuecomment-356469403"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/453214?v=4",
                        "login": "chiguireitor"
                    },
                    "body": "Conceptual question here: am i reading the code right or is the branch size limited to 9997 branches? Imho, having arbitrarily long branching trees could allow for really interesting stuff",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1NjkyMDA4OA==",
                    "publishedAt": "2018-01-11T12:28:13Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12131#issuecomment-356920088"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/250224?v=4",
                        "login": "kallewoof"
                    },
                    "body": "@chiguireitor I believe the 9997 cap is basically representing the maximum depth in the tree. I think that shrinks if you want to pick multiple entries, though. I could be wrong. @maaku?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1Njk0MDg0MA==",
                    "publishedAt": "2018-01-11T13:56:41Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12131#issuecomment-356940840"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/69154?v=4",
                        "login": "maaku"
                    },
                    "body": "I had to grep the diff to figure out what @chiguireitor was referring to. I assume it is the comment about MAX_STACK_SIZE limiting the number of elements that can be proven from a Merkle tree at once. That number is actually an error, as it should be 997, not 9997 as MAX_STACK_SIZE is a constant limit of 1,000 elements and 3 of those elements are the count parameter, the root hash, and the proof. It's worth noting that a separate limit, the 520 byte push limitation, prevents pushing a proof for a fully expanded Merkle tree of more than about 1380 elements anyway, so even if the MAX_STACK_SIZE limit were avoided you'd hit another one soon enough.\r\n\r\nHowever I think there is some confusion on @chiguireitor's part. Why would you want to prove 1,000+ items from a tree at once? This is the maximum number of elements that you can prove at one time, NOT the maximum number of elements that can be in a tree, for which there is no practical limit. The 520 byte push limitation prevents you from proving a hash more than 16 levels deep in a tree, but MERKLEBRANCHVERIFY calls can be chained allowing for verification of extremely deep trees, much larger than could be practically constructed. A single chained validation allows for trees consisting of billions of elements, that would take hours to construct on a reasonably powerful CPU.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1Njk1MTE4NA==",
                    "publishedAt": "2018-01-11T14:33:43Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12131#issuecomment-356951184"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/453214?v=4",
                        "login": "chiguireitor"
                    },
                    "body": "Yeah, my bad. Makes sense now, it's just limiting the \"next\" level of the tree, so in fact, it's not limiting the overall tree structure at all, excellent.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1Njk2MDk3Mg==",
                    "publishedAt": "2018-01-11T15:05:05Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12131#issuecomment-356960972"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/11314444?v=4",
                        "login": "martin-lizner"
                    },
                    "body": "Code will go to 0.16 and softfork signalling will start 0.16.1?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1Nzg5MTk1OA==",
                    "publishedAt": "2018-01-16T08:49:47Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12131#issuecomment-357891958"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/250224?v=4",
                        "login": "kallewoof"
                    },
                    "body": "@martin-lizner There is no consensus yet on whether this code will be merged or not. It's still being debated (e.g. on the mailing list and such).",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1Nzg5NDgxNw==",
                    "publishedAt": "2018-01-16T09:01:09Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12131#issuecomment-357894817"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/250224?v=4",
                        "login": "kallewoof"
                    },
                    "body": "@jl2012 Thanks for feedback! I inlined `GetRight`/`SetRight` in d99522a and added check/error for invalid result in `GetHash` in 8191d01. Not sure if `SCRIPT_ERR_BAD_DECODE_ARG` is suitable but it looked close enough.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NTU0Nzg0MA==",
                    "publishedAt": "2018-03-23T05:17:15Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12131#issuecomment-375547840"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/250224?v=4",
                        "login": "kallewoof"
                    },
                    "body": "The failure is due to a recent rewrite causing `READWRITE(REF(CFlatData(m_skip)));` to fail in `merkle.h`. \r\n\r\nDiscussing right now whether it makes a difference to switch to varint over compactsize explicitly as is done right now (I argue it does not make a difference, as the size is only a small fraction of the content).",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MzgyMDE4MA==",
                    "publishedAt": "2018-04-24T06:38:23Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12131#issuecomment-383820180"
                }
            ],
            "totalCount": 17
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "e5e56bc8b41b1ef7812bb44de51b2a3276a428e3"
                    }
                }
            ],
            "totalCount": 8
        },
        "createdAt": "2018-01-09T09:17:05Z",
        "deletions": 17,
        "id": "MDExOlB1bGxSZXF1ZXN0MTYxODE5MTcy",
        "labels": {
            "nodes": [
                {
                    "color": "009800",
                    "id": "MDU6TGFiZWwxOTIyMDIwMDA=",
                    "name": "Consensus"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "number": 12131,
        "state": "OPEN",
        "title": "[BIP-98 + BIP-116] MERKLEBRANCHVERIFY",
        "updatedAt": "2018-04-24T06:38:23Z"
    },
    {
        "additions": 527,
        "author": {
            "avatarUrl": "https://avatars3.githubusercontent.com/u/250224?v=4",
            "login": "kallewoof",
            "url": "https://github.com/kallewoof"
        },
        "body": "Implements BIP [117](https://github.com/bitcoin/bips/blob/master/bip-0117.mediawiki) as policy rules for transaction relay, causing transactions which violate the new tail-call semantics to be treated as non-standard. This is not the soft-fork activation logic needed to use tail-call scripts in production.\r\n\r\nTail-call semantics is a sort of user-programmable P2SH which combines well with BIP 116's MERKLEBRANCHVERIFY to allows for a script to commit to a practically unbounded number of code pathways, and then reveal the actual code pathway used at spend time, achieving a form of generalized MAST.\r\n",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/69154?v=4",
                        "login": "maaku"
                    },
                    "body": "Travis build error looks like a transient issue.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1NzE1NzY3NA==",
                    "publishedAt": "2018-01-12T06:52:38Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12132#issuecomment-357157674"
                }
            ],
            "totalCount": 1
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "9a40e8e42a216172cee3ee6e4fca5fe4a9f746d8"
                    }
                }
            ],
            "totalCount": 3
        },
        "createdAt": "2018-01-09T09:18:31Z",
        "deletions": 6,
        "id": "MDExOlB1bGxSZXF1ZXN0MTYxODE5NDU5",
        "labels": {
            "nodes": [
                {
                    "color": "009800",
                    "id": "MDU6TGFiZWwxOTIyMDIwMDA=",
                    "name": "Consensus"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "number": 12132,
        "state": "OPEN",
        "title": "[BIP-117] Tail call semantics",
        "updatedAt": "2018-04-24T08:42:48Z"
    },
    {
        "additions": 146,
        "author": {
            "avatarUrl": "https://avatars1.githubusercontent.com/u/10217?v=4",
            "login": "Sjors",
            "url": "https://github.com/Sjors"
        },
        "body": "Some scenarios where it might be useful to run tests against earlier releases:\r\n\r\n* creating a wallet with #11403's segwit implementation, copying it to an older node and making sure the user didn't lose any funds (although this PR doesn't support `v0.15.1`)\r\n* future consensus changes\r\n* P2P changes (e.g. to make sure we don't accidentally ban old nodes)\r\n\r\nUsage:\r\n\r\n```sh\r\ncontrib/devtools/backwards_compatibility.py -f v0.16.0\r\ntest/functional/backwards_compatibility.py\r\n```\r\n\r\nHaving to build these old versions on developer machines is unacceptably slow and brittle, so tests that involve older versions don't run by default. Travis can cache earlier releases, so it should be able to run these tests with little performance impact.\r\n\r\nI only tried version v0.16.0 ~v0.15.1 and v0.14.2, which involved a small patch due to #11389~. I don't know how hard it would be to keep supporting earlier releases with similar patches in the future.",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/7133040?v=4",
                        "login": "ryanofsky"
                    },
                    "body": "Can you explain why exactly the patching is needed in this case? It would definitely seem better to test against unpatched previous releases if possible.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1NjQwNDI1Mg==",
                    "publishedAt": "2018-01-09T20:27:34Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12134#issuecomment-356404252"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/10217?v=4",
                        "login": "Sjors"
                    },
                    "body": "@ryanofsky the regtest parameters were changed to activate SegWit at the genesis block, which causes nodes after #11389 to reject blocks created by v0.15.1 and older nodes (and vice versa). Maybe there's a less drastic way to change the regtest consensus params for these older releases?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1NjQwNTcyNQ==",
                    "publishedAt": "2018-01-09T20:33:40Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12134#issuecomment-356405725"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/7133040?v=4",
                        "login": "ryanofsky"
                    },
                    "body": "Not sure, but is passing `-vbparams=segwit:0:0` an option?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1NjQwNzk3OA==",
                    "publishedAt": "2018-01-09T20:42:53Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12134#issuecomment-356407978"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/7463573?v=4",
                        "login": "sdaftuar"
                    },
                    "body": "@sjors I've spent some time looking into how feasible it would be to write functional tests that would run against older versions of our software, which I think would be great if we could pull off -- for instance, I thought it would be nice in something like the `p2p-segwit.py` test for us to use an actual old binary in the `upgrade_after_activation` test, rather than mocking it with a current binary by setting the bip9 parameters to 0.\r\n\r\nHowever, in my experience this proved to be impractical.  It seems like we periodically make changes to the RPC test framework infrastructure itself, in such ways that cause problems with backward compatibility.  Here are a few examples I have run into, so you get a flavor of some of the issues:\r\n\r\n- `sync_blocks()` was rewritten to use an rpc call, `waitforblockheight`, that was introduced in 0.14.  So no test that uses sync_blocks can run on a pre-0.14 version of the code (which is basically every test we have!).\r\n\r\n- Even if you solve that problem somehow (eg by rewriting `sync_blocks`, or avoiding it somehow), we also introduced in 0.14 support for RPC named arguments.  This also breaks compatibility with pre-0.14 software (so without a patch, I believe no RPC calls work at all).\r\n\r\n- I might have the details of this one slightly wrong, but I think we made a change at some point to support parsing numbers as strings, versus floats, and then I think our JSON library started to take advantage of that as well?  Not sure if that's exactly right, but I remember having an issue running newer tests against older releases when using RPC calls involving numbers, and needing a patch for that.\r\n\r\nSo my takeaway from this exercise was that if we want to support running modern tests against older binaries, we need to change the way we do things, so that we (a) have a better split between the python test code, and the python utilities/RPC handlers/etc that allow us to talk to a node, and (b) come up with a way to use older python utility code when talking to older nodes.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1NjQxNjYwNw==",
                    "publishedAt": "2018-01-09T21:16:39Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12134#issuecomment-356416607"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/7133040?v=4",
                        "login": "ryanofsky"
                    },
                    "body": "> So no test that uses sync_blocks can run on a pre-0.14 version of the code (which is basically every test we have!).\r\n\r\nI don't understand why this would matter. I think the goal here is just to be able to write a small test that brings up a specific version of bitcoind (0.15) and tests a few things with it, not to be able to run large swathes of the test framework against arbitrary bitcoin releases. It doesn't seem it would require a lot of code to support this, and if the tests are run on travis it doesn't seem like whatever code is added could get broken easily.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1NjQyMjQyMw==",
                    "publishedAt": "2018-01-09T21:38:22Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12134#issuecomment-356422423"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/7463573?v=4",
                        "login": "sdaftuar"
                    },
                    "body": "@ryanofsky Perhaps I phrased that sentence poorly -- my point wasn't that we'd want to run all the tests against older code (I think that would be absurd), just that we take it for granted that we can call `sync_blocks` in all sorts of places, so to not have such a basic utility at your disposal can be surprising and hard to work around.\r\n\r\nAnother way to look at it: imagine you wanted to run a test against 0.15 now, so you write one and you can even use `sync_blocks` and everything works fine (I agree that this shouldn't be too hard, as 0.15 was very recent).  Based on our history, I imagine there will come a time when someone wants to do something which will break the test, because some utility code -- like `sync_blocks`, or the way we make RPC calls, or something else -- will change, and the test will be busted, and we won't have a good way to fix it.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1NjQyNTM3NA==",
                    "publishedAt": "2018-01-09T21:49:36Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12134#issuecomment-356425374"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1063656?v=4",
                        "login": "jnewbery"
                    },
                    "body": "This seems possible for small, limited tests which don't use the full range of test framework capabilities (for example, if we just want to test downgrading to v0.15 to test segwit wallets). As Suhas has pointed out, there are lots of reasons why this is difficult in the general case, but I think we can work around them for a targeted test cases:\r\n\r\n> sync_blocks() was rewritten to use an rpc call, waitforblockheight, that was introduced in 0.14. \r\n\r\nNot relevant if we only want to test as far back as v0.15, but we can add a `waitforblockheight` method to `TestNode` for versions that don't have a `waitforblockheight` RPC method.\r\n\r\n> Even if you solve that problem somehow (eg by rewriting sync_blocks, or avoiding it somehow), we also introduced in 0.14 support for RPC named arguments.\r\n\r\nWe could be careful to not use named arguments in tests where we want to use earlier versions. Or we could add a shim to `TestNode` to convert named -> positional.\r\n\r\n> I think we made a change at some point to support parsing numbers as strings, versus floats, and then I think our JSON library started to take advantage of that as well?\r\n\r\nAs above.\r\n\r\n> I imagine there will come a time when someone wants to do something which will break the test, because some utility code -- like sync_blocks, or the way we make RPC calls, or something else -- will change, and the test will be busted, and we won't have a good way to fix it.\r\n\r\nI expect we'll only want to have tests covering the last one or two releases, so I don't see this as a huge problem.\r\n\r\n> I think the goal here is ... not to be able to run large swathes of the test framework against arbitrary bitcoin releases.\r\n\r\nYes - I agree that would be almost impossible.\r\n\r\n@Sjors - if the goal is only to test official releases, why not download the binaries directly from https://bitcoincore.org/bin/ rather than building them locally?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1NjQyODIyNg==",
                    "publishedAt": "2018-01-09T22:00:53Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12134#issuecomment-356428226"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/7463573?v=4",
                        "login": "sdaftuar"
                    },
                    "body": "This is an aside if the goal here is just to make 0.15 work, but:\r\n\r\n> We could be careful to not use named arguments in tests where we want to use earlier versions. Or we could add a shim to TestNode to convert named -> positional.\r\n\r\nThe change to support named args actually affected RPC invocations that don't use named args -- I think we send an empty dictionary instead of an empty list in `authproxy.py` which an old server wouldn't accept.\r\n\r\nAnyway I don't mean to be overly pessimistic if you all think we can make something work!  I'm definitely in favor of the overall goal, I just haven't come across a simple solution that I thought was robust.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1NjQzMDUyNg==",
                    "publishedAt": "2018-01-09T22:09:39Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12134#issuecomment-356430526"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/7463573?v=4",
                        "login": "sdaftuar"
                    },
                    "body": "> I expect we'll only want to have tests covering the last one or two releases, so I don't see this as a huge problem.\r\n\r\nI don't follow this point though -- in something like the `p2p-segwit.py` test, you'd have to do the upgrade after activation test on an 0.13.0 node or earlier.  So if we'd written the test in such a way as to use an old binary, we'd have to just decommission that test at some point...?  Obviously replacing with a later binary (that has the feature you want to test upgrade from) would mean you can't do that test anymore.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1NjQzMTI4MQ==",
                    "publishedAt": "2018-01-09T22:12:46Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12134#issuecomment-356431281"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1063656?v=4",
                        "login": "jnewbery"
                    },
                    "body": "> in something like the p2p-segwit.py test, you'd have to do the upgrade after activation test on an 0.13.0 node or earlier. So if we'd written the test in such a way as to use an old binary, we'd have to just decommission that test at some point...?\r\n\r\nYes - my expectation is that we'd decommission that test at some point. I don't think that testing versions older than a couple of releases is something that we should do as part of travis or developer local testing (although there's nothing stopping anyone from having a custom test rig to do that sort of thing).",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1NjQzMjI4MQ==",
                    "publishedAt": "2018-01-09T22:16:35Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12134#issuecomment-356432281"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/10217?v=4",
                        "login": "Sjors"
                    },
                    "body": "@jnewbery compiling from source seems more flexible than fetching binaries, especially if we need to patch things. There might also be configure flags that are optimal for the functional tests. It can be expanded to fetch code from other repositories (on your own test rig). \r\n\r\nDownloading binaries would be faster, but it also involves figuring out which OS you're on and checking the checksum, so it's not necessarily easier to write a script for. That said, the one-off build is painfully slow on Travis atm, so I might add an option to just fetch a binary.\r\n\r\n@ryanofsky `-vbparams=segwit:0:0 -vbparams=csv:0:0` did the trick, as long as I generate blocks on the modern node (which is fine). So no patch needed for `v0.15.1` at the moment.\r\n\r\n@sdaftuar I ran into the issue you mentioned for versions before v0.14 and added a comment to the test file to warn about that.\r\n\r\nI changed the demonstration test to simply check if old nodes sync blocks from the new node. I'll try some SegWit wallet related scenarios in a different PR.\r\n\r\nI added a commit that makes one Travis instance compile `v0.14.2` and `v0.15.1` (cached) and then run the relevant functional test. It works, but I'm a bit confused as to what the right place is on Travis to put these older builds. ",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1NjY1NTQ3Ng==",
                    "publishedAt": "2018-01-10T16:26:36Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12134#issuecomment-356655476"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "Concept ACK, haven't looked at the code.\r\n\r\nI think not testing with older versions is the biggest lack in our test env.\r\nThings like the UTXO migration (now done) or testing how \"older\" nodes act on the (new) p2p network.\r\nAlso, up- and downgrading wallets is not covered by our tests and could be with something like this.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1NjcwMjc5Nw==",
                    "publishedAt": "2018-01-10T19:01:59Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12134#issuecomment-356702797"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/3211283?v=4",
                        "login": "MeshCollider"
                    },
                    "body": "Concept ACK, cross version testing will be a very nice addition to the testing suite IMO",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1Njg3MzEyNw==",
                    "publishedAt": "2018-01-11T09:15:40Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12134#issuecomment-356873127"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/10217?v=4",
                        "login": "Sjors"
                    },
                    "body": "@MarcoFalke wrote:\r\n> we need to run those tests in the pull request travis run\r\n\r\nThey ran for this PR, so I assume they'll run on every PR once this is merged?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1Njg5MzQ4MQ==",
                    "publishedAt": "2018-01-11T10:32:06Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12134#issuecomment-356893481"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/10217?v=4",
                        "login": "Sjors"
                    },
                    "body": "I found this quite useful in testing the recently merged SegWit wallet changes in WIP #12152.\r\n\r\nI didn't need more changes to the build script and Travis configuration for those tests. On other hand in order to swap wallets in a test I'll need more involved changes to the test framework as well as dynamic loading of wallets. So I'll keep the tests in this PR trivial.\r\n\r\nWith the above caveats, noting this is probably only maintainable for the most recent one or two releases, I think it's ready for review.\r\n\r\nOnce everyone is happy with the code, someone with Travis privileges should trigger a new build with a completely wiped cache (I can also add and drop a commit that uses the `-r` flag to force a rebuild, but that's less rigorous).",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1NzMyNzgxNg==",
                    "publishedAt": "2018-01-12T19:12:01Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12134#issuecomment-357327816"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/10217?v=4",
                        "login": "Sjors"
                    },
                    "body": "Rebased. I added support for `v0.16.0` and removed `v0.15.1` and `v0.14.2` since they're no longer compatible with the test framework (can perhaps be patched later).",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MDQ5NDkzNA==",
                    "publishedAt": "2018-04-11T15:30:15Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12134#issuecomment-380494934"
                }
            ],
            "totalCount": 16
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "dfd5c57cae4200c69efc1378b71c6e67e5fda79d"
                    }
                }
            ],
            "totalCount": 3
        },
        "createdAt": "2018-01-09T19:35:58Z",
        "deletions": 2,
        "id": "MDExOlB1bGxSZXF1ZXN0MTYxOTU3NDkz",
        "labels": {
            "nodes": [
                {
                    "color": "d4c5f9",
                    "id": "MDU6TGFiZWw2Mjk2MzUxNg==",
                    "name": "Tests"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "number": 12134,
        "state": "OPEN",
        "title": "Build previous releases and run functional tests ",
        "updatedAt": "2018-04-11T15:35:17Z"
    },
    {
        "additions": 1800,
        "author": {
            "avatarUrl": "https://avatars3.githubusercontent.com/u/3782274?v=4",
            "login": "achow101",
            "url": "https://github.com/achow101"
        },
        "body": "[BIP 174](https://github.com/bitcoin/bips/blob/master/bip-0174.mediawiki) specifies a binary transaction format which contains the information necessary for a signer to produce signatures for the transaction and holds the signatures for an input while the input does not have a complete set of signatures.\r\n\r\n***\r\n\r\nBIP 174 is fully implemented in this pull request. It contains a struct for the a PSBT, serialization and deserialization functions, and a PSBT specific versions of `ProduceSignature` (`SignPartialTransaction`), `SignStep`(`SignSigsOnly`) and `CombineSignatures`(FinalizePartialTransaction`).\r\n\r\nCurrently PSBT functionality is limited to 4 new RPC calls, `walletupdatepsbt`, `walletcreatepsbt`, `combinepsbt`, and `decodepsbt`.\r\n\r\n`walletupdatepsbt` updates a given PSBT with data from the wallet. For each input, it will attempt to add the proper UTXO, sign for the input, and finalize the input. It will also add any known redeem scripts, witness scripts, and public key derivation paths if they are known to the wallet.\r\n\r\n`walletcreatepsbt` takes a network serialized raw transaction as produced by the `*rawtransaction` commands and converts it to a PSBT. Inputs are filled using information known to the wallet.\r\n\r\n`combinepsbt` combines multiple PSBTs and finalizes them if possible.\r\n\r\n`decodepsbt` decodes a PSBT and into a human readable format in order to more easily examine them. It is analogous to `decoderawtransaction`.\r\n\r\n***\r\n\r\nAll of the test vectors currently in BIP 174 are also implemented.",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "Great work!\r\nGeneral concept ack, though the PR is large and maybe there is a way to make smaller steps towards BIP174 (reduce of risks).",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1NjUyNTk3NQ==",
                    "publishedAt": "2018-01-10T07:51:19Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12136#issuecomment-356525975"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/3782274?v=4",
                        "login": "achow101"
                    },
                    "body": "I'm not sure what's causing the travis failure.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1Njc0MjE5OA==",
                    "publishedAt": "2018-01-10T21:27:28Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12136#issuecomment-356742198"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/858454?v=4",
                        "login": "gmaxwell"
                    },
                    "body": "Concept ACK!",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1NzA1MzgwOA==",
                    "publishedAt": "2018-01-11T20:37:42Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12136#issuecomment-357053808"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/413395?v=4",
                        "login": "dcousens"
                    },
                    "body": "Concept ACK",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1ODEyODg0Ng==",
                    "publishedAt": "2018-01-16T22:27:06Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12136#issuecomment-358128846"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "Neat! Concept ACK.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NTYxMzM4MQ==",
                    "publishedAt": "2018-02-14T13:53:29Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12136#issuecomment-365613381"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/3782274?v=4",
                        "login": "achow101"
                    },
                    "body": "Rebased and squashed fixup commits.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NzE1MzIyMA==",
                    "publishedAt": "2018-02-20T23:08:21Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12136#issuecomment-367153220"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/5767891?v=4",
                        "login": "instagibbs"
                    },
                    "body": "light tACK\r\n\r\nI have rebased the externalhd branch onto this PR, with minor modifications, for ledger support, combined with @achow101 's HWI repo for signing. https://github.com/instagibbs/bitcoin/tree/external_psbt",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MDc5Mzg1NA==",
                    "publishedAt": "2018-03-06T14:13:38Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12136#issuecomment-370793854"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/5767891?v=4",
                        "login": "instagibbs"
                    },
                    "body": "needs rebase",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3OTAwNjg5OA==",
                    "publishedAt": "2018-04-05T17:05:17Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12136#issuecomment-379006898"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/3782274?v=4",
                        "login": "achow101"
                    },
                    "body": "Rebased",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3OTA2ODk3NQ==",
                    "publishedAt": "2018-04-05T20:38:00Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12136#issuecomment-379068975"
                }
            ],
            "totalCount": 9
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "6f16068d9e0c1d5b7ce9ba5f7e4f605ac0b94c33"
                    }
                }
            ],
            "totalCount": 13
        },
        "createdAt": "2018-01-10T04:08:39Z",
        "deletions": 3,
        "id": "MDExOlB1bGxSZXF1ZXN0MTYyMDMyNjIw",
        "labels": {
            "nodes": [
                {
                    "color": "009800",
                    "id": "MDU6TGFiZWwxOTIyMDIwMDA=",
                    "name": "Consensus"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "CONFLICTING",
        "mergedAt": null,
        "number": 12136,
        "state": "OPEN",
        "title": "Implement BIP 174 Partially Signed Bitcoin Transactions",
        "updatedAt": "2018-04-05T20:38:00Z"
    },
    {
        "additions": 417,
        "author": {
            "avatarUrl": "https://avatars0.githubusercontent.com/u/649246?v=4",
            "login": "TheBlueMatt",
            "url": "https://github.com/TheBlueMatt"
        },
        "body": "This adds a setBlockIndexHeaderCandidates which mimics setBlockIndexCandidates and is\r\nThe set of all leaf CBlockIndex entries with BLOCK_VALID_TREE (for itself and all ancestors) and\r\nas good as our current tip or better. Entries here are potential future candidates for insertion\r\ninto setBlockIndexCandidates, once we get all the required block data. Thus, entries here\r\nrepresent chains on which we should be actively downloading block data.\r\n\r\nNote that we define \"as good as our current tip or better\" slightly differently here than in\r\nsetBlockIndexCandidates - we include things which will have a higher nSequence (but have the\r\nsame chain work) here, but do not include such entries in setBlockIndexCandidates. This is\r\nbecause we prefer to also download towards chains which have the same total work as our current\r\nchain (as an optimization since a reorg is very possible in such cases).\r\n\r\nNote that, unlike setBlockIndexCandidates, we only store \"leaf\" entries here, as we are not as\r\naggressively prune-able (setBlockIndexCandidates are things which we can, and usually do, try to\r\nconnect immediately, and thus entries dont stick around for long). Thus, it may be the case that\r\nchainActive.Tip() is NOT in setBlockIndexHeaderCandidates.\r\n\r\nAdditionally, unlike setBlockIndexCandidates, we are happy to store entries which are not\r\nconnectable due to pruning here.\r\n\r\nThis is useful as it (finally) disconnects net_processing logic from the \"store on disk\" logic in validation.cpp. More importantly, it represents what you'd need from the consensus logic to implement a spv-first sync mode, as this provides a best-header which will follow invalidity - always pointing to the best-possible header even after block(s) are found to be invalid.",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "Great work!\r\nConcept ACK. Will review...",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1Njc2NTI1OQ==",
                    "publishedAt": "2018-01-10T22:55:21Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12138#issuecomment-356765259"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/649246?v=4",
                        "login": "TheBlueMatt"
                    },
                    "body": "Note that FindNextBlocksToDownload may want to grow a corresponding nMinimumChainWork check before downloading towards any headers which do not (yet) meet that requirement. Otherwise we'll have a (bandwidth-wasting, but otherwise harmless) infinite download loop on regtest nodes that manually-specify minimum chain work on the command line.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1Njc2NjA3Mw==",
                    "publishedAt": "2018-01-10T22:58:48Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12138#issuecomment-356766073"
                }
            ],
            "totalCount": 2
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "ed5b2770b019d66e4ce841a3d6b804e8d7d763df"
                    }
                }
            ],
            "totalCount": 6
        },
        "createdAt": "2018-01-10T22:48:02Z",
        "deletions": 198,
        "id": "MDExOlB1bGxSZXF1ZXN0MTYyMjUwNTYy",
        "labels": {
            "nodes": [
                {
                    "color": "006b75",
                    "id": "MDU6TGFiZWw5ODI5ODAwNw==",
                    "name": "P2P"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "CONFLICTING",
        "mergedAt": null,
        "number": 12138,
        "state": "OPEN",
        "title": "Track best-possible-headers",
        "updatedAt": "2018-04-16T01:24:00Z"
    },
    {
        "additions": 22,
        "author": {
            "avatarUrl": "https://avatars2.githubusercontent.com/u/1095675?v=4",
            "login": "luke-jr",
            "url": "https://github.com/luke-jr"
        },
        "body": "This optional feature (disabled by default) leaves Segwit wallet support mostly as-is, except:\r\n\r\n1. It disables automatic implied Segwit recognition for keys not explicitly generated as Segwit. This means each Segwit address generated needs a new backup, same as previous versions.\r\n2. Default address/change type is legacy.\r\n\r\n`OUTPUT_TYPE_DEFAULT` is changed to an actual `OutputType` value, in expectation of reuse by #12119 as well as enabling the possibility of having the implicit segwit flag be set per-wallet once we have runtime wallet loading.",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/649246?v=4",
                        "login": "TheBlueMatt"
                    },
                    "body": "I see little reason to do this. While we shouldn't make a habit of recognizing outputs to mutations of addresses we've given out, if someone sends you funds to a SegWit address, and you wish to refuse it, you're welcome to not honor the payment. Instead, we should be moving towards longer-term goals like splitting the HD chain across address types and recognizing payment only to addresses we've given out in a non-backup-breaking way.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1Njk5NzkzNA==",
                    "publishedAt": "2018-01-11T17:18:32Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12146#issuecomment-356997934"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/1095675?v=4",
                        "login": "luke-jr"
                    },
                    "body": "Without this, there is currently no way to even detect they were sent to a Segwit mutation of an address.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1NzAzNjUzNg==",
                    "publishedAt": "2018-01-11T19:33:27Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12146#issuecomment-357036536"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1063656?v=4",
                        "login": "jnewbery"
                    },
                    "body": "Much discussion of this PR here: https://botbot.me/freenode/bitcoin-core-dev/2018-01-11/?msg=95652211&page=5\r\n\r\nI'd support fixing the general case of address malleation. I don't think this is the correct approach, and don't think it should hold up v0.16, for the reasons enumerated in IRC. Concept NACK from me.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1NzA0NTIxNw==",
                    "publishedAt": "2018-01-11T20:03:23Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12146#issuecomment-357045217"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/1095675?v=4",
                        "login": "luke-jr"
                    },
                    "body": "Rebased (which simplified it quite a bit).",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NzcxNTk1Ng==",
                    "publishedAt": "2018-03-31T19:07:33Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12146#issuecomment-377715956"
                }
            ],
            "totalCount": 4
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "cc78a984177644bfed77246d69f85c9562d5abf6"
                    }
                }
            ],
            "totalCount": 1
        },
        "createdAt": "2018-01-11T10:48:49Z",
        "deletions": 11,
        "id": "MDExOlB1bGxSZXF1ZXN0MTYyMzQ5MTY0",
        "labels": {
            "nodes": [
                {
                    "color": "08a781",
                    "id": "MDU6TGFiZWwxNDk0MjQ=",
                    "name": "Wallet"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "CONFLICTING",
        "mergedAt": null,
        "number": 12146,
        "state": "OPEN",
        "title": "Wallet: Support disabling implicit Segwit operation",
        "updatedAt": "2018-03-31T19:07:33Z"
    },
    {
        "additions": 48,
        "author": {
            "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
            "login": "promag",
            "url": "https://github.com/promag"
        },
        "body": "Motivated by https://github.com/bitcoin/bitcoin/pull/11913#discussion_r157798157, this pull makes `blockToJSON` and `blockheaderToJSON` free of `cs_main` locks.\r\n\r\nLocking `cs_main` was required to access `chainActive` in order to check if the block was in the chain and to retrieve the next block index.\r\n\r\nWith the this approach, `CBlockIndex::GetAncestor()` is used in a way to check if the block belongs to the specified chain tip and, at the same time, get the next block index.",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
                        "login": "promag"
                    },
                    "body": "Best reviewed commit by commit",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1NzAxNTQzNA==",
                    "publishedAt": "2018-01-11T18:19:24Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12151#issuecomment-357015434"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
                        "login": "promag"
                    },
                    "body": "Fixed @TheBlueMatt and @jimpo comments, thanks.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1NzA4ODAxNQ==",
                    "publishedAt": "2018-01-11T22:52:44Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12151#issuecomment-357088015"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
                        "login": "promag"
                    },
                    "body": "Rebased mainly due to recent change from `push_back(Pair())` to `pushKV()`.\r\n\r\nAlso reworded to replace prefix `[rpc]` to `rpc:` as per @laanwj suggestion.  ",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2ODU1OTc1Mw==",
                    "publishedAt": "2018-02-26T16:25:37Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12151#issuecomment-368559753"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
                        "login": "MarcoFalke"
                    },
                    "body": "Needs rebase if still relevant",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NDA3NDcxOA==",
                    "publishedAt": "2018-03-19T01:13:33Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12151#issuecomment-374074718"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
                        "login": "promag"
                    },
                    "body": "Rebased.\r\n\r\n@MarcoFalke like @TheBlueMatt said above:\r\n\r\n> in the context of #11913 it makes sense to not lock cs_main and then unlock, then re-lock it there.\r\n\r\nI'd say at least let's wait for that.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NDIxODg4Mg==",
                    "publishedAt": "2018-03-19T13:53:05Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12151#issuecomment-374218882"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1063656?v=4",
                        "login": "jnewbery"
                    },
                    "body": "needs rebase",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3ODQxMjQ1Mw==",
                    "publishedAt": "2018-04-03T21:56:38Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12151#issuecomment-378412453"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
                        "login": "promag"
                    },
                    "body": "Rebased.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3ODQxNjQ4OA==",
                    "publishedAt": "2018-04-03T22:13:52Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12151#issuecomment-378416488"
                }
            ],
            "totalCount": 7
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "e20f745d9b279de9e43994505731658f0f3582fa"
                    }
                }
            ],
            "totalCount": 3
        },
        "createdAt": "2018-01-11T13:19:03Z",
        "deletions": 60,
        "id": "MDExOlB1bGxSZXF1ZXN0MTYyMzgwMzQy",
        "labels": {
            "nodes": [
                {
                    "color": "0052cc",
                    "id": "MDU6TGFiZWw5ODI3OTE3Nw==",
                    "name": "RPC/REST/ZMQ"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "number": 12151,
        "state": "OPEN",
        "title": "Remove cs_main lock from blockToJSON and blockheaderToJSON",
        "updatedAt": "2018-04-16T21:26:53Z"
    },
    {
        "additions": 316,
        "author": {
            "avatarUrl": "https://avatars1.githubusercontent.com/u/10217?v=4",
            "login": "Sjors",
            "url": "https://github.com/Sjors"
        },
        "body": "Builds on top of #12134.\r\n\r\nTests:\r\n- [x] v0.16 generated wallets don't work on older versions\r\n- [x] the five SegWit wallet scenario's (including bech32 address)  \r\n\r\nTest framework changes (or: things I'm doing wrong):\r\n- [ ] method to copy wallet\r\n- [ ] method to push and pop wallet backups\r\n- [ ] remember network topology between start and restart\r\n\r\nSuggestions for additional tests welcome. I'll make individual PR's later.",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/10217?v=4",
                        "login": "Sjors"
                    },
                    "body": "I need to rewrite these tests so they don't use the account feature. See also [IRC log](https://botbot.me/freenode/bitcoin-core-dev/2018-01-12/?msg=95679098&page=3).",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1NzI1MzU1Mg==",
                    "publishedAt": "2018-01-12T14:33:53Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12152#issuecomment-357253552"
                }
            ],
            "totalCount": 1
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "8af73179c3fe64eb1ac15ac180598cd7dc1e1c01"
                    }
                }
            ],
            "totalCount": 4
        },
        "createdAt": "2018-01-11T14:19:39Z",
        "deletions": 2,
        "id": "MDExOlB1bGxSZXF1ZXN0MTYyMzk0MzIw",
        "labels": {
            "nodes": [
                {
                    "color": "d4c5f9",
                    "id": "MDU6TGFiZWw2Mjk2MzUxNg==",
                    "name": "Tests"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "CONFLICTING",
        "mergedAt": null,
        "number": 12152,
        "state": "OPEN",
        "title": "[WIP] misc. backwards compatibility tests",
        "updatedAt": "2018-01-12T14:33:54Z"
    },
    {
        "additions": 57,
        "author": {
            "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
            "login": "promag",
            "url": "https://github.com/promag"
        },
        "body": "Based on #12151, this pull reduces the lock scope in `getblockheader` RPC.\r\n\r\nNote, review last commit only.",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1063656?v=4",
                        "login": "jnewbery"
                    },
                    "body": "needs rebase (but probably not worth doing until #12151 is merged)",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3ODQxMjUxOQ==",
                    "publishedAt": "2018-04-03T21:56:54Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12153#issuecomment-378412519"
                }
            ],
            "totalCount": 1
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "5e924f4d22a16b0c46d4c6cb19877892331d41fa"
                    }
                }
            ],
            "totalCount": 4
        },
        "createdAt": "2018-01-11T14:26:28Z",
        "deletions": 66,
        "id": "MDExOlB1bGxSZXF1ZXN0MTYyMzk1OTk2",
        "labels": {
            "nodes": [
                {
                    "color": "0052cc",
                    "id": "MDU6TGFiZWw5ODI3OTE3Nw==",
                    "name": "RPC/REST/ZMQ"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "CONFLICTING",
        "mergedAt": null,
        "number": 12153,
        "state": "OPEN",
        "title": "Avoid permanent cs_main lock in getblockheader",
        "updatedAt": "2018-04-03T21:56:54Z"
    },
    {
        "additions": 119,
        "author": {
            "avatarUrl": "https://avatars3.githubusercontent.com/u/32602525?v=4",
            "login": "kekimusmaximus",
            "url": "https://github.com/kekimusmaximus"
        },
        "body": "* removed unnecessary value arguments.\r\n* removed unnecessary copy initialization.\r\n* removed unnecessary for range copy.\r\n",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/32602525?v=4",
                        "login": "kekimusmaximus"
                    },
                    "body": "I ran the tests with `make check` as well as the functional tests via `test/functional/test_runner.py`\r\n\r\nEverything seems fine to me.\r\n\r\nLet me know if this is acceptable or whether there's something I missed.\r\n\r\nRegards, ",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1NzAzNjIzMQ==",
                    "publishedAt": "2018-01-11T19:32:26Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12158#issuecomment-357036231"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/32602525?v=4",
                        "login": "kekimusmaximus"
                    },
                    "body": "No problem, I can just rebase it when the next merge window happens.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1NzA0MzA0NA==",
                    "publishedAt": "2018-01-11T19:55:43Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12158#issuecomment-357043044"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
                        "login": "promag"
                    },
                    "body": "NACK as is. Too much scattered and different type of changes.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2MjgxNzQ3MA==",
                    "publishedAt": "2018-02-03T14:52:37Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12158#issuecomment-362817470"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "@kekimusmaximus Did you use a static analyzer to identify these? Are the fixes exhaustive (covering all instances in the code base)?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NDE2OTI2NQ==",
                    "publishedAt": "2018-02-08T16:34:31Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12158#issuecomment-364169265"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/32602525?v=4",
                        "login": "kekimusmaximus"
                    },
                    "body": "@practicalswift Yes, I'm using an unusual setup, since I created a compile command database.\r\n\r\nBut at the crux of it it's \r\nhttp://clang.llvm.org/extra/clang-tidy/index.html\r\n\r\nOn a more general note, what could be done is have a configure option that has a compilation dry run, where the compiler is set to clang-tidy.\r\n\r\nIt would also be useful to have maybe a list of agreed upon checks and committed to the repo.\r\nIdeally you'd have the CI run that also.\r\n\r\nI could probably create a pull request for that, but at the end of the day the issues still need to be fixed. ",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NDE3NzMwMg==",
                    "publishedAt": "2018-02-08T16:58:10Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12158#issuecomment-364177302"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/32602525?v=4",
                        "login": "kekimusmaximus"
                    },
                    "body": "Yes fixes are exhaustive",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NDE3ODM5NA==",
                    "publishedAt": "2018-02-08T17:01:27Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12158#issuecomment-364178394"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "@kekimusmaximus Very nice! Did you create the compile command database using [Bear (Build EAR)](https://github.com/rizsotto/Bear)?\r\n\r\nOne way to increase the chance of getting this kind of changes accepted is to allow for other to recreate the process you used to identify the issues. That will allow others to verify that the changes are correct and exhaustive. Ideally that would include the commands used (including building the compile database) and the relevant output printed (say posted to a gist linked from here).",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NDI1MDU2NA==",
                    "publishedAt": "2018-02-08T21:15:18Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12158#issuecomment-364250564"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/32602525?v=4",
                        "login": "kekimusmaximus"
                    },
                    "body": "@practicalswift Yes I used Bear with verbose make output.\r\n\r\nBear doesn't work with bitcoin by default since the buildsystem makes use of libtool. Given I'm a CMake guy, I couldn't figure out how to get around that so what I did was I hacked Bear.\r\n\r\nBasically I added the following line to /usr//bin/bear. \r\n\r\n250         re.compile(r'^libtool: compile :  clang(\\+\\+)?(-\\d+(\\.\\d+){0,2})?$'),\r\n\r\nAnd of course ran ./configure with CC=\"clang\"\r\nAnd bear make V=1\r\n\r\nHope that helps. Ideally this would be integrated in the buildsystem, CMake already provides support for compilation databases.\r\n\r\nI also tried to just pass CC=clang-tidy at configure time but that fails since IIRC in univalue the configure step tries to compile something to see if there's support and that messes everything up. Again CMake guy.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NDI2Mjk3Mg==",
                    "publishedAt": "2018-02-08T22:00:24Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12158#issuecomment-364262972"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/32602525?v=4",
                        "login": "kekimusmaximus"
                    },
                    "body": "What I also need to point out if you're going to try this, since there's classes of checks that can be automatically fixed if you pass fix.\r\n\r\nIt's not that straight forward, so you need to evaluate the fixes by hand. Sometimes the suggested fixes are wrong for different reasons, I would say 90% of the time is ok except when it's not :)",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NDI2NDI5Ng==",
                    "publishedAt": "2018-02-08T22:05:12Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12158#issuecomment-364264296"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "All in all, the changes in this PR make sense. Avoiding copies is good.\r\nBut due to the large number of changes it's very hard to review (as @promag says).\r\nIt would make sense to split commits, or maybe even separate PRs, per category of changes - e.g. those that add `std::move`, those that add `const &`, the miscellaneous code style changes etc.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NzM3NDg1OA==",
                    "publishedAt": "2018-03-29T21:15:46Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12158#issuecomment-377374858"
                }
            ],
            "totalCount": 10
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "7a385e8e7205e2e74fae12ade1fedd4d280a5839"
                    }
                }
            ],
            "totalCount": 2
        },
        "createdAt": "2018-01-11T19:32:14Z",
        "deletions": 107,
        "id": "MDExOlB1bGxSZXF1ZXN0MTYyNDY3MTU2",
        "labels": {
            "nodes": [
                {
                    "color": "E6F6D6",
                    "id": "MDU6TGFiZWwxMzU5NjE=",
                    "name": "Refactoring"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "CONFLICTING",
        "mergedAt": null,
        "number": 12158,
        "state": "OPEN",
        "title": "Avoid unnecessary copy of objects.",
        "updatedAt": "2018-03-29T21:15:46Z"
    },
    {
        "additions": 19,
        "author": {
            "avatarUrl": "https://avatars3.githubusercontent.com/u/32602525?v=4",
            "login": "kekimusmaximus",
            "url": "https://github.com/kekimusmaximus"
        },
        "body": "The ::value_type of the std::map/std::unordered_map containers is\r\nstd::pair<const Key, T>.\r\n\r\nCurrently a lot of loops drop the const from the iterator which forces\r\nthe compiler to create a copy, this should be avoided by using the auto\r\nkeyword.\r\n\r\nA better explanation can be found in Meyer's Effective Modern C++.\r\n\r\nhttps://books.google.de/books?id=rjhIBQAAQBAJ&lpg=PA41&ots=FmZL15vynY&pg=PA41#v=onepage&q&f=false",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "> Currently a lot of loops drop the const from the iterator which forces\r\nthe compiler to create a copy, this should be avoided by using the auto\r\nkeyword.\r\n\r\nI don't understand this rationale for using `auto`. Why doesn't adding `const` to the iterator have the same effect of avoiding copies?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NDg3NjA1Mg==",
                    "publishedAt": "2018-02-12T10:00:00Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12169#issuecomment-364876052"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/7133040?v=4",
                        "login": "ryanofsky"
                    },
                    "body": "> I don't understand this rationale for using auto. Why doesn't adding const to the iterator have the same effect of avoiding copies?\r\n\r\nIf you take a const reference to a type that requires an implicit conversion it will make a copy. Example where loop items are copied:\r\n\r\n```c++\r\nvector<pair<int, int>> v;\r\n...\r\nfor (const pair<short, short>& p : v);\r\n```\r\n\r\nUsing `auto` would avoid the copy. You could also drop `const` to trigger a compiler error if the copies are unintended.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NDkwMjg0MQ==",
                    "publishedAt": "2018-02-12T12:00:16Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12169#issuecomment-364902841"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/413395?v=4",
                        "login": "dcousens"
                    },
                    "body": "``` cpp\r\n#include <iostream>\r\n\r\nstruct Foo {\r\n\tFoo () { std::cout << \"  Foo()\" << std::endl; }\r\n\tFoo (const Foo& z) { std::cout << \"  Foo(Foo)\" << std::endl; }\r\n\tFoo (const Foo&& z) { std::cout << \"  Foo(Foo&&)\" << std::endl; }\r\n};\r\nusing FooInt = std::pair<const Foo, int>;\r\n\r\nint main () {\r\n\tstd::cout << \"Init\" << std::endl;\r\n\tconst auto bar = {\r\n\t\tFooInt{ Foo(), 0 },\r\n\t\t{ Foo(), 1 },\r\n\t\t{ Foo(), 2 }\r\n\t};\r\n\r\n\tstd::cout << \"FooInt : bar\" << std::endl;\r\n\tfor (FooInt x : bar) {}\r\n\r\n\tstd::cout << \"const FooInt& : bar\" << std::endl;\r\n\tfor (const FooInt& x : bar) {}\r\n\r\n\tstd::cout << \"const std::pair<Foo, int>& : bar\" << std::endl;\r\n\tfor (const std::pair<Foo, int>& x : bar) {}\r\n\r\n\tstd::cout << \"const std::pair<const Foo, int>& : bar\" << std::endl;\r\n\tfor (const std::pair<const Foo, int>& x : bar) {}\r\n\r\n\tstd::cout << \"auto : bar\" << std::endl;\r\n\tfor (auto x : bar) {}\r\n\r\n\tstd::cout << \"auto& : bar\" << std::endl;\r\n\tfor (auto& x : bar) {}\r\n\r\n\tstd::cout << \"const auto& : bar\" << std::endl;\r\n\tfor (const auto& x : bar) {}\r\n\r\n\treturn 0;\r\n}\r\n```\r\n\r\n``` bash\r\n$ g++ foo.cpp && ./a.out\r\n<snip>\r\nFooInt : bar\r\n  Foo(Foo)\r\n  Foo(Foo)\r\n  Foo(Foo)\r\nconst FooInt& : bar\r\nconst std::pair<Foo, int>& : bar\r\n  Foo(Foo)\r\n  Foo(Foo)\r\n  Foo(Foo)\r\nconst std::pair<const Foo, int>& : bar\r\nauto : bar\r\n  Foo(Foo)\r\n  Foo(Foo)\r\n  Foo(Foo)\r\nauto& : bar\r\nconst auto& : bar\r\n```\r\n\r\n> Why doesn't adding const to the iterator have the same effect of avoiding copies?\r\n\r\ntl;dr it does have the same effect.  AFAIK.\r\nAlthough personally I think `auto` helps prevent these nits,  you weren't wrong in your assumption.\r\n\r\n**edit**: wait,  if you meant `const` on the `std::pair`,  not the `Key`,  see above.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NDkwMzUxMA==",
                    "publishedAt": "2018-02-12T12:03:24Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12169#issuecomment-364903510"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
                        "login": "MarcoFalke"
                    },
                    "body": "Needs rebase if still relevant",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NTA4ODM0NA==",
                    "publishedAt": "2018-02-12T22:42:08Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12169#issuecomment-365088344"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/32602525?v=4",
                        "login": "kekimusmaximus"
                    },
                    "body": "rebased",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NTM4NjU0OQ==",
                    "publishedAt": "2018-02-13T20:02:15Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12169#issuecomment-365386549"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1063656?v=4",
                        "login": "jnewbery"
                    },
                    "body": "needs rebase",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3ODY5NDM3Mw==",
                    "publishedAt": "2018-04-04T18:11:49Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12169#issuecomment-378694373"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/5470?v=4",
                        "login": "Empact"
                    },
                    "body": "Would be great to avoid these copies, but IMO there is potential documentation / clarity benefit to being explicit about the pair types. How about changing this to just add const to the key types?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MjM2NTk1MQ==",
                    "publishedAt": "2018-04-18T12:15:09Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12169#issuecomment-382365951"
                }
            ],
            "totalCount": 7
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "53b26f5632c8b766e02c0ec0b2c0c584db73ed7d"
                    }
                }
            ],
            "totalCount": 1
        },
        "createdAt": "2018-01-12T11:23:57Z",
        "deletions": 19,
        "id": "MDExOlB1bGxSZXF1ZXN0MTYyNjA3NDQ4",
        "labels": {
            "nodes": [
                {
                    "color": "E6F6D6",
                    "id": "MDU6TGFiZWwxMzU5NjE=",
                    "name": "Refactoring"
                },
                {
                    "color": "99a810",
                    "id": "MDU6TGFiZWw3NDk0MTY1MDg=",
                    "name": "Up for grabs"
                }
            ],
            "totalCount": 2
        },
        "mergeable": "CONFLICTING",
        "mergedAt": null,
        "number": 12169,
        "state": "OPEN",
        "title": "Avoid temporary copies in C++11 ranged-based for loops.",
        "updatedAt": "2018-04-19T16:47:04Z"
    },
    {
        "additions": 78,
        "author": {
            "avatarUrl": "https://avatars3.githubusercontent.com/u/32602525?v=4",
            "login": "kekimusmaximus",
            "url": "https://github.com/kekimusmaximus"
        },
        "body": "",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6394033?v=4",
                        "login": "donaloconnor"
                    },
                    "body": "utACK\r\n\r\nI had a look through all these changes and couldn't see any of the potential edge cases where this can lead to a change of behaviour (Eg: calling an explicit ctor instead of an implicit as push_back does).",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1OTE4NjA0Mw==",
                    "publishedAt": "2018-01-20T17:06:04Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12183#issuecomment-359186043"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "Needs rebase, and addressing @eklitzke 's comments.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NzM3MzI2MQ==",
                    "publishedAt": "2018-03-29T21:09:20Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12183#issuecomment-377373261"
                }
            ],
            "totalCount": 2
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "2c5700e0de9c97e1642226b0745e03c7d019bbb3"
                    }
                }
            ],
            "totalCount": 1
        },
        "createdAt": "2018-01-14T17:43:29Z",
        "deletions": 78,
        "id": "MDExOlB1bGxSZXF1ZXN0MTYyODM1MjU2",
        "labels": {
            "nodes": [
                {
                    "color": "E6F6D6",
                    "id": "MDU6TGFiZWwxMzU5NjE=",
                    "name": "Refactoring"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "CONFLICTING",
        "mergedAt": null,
        "number": 12183,
        "state": "OPEN",
        "title": "Make use of emplace in nonassociative containers.",
        "updatedAt": "2018-03-29T21:09:20Z"
    },
    {
        "additions": 21,
        "author": {
            "avatarUrl": "https://avatars1.githubusercontent.com/u/534?v=4",
            "login": "ericallam",
            "url": "https://github.com/ericallam"
        },
        "body": "Related to issue #11564, this PR designed to provide feedback to the user about their relative transaction fee before they finish broadcasting their tx to the bitcoin network. \r\n\r\nDisplaying the sat/vbyte is useful for knowing how likely their tx will be included in an upcoming block when using public fee estimation tools like https://jochen-hoenicke.de/queue/#24h, https://estimatefee.com, and https://bitcoinfees.earn.com.\r\n\r\nThis updates the SendCoinsDialog to look like this:\r\n\r\n<img width=\"838\" alt=\"screen shot 2018-01-15 at 12 46 14\" src=\"https://user-images.githubusercontent.com/534/34943625-4f0037a6-f9f4-11e7-8a77-49d35df34c76.png\">",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/10217?v=4",
                        "login": "Sjors"
                    },
                    "body": "I think the transaction confirmation dialog should use the same unit as the send screen. So you could make two pull requests:\r\n\r\n1 - add sat / (v)byte to the dropdown on the send screen\r\n2 - add fee per (kilo)byte to the confirmation screen (this PR) \r\n\r\nNit: I would move the fee per size inside brackets at the end, e.g. \"0.00002220 BTC added as transaction fee (0.221 kB at 10.0452 sat/byte)\". ",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1NzcxODE3OQ==",
                    "publishedAt": "2018-01-15T15:43:10Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12189#issuecomment-357718179"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/534?v=4",
                        "login": "ericallam"
                    },
                    "body": "@Sjors I agree that it's a good idea to do 2 different PRs for these changes. Adding the ability to specify custom fees in sat/vbyte is a decent chunk of work because of the way the Custom Fee text field reuses the `BitcoinAmountField` widget which is used in a couple different places in the UI (like when selecting an amount of BTC to send in a transaction, and to receive). \r\n\r\nI think the best approach for the custom fee section would be to not use `BitcoinAmountField` but to  create a new widget specifically for the custom fee input that would both:\r\n\r\n1. Allow inputting the fee as sat/vbyte\r\n2. When not inputting the fee as sat/vbyte, display (either in the UI or as a tooltip) the resulting sat/vbyte.\r\n\r\nWhen this second PR happens, the Recommended section should also probably either show the sat/vbyte instead of BTC/kb, or show both.\r\n\r\nI agree with your Nit about the format of the fee per size label, and will be updating this PR to reflect the change in a few minutes.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1ODI5MDYzMw==",
                    "publishedAt": "2018-01-17T12:32:42Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12189#issuecomment-358290633"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/534?v=4",
                        "login": "ericallam"
                    },
                    "body": "The `SendCoinsDialog` confirmation screen now looks like this:\r\n\r\n![screen shot 2018-01-17 at 12 44 17](https://user-images.githubusercontent.com/534/35043357-34f83764-fb84-11e7-92f6-27f413b218b8.png)\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1ODI5MzIzMA==",
                    "publishedAt": "2018-01-17T12:44:52Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12189#issuecomment-358293230"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "Concept ACK",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NDg4NDI1NQ==",
                    "publishedAt": "2018-02-12T10:34:36Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12189#issuecomment-364884255"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/6299681?v=4",
                        "login": "PierreRochard"
                    },
                    "body": "Strong Concept ACK, hopefully we coalesce on a solution to issue #11564",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NzA3MDE1Mw==",
                    "publishedAt": "2018-03-28T23:22:30Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12189#issuecomment-377070153"
                }
            ],
            "totalCount": 5
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "e8485d10e63c1c66ea85b253ff38ee86fd2a3ea6"
                    }
                }
            ],
            "totalCount": 3
        },
        "createdAt": "2018-01-15T13:06:10Z",
        "deletions": 1,
        "id": "MDExOlB1bGxSZXF1ZXN0MTYyOTQ2OTMy",
        "labels": {
            "nodes": [
                {
                    "color": "02d7e1",
                    "id": "MDU6TGFiZWwxMzU5NDY=",
                    "name": "GUI"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "number": 12189,
        "state": "OPEN",
        "title": "[Qt] Display transaction fee with sat/vbyte value in SendCoinsDialog",
        "updatedAt": "2018-04-21T11:17:47Z"
    },
    {
        "additions": 456,
        "author": {
            "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
            "login": "jonasschnelli",
            "url": "https://github.com/jonasschnelli"
        },
        "body": "Alternative to #9152.\r\n\r\nThis takes `<n>` pubkeys and optionally  `<n>` xpubs (together with a definable lookup windows where the default is 0-1000) and looks up common scripts in the UTXO set of all given or derived keys.\r\n\r\nThe output will be an array similar to `listunspent`. That array is compatible with `createrawtransaction` as well as with `signrawtransaction`.\r\n\r\nThis makes it possible to prepare sweeps and have them signed in a secure (cold) space.",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/858454?v=4",
                        "login": "gmaxwell"
                    },
                    "body": "Why is it pubkeys and not addresses for the pubkey part?  (obviously xpubs are xpubs and need to be)",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1Nzg3Mjc0Mg==",
                    "publishedAt": "2018-01-16T07:14:50Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12196#issuecomment-357872742"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "After a short discussion on IRC (https://botbot.me/freenode/bitcoin-core-dev/2018-01-16/?msg=95804115&page=2) support for addresses and pubkeys makes most sense. Will add support for an array of addresses.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1Nzg3NjA4Mw==",
                    "publishedAt": "2018-01-16T07:33:37Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12196#issuecomment-357876083"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "Concept ACK, nice! I've wished for UTXO scanning functionality many times, much faster than importing into a watchonly wallet if you only care about spendable UTXOs.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1Nzk0Nzk1Nw==",
                    "publishedAt": "2018-01-16T12:41:12Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12196#issuecomment-357947957"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "* Added support for addresses (can scan unspent outputs after given addresses)\r\n* Added support for an optional raw sweep transaction including optional feerate or optional confirmation target",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1OTEyNTI1NQ==",
                    "publishedAt": "2018-01-20T00:16:20Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12196#issuecomment-359125255"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "~~The raw sweep fee calculation is currently WIP (misses the dummy signer part)... will fix soon.~~",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1OTEyNjU1NA==",
                    "publishedAt": "2018-01-20T00:26:49Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12196#issuecomment-359126554"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "Overhauled the fee calculation logic (see the dummy sign keystore).",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1OTIyNzU1Ng==",
                    "publishedAt": "2018-01-21T06:36:12Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12196#issuecomment-359227556"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/1095675?v=4",
                        "login": "luke-jr"
                    },
                    "body": "NACK supporting addresses. Addresses have no relation to the UTXOs.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2MDI0NDg5OA==",
                    "publishedAt": "2018-01-24T19:23:42Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12196#issuecomment-360244898"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "@luke-jr: Why? Addresses are encoded output scripts (scriptPubKey). The rational behind supporting addresses is that a) it may be more efficient then forming every possible known common script from a pubkey and b) that pubkeys are somewhat more difficult to export then the pure \"used addresses\".",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2MDI0NjA0MQ==",
                    "publishedAt": "2018-01-24T19:27:44Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12196#issuecomment-360246041"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/1095675?v=4",
                        "login": "luke-jr"
                    },
                    "body": "Addresses are *opaque* identifiers for a given invoice. That they are currently implemented by encoding a scriptPubKey is irrelevant.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2MDI1MDE4Mw==",
                    "publishedAt": "2018-01-24T19:41:53Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12196#issuecomment-360250183"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/5269298?v=4",
                        "login": "greenaddress"
                    },
                    "body": "Does it support mempool/unconfirmed utxos? I had a quick look and didn't seem to, I think it would be useful to have mempool too.\r\n\r\nWould it make sense to avoid the background job? maybe by keeping the utxo set sorted by scriptPubKey and binary search on it or perhaps some utxo set limited indexing?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2ODYwNTI1MQ==",
                    "publishedAt": "2018-02-26T18:44:50Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12196#issuecomment-368605251"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "> Does it support mempool/unconfirmed utxos? I had a quick look and didn't seem to, I think it would be useful to have mempool too.\r\n\r\nIt currently does not scan the mempool (hence the command name `scantxoutset`), but I agree, that would be useful. But, since scans take a while, timing may be a problem for scanning the mempool.\r\nMaybe an additional RPC call would make sense (`scanmempool`)?\r\n\r\n> Would it make sense to avoid the background job? maybe by keeping the utxo set sorted by scriptPubKey and binary search on it or perhaps some utxo set limited indexing?\r\n\r\nYou mean speeding up the scan? I don't think its worth to keep an extra index (changing the sort order would probably slow down verification a lot).\r\nMy local tests did show a mainnet scan takes about ~30seconds (SSD, fast CPU).\r\nI don't know what the space requirements for a by-scriptPubKey-index would be, .... maybe we can look into this once this PR did proceed.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2ODcxNzQ5NA==",
                    "publishedAt": "2018-02-27T01:47:15Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12196#issuecomment-368717494"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "Rebased",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2ODcxODQ5MQ==",
                    "publishedAt": "2018-02-27T01:52:40Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12196#issuecomment-368718491"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/1095675?v=4",
                        "login": "luke-jr"
                    },
                    "body": "The commit separation here is ugly: CCoinsView::FindScriptPubKey initially checks ShutdownRequested directly, and then this is removed with the RPC changes.\r\n\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2OTA5NzM3OQ==",
                    "publishedAt": "2018-02-28T02:15:27Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12196#issuecomment-369097379"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "Fixed the ugly commit separation in `coins.cpp`",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2OTI1NDE2NQ==",
                    "publishedAt": "2018-02-28T14:22:14Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12196#issuecomment-369254165"
                }
            ],
            "totalCount": 14
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "3835de0da440fd5455dde5a3ea1c89b9052821ed"
                    }
                }
            ],
            "totalCount": 4
        },
        "createdAt": "2018-01-16T07:09:05Z",
        "deletions": 0,
        "id": "MDExOlB1bGxSZXF1ZXN0MTYzMTAzOTU4",
        "labels": {
            "nodes": [
                {
                    "color": "0052cc",
                    "id": "MDU6TGFiZWw5ODI3OTE3Nw==",
                    "name": "RPC/REST/ZMQ"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "number": 12196,
        "state": "OPEN",
        "title": "Add scantxoutset RPC method",
        "updatedAt": "2018-03-06T03:48:53Z"
    },
    {
        "additions": 10,
        "author": {
            "avatarUrl": "https://avatars2.githubusercontent.com/u/1095675?v=4",
            "login": "luke-jr",
            "url": "https://github.com/luke-jr"
        },
        "body": "- \"Bech32\" isn't very user-friendly; used \"native segwit\" as in #11937.\r\n- You don't spend from addresses.\r\n- No reason to block off Bech32 access with legacy address default.\r\n",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "utACK 4959aa9a62ded74fcd343d6e402c79e3ebcba241\r\nNeeds squash.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1ODIyNTIzOA==",
                    "publishedAt": "2018-01-17T07:55:00Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12208#issuecomment-358225238"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/425166?v=4",
                        "login": "flack"
                    },
                    "body": "Please see this comment https://github.com/bitcoin/bitcoin/pull/11991#issuecomment-358110905 \r\n\r\ntl/dr: Maybe \"spend from\" is not correct phrasing, but clicking this checkbox once won't reduce all your future transaction fees either",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1ODI0NDgxOA==",
                    "publishedAt": "2018-01-17T09:21:12Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12208#issuecomment-358244818"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/10217?v=4",
                        "login": "Sjors"
                    },
                    "body": "Although I'm fine with this change, I think #11937 is a better solution for users who launch with `-addresstype=legacy`, because it also lets users select P2SH wrapped SegWit.\r\n\r\nIf #11937 is merged, I think it's more clear to hide the checkbox when the user switches to legacy, if only so they don't forget to switch back to p2sh.\r\n\r\n\r\nThere's a certain airdrop coin that just switched to using bech32 _without_ SegWit. In addition bech32 is used by Lightning, so calling this \"native segwit\" might lead to confusion. I also don't think the phrase \"native SegWit\" is any less intimating than \"bech32\".\r\n\r\nMaybe call it \"Use modern address format (Bech32)?\"\r\n\r\nAdding support back for `-addresstype=legacy` makes the tooltip either longer or more vague, because you can't mention \"P2SH wrapped SegWit\". But not the end of the world. Mixing @flack's, @makomk's and your own suggestion:\r\n\r\n> The generated address begins with bc1 and lowers your fees when you spend it (BIP173). These addresses are not accepted everywhere yet. If the sender says your address is invalid, turn off this option to generate a address beginning with 1 or 3.\r\n\r\nAlternatively \"beginning with a digit\" or make the \"1\" and \"3\" a variable in the string that you can switch during runtime.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1ODI1MjIwNA==",
                    "publishedAt": "2018-01-17T09:49:32Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12208#issuecomment-358252204"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/858454?v=4",
                        "login": "gmaxwell"
                    },
                    "body": "bcash's thing is not bech32, it's gratuitously incompatible.   I would prefer to call these \"bc1 addresses\"  because that's how they're recognize able to users.  Something like \"Use bc1-style addresses. These addresses use segwit natively which  reduces your transaction fees later on and offers better protection against typos, but old wallets don't support them. When unchecked, an address compatible with older wallets will be created instead.\"\r\n\r\n[Edit] The text above \"begins with Bc1 ... \" sounds quite good to me. Esp the instructions telling you what to do if it fails!    The \"when you spend it\"  could be changed to \"later when you spend the received funds\".\r\n\r\n> No reason to block off Bech32 access with legacy address default.\r\n\r\nYes there is, the reason for having legacy in the first place is backwards compatibility.  That reason is blown up the first time the user selects anything but legacy.   Also, more choices aren't without a cost.\r\n\r\nAlong those lines,  I don't see the usecase for  #11937 but will comment there.\r\n\r\n>  I think it's more clear to hide the checkbox when the user switches to legacy,\r\n\r\nAn alternative to hiding it completely would be when legacy is set it could grey out the BC1 address option (and perhaps add a note 'legacy mode enabled'). ... this would reduce confusion for someone that managed to follow some instruction to set legacy and then are later confused when they can't find the combobox.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1ODI3NDAzNg==",
                    "publishedAt": "2018-01-17T11:16:17Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12208#issuecomment-358274036"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/10217?v=4",
                        "login": "Sjors"
                    },
                    "body": "+1 for \"bc1 address\"\r\n\r\nI agree the bcash thing is weird, but assuming wallets hide** the `bitcoincash:` part*, users will assume it's the same kind of thing because it looks visually similar, it just doesn't start with `bc1`. Which is another argument in favor of \"bc1 address\".\r\n\r\n`*` = the prefix is implied by the URI, whereas in bitcoin:bc1... the prefix is redundant. But bech32 doesn't require the use of URI's so again, weird...\r\n`**` = except in places where you need to copy-paste it. Also note that double clicking on the right side of a bitcoin cash address will only select the bits after the colon, which should confuse their users and is probably the reason for using 1 as a separator in the standard. However, the checksum will still prevent accidents.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1ODI3NzM3Ng==",
                    "publishedAt": "2018-01-17T11:30:37Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12208#issuecomment-358277376"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/858454?v=4",
                        "login": "gmaxwell"
                    },
                    "body": "\"The separator is 1 because using a non-alphanumeric character would complicate copy-pasting of addresses (with no double-click selection in several applications)\" -- BIP173 \r\n\r\nThere were _many_ design considerations in BECH32 which we didn't explain in the spec but that wasn't one of them.  \r\n\r\nOne of them was the potential for using an invisible magic value instead of or in addition to the HRP for distinguishing uses.  Instead of has the problem of having no useful error reporting, in addition to had the problem that cross application usage would be more likely to be falsely accepted.\r\n\r\n> However, the checksum will still prevent accidents.\r\n\r\nAlmost all of the time: but not all the time-- the HRP they use is so long that any replacement one is going to exceede the guaranteed detection difference and possibly accept a swapped address however this would be very rare.  Though preventing an erroneous send won't stop the user from being confused and doing something to fix it that makes things worse since UI's can't give feedback. I'd take a bet that someone will create a spinoff that doesn't change the effective HRP for the checksum, since it's not operably part of the address.\r\n\r\nI don't think they're all that visually similar compared to any other string of encoded data, but the big difference is the bc1 prefix--- talking about that more will make people pay attention to it. ",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1ODM0ODA5OA==",
                    "publishedAt": "2018-01-17T15:53:24Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12208#issuecomment-358348098"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/3782274?v=4",
                        "login": "achow101"
                    },
                    "body": "utACK 5f5fe406d6e9b5b64c13a76c2d74b0dc7f27c01a",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1ODM4MDQwNA==",
                    "publishedAt": "2018-01-17T17:31:10Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12208#issuecomment-358380404"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
                        "login": "promag"
                    },
                    "body": "Maybe I'm alone here, but from previous discussions the goal is to push native segwit addresses forward.\r\n\r\nIMO the UI should not give the impression it is optional to not generate native segwit, instead, it should give the option to generate non-native segwit address.\r\n\r\nWhen `g_address_type == OUTPUT_TYPE_BECH32`:\r\n - [ ] Use address compatible with old wallets\r\n*If checked, use `OUTPUT_TYPE_P2SH_SEGWIT`, otherwise use `OUTPUT_TYPE_BECH32`.*\r\n\r\nWhen `g_address_type != OUTPUT_TYPE_BECH32`:\r\n - [ ] Use native segwit address\r\n*If checked, use `OUTPUT_TYPE_BECH32`, otherwise use `g_address_type`.*\r\n\r\nI'm not fond of \"changing\" the texts of the UI, but with this approach, the checkbox text will reflect when the `-addresstype` default value is changed, which IMO is a win.\r\n\r\nPlease correct me if my reasoning is wrong in any way.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1ODQ5ODgyOA==",
                    "publishedAt": "2018-01-18T00:41:55Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12208#issuecomment-358498828"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/10217?v=4",
                        "login": "Sjors"
                    },
                    "body": "> goal is to push native segwit addresses forward\r\n\r\nHaving this checkbox already goes a long way in encouraging adoption. Firstly it lets normal (non-RPC) users actually use it. Secondly it raises the bar for other wallets / services and gives them some confidence they're not wasting engineering time. See e.g. [this tweet from Kraken](https://twitter.com/krakensupport/status/949596199006306304).\r\n\r\nLike RBF, I think this needs to happen in two phases: first we clearly offer it to the user and then - assuming no unexpected problems arise and the rest of the industry actually adopts it - we make it the default.\r\n\r\nMaking it the default now would lead to confusion, especially from users who don't even notice the checkbox, suddenly see a different address format and think something is wrong with their wallet. I forgot the word for \"UX should not change as fast as technology allows, but should respect human ability to adapt to these changes\", but it's similar to how Apple used [Skeuomorphism](https://en.wikipedia.org/wiki/Skeuomorph) on their early iPhones but switched to more abstract representations (and relied more on gestures) once people became familiar with smart phones in general.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1ODU4MTMyNQ==",
                    "publishedAt": "2018-01-18T09:01:44Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12208#issuecomment-358581325"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
                        "login": "promag"
                    },
                    "body": "> Making it the default now would lead to confusion\r\n\r\nI'm not suggesting that.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1ODY1OTUxNg==",
                    "publishedAt": "2018-01-18T14:17:09Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12208#issuecomment-358659516"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/858454?v=4",
                        "login": "gmaxwell"
                    },
                    "body": "FWIW, my view on deployment is that even having the checkbox is rushing things... but not unacceptably. I think initially software should be made able to send to these addresses, then later made able to receive them.  Having the checkbox allows faster usage, but at a cost of creating a small amount of confusion due to having a somewhat complicated option that often (esp initially) won't work.  I think it's a good trade-off, and I'm already using BC1 addresses (as I assume many other advanced users will)-- but it's not a free decision either.\r\n\r\n\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1ODY2MDU3Mg==",
                    "publishedAt": "2018-01-18T14:21:00Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12208#issuecomment-358660572"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/10217?v=4",
                        "login": "Sjors"
                    },
                    "body": ">> Making it the default now would lead to confusion\r\n\r\n> I'm not suggesting that.\r\n\r\nI was confused by what you meant with:\r\n\r\n> IMO the UI should not give the impression it is optional to not generate native segwit, instead, it should give the option to generate non-native segwit address.\r\n\r\nI don't think it's worth changing the text for when a user launches with `-addresstype=bech32` as they probably know what they're doing. It does make sense to change the text to what you suggest once we change the default in some future version.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1ODY2NDE1MA==",
                    "publishedAt": "2018-01-18T14:33:39Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12208#issuecomment-358664150"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
                        "login": "promag"
                    },
                    "body": "> I don't think it's worth changing the text for when a user launches with -addresstype=bech32\r\n\r\n> It does make sense to change the text to what you suggest once we change the default in some future version\r\n\r\nThose users would get the \"future\" UI. They won't see a difference when the default is changed.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1ODY5MjA2Mg==",
                    "publishedAt": "2018-01-18T16:00:49Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12208#issuecomment-358692062"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
                        "login": "MarcoFalke"
                    },
                    "body": "Is this for 0.16?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1ODc1OTEwNQ==",
                    "publishedAt": "2018-01-18T19:41:30Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12208#issuecomment-358759105"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/548488?v=4",
                        "login": "sipa"
                    },
                    "body": "Concept ACK, i think the new text is fine. It's always going to be a bit fuzzy to explain the way in which a new address format influences fees later, but the current text is non-actionable anyway (users don't generally control the coin selection, so the link between transactions and fees is vague at best).",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1ODgxMTgwMQ==",
                    "publishedAt": "2018-01-18T23:03:42Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12208#issuecomment-358811801"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
                        "login": "MarcoFalke"
                    },
                    "body": "Needs rebase",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1ODgzMDc0Mg==",
                    "publishedAt": "2018-01-19T00:44:40Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12208#issuecomment-358830742"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/1095675?v=4",
                        "login": "luke-jr"
                    },
                    "body": "Rebased. I wouldn't mind \"bc1\", but the existing terminology seems well-established, and listing all 3 seems like a bit much.\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1OTcyMjAwMw==",
                    "publishedAt": "2018-01-23T08:53:31Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12208#issuecomment-359722003"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/9156103?v=4",
                        "login": "nopara73"
                    },
                    "body": "+1 for \"bc1 addresses.\"  \r\nWhile introducing a new synonymous term is rarely preferable, because of the confusion it creates, \"bc1 address\" doesn't have the usual cons. Advanced users may cringe the first time seeing this dumbed down version, but they will grasp the concept right away. While, for less advanced users, it is orders of magnitude more descriptive, than \"bech32\", \"native segwit\" or \"P2WPKH\".",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2MDYxNTY1Nw==",
                    "publishedAt": "2018-01-25T22:03:36Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12208#issuecomment-360615657"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
                        "login": "promag"
                    },
                    "body": "> Is this for 0.16?\r\n\r\nEchoing @MarcoFalke.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2MDk5MzMyMA==",
                    "publishedAt": "2018-01-27T15:47:23Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12208#issuecomment-360993320"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/17806210?v=4",
                        "login": "Sgt-Miller"
                    },
                    "body": "How about \"bravo charlie one\" ?\r\nhttps://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-December/015477.html",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2MTAwNTMzOQ==",
                    "publishedAt": "2018-01-27T18:35:23Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12208#issuecomment-361005339"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/1095675?v=4",
                        "login": "luke-jr"
                    },
                    "body": "IMO \"aka X\" is standard English these days...?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NTcxNTA4Nw==",
                    "publishedAt": "2018-02-14T19:18:01Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12208#issuecomment-365715087"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/33541170?v=4",
                        "login": "randolf"
                    },
                    "body": "@luke-jr You make a fair point, especially since English has been changing due to acronyms being used in texting on cellular phones (e.g., \"afaik\" is obviously easier to type than \"a.f.a.i.k.\"), and so I don't think that you're wrong.  My thinking was that in many circles \"aka,\" (without the periods) is still regarded as slang, leaving \"a.k.a.,\" (with the periods) as being the more traditional usage, but of course English is evolving (as it always has).\r\n\r\nAlso, for people who are not fluent in English, \"aka\" has the potential to be confusing because it looks like a word, whereas \"a.k.a.\" will be much more easily understood as an acronym.\r\n\r\nMy personal preference is to favour the English style that lends itself more to academia and English writing tradition because from my perspective it gives the Bitcoin software, as a whole, a more professionally-polished appearance, which I think is ultimately beneficial to this project overall.  But this is also peer-review, and what I think isn't necessarily correct either.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NTc5OTkyNA==",
                    "publishedAt": "2018-02-15T01:27:42Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12208#issuecomment-365799924"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "Needs rebase.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NzM3MjQ1NQ==",
                    "publishedAt": "2018-03-29T21:06:18Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12208#issuecomment-377372455"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/1095675?v=4",
                        "login": "luke-jr"
                    },
                    "body": "Rebased",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NzcwNjk5OQ==",
                    "publishedAt": "2018-03-31T16:53:44Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12208#issuecomment-377706999"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/548488?v=4",
                        "login": "sipa"
                    },
                    "body": "utACK",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NzcwNzY4MQ==",
                    "publishedAt": "2018-03-31T17:02:31Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12208#issuecomment-377707681"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "Needs rebase again (seems merge ready).",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MDIwMzY5MA==",
                    "publishedAt": "2018-04-10T18:34:40Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12208#issuecomment-380203690"
                }
            ],
            "totalCount": 26
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "c21f42a5032d57660adec164071c4f98f5642db3"
                    }
                }
            ],
            "totalCount": 2
        },
        "createdAt": "2018-01-17T07:25:55Z",
        "deletions": 8,
        "id": "MDExOlB1bGxSZXF1ZXN0MTYzMzY3Nzgx",
        "labels": {
            "nodes": [
                {
                    "color": "02d7e1",
                    "id": "MDU6TGFiZWwxMzU5NDY=",
                    "name": "GUI"
                },
                {
                    "color": "ff8200",
                    "id": "MDU6TGFiZWwyOTQ4NDE3Mzk=",
                    "name": "Needs backport"
                }
            ],
            "totalCount": 2
        },
        "mergeable": "CONFLICTING",
        "mergedAt": null,
        "number": 12208,
        "state": "OPEN",
        "title": "GUI: Rephrase Bech32 checkbox texts, and enable it with legacy address default",
        "updatedAt": "2018-04-10T18:34:40Z"
    },
    {
        "additions": 28,
        "author": {
            "avatarUrl": "https://avatars3.githubusercontent.com/u/23712808?v=4",
            "login": "mryandao",
            "url": "https://github.com/mryandao"
        },
        "body": "the denomination for `fee` is current in btc while the other such as `decendentFee` and `ancestorFee` are in satoshis.\r\n\r\n",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "- The convention on the RPC interface is to use ValueFromAmount and AmountFromValue for monetary values unless there is a really good reason (e.g. a BIP) that says otherwise.\r\n- This is an interface-breaking change. Current software assumes the values are in a certain unit and can blow up dangerously when it suddenly changes from one version to the other. How long has it been like this?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1OTM4ODc3MQ==",
                    "publishedAt": "2018-01-22T10:52:45Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12240#issuecomment-359388771"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
                        "login": "promag"
                    },
                    "body": "NACK as it is. Call it bug, or lack of consistency, but the truth is changing may/will break existing software. Instead it should follow the deprecation mechanism.\r\n\r\nSomething like adding a flag to control the resulting unit or adding a new field.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1OTM5MDUyMg==",
                    "publishedAt": "2018-01-22T11:00:11Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12240#issuecomment-359390522"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
                        "login": "promag"
                    },
                    "body": "After IRC discussion, the suggestion is to add a new field:\r\n```js\r\n{\r\n  ...,\r\n  \"fees\": {\r\n    \"base\": ...,\r\n    \"modified\": ...,\r\n    \"ancestor\": ...,\r\n    \"descendant\": ...\r\n  },\r\n  ...\r\n}\r\n```\r\n\r\nIMO this should be done here too:\r\n - all values must have the same unit and the documentation must mention it;\r\n - a test should be added to compare old fields with new fields;\r\n - bonus, existing tests could be updated to use new fields.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1OTM5NDM5Mw==",
                    "publishedAt": "2018-01-22T11:17:09Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12240#issuecomment-359394393"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/3211283?v=4",
                        "login": "MeshCollider"
                    },
                    "body": "Looking better, thanks :) note that you need to update the help text too including a note that the old fields are deprecated",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1OTQxOTUwNQ==",
                    "publishedAt": "2018-01-22T13:13:17Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12240#issuecomment-359419505"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
                        "login": "promag"
                    },
                    "body": "FYI\r\nhttps://github.com/bitcoin/bitcoin/blob/b987ca4ee495a7fff82f0ac14ef0753bfb7586e2/src/rpc/blockchain.cpp#L359-L376",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1OTQyNDcxOA==",
                    "publishedAt": "2018-01-22T13:35:37Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12240#issuecomment-359424718"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/23712808?v=4",
                        "login": "mryandao"
                    },
                    "body": "alright, i've addressed all of @MeshCollider and @promag's comments and applied the necessary changes.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1OTYyMzgyMg==",
                    "publishedAt": "2018-01-23T00:22:15Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12240#issuecomment-359623822"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
                        "login": "MarcoFalke"
                    },
                    "body": "Please squash your commits according to https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#squashing-commits",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1OTYyNjY5NA==",
                    "publishedAt": "2018-01-23T00:37:51Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12240#issuecomment-359626694"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
                        "login": "promag"
                    },
                    "body": "Care to update doc/release-notes.md?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1OTc2MTYwMQ==",
                    "publishedAt": "2018-01-23T11:26:53Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12240#issuecomment-359761601"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/3211283?v=4",
                        "login": "MeshCollider"
                    },
                    "body": "utACK https://github.com/bitcoin/bitcoin/pull/12240/commits/ac168a6b3b3393c24a7b42f3113483c543ec9ceb ",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1OTgwODc2NQ==",
                    "publishedAt": "2018-01-23T14:33:59Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12240#issuecomment-359808765"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
                        "login": "promag"
                    },
                    "body": "utACK ac168a6.\r\n\r\nNit, please cleanup the commit body. ",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1OTk3NDU4Nw==",
                    "publishedAt": "2018-01-24T00:04:04Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12240#issuecomment-359974587"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
                        "login": "promag"
                    },
                    "body": "The commit contains some fixups leftovers from the squash. Edit the commit message `git commit --amend` and then `git push -f ...`.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2MDA2MTQwOA==",
                    "publishedAt": "2018-01-24T08:49:16Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12240#issuecomment-360061408"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/23712808?v=4",
                        "login": "mryandao"
                    },
                    "body": "@promag, thanks for clarifying. I've updated the commit message.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2MDEyMjUwNw==",
                    "publishedAt": "2018-01-24T12:55:57Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12240#issuecomment-360122507"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/33541170?v=4",
                        "login": "randolf"
                    },
                    "body": "I suggest changing the title of this Pull Request from \"changed fee to be in btcs instead of sats\" to:\r\n\r\n`[Docs] For consistency, changed Satoshi fee denominations to BTC\r\n`",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2MTk4ODM0Mw==",
                    "publishedAt": "2018-01-31T16:29:53Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12240#issuecomment-361988343"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/23712808?v=4",
                        "login": "mryandao"
                    },
                    "body": "@randolf actually, [rpc] would be more fitting.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2MjAzNDA4NA==",
                    "publishedAt": "2018-01-31T18:57:27Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12240#issuecomment-362034084"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
                        "login": "MarcoFalke"
                    },
                    "body": "Jup, seems correctly tagged. But needs rebase, since the release notes were cleared on master.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2MjA4NjMyMw==",
                    "publishedAt": "2018-01-31T22:04:01Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12240#issuecomment-362086323"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
                        "login": "MarcoFalke"
                    },
                    "body": "Usually we solve conflicts by rebase (this avoids a merge commit). You can do something along the lines of\r\n\r\n```sh\r\ngit checkout fix-getrawmempool-fee-representation\r\ngit reset --soft 895fbd768f0c89cea3f78acac58b233d4e3a145e\r\ngit commit -m \"Add new fee structure with all sub-fields denominated in BTC\"\r\ngit push origin checkout fix-getrawmempool-fee-representation -f",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2MjU1MTYxOA==",
                    "publishedAt": "2018-02-02T10:41:57Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12240#issuecomment-362551618"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "utACK, after getting rid of the merge commit in the branch.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NDE1NTE1Nw==",
                    "publishedAt": "2018-02-08T15:53:16Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12240#issuecomment-364155157"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/23712808?v=4",
                        "login": "mryandao"
                    },
                    "body": "rebased, pending review.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NzE2NjY5OA==",
                    "publishedAt": "2018-02-21T00:10:06Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12240#issuecomment-367166698"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/23712808?v=4",
                        "login": "mryandao"
                    },
                    "body": "@promag, I've updated the release note.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NzQ4MDk5NA==",
                    "publishedAt": "2018-02-21T21:35:38Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12240#issuecomment-367480994"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1063656?v=4",
                        "login": "jnewbery"
                    },
                    "body": "another release-notes.md conflict. Sorry - needs rebase again :(",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3ODQxMDQyNA==",
                    "publishedAt": "2018-04-03T21:48:50Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12240#issuecomment-378410424"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/23712808?v=4",
                        "login": "mryandao"
                    },
                    "body": "@jnewbery done :)",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3ODg2NDEyOQ==",
                    "publishedAt": "2018-04-05T08:46:56Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12240#issuecomment-378864129"
                }
            ],
            "totalCount": 21
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "7de1de7da497c53261ea3437e67ce9943b0eb939"
                    }
                }
            ],
            "totalCount": 1
        },
        "createdAt": "2018-01-22T08:28:16Z",
        "deletions": 4,
        "id": "MDExOlB1bGxSZXF1ZXN0MTY0MjQ3MTEz",
        "labels": {
            "nodes": [
                {
                    "color": "0052cc",
                    "id": "MDU6TGFiZWw5ODI3OTE3Nw==",
                    "name": "RPC/REST/ZMQ"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "number": 12240,
        "state": "OPEN",
        "title": "[rpc] Introduced a new `fees` structure that aggregates all sub-field fee types denominated in BTC",
        "updatedAt": "2018-04-18T03:28:15Z"
    },
    {
        "additions": 41,
        "author": {
            "avatarUrl": "https://avatars2.githubusercontent.com/u/1095675?v=4",
            "login": "luke-jr",
            "url": "https://github.com/luke-jr"
        },
        "body": "Includes #5618 (which the reasons for rejecting no longer hold true)",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "This change is build-system heavy, @theuni can you take a look?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NTIwMzM4Nw==",
                    "publishedAt": "2018-02-13T09:27:27Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12246#issuecomment-365203387"
                }
            ],
            "totalCount": 1
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "dd888a30932b66caaf1183db42227af8714ca787"
                    }
                }
            ],
            "totalCount": 2
        },
        "createdAt": "2018-01-23T03:55:18Z",
        "deletions": 16,
        "id": "MDExOlB1bGxSZXF1ZXN0MTY0NDc3NDc5",
        "labels": {
            "nodes": [
                {
                    "color": "d4c5f9",
                    "id": "MDU6TGFiZWw2Mjk2MzUxNg==",
                    "name": "Tests"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "CONFLICTING",
        "mergedAt": null,
        "number": 12246,
        "state": "OPEN",
        "title": "Bugfix: Only run bitcoin-tx tests when bitcoin-tx is enabled",
        "updatedAt": "2018-02-13T09:27:27Z"
    },
    {
        "additions": 826,
        "author": {
            "avatarUrl": "https://avatars3.githubusercontent.com/u/881253?v=4",
            "login": "jimpo",
            "url": "https://github.com/jimpo"
        },
        "body": "This implements the compact block filter construction in [BIP 158](https://github.com/bitcoin/bips/blob/master/bip-0158.mediawiki). The code is not used anywhere in the Bitcoin Core code base yet. The next step towards [BIP 157](https://github.com/bitcoin/bips/blob/master/bip-0157.mediawiki) support would be to create an indexing module similar to `TxIndex` in https://github.com/bitcoin/bitcoin/pull/11857 that constructs the basic and extended filters for each validated block.\r\n\r\n### Filter Sizes\r\n\r\n[Here](https://gateway.ipfs.io/ipfs/QmRqaAAQZ5ZX5eqxP7J2R1MzFrc2WDdKSWJEKtQzyawqog) is a CSV of filter sizes for blocks in the main chain.\r\n\r\nAs you can see below, the ratio of filter size to block size drops after the first ~150,000 blocks:\r\n\r\n![filter_sizes](https://user-images.githubusercontent.com/881253/37620350-31dd9d88-2b79-11e8-889a-800dceb1cae5.png)\r\n\r\nThe reason for the relatively large filter sizes is that Golomb-coded sets only achieve good compression with a sufficient number of elements. Empirically, the average element size with 100 elements is 13% larger 10,000 elements.\r\n\r\nThe ratio of filter size to block size is computed without witness data for basic filters and with witness data for extended filters. Here is a summary table of filter size ratios *for blocks after height 150,000*:\r\n\r\n| Filter Type | Size Ratio Mean | Size Ratio Std Deviation | Mean Element Size (bits) |\r\n|------------|------------------|-------------------------|-------------------------|\r\n| Basic | 0.0338 | 0.0206 | 21.669 |\r\n| Extended | 0.0257 | 0.0174 | 21.691 |\r\n",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/3211283?v=4",
                        "login": "MeshCollider"
                    },
                    "body": "Big Concept ACK, excited about this",
                    "id": "MDEyOklzc3VlQ29tbWVudDM1OTk5NDk5Nw==",
                    "publishedAt": "2018-01-24T01:57:41Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12254#issuecomment-359994997"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "Should this be labeled consensus? This is a P2P change, right?\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2MDE1NDg5Ng==",
                    "publishedAt": "2018-01-24T14:36:42Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12254#issuecomment-360154896"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/881253?v=4",
                        "login": "jimpo"
                    },
                    "body": "@laanwj This is a data structure to be used in a P2P change. I first thought that it shouldn't be tagged \"Consensus\", but there's an argument to be made for it. It doesn't affect blockchain consensus, but it is kind of a softer P2P consensus change, where network clients (though not other full nodes) may disconnect/ban you if you serve incorrectly computed block filters. I'll let you make the call on the tag.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2MDIwNDc4Mw==",
                    "publishedAt": "2018-01-24T17:09:36Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12254#issuecomment-360204783"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/548488?v=4",
                        "login": "sipa"
                    },
                    "body": "Any fork that can be resolved by a P2P adaptor that speaks both protocols is not a consensus change.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2MDIwNTcwNg==",
                    "publishedAt": "2018-01-24T17:12:29Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12254#issuecomment-360205706"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "> This is a data structure to be used in a P2P change.\r\n\r\nThanks for the explanation. With \"consensus\" we mean the blockchain consensus rules code. Banning\\disconnecting is a P2P level issue. So changing the label to P2P.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2MDIwNzgzMA==",
                    "publishedAt": "2018-01-24T17:19:23Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12254#issuecomment-360207830"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "Great work @jimpo!\r\nBig Concept ACK,... will help to get this done.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2MDYyMzI2Mg==",
                    "publishedAt": "2018-01-25T22:33:27Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12254#issuecomment-360623262"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "Reviewed and tested a bit... nice, clean PR!\r\nI would wish we had more test vectors... ",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NDM4NTcyNw==",
                    "publishedAt": "2018-02-09T09:46:28Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12254#issuecomment-364385727"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/10217?v=4",
                        "login": "Sjors"
                    },
                    "body": "Concept ACK. Would it useful to add some (hidden) RPC commands so other developers can test it?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NDQ2MTM3Ng==",
                    "publishedAt": "2018-02-09T15:14:18Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12254#issuecomment-364461376"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/881253?v=4",
                        "login": "jimpo"
                    },
                    "body": "@jonasschnelli Thanks for reviewing. The test vectors were generated from a Go program I have that cross-validates against the [btcsuite implementation](https://github.com/Roasbeef/btcutil/pull/6). I can easily add any specific testnet blocks to the list of cases. The blocks were chosen to exercise certain edge cases (eg. empty filters, duplicate pushdatas, invalid output scripts), but the vectors aren't commented with which edges cases they exercise. I'll add the comments, because it seems worthwhile.\r\n\r\n@Sjors I'd definitely like to see RPC commands to fetch specific filters and filter headers, but I think it makes more sense to do that after adding the filter index, so that the RPC handlers just have to look up a precomputed filter/header. (So basically, in a subsequent PR).",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NDUxMzkwMg==",
                    "publishedAt": "2018-02-09T18:15:09Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12254#issuecomment-364513902"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/10217?v=4",
                        "login": "Sjors"
                    },
                    "body": "> @Sjors I'd definitely like to see RPC commands to fetch specific filters and filter headers, but I think it makes more sense to do that after adding the filter index, so that the RPC handlers just have to look up a precomputed filter/header. (So basically, in a subsequent PR).\r\n\r\nEven a proof-of-concept PR for that would be useful for review.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MzQ4OTUwMg==",
                    "publishedAt": "2018-03-15T19:07:04Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12254#issuecomment-373489502"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/881253?v=4",
                        "login": "jimpo"
                    },
                    "body": "@Sjors Here is a branch that exposes an RPC for testing/playing around: https://github.com/jimpo/bitcoin/tree/bip158-rpc. Is not intended to be merged for reasons stated [above](https://github.com/bitcoin/bitcoin/pull/12254#issuecomment-364513902).",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NDQ0NDU5MQ==",
                    "publishedAt": "2018-03-20T01:48:16Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12254#issuecomment-374444591"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "Concept ACK\r\n\r\nNice work!",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MTM4MzIwNg==",
                    "publishedAt": "2018-04-15T06:19:50Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12254#issuecomment-381383206"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/544777?v=4",
                        "login": "braydonf"
                    },
                    "body": "Has there been any work yet on using this to implement BIP 157? I've worked on indexing in the past, and could take a look at implementing it.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MTc5OTA0Mg==",
                    "publishedAt": "2018-04-17T01:20:09Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12254#issuecomment-381799042"
                }
            ],
            "totalCount": 13
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "6bf7e0b9f1671162ca4839a408ee9078e2c66d5f"
                    }
                }
            ],
            "totalCount": 12
        },
        "createdAt": "2018-01-24T01:42:05Z",
        "deletions": 0,
        "id": "MDExOlB1bGxSZXF1ZXN0MTY0NzM2MzI5",
        "labels": {
            "nodes": [
                {
                    "color": "006b75",
                    "id": "MDU6TGFiZWw5ODI5ODAwNw==",
                    "name": "P2P"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "number": 12254,
        "state": "OPEN",
        "title": "BIP 158: Compact Block Filters for Light Clients",
        "updatedAt": "2018-04-17T09:30:10Z"
    },
    {
        "additions": 10,
        "author": {
            "avatarUrl": "https://avatars1.githubusercontent.com/u/3445290?v=4",
            "login": "dongcarl",
            "url": "https://github.com/dongcarl"
        },
        "body": "- `-datadir` option specified.\r\n- Ask systemd to create and set the right mode for PID directory, configuration directory, and data directory.\r\n- Tell systemd our group so it will set the right owner for aforementioned directories.\r\n\r\nMore information: https://www.freedesktop.org/software/systemd/man/systemd.exec.html",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "Last update was in PR #10529 - please try to coordinate the changes with the people replying there.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2MDE1NDQyNg==",
                    "publishedAt": "2018-01-24T14:35:09Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12255#issuecomment-360154426"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/3445290?v=4",
                        "login": "dongcarl"
                    },
                    "body": "@laanwj Sorry I'm not sure I entirely know what you mean. Am I to bring up this PR on that thread or shall I tag them in a comment here?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2MDI0NTY0MA==",
                    "publishedAt": "2018-01-24T19:26:18Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12255#issuecomment-360245640"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
                        "login": "MarcoFalke"
                    },
                    "body": "I think the link was supposed to be  #12102",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2MDI1MDU3Ng==",
                    "publishedAt": "2018-01-24T19:43:18Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12255#issuecomment-360250576"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "> Sorry I'm not sure I entirely know what you mean. Am I to bring up this PR on that thread or shall I tag them in a comment here?\r\n\r\nEither, or both, is fine!",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2MTIwMDQ4MQ==",
                    "publishedAt": "2018-01-29T10:18:54Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12255#issuecomment-361200481"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/3445290?v=4",
                        "login": "dongcarl"
                    },
                    "body": "@laanwj @MarcoFalke should I be waiting for the other PR to get merged? Seems like the OP has been unresponsive.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2MzU3MDU2Mg==",
                    "publishedAt": "2018-02-06T21:28:47Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12255#issuecomment-363570562"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
                        "login": "MarcoFalke"
                    },
                    "body": "I think the only thing left is give people time to review and then merge both whenever they are reviewed.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2MzU3OTkwNQ==",
                    "publishedAt": "2018-02-06T22:02:31Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12255#issuecomment-363579905"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/3445290?v=4",
                        "login": "dongcarl"
                    },
                    "body": "Cool beans.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2MzU4MDQ3NA==",
                    "publishedAt": "2018-02-06T22:04:37Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12255#issuecomment-363580474"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/432385?v=4",
                        "login": "Flowdalic"
                    },
                    "body": "Thanks for your ping in https://github.com/bitcoin/bitcoin/pull/12102#issuecomment-362968939, here are my thoughts on this PR:\r\n\r\nThis PR contains the following changes to the systemd bitcoind.service file\r\n1. Provide `-datadir` argument to bitcoind via ExecStart\r\n2. Create various runtime directories and set their access mode\r\n3. Set the Group to bitcoin\r\n\r\nI deliberately did not put (1) in the systemd file as it can also be set via bitcoind's conf. I believe that it is good practice to put as much as possible in generic service config file (here: bitcoin.conf) as opposed to the system's service management facilities (here: systemd).\r\n\r\n(2) is typically done by the distribution's package manager and would hence override settings of distributions that don't use those standard directories (therefore those distributions would need to patch the upstream systemd file or use their own, which is not both not desirable). Nit: I don't think it is necessary to protect the runtime directory with 700 as there a no secrets in it. Also the used settings are only available with systemd >= 235.\r\n\r\n(3) is changes the behavior as it explicitly mentions the existence of a group named 'bitcoin', which may or may not exist. I believe that the behavior if 'Group' is not set, using the default group of the user, is more portable and should be used.\r\n\r\nFurther nits of this PR include that the order of `-pid` and `-conf` is changed for no reason, and the (correct)  comment telling us that the `/run/bitcoind` is owned by 'bitcoin' is removed.\r\n\r\nIn conclusion I am not provided with and don't see any compelling reasons to apply this.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2MzY4NDU3Ng==",
                    "publishedAt": "2018-02-07T07:48:33Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12255#issuecomment-363684576"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/3445290?v=4",
                        "login": "dongcarl"
                    },
                    "body": "@Flowdalic The spirit of my PR is to follow in the footsteps of `doc/init.md`. Which states that these changes are to be made.\r\n\r\n(1) `doc/init.md` states that the data directory should be at `/var/lib/bitcoind`, but if it's not indicated in the service file, the data directory is not at `/var/lib/bitcoind`, but rather at `~/.bitcoin`\r\n(2, 3) `doc/init.md` states that \"The configuration file, PID directory (if applicable) and data directory should all be owned by the bitcoin user and group. It is advised for security reasons to make the configuration file and data directory only readable by the bitcoin user and group. Access to bitcoin-cli and other bitcoind rpc clients can then be controlled by group membership.\". Perhaps according to the last sentence it'd be better to set the permissions to 750?\r\n\r\nIf someone was installing from source, and reading from `doc/init.md`, they would experience all kinds of confusion, as the data directory won't be where `doc/init.md` indicated it is. With 2 and 3 I think it's reasonable to think that this is optional, but my personal opinion is that what's in the repository should reflect the latest best practices and be consistent.\r\n\r\nI'm actually torn for what we should do for (2), while I believe it's better to have consistency on our end and have the distributions figure it out, I don't wanna break things for distributions with alternative `hier`s.\r\n\r\nHappy to discuss more :smile: ",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2ODI3NzI5Nw==",
                    "publishedAt": "2018-02-25T02:21:44Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12255#issuecomment-368277297"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/33541170?v=4",
                        "login": "randolf"
                    },
                    "body": "utACK.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MDI2MDA0Mw==",
                    "publishedAt": "2018-03-04T20:15:08Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12255#issuecomment-370260043"
                }
            ],
            "totalCount": 10
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "8b04bf40f7396518d638a7feacf2d8e8e9931780"
                    }
                }
            ],
            "totalCount": 1
        },
        "createdAt": "2018-01-24T05:35:50Z",
        "deletions": 2,
        "id": "MDExOlB1bGxSZXF1ZXN0MTY0NzYwNzY4",
        "labels": {
            "nodes": [
                {
                    "color": "ffffee",
                    "id": "MDU6TGFiZWwyMzE5OTQ1NTE=",
                    "name": "Scripts and tools"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "number": 12255,
        "state": "OPEN",
        "title": "Update bitcoin.service to conform to init.md",
        "updatedAt": "2018-03-04T20:15:08Z"
    },
    {
        "additions": 461,
        "author": {
            "avatarUrl": "https://avatars3.githubusercontent.com/u/250224?v=4",
            "login": "kallewoof",
            "url": "https://github.com/kallewoof"
        },
        "body": "This PR adds an optional (off by default) `-avoidpartialspends` flag, which changes coin select to use output groups rather than outputs, where each output group corresponds to all outputs with the same destination.\r\n\r\nIt is a privacy improvement, as each time you spend some output, any other output that is publicly associated with the destination (address) will also be spent at the same time, at the cost of fee increase for cases where coin select without group restriction would find a more optimal set of coins (see example below).\r\n\r\nFor regular use without address reuse, this PR should have no effect on the user experience whatsoever; it only affects users who, for some reason, have multiple outputs with the same destination (i.e. address reuse).\r\n\r\nNodes with this turned off will still try to avoid partial spending, if the fee of the resulting transaction is not greater than the fee of the original transaction.\r\n\r\nExample: a node has four outputs linked to two addresses `A` and `B`:\r\n\r\n* 1.0 btc to `A`\r\n* 0.5 btc to `A`\r\n* 1.0 btc to `B`\r\n* 0.5 btc to `B`\r\n\r\nThe node sends 0.2 btc to `C`. Without `-avoidpartialspends`, the following coin selection will occur:\r\n* 0.5 btc to `A` or `B` is picked\r\n* 0.2 btc is output to `C`\r\n* 0.3 - fee is output to (unique change address)\r\n\r\nWith `-avoidpartialspends`, the following will instead happen:\r\n* Both of (0.5, 1.0) btc to `A` or `B` is picked (one or the other pair)\r\n* 0.2 btc is output to `C`\r\n* 1.3 - fee is output to (unique change address)\r\n\r\nAs noted, the pro here is that, assuming nobody sends to the address after you spend from it, you will only ever use one address once. The con is that the transaction becomes slightly larger in this case, because it is overpicking outputs to adhere to the no partial spending rule.\r\n\r\nThis complements #10386, in particular it addresses @luke-jr and @gmaxwell's concerns in https://github.com/bitcoin/bitcoin/pull/10386#issuecomment-300667926 and https://github.com/bitcoin/bitcoin/pull/10386#issuecomment-302361381.\r\n\r\nTogether with `-avoidreuse`, this fully addresses the concerns in #10065 I believe.\r\n\r\n#12634 implements the chain limit value part of this PR.\r\n\r\n#12265 handles the `fundrawtransaction` test issues with not properly locking UTXOs that are later expected to be unspent.",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/1095675?v=4",
                        "login": "luke-jr"
                    },
                    "body": "It doesn't avoid reuse (you still need to sign for each input), and has security issues in the event of QC (but that's already a hypothetical big issue for us anyway), but seems useful anyway.\r\n\r\nIs this affected by the current coin control grouping defect, where it includes change in the same group as unrelated outputs? That would be a serious privacy risk, I think, since it would basically tell the world which output was change.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2MDA0ODcwMg==",
                    "publishedAt": "2018-01-24T07:52:03Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12257#issuecomment-360048702"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/250224?v=4",
                        "login": "kallewoof"
                    },
                    "body": "@luke-jr:\r\n> It doesn't avoid reuse (you still need to sign for each input), and has security issues in the event of QC (but that's already a hypothetical big issue for us anyway), but seems useful anyway.\r\n\r\nTogether with `-avoidreuse` in #10386 it avoids reuse, I think. Are there any cases I'm missing?\r\n\r\n> Is this affected by the current coin control grouping defect, where it includes change in the same group as unrelated outputs? That would be a serious privacy risk, I think, since it would basically tell the world which output was change.\r\n\r\nI'm not sure what this defect is. Is it described somewhere?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2MDA1MTkxNA==",
                    "publishedAt": "2018-01-24T08:07:43Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12257#issuecomment-360051914"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/92292?v=4",
                        "login": "ziggamon"
                    },
                    "body": "Does this also keep track of the change outputs in case more coins arrive later to `A`?\r\n\r\nImagine your example, where the coins from `A` go to `C`, with a change output to what we now call `D`.\r\n\r\nIf more coins arrive at `A` later, will they be spent together with `D`?\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2MDA5MjgyNA==",
                    "publishedAt": "2018-01-24T10:49:06Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12257#issuecomment-360092824"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/250224?v=4",
                        "login": "kallewoof"
                    },
                    "body": "@ziggamon Change outputs will go to a different destination so they will be considered separate from their inputs. In other words, `D` in your case will not be considered related to `A` in this case, and will not be associated with any coins arriving at `A` afterwards.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2MDExMzExOQ==",
                    "publishedAt": "2018-01-24T12:18:05Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12257#issuecomment-360113119"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/3020646?v=4",
                        "login": "NicolasDorier"
                    },
                    "body": "Some notes I am leaving here but to think about:\r\n\r\n* Making it default is the right way, but we should keep in mind that people relying on address reuse will pay way higher fee, so they need to be notified appropriately.\r\nVirtually all japanese exchanges are using address reuse (1 address per customer), this change would impact them a lot. I am unsure if they depend on Bitcoin Core Wallet though.\r\n* I am unsure if Bitcoin Core filter uneconomical outputs (filtering outputs which are more costly than their value to spend), but if bitcoin core implements this, we need to make sure this rule is always enforced at the Output level and not at the OutputGroup level. (Need to be enforced before you create the group)",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2MTU5NzkyMA==",
                    "publishedAt": "2018-01-30T13:47:27Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12257#issuecomment-361597920"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/250224?v=4",
                        "login": "kallewoof"
                    },
                    "body": "@NicolasDorier \r\n> Making it default is the right way, but we should keep in mind that people relying on address reuse will pay way higher fee, so they need to be notified appropriately.\r\n\r\nI think keeping it off by default for now is reasonable, until we get enough of an idea of the general consensus among people. I suspect, though, that most people won't care, as long as it doesn't give overly huge fee increases.\r\n\r\n> Virtually all japanese exchanges are using address reuse (1 address per customer), this change would impact them a lot. I am unsure if they depend on Bitcoin Core Wallet though.\r\n\r\nAlso some people have a \"permanent\" address that they receive payments to over a long period of time (e.g. charities). They also care little about privacy, usually, as their address is publicly tied to them anyway.\r\n\r\n> I am unsure if Bitcoin Core filter uneconomical outputs (filtering outputs which are more costly than their value to spend), but if bitcoin core implements this, we need to make sure this rule is always enforced at the Output level and not at the OutputGroup level. (Need to be enforced before you create the group)\r\n\r\nGood point. I think the dust limit check can be added to the grouping method fairly easily.\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2MTc5NzQ2Mg==",
                    "publishedAt": "2018-01-31T01:52:54Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12257#issuecomment-361797462"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/250224?v=4",
                        "login": "kallewoof"
                    },
                    "body": "I added `coincontrol.cpp` and moved `SetNull` into it, setting it to the default given in `DEFAULT_AVOIDPARTIALSPENDS`. This cleans up use as it is always a bool with an up-to-date value even when default is used.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2ODc1OTc4OQ==",
                    "publishedAt": "2018-02-27T06:16:50Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12257#issuecomment-368759789"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "Concept ACK",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MDU0NzYyNg==",
                    "publishedAt": "2018-03-05T20:08:55Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12257#issuecomment-370547626"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/3020646?v=4",
                        "login": "NicolasDorier"
                    },
                    "body": "Code Review ACK, though it would be nice to have the remaining TODO in the test done.\r\n\r\nI am also wondering potential performance problem for wallet with lots of UTXOs. I already heard complaints that core was getting quite slow at doing transactions when for big wallets. (though this could be worked around by asking people to turn on `avoidpartialspends`)",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MTE1OTI0OQ==",
                    "publishedAt": "2018-03-07T14:40:48Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12257#issuecomment-371159249"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/250224?v=4",
                        "login": "kallewoof"
                    },
                    "body": "> I am also wondering potential performance problem for wallet with lots of UTXOs. I already heard complaints that core was getting quite slow at doing transactions when for big wallets. (though this could be worked around by asking people to turn on avoidpartialspends)\r\n\r\nI think wallets with a ton of outputs would want to use avoidpartialspends as it would affect them minimally fee-wise, and it would improve privacy for odd-ball reuse.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MTE3OTEwMQ==",
                    "publishedAt": "2018-03-07T15:39:25Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12257#issuecomment-371179101"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/250224?v=4",
                        "login": "kallewoof"
                    },
                    "body": "I rebased this on top of the new coin selection algorithm.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MzMyNzA3OQ==",
                    "publishedAt": "2018-03-15T10:17:03Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12257#issuecomment-373327079"
                }
            ],
            "totalCount": 11
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "fdbdbe68ef69163ecd0e334b03cfabd907ce3c18"
                    }
                }
            ],
            "totalCount": 15
        },
        "createdAt": "2018-01-24T07:16:17Z",
        "deletions": 205,
        "id": "MDExOlB1bGxSZXF1ZXN0MTY0NzcyODI1",
        "labels": {
            "nodes": [
                {
                    "color": "08a781",
                    "id": "MDU6TGFiZWwxNDk0MjQ=",
                    "name": "Wallet"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "CONFLICTING",
        "mergedAt": null,
        "number": 12257,
        "state": "OPEN",
        "title": "[wallet] Use destination groups instead of coins in coin select",
        "updatedAt": "2018-04-12T01:03:46Z"
    },
    {
        "additions": 30,
        "author": {
            "avatarUrl": "https://avatars3.githubusercontent.com/u/250224?v=4",
            "login": "kallewoof",
            "url": "https://github.com/kallewoof"
        },
        "body": "`self.nodes[0]` creates an address which is watch-only-shared with `self.nodes[3]`. If `nodes[0]` spends the associated UTXO during any of its sends later, the watchonly test will fail, as `nodes[3]` now has insufficient funds.\r\n\r\nI ran into this in #12257 and this commit is in that PR as well, but I figured I'd split it out (and remove from there once/if merged).",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/250224?v=4",
                        "login": "kallewoof"
                    },
                    "body": "@promag That's a good point. I moved parts of it into util as `find_vout_for_address`.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2MDQyMDY5MQ==",
                    "publishedAt": "2018-01-25T10:08:49Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12265#issuecomment-360420691"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "utACK - can you please change the commit message of f3ebd07 to the format\r\n```\r\n<title (one line)>\r\n<empty line>\r\n<description... (possibly multiple lines)>\r\n```\r\nOtherwise tooling that parses the commit messages will make it into one long title.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NTk4NDg5MA==",
                    "publishedAt": "2018-02-15T16:37:40Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12265#issuecomment-365984890"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/250224?v=4",
                        "login": "kallewoof"
                    },
                    "body": "@laanwj Oops, didn't realize you needed an empty line. Fixed.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NjEyMDE5NQ==",
                    "publishedAt": "2018-02-16T01:36:16Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12265#issuecomment-366120195"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/250224?v=4",
                        "login": "kallewoof"
                    },
                    "body": "@jnewbery Squashed. I kept them split to make it obvious to reviewers that I am adding a new utility function, not just fixing something in a specific test.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3OTE0NTU0OA==",
                    "publishedAt": "2018-04-06T04:34:44Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12265#issuecomment-379145548"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
                        "login": "promag"
                    },
                    "body": "utACK 891beb0.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3OTIzMTE2NQ==",
                    "publishedAt": "2018-04-06T11:54:21Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12265#issuecomment-379231165"
                }
            ],
            "totalCount": 5
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "891beb0f8a09810b179e39a680b579c2f6516db7"
                    }
                }
            ],
            "totalCount": 1
        },
        "createdAt": "2018-01-25T02:04:40Z",
        "deletions": 1,
        "id": "MDExOlB1bGxSZXF1ZXN0MTY1MDEyMTQ1",
        "labels": {
            "nodes": [
                {
                    "color": "d4c5f9",
                    "id": "MDU6TGFiZWw2Mjk2MzUxNg==",
                    "name": "Tests"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "number": 12265,
        "state": "OPEN",
        "title": "[test] fundrawtransaction: lock watch-only shared address",
        "updatedAt": "2018-04-10T13:28:32Z"
    },
    {
        "additions": 176,
        "author": {
            "avatarUrl": "https://avatars1.githubusercontent.com/u/417043?v=4",
            "login": "theuni",
            "url": "https://github.com/theuni"
        },
        "body": "Addresses #11368. This adds a file descriptor limiter for the http server. It's possible for the open fd count to potentially exhaust the user's defined limit if not checked.\r\n\r\nI'm having a hard time reproducing the issue now, I'm not sure what's changed in my environment. I was finally able to hit it using some pretty nasty tricks, but I'm less worried about this now for 0.16.\r\n\r\nI do think it's worth considering taking de6cfceafba33feb77c169135c5ed70bd9d09ca4, 5f5099ac57375bdf345df0f6ebcb6efdd698f4f0, and (part of) 3b0ebb3578e89e3c4b5c0003d159cb0b04c2e86c for 0.16, though, as they help significantly and are easy to review. I'm happy to break that out into a new PR if necessary.",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "This needs to be tested by those experiencing the issue: @KanoczTomas @vii",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2MTA0ODE0MA==",
                    "publishedAt": "2018-01-28T09:03:12Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12274#issuecomment-361048140"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
                        "login": "promag"
                    },
                    "body": "Concept ACK.\r\n\r\nWhy don't understand why you need dc53bec, seems like an unnecessary refactor.\r\n\r\n5f5099a and 3b0ebb3 could be in a separate PR, are simple and make sense even without the fd exhaustion problem.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2MTM5MzYxOA==",
                    "publishedAt": "2018-01-29T21:32:08Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12274#issuecomment-361393618"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/417043?v=4",
                        "login": "theuni"
                    },
                    "body": "@promag dc53bec is just a small chunk of c56cf1a that seemed reasonable on its own.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2MTQwOTM3Mw==",
                    "publishedAt": "2018-01-29T22:30:18Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12274#issuecomment-361409373"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/37696?v=4",
                        "login": "vii"
                    },
                    "body": "Awesome! The defer accept tweak will defend against typical inadvertent denial of services\r\n\r\nNote that the original issue can still be activated depending on the file descriptor limit that is set, as the budgeting in the daemon does not account for this usage or the usage in the db code - see\r\nhttps://github.com/bitcoin/bitcoin/pull/11785\r\n\r\nTo test it, something like this slowhttptest program\r\n\r\n```\r\nslowhttptest -c 40000 -r 1000 -u 'http://127.0.0.1:8332/rest/block/000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f.json'\r\n```\r\n\r\nor another tool which can simulate a slowloris (HTTP connection header trickling) attack",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2MTQ3NTUzMw==",
                    "publishedAt": "2018-01-30T04:42:48Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12274#issuecomment-361475533"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "Sorry, I'm removing the 0.16.0 milestone here. As it introduces many new concepts and work-arounds it is hard to review last-minute, the problem is hard to trigger in the first place, and it is not a regression since 0.15. Also according to @vii it doesn't solve the issue completely. I think getting the fd issue fixed properly should be a focus for 0.16.1.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2MTU2NTA5NA==",
                    "publishedAt": "2018-01-30T11:27:45Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12274#issuecomment-361565094"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/863730?v=4",
                        "login": "fanquake"
                    },
                    "body": "@eklitzke I can still produce a crash with these changes on top of https://github.com/bitcoin/bitcoin/commit/2405ce1df043f778b8efb9205009500cbc17313a:\r\n\r\n<img width=\"770\" alt=\"screenshot 2018-03-22 at 12 04 52 am\" src=\"https://user-images.githubusercontent.com/863730/37721599-e5febea4-2d64-11e8-9e43-6836ab0ef507.png\">\r\n\r\n```\r\ndate='2015-09-16T16:18:02Z' progress=0.269372 cache=313.8MiB(2336744txo)\r\n2018-03-21T16:04:44Z UpdateTip: new best=00000000000000000c7112c52408963acb80e1fedc71005859d6ef9a22f84d79 height=374820 version=0x00000003 log2_work=83.354829 tx=84036580 date='2015-09-16T16:20:12Z' progress=0.269373 cache=313.8MiB(2337189txo)\r\n2018-03-21T16:04:44Z LevelDB read failure: IO error: /Users/fanquake/Library/Application Support/Bitcoin/chainstate/019338.ldb: Too many open files\r\n2018-03-21T16:04:44Z Fatal LevelDB error: IO error: /Users/fanquake/Library/Application Support/Bitcoin/chainstate/019338.ldb: Too many open files\r\n2018-03-21T16:04:44Z You can use -debug=leveldb to get more complete diagnostic messages\r\n2018-03-21T16:04:44Z libevent: Error from accept() call: Too many open files\r\n2018-03-21T16:04:44Z libevent: Error from accept() call: Too many open files\r\n2018-03-21T16:04:44Z libevent: Error from accept() call: Too many open files\r\n2018-03-21T16:04:44Z libevent: Error from accept() call: Too many open files\r\n```\r\n\r\nWhen last discussed with @theuni he was going to revamp these changes.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NDk5NjY0OQ==",
                    "publishedAt": "2018-03-21T16:08:22Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12274#issuecomment-374996649"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/2734?v=4",
                        "login": "eklitzke"
                    },
                    "body": "@fanquake Interesting -- do you have a script to stress test it to induce that condition? Or does that happen during normal operation?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NTEyMzU1Nw==",
                    "publishedAt": "2018-03-21T22:59:54Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12274#issuecomment-375123557"
                }
            ],
            "totalCount": 7
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "cdcc0ed01195bf88532a9afc905593833a7af43c"
                    }
                }
            ],
            "totalCount": 6
        },
        "createdAt": "2018-01-26T04:25:11Z",
        "deletions": 22,
        "id": "MDExOlB1bGxSZXF1ZXN0MTY1Mjg4MzA2",
        "labels": {
            "nodes": [
                {
                    "color": "0052cc",
                    "id": "MDU6TGFiZWw5ODI3OTE3Nw==",
                    "name": "RPC/REST/ZMQ"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "number": 12274,
        "state": "OPEN",
        "title": "http: avoid fd exhaustion",
        "updatedAt": "2018-03-21T22:59:54Z"
    },
    {
        "additions": 49,
        "author": {
            "avatarUrl": "https://avatars2.githubusercontent.com/u/7133040?v=4",
            "login": "ryanofsky",
            "url": "https://github.com/ryanofsky"
        },
        "body": "Return more information about scan status from ScanForWalletTransactions and\r\ntry to describe the return value more clearly.\r\n\r\nThere is a slight change in behavior here where rescans that end early due to a\r\nreorg will no longer trigger errors. (I incorrectly suggested that that they\r\nshould trigger errors in the PR where this behavior was introduced:\r\nhttps://github.com/bitcoin/bitcoin/pull/11281#discussion_r163070403)",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/7133040?v=4",
                        "login": "ryanofsky"
                    },
                    "body": "I was originally going to follow up on this change by making RescanFromTime rescan any missed blocks if a scan stopped early because of a reorg (8add443be1c4b82f75d0eca4763fc928b8dbcf08), but I don't think this should be needed because notifications from the reorg should scan all the relevant blocks.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2MDgxMTUzMg==",
                    "publishedAt": "2018-01-26T15:15:21Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12275#issuecomment-360811532"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
                        "login": "promag"
                    },
                    "body": "[Dejavu](https://github.com/bitcoin/bitcoin/pull/9827).",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2MDgxMjg5Mw==",
                    "publishedAt": "2018-01-26T15:19:56Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12275#issuecomment-360812893"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "Thanks for the follow up.\r\nConcept ACK.\r\nDo we need this for 0.16?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2MDg2MTE2Nw==",
                    "publishedAt": "2018-01-26T18:12:26Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12275#issuecomment-360861167"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/7133040?v=4",
                        "login": "ryanofsky"
                    },
                    "body": "> Do we need this for 0.16?\r\n\r\nI don't think it should block 0.16, but technically there is a minor regression in 0.16 which this fixes.\r\n\r\nSince #11281, if you call importmulti with rescan=True during a re-org and are very unlucky, there is a chance you could see \"Rescan failed for key...\" errors returned without this fix. The errors are spurious and do not indicate a real problem. It'd also be possible the fix the problem with a one line-fix, just dropping this line:\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/2ae7cf8ef5be67e085abc1b1dc71bc44865a71b3/src/wallet/wallet.cpp#L1698",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2MDg2NDU3Ng==",
                    "publishedAt": "2018-01-26T18:25:36Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12275#issuecomment-360864576"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "> Return more information about scan status from ScanForWalletTransactions and\r\ntry to describe the return value more clearly.\r\n\r\nWhere is this extra return information (intended to) be used?\r\n\r\n> Edit: have you considered keeping the return value but adding a CWallet::ScanResult* scan_result = nullptr parameter?\r\n\r\nI prefer returning a tuple or structure to that kind of quasi out-args.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3ODg1NjU1MA==",
                    "publishedAt": "2018-04-05T08:18:07Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12275#issuecomment-378856550"
                }
            ],
            "totalCount": 5
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "77a03151b56a56ddd09b886a8184bad594b317f1"
                    }
                }
            ],
            "totalCount": 1
        },
        "createdAt": "2018-01-26T15:05:23Z",
        "deletions": 21,
        "id": "MDExOlB1bGxSZXF1ZXN0MTY1Mzg0MDEw",
        "labels": {
            "nodes": [
                {
                    "color": "08a781",
                    "id": "MDU6TGFiZWwxNDk0MjQ=",
                    "name": "Wallet"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "number": 12275,
        "state": "OPEN",
        "title": "Improve ScanForWalletTransactions return value",
        "updatedAt": "2018-04-11T15:58:12Z"
    },
    {
        "additions": 1433,
        "author": {
            "avatarUrl": "https://avatars2.githubusercontent.com/u/10982987?v=4",
            "login": "annanay25",
            "url": "https://github.com/annanay25"
        },
        "body": "Adds minimal support for NATPMP (and removes dependency on external UPnP library). Reference implementation in `miniupnp/libnatpmp`.\r\n\r\nWIP but aims to fix #11902 .",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/649246?v=4",
                        "login": "TheBlueMatt"
                    },
                    "body": "I assume libnatpmp should be subtree'd or we should still use the version linked-against in miniupnpc?\n\nOn January 28, 2018 8:15:18 PM UTC, Annanay Agarwal <notifications@github.com> wrote:\n>Adds minimal support for NATPMP (and removes dependency on external\n>UPnP library). Reference implementation in `miniupnp/libnatpmp`.\n>\n>WIP but aims to fix #11902 .\n>You can view, comment on, or merge this pull request online at:\n>\n>  https://github.com/bitcoin/bitcoin/pull/12288\n>\n>-- Commit Summary --\n>\n>* Add basic NATPMP support, get gateway by file parsing,\n>getpublicaddress, map public-private port\n>\n>-- File Changes --\n>\n>    A src/getgateway.c (570)\n>    A src/getgateway.h (47)\n>    A src/natpmp.c (354)\n>    A src/natpmp.h (182)\n>    M src/net.cpp (187)\n>    A src/wingettimeofday.c (60)\n>    A src/wingettimeofday.h (36)\n>\n>-- Patch Links --\n>\n>https://github.com/bitcoin/bitcoin/pull/12288.patch\n>https://github.com/bitcoin/bitcoin/pull/12288.diff\n>\n>-- \n>You are receiving this because you are subscribed to this thread.\n>Reply to this email directly or view it on GitHub:\n>https://github.com/bitcoin/bitcoin/pull/12288\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2MTA5MzcxMw==",
                    "publishedAt": "2018-01-28T20:37:39Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12288#issuecomment-361093713"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/548488?v=4",
                        "login": "sipa"
                    },
                    "body": "This PR just copies 6 files from libnatpmp into the repository. Perhaps this is a sufficiently low amount of code that we want to do this (like with tinyformat), but if so, putting them in a subdirectory together may be better.\n\nI haven't checked how much changes were necessary to them, but if it was 0, perhaps we can subtree but still build them directly from our build system (as opposed to building as a library and linking statically).",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2MTA5NDA3MQ==",
                    "publishedAt": "2018-01-28T20:42:00Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12288#issuecomment-361094071"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/10982987?v=4",
                        "login": "annanay25"
                    },
                    "body": "There are minor changes to the copied files, some including changing the `WIN32` macro, and others according to the coding guidelines like changing `NULL` to `nullptr`, etc.\r\n\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2MTE0NTk5Nw==",
                    "publishedAt": "2018-01-29T05:45:44Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12288#issuecomment-361145997"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "libnatpmp seems to have been virtually unmaintained a while (last commit was Mar 15, 2016), so I think it doesn't matter whether we use 'subtree'. It might be easier to just include the (small) implementation files into our build system and see if we can maintain it ourselves, cutting out parts we don't need.\r\n\r\nAt least now we don't have to carry the `.java`s.\r\n\r\n> putting them in a subdirectory together may be better.\r\n\r\nI agree with that - whatever you do, please don't put them in `src/` root.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2MTE4MDYyMA==",
                    "publishedAt": "2018-01-29T09:02:34Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12288#issuecomment-361180620"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "This is failing the travis build - did you perhaps forget to add `natpmp.h` to the makefile, so that it's not included in make dist?\r\n```\r\nMaking check in src\r\nmake[1]: Entering directory `/home/travis/build/bitcoin/bitcoin/build/bitcoin-i686-w64-mingw32/src'\r\nmake[2]: Entering directory `/home/travis/build/bitcoin/bitcoin/build/bitcoin-i686-w64-mingw32/src'\r\n  CXX      libbitcoin_server_a-net.o\r\n  CXX      libbitcoin_server_a-noui.o\r\n  CXX      libbitcoin_server_a-pow.o\r\n  CXX      libbitcoin_server_a-rest.o\r\nnet.cpp:31:20: fatal error: natpmp.h: No such file or directory\r\n #include <natpmp.h>\r\n                    ^\r\ncompilation terminated.\r\nmake[2]: *** [libbitcoin_server_a-net.o] Error 1\r\nmake[2]: *** Waiting for unfinished jobs....\r\nmake[2]: Leaving directory `/home/travis/build/bitcoin/bitcoin/build/bitcoin-i686-w64-mingw32/src'\r\nmake[1]: *** [check-recursive] Error 1\r\nmake[1]: Leaving directory `/home/travis/build/bitcoin/bitcoin/build/bitcoin-i686-w64-mingw32/src'\r\nmake: *** [check-recursive] Error 1\r\n```",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NDE1OTc4OA==",
                    "publishedAt": "2018-02-08T16:06:28Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12288#issuecomment-364159788"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/10982987?v=4",
                        "login": "annanay25"
                    },
                    "body": "@laanwj ;\r\n\r\nI'm a little confused with the name mangling happening here. The `src/natpmp/*.c` files have `extern \"C\"` in the function prototypes, which confirms no name mangling (confirmed this with `nm src/natpmp/libbitcoin_server_a-natpmp.o | grep initnatpmp`), but C++ object files are looking for mangled function names?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MjU3MzQxNQ==",
                    "publishedAt": "2018-03-13T07:36:44Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12288#issuecomment-372573415"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "> but C++ object files are looking for mangled function names?\r\n\r\nYou need the extern \"C\" in the header, not in the implementation files.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MDM5NzA4OA==",
                    "publishedAt": "2018-04-11T09:59:11Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12288#issuecomment-380397088"
                }
            ],
            "totalCount": 7
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "fcd026b8e0313a7a46e29ddca8e97274e97b08ae"
                    }
                }
            ],
            "totalCount": 21
        },
        "createdAt": "2018-01-28T20:15:11Z",
        "deletions": 70,
        "id": "MDExOlB1bGxSZXF1ZXN0MTY1NTg0OTQw",
        "labels": {
            "nodes": [
                {
                    "color": "006b75",
                    "id": "MDU6TGFiZWw5ODI5ODAwNw==",
                    "name": "P2P"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "number": 12288,
        "state": "OPEN",
        "title": "[WIP][NET] Add NATPMP support.",
        "updatedAt": "2018-04-11T10:59:22Z"
    },
    {
        "additions": 23,
        "author": {
            "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
            "login": "promag",
            "url": "https://github.com/promag"
        },
        "body": "Break the function into 2 loops so that:\r\n - the fast test is executed first for all inputs.\r\n - `IsMine(txout)` is only executed after all inputs are checked.\r\n\r\nThis is relevant since after #12296 `CWallet::IsAllFromMe` is called from the UI.",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "This needs benchmarking/profliling results. As discussed on IRC, it's not clear how to evaluate changes like this right now.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2MTg2NTIwMA==",
                    "publishedAt": "2018-01-31T08:54:54Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12297#issuecomment-361865200"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
                        "login": "promag"
                    },
                    "body": "If necessary I can work out some benchmarking. Please let me know.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2MzI1NDMxMQ==",
                    "publishedAt": "2018-02-05T23:16:46Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12297#issuecomment-363254311"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
                        "login": "promag"
                    },
                    "body": "@ryanofsky also took the opportunity to push a commit replacing `LOCK(cs_wallet)` with `AssertLockHeld(cs_wallet)`. I can push to a new PR if preferable.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2MzI1ODQxNQ==",
                    "publishedAt": "2018-02-05T23:36:32Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12297#issuecomment-363258415"
                }
            ],
            "totalCount": 3
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "6037efd7c5087b1e53f426c0e48595dc073da9d3"
                    }
                }
            ],
            "totalCount": 2
        },
        "createdAt": "2018-01-29T23:34:29Z",
        "deletions": 10,
        "id": "MDExOlB1bGxSZXF1ZXN0MTY1ODQ4MjU4",
        "labels": {
            "nodes": [
                {
                    "color": "08a781",
                    "id": "MDU6TGFiZWwxNDk0MjQ=",
                    "name": "Wallet"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "number": 12297,
        "state": "OPEN",
        "title": "Improve CWallet::IsAllFromMe for false results",
        "updatedAt": "2018-02-05T23:36:32Z"
    },
    {
        "additions": 4,
        "author": {
            "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
            "login": "promag",
            "url": "https://github.com/promag"
        },
        "body": "Trivial change that avoids computing the transaction debit by early returning when an input is debit.",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "Does have some overlap with #9167, I think",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2MTUzMjY2MA==",
                    "publishedAt": "2018-01-30T09:34:08Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12299#issuecomment-361532660"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
                        "login": "promag"
                    },
                    "body": "> Does have some overlap with #9167, I think\r\n\r\nThanks @laanwj I'll take look, but that one looks unmaintained.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2MTUzOTc0Mw==",
                    "publishedAt": "2018-01-30T09:55:33Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12299#issuecomment-361539743"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "> Thanks @laanwj I'll take look, but that one looks unmaintained.\r\n\r\nIt does have ACKs already, so it's just a matter of pushing it over the finish.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2MTU0MjcxMw==",
                    "publishedAt": "2018-01-30T10:04:33Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12299#issuecomment-361542713"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "Like for #12297, we need some load test or benchmark or profiling to evaluate this change.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2MTg2NTc4NQ==",
                    "publishedAt": "2018-01-31T08:57:08Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12299#issuecomment-361865785"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
                        "login": "promag"
                    },
                    "body": "Self review, this is incomplete, missing refactor to `CWalletTx::IsFromMe`.\r\n\r\n> Does have some overlap with #9167, I think\r\n\r\n@laanwj I don't think so.\r\n\r\n> we need some load test or benchmark or profiling to evaluate this change.\r\n\r\n`CWallet::IsFromMe` is only called in `CWallet::AddToWalletIfInvolvingMe`:\r\nhttps://github.com/bitcoin/bitcoin/blob/67447ba06057b8e83f962c82491d2fe6c5211f50/src/wallet/wallet.cpp#L1039\r\n\r\nI only claim improvement for positive results \ud83d\ude04 which should be near to none considering the blockchain.\r\n\r\n`CWallet::IsMine(tx)` already early returns when an input is mine. Sounds reasonable to do the same in `IsFromMe(tx)`.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NDMwNjgwMg==",
                    "publishedAt": "2018-02-09T01:30:24Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12299#issuecomment-364306802"
                }
            ],
            "totalCount": 5
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "ae7c3635293930c804248954ede4bf8353431ed9"
                    }
                }
            ],
            "totalCount": 1
        },
        "createdAt": "2018-01-30T00:34:45Z",
        "deletions": 1,
        "id": "MDExOlB1bGxSZXF1ZXN0MTY1ODU3MTE0",
        "labels": {
            "nodes": [
                {
                    "color": "08a781",
                    "id": "MDU6TGFiZWwxNDk0MjQ=",
                    "name": "Wallet"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "number": 12299,
        "state": "OPEN",
        "title": "Improve CWallet::IsFromMe for positive results",
        "updatedAt": "2018-02-09T01:30:25Z"
    },
    {
        "additions": 37,
        "author": {
            "avatarUrl": "https://avatars2.githubusercontent.com/u/1307806?v=4",
            "login": "jeffrade",
            "url": "https://github.com/jeffrade"
        },
        "body": "Implementation based on comments/requirements in issue [#11901](https://github.com/bitcoin/bitcoin/issues/11901) quoted below:\r\n\r\n - add a configuration option '--enable-mainnet' which defaults to false\r\n - When true, behavior is unaffected (is set to true by the gitian builds).\r\n - When false (the default for someone cloning the repo, building with no configuration options), the resulting binary will require new 'enablemainnet' option to launch the daemon or Qt GUI with main net.\r\n - This prevents developers or downstream system integrators from accidentally corrupting main net\r\n - If the configure option is used, mainnet should be the default.\r\n - Only if configured with --disable-mainnet (default) should a command-line option be required.\r\n\r\nFixes [#11901](https://github.com/bitcoin/bitcoin/issues/11901)\r\n\r\n",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/548488?v=4",
                        "login": "sipa"
                    },
                    "body": "If we're doing this, I would prefer it if by default the client would fail to start up (with a message \"mainnet disabled\" or so), unless you explicitly tell it to use testnet or regtest.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2MTQ2MDAxNQ==",
                    "publishedAt": "2018-01-30T02:50:36Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12300#issuecomment-361460015"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/1307806?v=4",
                        "login": "jeffrade"
                    },
                    "body": "@sipa Instead of the final [return statement](https://github.com/jeffrade/bitcoin/blob/4a236e8b8d627831680698e548e03e9dab7011ff/src/chainparamsbase.cpp#L108) in `ChainNameFromCommandLine()`, something like this below:\r\n\r\n```\r\nthrow std::runtime_error(\"You must specify a chain. -regtest, -testnet, or -mainnet.\");\r\n```",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2MTQ2MjM5MQ==",
                    "publishedAt": "2018-01-30T03:05:36Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12300#issuecomment-361462391"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/548488?v=4",
                        "login": "sipa"
                    },
                    "body": "@jeffrade Alternatively, you leave in the mainnet definition and logic, but in init.cpp check whether the chosen chain doesn't happen to be mainnet when it's not supposed to, and exit with a clean error. Exiting by throwing an exception is really only for exceptional situations.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2MTQ2MzY1OA==",
                    "publishedAt": "2018-01-30T03:14:13Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12300#issuecomment-361463658"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "I'd also prefer an explicit error (and exit) when running mainnet without `--enable-mainnet` - silently running on testnet is going to confuse the hell out of people and probably waste a lot of time.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2MTUyMDA4OQ==",
                    "publishedAt": "2018-01-30T08:54:58Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12300#issuecomment-361520089"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
                        "login": "MarcoFalke"
                    },
                    "body": "Agree that InitError makes the most sense instead of silently assuming a chain/network.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2MTU4NTk4NA==",
                    "publishedAt": "2018-01-30T12:59:37Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12300#issuecomment-361585984"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/1307806?v=4",
                        "login": "jeffrade"
                    },
                    "body": "Pushed changes based on reviews from @sipa and @laanwj ",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2MTgwNjM3Nw==",
                    "publishedAt": "2018-01-31T02:45:53Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12300#issuecomment-361806377"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "> This prevents developers or downstream system integrators from accidentally corrupting main net\r\n\r\nIs this true? Do we have evidence that downstream integrators do corrupt main net rather then giving some useful test cases how to make the p2p layer more robust?\r\n\r\nForgetting a configuration option (in this case --enable-mainnet) would lead to a not-in-production useful software. This is uncommon behaviour.\r\n\r\nCodewise it looks good to me.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2MTgxMzA2NA==",
                    "publishedAt": "2018-01-31T03:32:18Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12300#issuecomment-361813064"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/863730?v=4",
                        "login": "fanquake"
                    },
                    "body": "cc @maaku ",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2MTgxNDAyMQ==",
                    "publishedAt": "2018-01-31T03:38:51Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12300#issuecomment-361814021"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "> Is this true? Do we have evidence that downstream integrators do corrupt main net rather then giving some useful test cases how to make the p2p layer more robust?\r\n\r\nFrom what I understand from discussions in this direction is that it's not about *corrupting mainnet*. It's not the network at risk but the risk of running unreleased software in production. E.g. people (building from source) accidentally run master instead of a release branch, taking more risks with their coins than they intend to.\r\n\r\nI'm neutral on this - we already have the `_CLIENT_VERSION_IS_RELEASE` and associated warning.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2MTg4NDE2OQ==",
                    "publishedAt": "2018-01-31T10:06:27Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12300#issuecomment-361884169"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/1307806?v=4",
                        "login": "jeffrade"
                    },
                    "body": "> Forgetting a configuration option (in this case --enable-mainnet) would lead to a not-in-production useful software. This is uncommon behaviour.\r\n\r\nJust a thought, but one solution is we force users to explicitly choose `-mainnet` when starting `bitcoind` if they did not use the `--enable_mainnet` config.  We can add `-mainnet` as an option [here](https://github.com/bitcoin/bitcoin/blob/595a7bab23bc21049526229054ea1fff1a29c0bf/src/chainparamsbase.cpp#L90) and then also check if not present in `init.cpp`:\r\n\r\n```\r\n  if (chain == CBaseChainParams::MAIN && !gArgs.GetBoolArg(\"-mainnet\", false))\r\n    return InitError(\"You did not configure with --enable-mainnet. You must set -testnet, -regtest or -mainnet option.\");\r\n```",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2MjA2NjA0OQ==",
                    "publishedAt": "2018-01-31T20:50:08Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12300#issuecomment-362066049"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/548488?v=4",
                        "login": "sipa"
                    },
                    "body": "@jeffrade I like that idea. When compiling with --enable-mainnet, the default chain is mainnet. Otherwise, there is no default and you must choose one.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2MjA3NDQ5OQ==",
                    "publishedAt": "2018-01-31T21:20:54Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12300#issuecomment-362074499"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1008458?v=4",
                        "login": "jtimon"
                    },
                    "body": "> We can add -mainnet as an option here\r\n\r\nI've done something similar in https://github.com/bitcoin/bitcoin/pull/8994/commits/46391b935fd68d4800170f11bd6a3426bffc96ed feel free to cherry pick or copy that commit if more people like the idea.\r\n\r\nWhether with -mainnet or with -chain=main, I agree it should be possible to run mainnet even when the --enable_mainnet config is not used.\r\n\r\nPerhaps a simple way to implement this is by returning ChainNameFromCommandLine CBaseChainParams::MAIN as default only when --enable_mainnet, otherwise it throws a std::runtime_error asking the user to specify the chain explicitly.\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2MjA3NjMzMA==",
                    "publishedAt": "2018-01-31T21:27:52Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12300#issuecomment-362076330"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/1307806?v=4",
                        "login": "jeffrade"
                    },
                    "body": "@jtimon Thanks, will look through your commit.  Was going to simply add the new `fMainNet` boolean and the corresponding `if` block to check (see snippet below).  If none are set, will fall through and `init.cpp` will pick it up and throw the `InitError()`.\r\n\r\n```\r\nstd::string ChainNameFromCommandLine()\r\n{\r\n    bool fRegTest = gArgs.GetBoolArg(\"-regtest\", false);\r\n    bool fTestNet = gArgs.GetBoolArg(\"-testnet\", false);\r\n    bool fMainNet = gArgs.GetBoolArg(\"-mainnet\", false);\r\n\r\n    if (fTestNet && fRegTest)\r\n        throw std::runtime_error(\"Invalid combination of -regtest and -testnet.\");\r\n    if (fRegTest)\r\n        return CBaseChainParams::REGTEST;\r\n    if (fTestNet)\r\n        return CBaseChainParams::TESTNET;\r\n    if (fMainNet)\r\n        return CBaseChainParams::MAINNET;\r\n    return CBaseChainParams::MAIN;\r\n}\r\n```",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2MjA4MDgwMw==",
                    "publishedAt": "2018-01-31T21:43:52Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12300#issuecomment-362080803"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1008458?v=4",
                        "login": "jtimon"
                    },
                    "body": "I was thinking more on something like this:\r\n\r\n```\r\nstd::string ChainNameFromCommandLine()\r\n{\r\n    bool fRegTest = gArgs.GetBoolArg(\"-regtest\", false);\r\n    bool fTestNet = gArgs.GetBoolArg(\"-testnet\", false);\r\n    bool fMainNet = gArgs.GetBoolArg(\"-mainnet\", false);\r\n\r\n    if (fTestNet + fRegTest + fMainNet > 1)\r\n        throw std::runtime_error(\"Invalid combination of -mainnet, -regtest and -testnet.\");\r\n    if (fRegTest)\r\n        return CBaseChainParams::REGTEST;\r\n    if (fTestNet)\r\n        return CBaseChainParams::TESTNET;\r\n#ifndef ENABLE_MAINNET\r\n    if (!fMainNet)\r\n        throw std::runtime_error(\"You did not configure with --enable-mainnet. You must set -mainnet, -testnet or -regtest option.\");\r\n#endif\r\n    return CBaseChainParams::MAIN;\r\n}\r\n```\r\n\r\nThis way you don't need to touch init at all, the init for this is already handled in src/qt/bitcoin.cpp, src/bitcoind.cpp, src/bitcoin-tx.cpp and src/bitcoin-cli.cpp, so no need to touch src/init.cpp if you do it here in ChainNameFromCommandLine(). Besides I think this way it stays better encapsulated.\r\n\r\nOr alternatively (my preference), something like:\r\n\r\n```\r\nstd::string ChainNameFromCommandLine()\r\n{\r\n    bool fRegTest = gArgs.GetBoolArg(\"-regtest\", false);\r\n    bool fTestNet = gArgs.GetBoolArg(\"-testnet\", false);\r\n    bool is_chain_arg_set = gArgs.IsArgSet(\"-chain\");\r\n\r\n    if (is_chain_arg_set + fRegTest + fTestNet > 1) {\r\n        throw std::runtime_error(\"Invalid combination of -regtest, -testnet and -chain. Can use at most one.\");\r\n    }\r\n    if (fRegTest)\r\n        return CBaseChainParams::REGTEST;\r\n    if (fTestNet)\r\n        return CBaseChainParams::TESTNET;\r\n\r\n#ifndef ENABLE_MAINNET\r\n    if (!is_chain_arg_set) {\r\n        throw std::runtime_error(\"You did not configure with --enable-mainnet. You must set -chain, -testnet or -regtest option.\");\r\n    }\r\n#endif\r\n    return gArgs.GetArg(\"-chain\", CBaseChainParams::MAIN);\r\n}\r\n```\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2MjExNzY3Ng==",
                    "publishedAt": "2018-02-01T00:30:04Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12300#issuecomment-362117676"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/1307806?v=4",
                        "login": "jeffrade"
                    },
                    "body": "@jtimon throwing the `std::runtime_error` and checking for `ENABLE_MAINNET` in `ChainNameFromCommandLine()` is what I originally had implemented.  But received feedback and there was consensus to move logic into `init.cpp`.  See comments above from everyone else above. ",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2MjExODk2MA==",
                    "publishedAt": "2018-02-01T00:36:44Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12300#issuecomment-362118960"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1008458?v=4",
                        "login": "jtimon"
                    },
                    "body": "Yes, but unless I'm missing something everybody else is wrong and doing it there won't result in a silent exit but on the error being printed and then existing due to the try {} catch structures surrounding ```ChainNameFromCommandLine()``` calls in src/qt/bitcoin.cpp, src/bitcoind.cpp, src/bitcoin-tx.cpp and src/bitcoin-cli.cpp. In the case of running the qt GUI it is my believe that the error will even be shown in a popup window.\r\n\r\nActually checking that I am right is quite simple: just try both -testnet -regtest with either bitcoind, bitcoin-cli, bitcoin-tx or bitcoin-qt and you will see that throwing a std::runtime_error from this function doesn't produce a silent error but the expected behaviour.\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2MjEyMTIyOQ==",
                    "publishedAt": "2018-02-01T00:49:44Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12300#issuecomment-362121229"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/1307806?v=4",
                        "login": "jeffrade"
                    },
                    "body": "@jtimon I have been testing with bitcoind and getting expected results, but need to test more.  I will push a commit based on your feedback/branch and from others shortly.  Thanks for the help!",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2MjEyMjIxNQ==",
                    "publishedAt": "2018-02-01T00:55:14Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12300#issuecomment-362122215"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/1307806?v=4",
                        "login": "jeffrade"
                    },
                    "body": "> I like that idea. When compiling with --enable-mainnet, the default chain is mainnet. Otherwise, there is no default and you must choose one.\r\n\r\n@sipa I pushed a second commit (will squash if requested) to show new usage when `--enable-mainnet` is **not** used.\r\n\r\n @jtimon Below is my local testing with `bitcoind` showing the `InitError` and process exiting correctly:\r\n```\r\n$ ./confgiure\r\n<output ommitted>\r\n$ make\r\n<output ommitted>\r\n$ ./src/bitcoind \r\nError: You did not configure with --enable-mainnet, therefore must set -regtest, -testnet or -mainnet option.\r\n$ \r\n```\r\nI haven't looked at the client gui, so I will work on that next.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2MjEzNDk0Mg==",
                    "publishedAt": "2018-02-01T02:07:19Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12300#issuecomment-362134942"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/1307806?v=4",
                        "login": "jeffrade"
                    },
                    "body": "@jtimon I successfully tested `bitcoin-qt` and receive the same error as when trying to run `bitcoind` without the `--enable-mainnet` flag (see screenshot).\r\n\r\n![image](https://user-images.githubusercontent.com/1307806/35838167-9bd8e6ce-0aaf-11e8-8204-361bceaf73de.png)\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2MzI4NjAxMQ==",
                    "publishedAt": "2018-02-06T02:03:58Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12300#issuecomment-363286011"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
                        "login": "MarcoFalke"
                    },
                    "body": "Please squash your commits according to https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#squashing-commits\r\n\r\nAlso, try to pick a commit title that fits in 70-80 chars. Put the rest in the commit body.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2MzYwMzg5Nw==",
                    "publishedAt": "2018-02-06T23:38:49Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12300#issuecomment-363603897"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/1307806?v=4",
                        "login": "jeffrade"
                    },
                    "body": "@MarcoFalke Fixed all nits and squashed commit (as well as fix up commit message). Thanks for feedback!",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2MzYzNDQ2OQ==",
                    "publishedAt": "2018-02-07T02:22:08Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12300#issuecomment-363634469"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
                        "login": "MarcoFalke"
                    },
                    "body": "utACK 3822afeecd62c5f28047140629f357db49ed6829",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2MzY0NDk4Mg==",
                    "publishedAt": "2018-02-07T03:27:59Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12300#issuecomment-363644982"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1063656?v=4",
                        "login": "jnewbery"
                    },
                    "body": "Sorry to concept NACK so late in the PR, but I really don't like the extra config complexity that this adds. The original design was also NACKed by a few contributors in the IRC channel in January:\r\n\r\n```\r\n13:17 < gmaxwell> ugh. I really dislike 12300.\r\n13:18 < gmaxwell> If we want to reduce screw up risk we should make the github default branch a release branch; not boobytrap the prerelease software.\r\n13:21 < gmaxwell> for the original ask, a developer that doesn't want to mess up their own wallets, could be just as well addressed with a --disable-mainnet configure option that they could setup to normally use.\r\n...\r\n13:44 < jonasschnelli> gmaxwell: agree\r\n...\r\n13:52 < cfields> gmaxwell / jonasschnelli: I agree as well. If anything, I think that's kinda dangerous as downstreams can just quietly remove the ifdef, and users think they're shielded from mainnet\r\n13:54 < cfields> i can see the need for some kind of switch like that, but I'd rather do it in the appropriate place. ie If exposing the wallet to mainnet is scary, then add something there.\r\n```\r\n\r\n(although I don't know how @gmaxwell , @jonasschnelli and @theuni feel about the latest design).\r\n\r\nWhat exactly are we protecting against here? Developers running unreleased code and corrupting mainnet datadirs/wallets? Really, developers shouldn't be running untested code anywhere near their mainnet nodes/wallets, and no amount of config complexity can prevent people from making bad decisions like that.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NTMyNDU5NA==",
                    "publishedAt": "2018-03-22T14:24:54Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12300#issuecomment-375324594"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
                        "login": "MarcoFalke"
                    },
                    "body": "@jnewbery I think this would protect users from doing `git clone && make`, which defaults to the master branch.\r\n\r\nChanging the default branch is not possible, since pull requests are opened against the default branch by default.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NTMyODEzMQ==",
                    "publishedAt": "2018-03-22T14:34:38Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12300#issuecomment-375328131"
                }
            ],
            "totalCount": 24
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "3822afeecd62c5f28047140629f357db49ed6829"
                    }
                }
            ],
            "totalCount": 1
        },
        "createdAt": "2018-01-30T01:50:49Z",
        "deletions": 7,
        "id": "MDExOlB1bGxSZXF1ZXN0MTY1ODY2NzIw",
        "labels": {
            "nodes": [
                {
                    "color": "5319e7",
                    "id": "MDU6TGFiZWw2MTg4OTQxNg==",
                    "name": "Build system"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "CONFLICTING",
        "mergedAt": null,
        "number": 12300,
        "state": "OPEN",
        "title": "[Build] Adding --enable-mainnet configuration option for running mainnet",
        "updatedAt": "2018-03-22T14:34:38Z"
    },
    {
        "additions": 89,
        "author": {
            "avatarUrl": "https://avatars0.githubusercontent.com/u/5624963?v=4",
            "login": "fivepiece",
            "url": "https://github.com/fivepiece"
        },
        "body": "Attempts to address #12244 .  `p2wsh` addresses are returned only for scripts that are neither `p2sh` nor any witness program.",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/5624963?v=4",
                        "login": "fivepiece"
                    },
                    "body": "Again I'm only considering the edge cases after clicking \"create pull request\"..  What if the script contains a checksig with an uncompressed pubkey?\r\nObviously not ready.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2MjEyNjg5OQ==",
                    "publishedAt": "2018-02-01T01:21:01Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12321#issuecomment-362126899"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/3211283?v=4",
                        "login": "MeshCollider"
                    },
                    "body": "@fivepiece feel free to add [WIP] to the title of your PR if its work in progress :) It's usually fine to open up a PR before its completely ready because other contributors might like to give feedback on the approach or high level concept ACK/NACKs regardless. Thanks for helping out!",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2MjEyODUyNA==",
                    "publishedAt": "2018-02-01T01:30:01Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12321#issuecomment-362128524"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/5624963?v=4",
                        "login": "fivepiece"
                    },
                    "body": "Cheers, title changed\r\n(and now changed back :) )",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2MjEyOTMxNA==",
                    "publishedAt": "2018-02-01T01:34:36Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12321#issuecomment-362129314"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/5624963?v=4",
                        "login": "fivepiece"
                    },
                    "body": "Ideas welcome, returning a p2wsh for a p2pk or multisig with an uncompressed pubkey can result in fund loss, then again `decodescript` already returns p2sh addresses even for complete garbage.\r\nWhat should this change to `decodescript` take into account when deciding whether to post a p2wsh address to the user?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2MjM5MDc0Mg==",
                    "publishedAt": "2018-02-01T20:24:09Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12321#issuecomment-362390742"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/5767891?v=4",
                        "login": "instagibbs"
                    },
                    "body": "concept ACK\r\n\r\nI think returning garbage is fine. It can be something unprovably unspendable even, and I don't think it's the job of this tool to check. \r\n\r\nWonder if it's worth it to have it also return a p2sh-p2wsh version, in other words interpreting the script as a witnessscript, if applicable?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2MjQyMDAzMg==",
                    "publishedAt": "2018-02-01T22:14:12Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12321#issuecomment-362420032"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/5624963?v=4",
                        "login": "fivepiece"
                    },
                    "body": "Agreed.  Keeping the simple check that this is not a bare witness program seems to be in line with the check above it not letting p2sh be re-encoded into p2sh.\r\nThis commit adds p2sh-p2wsh as well. ",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2MjQzMjk3Mg==",
                    "publishedAt": "2018-02-01T23:10:26Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12321#issuecomment-362432972"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/5624963?v=4",
                        "login": "fivepiece"
                    },
                    "body": "@promag wouldn't moving this to `ScriptPubKeyToUniv` cause script translation to all these types of addresses to fire on `decoderawtransaction` as well?\r\nSorry if I misunderstood your comment.\r\n\r\nI will be looking into adding tests as well.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NDEzMTAxMQ==",
                    "publishedAt": "2018-02-08T14:38:50Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12321#issuecomment-364131011"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/5624963?v=4",
                        "login": "fivepiece"
                    },
                    "body": "I've made some changes to this:\r\n\r\n1. Segwit stuff is handled in a generic way using `GetScriptForWitness()`.  This allows to return a more appropriate p2wpkh for p2pkh and p2pk scriptpubkeys, and (currently) p2wsh for all the rest.\r\n2. The data returned for the segwit scripts is its own univalue object (@promag suggestion), so it includes more useful info like the segwit scriptpubkey and type, along with the bech32 address.\r\n\r\nVarious examples of the output can be seen here :\r\nhttps://gist.github.com/fivepiece/e25b0fcdf8303fdbfd56363ae50dec15\r\n\r\nCaveats :\r\n\r\n1. For the segwit scriptpubkeys, we always have `\"reqSigs\": 1`.\r\n2. It's still possible to get a segwit program address for scripts using checksigs with uncompressed pubkeys.  This is because `GetScriptForWitness()` doesn't check `vSolutions` for presense of such pubkeys.  It's probably be possible to change GetScriptForWitness to check for that when bare pubkeys are invloved in the script, but out of scope for this PR.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NDUzNzM5MQ==",
                    "publishedAt": "2018-02-09T19:31:15Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12321#issuecomment-364537391"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/5624963?v=4",
                        "login": "fivepiece"
                    },
                    "body": "This is pretty much a complete rewrite taking into account @sipa's suggestion (on irc) to use the same logic from `validateaddress` in here.\r\n\r\n1. Uncompressed pubkeys are handled correctly - meaning standard scripts containing them will not be encoded in segwit scriptpubkeys.\r\n2. Added a few tests on top of the existing `rpc_decodescript.py`.  I couldn't find a way to easily test that segwit output is **not** returned for standard scripts with uncompressed pubkeys.  Suggestions on how to do that are welcome.\r\n3. Updated https://gist.github.com/fivepiece/e25b0fcdf8303fdbfd56363ae50dec15 with examples showing segwit output is disabled for uncompressed pubkey scripts.\r\n\r\n~(please restart the travis job if possible, it hasn't failed, just cancelled before it began)~ Done, thanks!",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NjI1Mjg0MA==",
                    "publishedAt": "2018-02-16T14:39:30Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12321#issuecomment-366252840"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/5767891?v=4",
                        "login": "instagibbs"
                    },
                    "body": "kicked travis.\r\n\r\n> I couldn't find a way to easily test that segwit output is not returned for standard scripts with uncompressed pubkeys.\r\n\r\nhm? Your gist has examples that you could use.\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NjI1NDIwMg==",
                    "publishedAt": "2018-02-16T14:44:41Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12321#issuecomment-366254202"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/5624963?v=4",
                        "login": "fivepiece"
                    },
                    "body": "Specifically, I don't know how to assert that a value (say `rpc_result['segwit']`) does not exist in the returned univalue.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NjI1NTE5NQ==",
                    "publishedAt": "2018-02-16T14:48:20Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12321#issuecomment-366255195"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/5767891?v=4",
                        "login": "instagibbs"
                    },
                    "body": "in python `'segwit' not in rpc_result` ?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NjI1NjAxNA==",
                    "publishedAt": "2018-02-16T14:51:06Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12321#issuecomment-366256014"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/5624963?v=4",
                        "login": "fivepiece"
                    },
                    "body": "Ah, I was trying to bend `assert_array_result` to do the check but your way works.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NjI1NzA2OQ==",
                    "publishedAt": "2018-02-16T14:54:49Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12321#issuecomment-366257069"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/5624963?v=4",
                        "login": "fivepiece"
                    },
                    "body": "Added tests for checking `'segwit'` value is not returned when inappropriate. ",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NjQyODMxNQ==",
                    "publishedAt": "2018-02-17T09:12:23Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12321#issuecomment-366428315"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/5767891?v=4",
                        "login": "instagibbs"
                    },
                    "body": "utACK https://github.com/bitcoin/bitcoin/pull/12321/commits/785bd02cda896c92190a8a9bba3d1b40fd2812b9\r\n\r\nI think you can squash almost all these commits.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MDc5MTgzMw==",
                    "publishedAt": "2018-03-06T14:06:50Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12321#issuecomment-370791833"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/5624963?v=4",
                        "login": "fivepiece"
                    },
                    "body": "Cool, I'll squash it all into a single commit if this current change looks good, or two if it's better to separate work done on core from the tests.  Let me know which is better.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MDkwMjMxNQ==",
                    "publishedAt": "2018-03-06T19:39:12Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12321#issuecomment-370902315"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/5767891?v=4",
                        "login": "instagibbs"
                    },
                    "body": "whatever's easier to you, 1 or 2",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MDkwMzAwNQ==",
                    "publishedAt": "2018-03-06T19:41:29Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12321#issuecomment-370903005"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/5624963?v=4",
                        "login": "fivepiece"
                    },
                    "body": "Two commits now.  No problem changing later on if needed.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MDkwNzM5OQ==",
                    "publishedAt": "2018-03-06T19:55:24Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12321#issuecomment-370907399"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/5624963?v=4",
                        "login": "fivepiece"
                    },
                    "body": "Good call.  All in a single commit now.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MDkyOTU2Nw==",
                    "publishedAt": "2018-03-06T21:11:11Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12321#issuecomment-370929567"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/5767891?v=4",
                        "login": "instagibbs"
                    },
                    "body": "re-utACK https://github.com/bitcoin/bitcoin/pull/12321/commits/4f933b3d23010d3b03998460290faed97cd6f236",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MDkzNDAxNg==",
                    "publishedAt": "2018-03-06T21:26:19Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12321#issuecomment-370934016"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/5624963?v=4",
                        "login": "fivepiece"
                    },
                    "body": "Updated to address @laanwj's comment",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3OTUwMjM3Nw==",
                    "publishedAt": "2018-04-07T22:03:24Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12321#issuecomment-379502377"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "Thank you\r\nutACK https://github.com/bitcoin/bitcoin/pull/12321/commits/41ff9675a92f6c080a4bb171e286060ef864a803",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3OTU2NzU0Ng==",
                    "publishedAt": "2018-04-08T17:34:45Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12321#issuecomment-379567546"
                }
            ],
            "totalCount": 22
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "41ff9675a92f6c080a4bb171e286060ef864a803"
                    }
                }
            ],
            "totalCount": 2
        },
        "createdAt": "2018-02-01T01:16:59Z",
        "deletions": 3,
        "id": "MDExOlB1bGxSZXF1ZXN0MTY2NDIwMTQ2",
        "labels": {
            "nodes": [
                {
                    "color": "0052cc",
                    "id": "MDU6TGFiZWw5ODI3OTE3Nw==",
                    "name": "RPC/REST/ZMQ"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "number": 12321,
        "state": "OPEN",
        "title": "p2wsh and p2sh-p2wsh address in decodescript",
        "updatedAt": "2018-04-08T17:34:45Z"
    },
    {
        "additions": 37,
        "author": {
            "avatarUrl": "https://avatars0.githubusercontent.com/u/24285095?v=4",
            "login": "AkioNak",
            "url": "https://github.com/AkioNak"
        },
        "body": "The unserializer for prevector uses `resize()` for reserve the area, but it's prefer to use `reserve()` because `resize()` have overhead to call its constructor many times.\r\n\r\nHowever, `reserve()` does not change the value of `_size` (a private member of prevector).\r\n\r\nThis PR make the logic of read from stream to callback function, and prevector handles initilizing new values with that call-back and ajust the value of `_size`.\r\n\r\nThe changes are as follows:\r\n1. prevector.h\r\nAdd a public member function named 'append'.\r\nThis function has 2 params, number of elemenst to append and call-back function that initilizing new appended values.\r\n\r\n2. serialize.h\r\nIn the following two function:\r\n- `Unserialize_impl(Stream& is, prevector<N, T>& v, const unsigned char&)`\r\n- `Unserialize_impl(Stream& is, prevector<N, T>& v, const V&)`\r\nMake a callback function from each original logic of reading values from stream, and call prevector's `append()`.\r\n\r\n3. test/prevector_tests.cpp\r\nAdd a test for `append()`.\r\n\r\n## A benchmark result is following:\r\n[Machine]\r\nMacBook Pro (macOS 10.13.3/i7 2.2GHz/mem 16GB/SSD)\r\n\r\n[result]\r\nDeserializeAndCheckBlockTest  => 22% faster\r\nDeserializeBlockTest => 29% faster\r\n\r\n[before PR]\r\n    # Benchmark, evals, iterations, total, min, max, median\r\n    DeserializeAndCheckBlockTest, 60, 160, 94.4901, 0.0094644, 0.0104715, 0.0098339\r\n    DeserializeBlockTest, 60, 130, 65.0964, 0.00800362, 0.00895134, 0.00824187\r\n\r\n[After PR]\r\n    # Benchmark, evals, iterations, total, min, max, median\r\n    DeserializeAndCheckBlockTest, 60, 160, 77.1597, 0.00767013, 0.00858959, 0.00805757\r\n    DeserializeBlockTest, 60, 130, 49.9443, 0.00613926, 0.00691187, 0.00635527",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/863730?v=4",
                        "login": "fanquake"
                    },
                    "body": "@AkioNak You might also want to look at https://github.com/bitcoin/bitcoin/pull/10785.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2MjI0NDIwNA==",
                    "publishedAt": "2018-02-01T11:56:15Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12324#issuecomment-362244204"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/24285095?v=4",
                        "login": "AkioNak"
                    },
                    "body": "@fanquake Thank you for pointing to #10785.\r\nI will check if this PR is still useful even if #10785 is merged.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2MjI3ODk1Mg==",
                    "publishedAt": "2018-02-01T14:18:45Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12324#issuecomment-362278952"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "Thanks for adding benchmarks! That's the way to do optimization PRs.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2MjM2MjQwOQ==",
                    "publishedAt": "2018-02-01T18:43:33Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12324#issuecomment-362362409"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/24285095?v=4",
                        "login": "AkioNak"
                    },
                    "body": "@promag Thank you for your review. I fixed them and squashed commits.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2MzY3NDk2Ng==",
                    "publishedAt": "2018-02-07T06:54:49Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12324#issuecomment-363674966"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/24285095?v=4",
                        "login": "AkioNak"
                    },
                    "body": "@fanquake Fortunately, I think that there was no collision or adverse effect between #10785 and #12324. Also, #12324 still usefull even if #10785 has been merged.\r\n\r\nConfirmation summary:\r\n\r\n0. enviroment : MacBook Pro (macOS 10.13.3/i7 2.2GHz/mem 16GB/SSD)\r\n1. merge - git merge (master d3e4675 + both #10785 and #12324) : succeed.\r\n2. build - make clean && make : succeed.\r\n3. test - test_runner.py : passed. (exclude wallet_encription.py)\r\n4. benchmark\r\n[result]\r\n DeserializeAndCheckBlockTest => 25% faster\r\n DeserializeBlockTest => 30% faster\r\n\r\n```\r\n[#10785]\r\n # Benchmark, evals, iterations, total, min, max, median\r\n DeserializeAndCheckBlockTest, 50, 160, 76.7465, 0.00941822, 0.00986061, 0.00958263\r\n DeserializeBlockTest, 50, 130, 52.3447, 0.00791727, 0.00828939, 0.00805472\r\n\r\n[#10785 + #12324]\r\n # Benchmark, evals, iterations, total, min, max, median\r\n DeserializeAndCheckBlockTest, 50, 160, 61.3164, 0.00750302, 0.00797864, 0.00765575\r\n DeserializeBlockTest, 50, 130, 40.1209, 0.00602097, 0.0063615, 0.00617751\r\n```",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2MzcyMjc2MA==",
                    "publishedAt": "2018-02-07T10:19:50Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12324#issuecomment-363722760"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/2734?v=4",
                        "login": "eklitzke"
                    },
                    "body": "Concept ACK. I like the idea of making this faster (I've seen this taking a lot of time in my profiles), but using a template to pass a lambda seems unnecessarily complex. If it gets inlined it will be fast. But if it ends up not being inlined, the lambda will turn into a full std::function object (since it captures) and that will be slow.\r\n\r\nCan you either:\r\n * Remove the func template (it's only called in two places...)\r\n * Or check that GCC 4.8 inlines the lambda properly?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MjA4NTI1Ng==",
                    "publishedAt": "2018-03-11T02:54:47Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12324#issuecomment-372085256"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/24285095?v=4",
                        "login": "AkioNak"
                    },
                    "body": "@eklitzke thank you for your comment. I will try it.\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MjExNjE2Nw==",
                    "publishedAt": "2018-03-11T13:37:13Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12324#issuecomment-372116167"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/250224?v=4",
                        "login": "kallewoof"
                    },
                    "body": "> I like the idea of making this faster (I've seen this taking a lot of time in my profiles), but using a template to pass a lambda seems unnecessarily complex. If it gets inlined it will be fast. But if it ends up not being inlined, the lambda will turn into a full std::function object (since it captures) and that will be slow.\r\n\r\nAdding `inline` to the template should do the trick, I think.\r\n\r\nBut I agree that lambdas and callbacks are a bit complex here. I personally think a caveat note on a method in `prevector` that leaves garbage in the vector is fine, e.g.\r\n```C++\r\n/**\r\n * Grow the size of the prevector by b bytes.\r\n * NOTE: The added capacity must be overwritten, or it will contain garbage data.\r\n */\r\n```\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MjU2OTEwNQ==",
                    "publishedAt": "2018-03-13T07:16:02Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12324#issuecomment-372569105"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/548488?v=4",
                        "login": "sipa"
                    },
                    "body": "Agree with @kallewoof. It seems the goal of using a callback here is to avoid having a public method that brings the vector in a (partially) undefined state. However, the result is that now we have a callback that needs to run in this state.\r\n\r\nI would either:\r\n* change the method name to `resize_uninitialized` or so, and initialize explicitly after it returns\r\n* pass a begin and end iterator to the callback (avoiding the need for the code in the callback to interact with the prevector while it's in an undefined state).",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3Mzg3OTA3MQ==",
                    "publishedAt": "2018-03-17T00:30:27Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12324#issuecomment-373879071"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/24285095?v=4",
                        "login": "AkioNak"
                    },
                    "body": "@eklitzke @kallewoof @sipa Thank you for suggestions.\r\nI introduced resize_uninitialized() and explicitly initialized instead of lambdas and callbacks.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NDEyNzQ2NA==",
                    "publishedAt": "2018-03-19T07:53:55Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12324#issuecomment-374127464"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/24285095?v=4",
                        "login": "AkioNak"
                    },
                    "body": "@eklitzke Thank you for your pointing out for my typos. Fixed them.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NDU0Mzg0OQ==",
                    "publishedAt": "2018-03-20T10:15:03Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12324#issuecomment-374543849"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/2734?v=4",
                        "login": "eklitzke"
                    },
                    "body": "This looks good, although you still need to squash. I'm curious: do you still see the speedup from your intial benchmark? I know we changed other logic in this file since then.\r\n\r\nOn master:\r\n```\r\n$ ./src/bench/bench_bitcoin -filter='Deser.*' --evals=10\r\n# Benchmark, evals, iterations, total, min, max, median\r\nDeserializeAndCheckBlockTest, 10, 160, 9.86197, 0.00603752, 0.00640901, 0.00616365\r\nDeserializeBlockTest, 10, 130, 6.7487, 0.00486321, 0.0065349, 0.00496556\r\n```\r\n\r\nWith your branch:\r\n```\r\n$ ./src/bench/bench_bitcoin -filter='Deser.*' --evals=10\r\n# Benchmark, evals, iterations, total, min, max, median\r\nDeserializeAndCheckBlockTest, 10, 160, 9.96894, 0.00611369, 0.00647763, 0.00622066\r\nDeserializeBlockTest, 10, 130, 6.43537, 0.00484567, 0.00539326, 0.00490343\r\n```",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NDgzMTI0OA==",
                    "publishedAt": "2018-03-21T04:26:01Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12324#issuecomment-374831248"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
                        "login": "MarcoFalke"
                    },
                    "body": "Could make sense to squash and rebase on master to ease benchmarking?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NDkyNTk5Mg==",
                    "publishedAt": "2018-03-21T12:52:05Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12324#issuecomment-374925992"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/24285095?v=4",
                        "login": "AkioNak"
                    },
                    "body": "Squashed and rebased.\r\nNow, speed up is still exist but a little (2.06% - 3.35%).\r\n\r\nmy enviroment : iMac late 2013  (macOS 10.13.3/i5 2.9GHz/mem 16GB/SSD)\r\n[on master]\r\n```\r\n# Benchmark, evals, iterations, total, min, max, median\r\nDeserializeAndCheckBlockTest, 1000, 160, 1169.53, 0.00713881, 0.00842435, 0.00718528\r\nDeserializeBlockTest, 1000, 130, 756.064, 0.00574035, 0.006433, 0.00575841\r\n```\r\n\r\n[my PR]\r\n```\r\n# Benchmark, evals, iterations, total, min, max, median\r\nDeserializeAndCheckBlockTest, 1000, 160, 1131.6, 0.0070475, 0.00744498, 0.00706667\r\nDeserializeBlockTest, 1000, 130, 740.836, 0.00567827, 0.00600557, 0.00569649\r\n```",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NTAzNzk4Nw==",
                    "publishedAt": "2018-03-21T17:54:39Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12324#issuecomment-375037987"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/548488?v=4",
                        "login": "sipa"
                    },
                    "body": "utACK d85530db45b327eecf408bc8e9636fa60e886208",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NTA0Njg4Nw==",
                    "publishedAt": "2018-03-21T18:20:46Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12324#issuecomment-375046887"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/2734?v=4",
                        "login": "eklitzke"
                    },
                    "body": "Thanks for checking. utACK d85530db45b327eecf408bc8e9636fa60e886208",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NTE0MzkzMQ==",
                    "publishedAt": "2018-03-22T00:59:10Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12324#issuecomment-375143931"
                }
            ],
            "totalCount": 16
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "d85530db45b327eecf408bc8e9636fa60e886208"
                    }
                }
            ],
            "totalCount": 1
        },
        "createdAt": "2018-02-01T11:51:56Z",
        "deletions": 3,
        "id": "MDExOlB1bGxSZXF1ZXN0MTY2NTE2MTgz",
        "labels": {
            "nodes": [
                {
                    "color": "E6F6D6",
                    "id": "MDU6TGFiZWwxMzU5NjE=",
                    "name": "Refactoring"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "number": 12324,
        "state": "OPEN",
        "title": "speed up Unserialize_impl for prevector",
        "updatedAt": "2018-03-22T00:59:10Z"
    },
    {
        "additions": 180,
        "author": {
            "avatarUrl": "https://avatars3.githubusercontent.com/u/1063656?v=4",
            "login": "jnewbery",
            "url": "https://github.com/jnewbery"
        },
        "body": "#11398 appears to be abandoned. This PR replaces it.\r\n\r\nAs well as rebasing on master, I've done the following:\r\n\r\n- fixed broken extended test cases\r\n- tidied up commits so all tests pass on all intermediate commits\r\n- removed the unnecessary dependency on #11426 \r\n- removed the now-redundant `feature_bip9_softforks.py`",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1008458?v=4",
                        "login": "jtimon"
                    },
                    "body": "This will need rebase after https://github.com/bitcoin/bitcoin/pull/11739 , won't it?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2MzE1OTExOQ==",
                    "publishedAt": "2018-02-05T17:33:51Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12360#issuecomment-363159119"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1063656?v=4",
                        "login": "jnewbery"
                    },
                    "body": "> This will need rebase after #11739 , won't it?\r\n\r\nThere are no dependencies between the two, but you're correct that there are some minor conflicts in the implementations. I'm happy to rebase if 11739 is merged first.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2MzE2OTY3MQ==",
                    "publishedAt": "2018-02-05T18:08:00Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12360#issuecomment-363169671"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1063656?v=4",
                        "login": "jnewbery"
                    },
                    "body": "Rebased now that #12193 has been merged.\r\n\r\nACK @jamesob's 0be1f9d8a6bb2b8c47d6816b46d6764aee3cc06e commit.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NTMxNTEzMg==",
                    "publishedAt": "2018-02-13T16:10:47Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12360#issuecomment-365315132"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/73197?v=4",
                        "login": "jamesob"
                    },
                    "body": "Biased ACK https://github.com/bitcoin/bitcoin/pull/12360/commits/0be1f9d8a6bb2b8c47d6816b46d6764aee3cc06e",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NTY5NDk1Mw==",
                    "publishedAt": "2018-02-14T18:09:41Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12360#issuecomment-365694953"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1008458?v=4",
                        "login": "jtimon"
                    },
                    "body": "utACK 0be1f9d8a6bb2b8c47d6816b46d6764aee3cc06e",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NTcyOTQ3OA==",
                    "publishedAt": "2018-02-14T20:08:03Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12360#issuecomment-365729478"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1063656?v=4",
                        "login": "jnewbery"
                    },
                    "body": "rebased",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MTI0MDk0MQ==",
                    "publishedAt": "2018-03-07T18:43:18Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12360#issuecomment-371240941"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/73197?v=4",
                        "login": "jamesob"
                    },
                    "body": "Rebased.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MTUyMzk0Mg==",
                    "publishedAt": "2018-03-08T15:36:24Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12360#issuecomment-371523942"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1063656?v=4",
                        "login": "jnewbery"
                    },
                    "body": "Rebased",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NDIxMjI0MA==",
                    "publishedAt": "2018-03-19T13:31:58Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12360#issuecomment-374212240"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1063656?v=4",
                        "login": "jnewbery"
                    },
                    "body": "Rebased",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NjUyNzA1Nw==",
                    "publishedAt": "2018-03-27T13:35:24Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12360#issuecomment-376527057"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1063656?v=4",
                        "login": "jnewbery"
                    },
                    "body": "rebased",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NzI2MjUyNw==",
                    "publishedAt": "2018-03-29T14:56:43Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12360#issuecomment-377262527"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1063656?v=4",
                        "login": "jnewbery"
                    },
                    "body": "#11739 is merged. Rebased",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4Mjg4MDQ0Mg==",
                    "publishedAt": "2018-04-19T21:05:10Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12360#issuecomment-382880442"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
                        "login": "MarcoFalke"
                    },
                    "body": "Tend to NACK. Just because buried deployments can be done safely doesn't mean they should be done for the sole purpose of code refactoring without substantial motivation, advantages or simplifications. Since this is refactoring consensus code and also changing the consensus rules, I think a writeup on the motivation and tradeoffs is required. Note that none of the statements of the motivation given in BIP90 are applicable here, so I doubt that the overall gain (if any) is worth the time spent on this (code/discussions/formal writeups/review/...). I'd rather keep the deployments as versionbits deployments and instead treat `IsWitnessEnabled` as `true` for modules that don't need to know when the witness commitment started to be a requirement for blocks containing witness transactions. I'd guess compact block relay qualifies for this, since it only relays recent blocks. Alternatively the \"mining\" code, which only makes sense to call on chains where `IsWitnessEnabled` is already `true`.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MzM0MjQ2Mg==",
                    "publishedAt": "2018-04-22T00:03:34Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12360#issuecomment-383342462"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
                        "login": "MarcoFalke"
                    },
                    "body": "Potentially also the mempool, after which #12124 could be rebased and reopened.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MzM4NDQ2Mw==",
                    "publishedAt": "2018-04-22T14:12:40Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12360#issuecomment-383384463"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1063656?v=4",
                        "login": "jnewbery"
                    },
                    "body": "@MarcoFalke - I disagree. Once a softfork is deployed and is sufficiently buried, the activation mechanism is purely academic. Removing complexity and improving the simplicity of the code is motivation enough.\r\n\r\n> I think a writeup on the motivation and tradeoffs is required\r\n\r\nYes - I intend to send a writeup to the mailing list if this PR is merged.\r\n\r\nAs a meta-point, although review and feedback is always welcome, concept NACKs are much more useful early after a PR has been opened. This PR is a rebase of #11398, which was opened 7 months ago and has now been rebased ~10 times (including once requested by [you](https://github.com/bitcoin/bitcoin/pull/11398#issuecomment-343550044)). This PR and its antecedent have already been ACKed or concept ACKed by 5 contributors. If your objection is time spent on discussion/review, then that ship has already sailed :)",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MzQxODUwMg==",
                    "publishedAt": "2018-04-22T22:48:48Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12360#issuecomment-383418502"
                }
            ],
            "totalCount": 14
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "01d781b88c3154c232b9bcadde04dcce2cfff0dc"
                    }
                }
            ],
            "totalCount": 4
        },
        "createdAt": "2018-02-05T17:23:17Z",
        "deletions": 247,
        "id": "MDExOlB1bGxSZXF1ZXN0MTY3MjA1MzI1",
        "labels": {
            "nodes": [
                {
                    "color": "009800",
                    "id": "MDU6TGFiZWwxOTIyMDIwMDA=",
                    "name": "Consensus"
                },
                {
                    "color": "6060aa",
                    "id": "MDU6TGFiZWwxMTgzNzk2NTI=",
                    "name": "Validation"
                }
            ],
            "totalCount": 2
        },
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "number": 12360,
        "state": "OPEN",
        "title": "Bury bip9 deployments",
        "updatedAt": "2018-04-23T15:44:40Z"
    },
    {
        "additions": 13,
        "author": {
            "avatarUrl": "https://avatars2.githubusercontent.com/u/1173622?v=4",
            "login": "Willtech",
            "url": "https://github.com/Willtech"
        },
        "body": "Added note to section 2, part -edits to `/etc/tor/torrc`-  indicating this is only for Tor version 0.2.7.0 and older, since section 3 states it is valid for Tor version 0.2.7.1 and newer.\r\n\r\nRef: [Issue# 12376](https://github.com/bitcoin/bitcoin/issues/12376)\r\n\r\nSigned-off-by: Damian Williamson <willtech@live.com.au>",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "It makes sense to mention automatic hidden service creation and the command line options configuring it, however I disagree with the wording that it is redundant. Either specifying the hidden service yourself, or allowing it to be created automatically are still valid options, even with new Tor versions.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NDA2NTk0MA==",
                    "publishedAt": "2018-02-08T10:17:17Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12384#issuecomment-364065940"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
                        "login": "MarcoFalke"
                    },
                    "body": "I haven't looked at this, but you should make the title meaningful to describe what you did, potentially why in 70 chars.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NDI4MTM2MA==",
                    "publishedAt": "2018-02-08T23:14:35Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12384#issuecomment-364281360"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/33541170?v=4",
                        "login": "randolf"
                    },
                    "body": "I like that \"/doc/tor.md\" (as in \"Doctor, MD\") is the filename.  :D",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NDMzOTg2Mg==",
                    "publishedAt": "2018-02-09T05:34:08Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12384#issuecomment-364339862"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/1173622?v=4",
                        "login": "Willtech"
                    },
                    "body": "@laanwj I had to look up the definition of redundant again after your comment and still think the word is accurate, I might be wrong. It may be that flagging the particular entries for `/etc/tor/torrc` as breaks things in the specific version of Tor may be more accurate with the limited testing I have performed.\r\n\r\nThe pull request has stemmed from the linked issue, I will follow up there.\r\n\r\nEDIT: I see the heading edits, I will look at `/contributing.md` next.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NDM5MzM3Ng==",
                    "publishedAt": "2018-02-09T10:17:28Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12384#issuecomment-364393376"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": ">  It may be that flagging the particular entries for /etc/tor/torrc as breaks things in the specific version of Tor may be more accurate\r\n\r\nThat would mean there is another, separate issue that is not related to auto-Tor binding: the configuration directives required for setting up a hidden service changed at some version of Tor, and the old way fails?\r\n\r\nFWIW I cannot corroborate this, the hidden services I've seen didn't require reconfiguration recently. But something might have changed when \"new style\" hidden services have been introduced, which are not supported by bitcoin's P2P network (see #9214). So maybe you need to choose to use old style explicitly.\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NDM5NTk1Ng==",
                    "publishedAt": "2018-02-09T10:27:55Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12384#issuecomment-364395956"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/1173622?v=4",
                        "login": "Willtech"
                    },
                    "body": "I will look into it further on my installed version. The simple coverall solution *seemed* to be the edits I had made.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NDM5NjkwNg==",
                    "publishedAt": "2018-02-09T10:31:57Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12384#issuecomment-364396906"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "> The simple coverall solution seemed to be the edits I had made.\r\n\r\nThere are various subtle privacy reasons why someone would want to configure their own hidden service instead of having bitcoind generate one. We can't just say \"the manual way is deprecated\". The automatic way is there for user convenience (and to get more tor-listening nodes), it does not replace it.\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NDM5NzIyNw==",
                    "publishedAt": "2018-02-09T10:33:21Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12384#issuecomment-364397227"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/1173622?v=4",
                        "login": "Willtech"
                    },
                    "body": "Alright, I do not take redundant to mean depreciated, I just understand redundant as not necessary. What would you suggest is a suitable edit?\r\n\r\nBTW I cannot fault the given edits to `torrc` against either the examples in the default `torrc` file or the detailed configuration (of/for Tor) in [nyx](https://nyx.torproject.org/). No additional options lending themselves as potentially of assistance exist in nyx either.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NDQwMjMyMA==",
                    "publishedAt": "2018-02-09T10:55:40Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12384#issuecomment-364402320"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/1173622?v=4",
                        "login": "Willtech"
                    },
                    "body": "I have updated the commit.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NDcxMzAxNA==",
                    "publishedAt": "2018-02-11T02:09:54Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12384#issuecomment-364713014"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/1173622?v=4",
                        "login": "Willtech"
                    },
                    "body": "@laanwj re the linked issue #9214 you mentioned, I see plenty of lines like the following on Tor output:\r\n\r\n    15:10:12 [WARN] Fetching v2 rendezvous descriptor failed. Retrying at another directory.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NDcxOTUyNQ==",
                    "publishedAt": "2018-02-11T04:16:24Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12384#issuecomment-364719525"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/1173622?v=4",
                        "login": "Willtech"
                    },
                    "body": "I will add an additional commit later to reformat the document, headings to work with GitHub and check the line breaks and, add in internal ref link to section 3.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NjM3OTMwMA==",
                    "publishedAt": "2018-02-16T22:39:14Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12384#issuecomment-366379300"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/1173622?v=4",
                        "login": "Willtech"
                    },
                    "body": "Additional commit added.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NzY1Njg4MA==",
                    "publishedAt": "2018-02-22T11:49:09Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12384#issuecomment-367656880"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
                        "login": "MarcoFalke"
                    },
                    "body": "Please squash your commits according to https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#squashing-commits",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MDU2OTA3Mw==",
                    "publishedAt": "2018-04-11T19:29:51Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12384#issuecomment-380569073"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/1173622?v=4",
                        "login": "Willtech"
                    },
                    "body": "You will have to excuse me a moment, that doesn't seem to be exactly the squash that I wanted. This will take some fixing.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MDc3NTA3NQ==",
                    "publishedAt": "2018-04-12T11:37:35Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12384#issuecomment-380775075"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/1173622?v=4",
                        "login": "Willtech"
                    },
                    "body": "Phew! All sorted.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MDc3OTY0MA==",
                    "publishedAt": "2018-04-12T11:56:47Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12384#issuecomment-380779640"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
                        "login": "MarcoFalke"
                    },
                    "body": "utACK 8dcd724f4d8719a645606932e2a9289b521989a3",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MTgyNDAwOQ==",
                    "publishedAt": "2018-04-17T03:27:30Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12384#issuecomment-381824009"
                }
            ],
            "totalCount": 16
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "8dcd724f4d8719a645606932e2a9289b521989a3"
                    }
                }
            ],
            "totalCount": 1
        },
        "createdAt": "2018-02-08T08:32:25Z",
        "deletions": 13,
        "id": "MDExOlB1bGxSZXF1ZXN0MTY3OTA1ODI1",
        "labels": {
            "nodes": [
                {
                    "color": "02d7e1",
                    "id": "MDU6TGFiZWwxNDgyMTY=",
                    "name": "Docs"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "number": 12384,
        "state": "OPEN",
        "title": "[Docs] Add version footnote to tor.md",
        "updatedAt": "2018-04-17T03:27:30Z"
    },
    {
        "additions": 32,
        "author": {
            "avatarUrl": "https://avatars1.githubusercontent.com/u/10217?v=4",
            "login": "Sjors",
            "url": "https://github.com/Sjors"
        },
        "body": "Pruning forces a chainstate flush, which can defeat the dbcache and harm performance significantly.\r\n\r\nDuring IBD we now prune based on the worst case size of the remaining blocks, but no further than\r\nthe minimum prune size of 550 MB.\r\n\r\nUsing `MAX_BLOCK_SERIALIZED_SIZE` is complete overkill on testnet and usually too high on mainnet. It doesn't take into account the SegWit activation block either. This causes the node to be further pruned than strictly needed after IBD. It also makes it more difficult to test. One improvement could be to use a moving average actual block size or a hard coded educated guess. However there's something to be said for keeping this simple.",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/10217?v=4",
                        "login": "Sjors"
                    },
                    "body": "@fanquake probably also needs \"Block storage\" label.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NDY1OTQ1Ng==",
                    "publishedAt": "2018-02-10T14:39:02Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12404#issuecomment-364659456"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/7999704?v=4",
                        "login": "esotericnonsense"
                    },
                    "body": "Untested ACK, would kill off #11658 and #11359.\r\n\r\nI personally don't think the detail of how much we over-or-under-prune here are that important given that the long term solution is to fix the cache such that it doesn't require a complete flush. Basically any change here will speed up pruning IBD by a large amount.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NjU4MTA2OQ==",
                    "publishedAt": "2018-02-19T03:30:50Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12404#issuecomment-366581069"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/4360349?v=4",
                        "login": "morcos"
                    },
                    "body": "ACK 86bef23",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MDQ0Nzg0MA==",
                    "publishedAt": "2018-03-05T15:05:14Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12404#issuecomment-370447840"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/2734?v=4",
                        "login": "eklitzke"
                    },
                    "body": "utACK 86bef23e6550cdcf989ae6ac22dbbc45bbf613e4 ",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MjA5NjQ3Ng==",
                    "publishedAt": "2018-03-11T07:54:19Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12404#issuecomment-372096476"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/10217?v=4",
                        "login": "Sjors"
                    },
                    "body": "Rebased due to release notes change.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MjQ2MTY2Nw==",
                    "publishedAt": "2018-03-12T21:03:19Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12404#issuecomment-372461667"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/10217?v=4",
                        "login": "Sjors"
                    },
                    "body": "Rebased due to release notes change.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NjIyNzc3Ng==",
                    "publishedAt": "2018-03-26T16:29:23Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12404#issuecomment-376227776"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/10217?v=4",
                        "login": "Sjors"
                    },
                    "body": "`p2p_leak.py` failure on Travis seems a bit random (and passes on my local machine)...",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NjI2MjI3Nw==",
                    "publishedAt": "2018-03-26T18:17:53Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12404#issuecomment-376262277"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/2734?v=4",
                        "login": "eklitzke"
                    },
                    "body": "utACK 82efbf1e8ac67ad9d04cba9b64cb79ece86209f8",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NjM4OTcxOA==",
                    "publishedAt": "2018-03-27T04:00:48Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12404#issuecomment-376389718"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/1095675?v=4",
                        "login": "luke-jr"
                    },
                    "body": "Before merging, please remove the name and PR reference from the commit message, so it doesn't ping us every time someone adds it to their random fork.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NzcyMTA0OA==",
                    "publishedAt": "2018-03-31T20:26:51Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12404#issuecomment-377721048"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/10217?v=4",
                        "login": "Sjors"
                    },
                    "body": "@luke-jr will do. Should I also remove it from the PR description, since that also ends up in the merge commit message? Or do those merge commits rarely make it into upstream work because commits are cherry-picked?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3ODE5MTg0Mg==",
                    "publishedAt": "2018-04-03T09:43:01Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12404#issuecomment-378191842"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/10217?v=4",
                        "login": "Sjors"
                    },
                    "body": "Done. Also: rebased for release notes.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3ODE5MzczMw==",
                    "publishedAt": "2018-04-03T09:49:53Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12404#issuecomment-378193733"
                }
            ],
            "totalCount": 11
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "541989f8420a79c8e89c787668901698e9011640"
                    }
                }
            ],
            "totalCount": 1
        },
        "createdAt": "2018-02-10T13:50:32Z",
        "deletions": 1,
        "id": "MDExOlB1bGxSZXF1ZXN0MTY4NDAyNjg0",
        "labels": {
            "nodes": [
                {
                    "color": "000000",
                    "id": "MDU6TGFiZWwyMTk4OTA1NTU=",
                    "name": "Block storage"
                },
                {
                    "color": "6060aa",
                    "id": "MDU6TGFiZWwxMTgzNzk2NTI=",
                    "name": "Validation"
                }
            ],
            "totalCount": 2
        },
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "number": 12404,
        "state": "OPEN",
        "title": "Prune more aggressively during IBD",
        "updatedAt": "2018-04-03T09:49:53Z"
    },
    {
        "additions": 135,
        "author": {
            "avatarUrl": "https://avatars0.githubusercontent.com/u/73197?v=4",
            "login": "jamesob",
            "url": "https://github.com/jamesob"
        },
        "body": "- [x] **Prerequisite PR**: #12431 (it wouldn't be catastrophic to merge this before that, but preferable to get that in first.)\r\n\r\nIn trying to fix the fork warning code (`validation.cpp:CheckForkWarningConditions*`), it became apparent that we are marking some (but not all) invalid blocks as invalid (via `nStatus`) when they are received and subsequently dropped. The fact that we never mark some invalid blocks as such prevents us from e.g. detecting and warning on invalid chains with significant work.\r\n\r\nThis change has `ProcessNewBlock` call `InvalidateBlock` on the invalid block to do the expected bookkeeping in `mapBlockIndex` before dropping the block.\r\n\r\nThis change also consolidates the setting of CBlockIndex's `nStatus |= BLOCK_FAILED_VALID` to a single function (`InvalidBlockFound`) since there's peripheral bookkeeping (e.g. `g_failed_blocks.insert()`) that we want to do consistently but is duplicated in some places or not done in other cases when it apparently should be. \r\n\r\n[One such replacement with InvalidBlockFound](https://github.com/bitcoin/bitcoin/pull/12407/files?diff=unified#diff-24efdb00bfbe56b140fb006b562cc70bL3420) ensures addition of invalid blocks to `g_failed_blocks` and so (in theory) reduces CPU burden when being spammed with descendants of an invalid block, since we no longer have to walk `mapBlockIndex` to determine its invalidity. Based on reading usage of `g_failed_blocks` I can't tell if this savings is real, but in any case it seems worthwhile to keep that set consistent (i.e. 1-1 with blocks marked BLOCK_FAILED_VALID since last restart).",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/73197?v=4",
                        "login": "jamesob"
                    },
                    "body": "Hm: this changeset is failing tests that initially transmit a block with unexpected witness data (which gets rejected) and then retransmit without witness data for expected acceptance, but we get hung up on an existing `mapBlockIndex` entry that's been marked invalid.\r\n\r\nIs it worth special-casing out `\"unexpected-witness\"` rejections from the `InvalidateBlock` call? Seems a little ugly.\r\n\r\nIs the bookkeeping this PR wants to do even worth it? I guess we could just lump long invalid forks in with long headers-only forks, but that doesn't seem great either...",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NDY5NTc0OA==",
                    "publishedAt": "2018-02-10T21:38:57Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12407#issuecomment-364695748"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/548488?v=4",
                        "login": "sipa"
                    },
                    "body": "You can only mark a block as invalid when fPossibleCorruption is not set in the validation status.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NDY5NTk3MA==",
                    "publishedAt": "2018-02-10T21:40:59Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12407#issuecomment-364695970"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/73197?v=4",
                        "login": "jamesob"
                    },
                    "body": "Ah good point, thanks @sipa. That seems to have fixed it.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NDY5NzA1Nw==",
                    "publishedAt": "2018-02-10T21:49:50Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12407#issuecomment-364697057"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/73197?v=4",
                        "login": "jamesob"
                    },
                    "body": "I've rebased this changeset, removing the code that's now in #12431 as well as the semi-related log statement. I've also DRY'd up parts of validation which set `BLOCK_FAILED_VALID` on `nStatus` to use `InvalidBlockFound` instead.\r\n\r\nThis change should only be merged *after* #12431 since this will exercise the bug that PR fixes.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NTc2NjQ2NA==",
                    "publishedAt": "2018-02-14T22:29:44Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12407#issuecomment-365766464"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
                        "login": "MarcoFalke"
                    },
                    "body": "Needs rebase to fix travis (sorry)",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MTUxOTQ0MQ==",
                    "publishedAt": "2018-03-08T15:22:27Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12407#issuecomment-371519441"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/73197?v=4",
                        "login": "jamesob"
                    },
                    "body": "Rebased.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MTUyNDc3Ng==",
                    "publishedAt": "2018-03-08T15:39:03Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12407#issuecomment-371524776"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/7133040?v=4",
                        "login": "ryanofsky"
                    },
                    "body": "Slight re-utACK a12ce0dde462911bb702070d31ed28ba32353a05. Again someone more knowledgeable than me should review safety of adding new `InvalidBlockFound` calls in `ProcessNewBlock`,  `AcceptBlock`, and `InvalidateBlock`.\r\n\r\nChanges since last review were rebase, python cleanups, adding CorruptionPossible log print, and some suggestions from the last review.\r\n\r\nYou may want to update PR description since it will become part of git history if this is merged.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MjQ3OTU0OQ==",
                    "publishedAt": "2018-03-12T22:09:51Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12407#issuecomment-372479549"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/73197?v=4",
                        "login": "jamesob"
                    },
                    "body": "Thanks @ryanofsky and @sipa for the re-review. I've incorporated @sipa's change (remove unconditional log in `InvalidBlockFound` when corruption is possible), rebased, and updated the PR description to better reflect the change's contents. I've added some text discussing the refactoring, reproduced here\r\n\r\n> This change also consolidates the setting of CBlockIndex's `nStatus |= BLOCK_FAILED_VALID` to a single function (`InvalidBlockFound`) since there's peripheral bookkeeping (e.g. `g_failed_blocks.insert()`) that we want to do consistently but is duplicated in some places or not done in other cases when it apparently should be. \r\n> \r\n> [One such replacement with InvalidBlockFound](https://github.com/bitcoin/bitcoin/pull/12407/files?diff=unified#diff-24efdb00bfbe56b140fb006b562cc70bL3420) ensures addition of invalid blocks to `g_failed_blocks` and so (in theory) reduces CPU burden when being spammed with descendants of an invalid block, since we no longer have to walk `mapBlockIndex` to determine its invalidity. Based on reading usage of `g_failed_blocks` I can't tell if this savings is real, but in any case it seems worthwhile to keep that set consistent (i.e. 1-1 with blocks marked BLOCK_FAILED_VALID since last restart).",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NTc3NTM4Mw==",
                    "publishedAt": "2018-03-23T19:32:02Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12407#issuecomment-375775383"
                }
            ],
            "totalCount": 8
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "16d75a01b91ecf5f4d9c682a982a5b67b4791f6b"
                    }
                }
            ],
            "totalCount": 4
        },
        "createdAt": "2018-02-10T19:41:13Z",
        "deletions": 61,
        "id": "MDExOlB1bGxSZXF1ZXN0MTY4NDE3MzQ5",
        "labels": {
            "nodes": [
                {
                    "color": "6060aa",
                    "id": "MDU6TGFiZWwxMTgzNzk2NTI=",
                    "name": "Validation"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "CONFLICTING",
        "mergedAt": null,
        "number": 12407,
        "state": "OPEN",
        "title": "Ensure nStatus is set properly for all invalid blocks",
        "updatedAt": "2018-03-23T20:10:22Z"
    },
    {
        "additions": 17,
        "author": {
            "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
            "login": "promag",
            "url": "https://github.com/promag"
        },
        "body": "Check that all transaction destinations, including change address if specified, are distinct.\r\n\r\nThe error is also raised in the UI:\r\n<img width=\"922\" alt=\"screen shot 2018-02-13 at 01 17 49\" src=\"https://user-images.githubusercontent.com/3534524/36128715-c25a7720-105b-11e8-8b07-4cc4836c0b52.png\">\r\n",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
                        "login": "promag"
                    },
                    "body": "A similar check exists in `sendmany` but at the moment the errors are different. Not sure it should change there or try to make this equal (the problem is that the errors in `CWallet` are translated and RPC errors aren't).",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NTExOTgyOQ==",
                    "publishedAt": "2018-02-13T01:21:51Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12419#issuecomment-365119829"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "Concept ACK. I think this should be enforced consistently.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NTIxOTcwMQ==",
                    "publishedAt": "2018-02-13T10:23:55Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12419#issuecomment-365219701"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
                        "login": "promag"
                    },
                    "body": "Can you be more specific @laanwj?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NTIzNzUwNg==",
                    "publishedAt": "2018-02-13T11:19:20Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12419#issuecomment-365237506"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "Huh? No, I mean that exactly what this PR does, checking it in CreateTransaction is good.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NTI2NzMxNQ==",
                    "publishedAt": "2018-02-13T13:32:10Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12419#issuecomment-365267315"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
                        "login": "promag"
                    },
                    "body": "Ah ok, misunderstood you.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NTI5NjQyMQ==",
                    "publishedAt": "2018-02-13T15:13:58Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12419#issuecomment-365296421"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "utACK e82d17991418bdc3cfe60407a66735c265f8cd21",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NjQyNDQwMA==",
                    "publishedAt": "2018-02-17T07:46:09Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12419#issuecomment-366424400"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/10217?v=4",
                        "login": "Sjors"
                    },
                    "body": "Concept ACK, but now there's two different error messages depending on whether the duplicate is a change address or a regular destination:\r\n\r\n<img width=\"627\" alt=\"schermafbeelding 2018-02-20 om 16 46 18\" src=\"https://user-images.githubusercontent.com/10217/36433814-c0360c0e-165d-11e8-9f58-f22b9e144f6c.png\">\r\n<img width=\"645\" alt=\"schermafbeelding 2018-02-20 om 16 46 42\" src=\"https://user-images.githubusercontent.com/10217/36433815-c0573690-165d-11e8-8cec-63aab8148e6a.png\">\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NzAyMDQ3Mg==",
                    "publishedAt": "2018-02-20T15:47:54Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12419#issuecomment-367020472"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
                        "login": "promag"
                    },
                    "body": "@Sjors I guess we could remove the old check?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MDg0NTc4NA==",
                    "publishedAt": "2018-03-06T16:43:41Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12419#issuecomment-370845784"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
                        "login": "promag"
                    },
                    "body": "Should all checks for duplicate addresses be removed?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MDg3MDU1OA==",
                    "publishedAt": "2018-03-06T17:57:35Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12419#issuecomment-370870558"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/10217?v=4",
                        "login": "Sjors"
                    },
                    "body": "@promag I suggest reusing the original warning.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MDk0Nzg3OQ==",
                    "publishedAt": "2018-03-06T22:13:31Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12419#issuecomment-370947879"
                }
            ],
            "totalCount": 10
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "e82d17991418bdc3cfe60407a66735c265f8cd21"
                    }
                }
            ],
            "totalCount": 1
        },
        "createdAt": "2018-02-13T01:20:04Z",
        "deletions": 1,
        "id": "MDExOlB1bGxSZXF1ZXN0MTY4NzMxNDg2",
        "labels": {
            "nodes": [
                {
                    "color": "08a781",
                    "id": "MDU6TGFiZWwxNDk0MjQ=",
                    "name": "Wallet"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "number": 12419,
        "state": "OPEN",
        "title": "Force distinct destinations in CWallet::CreateTransaction",
        "updatedAt": "2018-03-06T22:13:31Z"
    },
    {
        "additions": 198,
        "author": {
            "avatarUrl": "https://avatars0.githubusercontent.com/u/7999704?v=4",
            "login": "esotericnonsense",
            "url": "https://github.com/esotericnonsense"
        },
        "body": "This patch adds a -strictjsonrpcspec flag.\r\n\r\nIf the flag is used, bitcoind enters JSON-RPC 2.0 mode, which allows it to be fully spec-compliant (and thus work with libraries like libjson-rpc-cpp without modification).\r\n\r\nI've added a functional test for the specific bits of the spec that I've changed.\r\n\r\nunivalue changes are included in this commit for ease of review but I can pull those out (see https://github.com/bitcoin-core/univalue/pull/12)",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "Concept ACK",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NTg1OTEzNw==",
                    "publishedAt": "2018-02-15T08:40:21Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12435#issuecomment-365859137"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/7999704?v=4",
                        "login": "esotericnonsense"
                    },
                    "body": "Tests are failing on the latest commit. Looking in to it.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NjM2NTAzMg==",
                    "publishedAt": "2018-02-16T21:35:49Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12435#issuecomment-366365032"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/7999704?v=4",
                        "login": "esotericnonsense"
                    },
                    "body": "doh!",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NjM2NzEyOA==",
                    "publishedAt": "2018-02-16T21:45:20Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12435#issuecomment-366367128"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/73197?v=4",
                        "login": "jamesob"
                    },
                    "body": "[Squash needed](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#squashing-commits) at some point.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NjM2ODcxMQ==",
                    "publishedAt": "2018-02-16T21:51:55Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12435#issuecomment-366368711"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "Nice. Concept ACK.\r\nTravis is failing because of the subtree change that is separately opened in https://github.com/bitcoin-core/univalue/pull/12",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NjQzNDcwMg==",
                    "publishedAt": "2018-02-17T11:20:35Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12435#issuecomment-366434702"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/7999704?v=4",
                        "login": "esotericnonsense"
                    },
                    "body": "My attempt to squash this seems to have gone awfully wrong. Trying to fix it up...\r\n\r\nedit: should be fine now.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NjU2MDg4NA==",
                    "publishedAt": "2018-02-19T00:05:48Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12435#issuecomment-366560884"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/3211283?v=4",
                        "login": "MeshCollider"
                    },
                    "body": "Related: https://github.com/bitcoin/bitcoin/issues/2960",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MTE2MzA5Mg==",
                    "publishedAt": "2018-03-07T14:52:20Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12435#issuecomment-371163092"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "(travis failure is due to subtree check for univalue)",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4Mzg2NDU5Mg==",
                    "publishedAt": "2018-04-24T09:22:53Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12435#issuecomment-383864592"
                }
            ],
            "totalCount": 8
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "d87d60aaa98ee149360f4cc812209a380b806c67"
                    }
                }
            ],
            "totalCount": 1
        },
        "createdAt": "2018-02-14T23:00:37Z",
        "deletions": 45,
        "id": "MDExOlB1bGxSZXF1ZXN0MTY5MjQ1OTQz",
        "labels": {
            "nodes": [
                {
                    "color": "0052cc",
                    "id": "MDU6TGFiZWw5ODI3OTE3Nw==",
                    "name": "RPC/REST/ZMQ"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "number": 12435,
        "state": "OPEN",
        "title": "RPC: Strict JSON-RPC 2.0 compliance (gated behind flag)",
        "updatedAt": "2018-04-24T09:22:53Z"
    },
    {
        "additions": 53,
        "author": {
            "avatarUrl": "https://avatars2.githubusercontent.com/u/5470?v=4",
            "login": "Empact",
            "url": "https://github.com/Empact"
        },
        "body": "Fixes #12429\r\n\r\nThis value is listed as required in the docs, but not enforced as such. We should update the docs if it's not required.",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/5767891?v=4",
                        "login": "instagibbs"
                    },
                    "body": "utACK\r\n\r\nI wouldn't mind argument checks for the other prevtx arguments, if none exist, but not a blocker.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NjM0OTY3NQ==",
                    "publishedAt": "2018-02-16T20:29:47Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12458#issuecomment-366349675"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/5470?v=4",
                        "login": "Empact"
                    },
                    "body": "@instagibbs Did you have any specific sort of testing in mind? Everything except `redeemScript` is tested, but `redeemScript` is not required in all cases.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NjM1NDkzNw==",
                    "publishedAt": "2018-02-16T20:52:33Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12458#issuecomment-366354937"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/5470?v=4",
                        "login": "Empact"
                    },
                    "body": "Scratch that - `redeemScript` is tested here:\r\nhttps://github.com/bitcoin/bitcoin/pull/12458/files#diff-01aa7d1d32f1b9e5a836c9c411978918L839",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NjM1NTQ4Nw==",
                    "publishedAt": "2018-02-16T20:55:01Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12458#issuecomment-366355487"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/5767891?v=4",
                        "login": "instagibbs"
                    },
                    "body": "I mean tested inside functional tests, sorry.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NjM1NTg0Ng==",
                    "publishedAt": "2018-02-16T20:56:39Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12458#issuecomment-366355846"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/548488?v=4",
                        "login": "sipa"
                    },
                    "body": "It should only be required when signing a segwit input, no?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NjQxMjYyOQ==",
                    "publishedAt": "2018-02-17T03:26:51Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12458#issuecomment-366412629"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "Agree with sipa. There is no need to enforce amounts for non SW inputs... ",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NjQzNTI2Mw==",
                    "publishedAt": "2018-02-17T11:31:14Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12458#issuecomment-366435263"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/5470?v=4",
                        "login": "Empact"
                    },
                    "body": "Gotcha - I'll revise.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NjU2OTg0MQ==",
                    "publishedAt": "2018-02-19T01:45:02Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12458#issuecomment-366569841"
                }
            ],
            "totalCount": 7
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "7b484551413e7907d4e5341bf6903f1e5762b61c"
                    }
                }
            ],
            "totalCount": 1
        },
        "createdAt": "2018-02-16T20:11:35Z",
        "deletions": 0,
        "id": "MDExOlB1bGxSZXF1ZXN0MTY5NzE1MDk4",
        "labels": {
            "nodes": [
                {
                    "color": "0052cc",
                    "id": "MDU6TGFiZWw5ODI3OTE3Nw==",
                    "name": "RPC/REST/ZMQ"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "number": 12458,
        "state": "OPEN",
        "title": "WIP: Enforce that amount is provided for signrawtransaction prevtxs",
        "updatedAt": "2018-04-11T08:37:26Z"
    },
    {
        "additions": 37,
        "author": {
            "avatarUrl": "https://avatars2.githubusercontent.com/u/5470?v=4",
            "login": "Empact",
            "url": "https://github.com/Empact"
        },
        "body": "~~And introduce CPubKeySig to host code relative to key sigs.~~",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/107096?v=4",
                        "login": "devrandom"
                    },
                    "body": "utACK https://github.com/bitcoin/bitcoin/pull/12461/commits/b0e8b7269d934a0c58c0410017e2f958cd792c20",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NjM2MTkwNw==",
                    "publishedAt": "2018-02-16T21:22:07Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12461#issuecomment-366361907"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "Concept ACK.\r\nNot sure if `CPubKeySig` needs its own space.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NjQzNDMxMw==",
                    "publishedAt": "2018-02-17T11:12:48Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12461#issuecomment-366434313"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/5470?v=4",
                        "login": "Empact"
                    },
                    "body": "Thanks, made PubKeySig a namespace.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NjU2MjY3NA==",
                    "publishedAt": "2018-02-19T00:26:11Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12461#issuecomment-366562674"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/5470?v=4",
                        "login": "Empact"
                    },
                    "body": "On second thought, dropped PubKeySig - without any other code it's barely a separate concern.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NzExNDgxMA==",
                    "publishedAt": "2018-02-20T20:51:09Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12461#issuecomment-367114810"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/5767891?v=4",
                        "login": "instagibbs"
                    },
                    "body": "seemingly unrelated travis error:\r\n>File \"/home/travis/build/bitcoin/bitcoin/build/bitcoin-i686-pc-linux-gnu/test/functional/rpc_net.py\", line 54, in _test_getnettotals\r\n>    assert_equal(before['bytesrecv_per_msg']['pong'] + 32, after['bytesrecv_per_msg']['pong'])\r\n\r\nkicked travis",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2ODYxMTEzMA==",
                    "publishedAt": "2018-02-26T19:01:42Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12461#issuecomment-368611130"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/5470?v=4",
                        "login": "Empact"
                    },
                    "body": "@instagibbs thanks - seems like that is a timing-related failure, I pushed #12545 to increase the wait, and reduce the likelihood of spurious failures.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2ODYyMjQ4MA==",
                    "publishedAt": "2018-02-26T19:35:25Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12461#issuecomment-368622480"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
                        "login": "MarcoFalke"
                    },
                    "body": "Needs rebase if still relevant",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NDA3NDM3NQ==",
                    "publishedAt": "2018-03-19T01:10:42Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12461#issuecomment-374074375"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/5470?v=4",
                        "login": "Empact"
                    },
                    "body": "Rebased",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NDg0ODMyOQ==",
                    "publishedAt": "2018-03-21T07:01:42Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12461#issuecomment-374848329"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/5470?v=4",
                        "login": "Empact"
                    },
                    "body": "Rebased & reimplemented as a scripted-diff",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MDkzNTMyNg==",
                    "publishedAt": "2018-04-12T20:32:03Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12461#issuecomment-380935326"
                }
            ],
            "totalCount": 9
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "f1583f26f2d9cb199ace6054a67797e1d4d9bed0"
                    }
                }
            ],
            "totalCount": 1
        },
        "createdAt": "2018-02-16T20:39:27Z",
        "deletions": 37,
        "id": "MDExOlB1bGxSZXF1ZXN0MTY5NzIwNDU3",
        "labels": {
            "nodes": [
                {
                    "color": "E6F6D6",
                    "id": "MDU6TGFiZWwxMzU5NjE=",
                    "name": "Refactoring"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "number": 12461,
        "state": "OPEN",
        "title": "scripted-diff: Rename key size consts to be relative to their class",
        "updatedAt": "2018-04-17T09:11:00Z"
    },
    {
        "additions": 361,
        "author": {
            "avatarUrl": "https://avatars1.githubusercontent.com/u/417043?v=4",
            "login": "theuni",
            "url": "https://github.com/theuni"
        },
        "body": "Reported by irc user (and maybe github user?) @esotericnonsense.\r\n\r\nBuilding bitcoin as c++11 and univalue as c++03/c++14 (depending on compiler version) is pretty scary. It's surprising that this hasn't caused any issues yet.\r\n\r\nI'm afraid the fix is a big pile of autotools nonsense, but the changes are pretty straightforward:\r\n- Add a new macro to simplify passing args to subconfigures (univalue and secp256k1)\r\n- Pass our modified CXX down to univalue\r\n- If using depends, don't reset the values passed to subconfigures to their defaults\r\n\r\nThe good news is that this makes it much easier to tweak subconfigure args in the future.",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/417043?v=4",
                        "login": "theuni"
                    },
                    "body": "Grr, there's a bug in the macro's handling of subdirs. I'll have to fix this up next week.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NjQxNzE4NQ==",
                    "publishedAt": "2018-02-17T05:02:30Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12467#issuecomment-366417185"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "Concept ACK.\r\n\r\n> Building bitcoin as c++11 and univalue as c++03/c++14 (depending on compiler version) is pretty scary\r\n\r\nThere are certainly some rough edge cases, but in theory (no compiler bugs) this should be ok, right? Is there any official guideline about this?\r\n\r\nDoesn't building against system libraries have the same risks? You can never be sure what c++ standard they were compiled with, certainly not with compilers changing the default all the time.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NjQzMDM3OQ==",
                    "publishedAt": "2018-02-17T09:55:29Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12467#issuecomment-366430379"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/417043?v=4",
                        "login": "theuni"
                    },
                    "body": "@laanwj I think we're probably ok here, but I have no idea what happens when differing abi's get linked in together.\r\n\r\nThis could certainly be a problem if univalue was built as a shared lib though, as we could miss thrown exceptions due to differing type signatures. IIRC we actually had that issue at some point catching boost exceptions.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MDU1MzEwMg==",
                    "publishedAt": "2018-03-05T20:25:58Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12467#issuecomment-370553102"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/863730?v=4",
                        "login": "fanquake"
                    },
                    "body": "This needs a rebase.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MzA0NDgyNQ==",
                    "publishedAt": "2018-03-14T14:40:05Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12467#issuecomment-373044825"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
                        "login": "MarcoFalke"
                    },
                    "body": "Travis fails with\r\n\r\n```\r\n/usr/lib/gcc-cross/arm-linux-gnueabihf/4.8/../../../../arm-linux-gnueabihf/bin/ld: univalue/.libs/libunivalue.a(libunivalue_la-univalue.o): relocation R_ARM_THM_MOVW_ABS_NC against `_ZNSs4_Rep20_S_empty_rep_storageE' can not be used when making a shared object; recompile with -fPIC\r\nunivalue/.libs/libunivalue.a: error adding symbols: Bad value\r\ncollect2: error: ld returned 1 exit status",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3Mzk5OTUxOA==",
                    "publishedAt": "2018-03-18T13:33:09Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12467#issuecomment-373999518"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "@theuni ping",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MDE2MjkyOA==",
                    "publishedAt": "2018-04-10T16:24:59Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12467#issuecomment-380162928"
                }
            ],
            "totalCount": 6
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "f52f539c9898fa795d58ab5d09187d71a257640a"
                    }
                }
            ],
            "totalCount": 3
        },
        "createdAt": "2018-02-17T04:09:09Z",
        "deletions": 7,
        "id": "MDExOlB1bGxSZXF1ZXN0MTY5NzY3MzMw",
        "labels": {
            "nodes": [
                {
                    "color": "5319e7",
                    "id": "MDU6TGFiZWw2MTg4OTQxNg==",
                    "name": "Build system"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "number": 12467,
        "state": "OPEN",
        "title": "build: compile univalue as c++11",
        "updatedAt": "2018-04-10T16:24:59Z"
    },
    {
        "additions": 52,
        "author": {
            "avatarUrl": "https://avatars3.githubusercontent.com/u/3782274?v=4",
            "login": "achow101",
            "url": "https://github.com/achow101"
        },
        "body": "This is the replacement for #11678 which implements @ryanofsky's [suggestion](https://github.com/bitcoin/bitcoin/pull/11678#pullrequestreview-76464511).\r\n\r\nShutting down the software was to prevent the BDB environment from writing unencrypted private keys to disk in the database log files, as was noted [here](https://bitcointalk.org/index.php?topic=51474.msg616068#msg616068). This PR replaces the shutdown behavior with a CDBEnv flush, close, and reopen which achieves the same effect: everything is cleanly flushed and closed, the log files are removed, and then the environment reopened to continue normal operation.\r\n\r\nTo ensure that no unencrypted private keys are in the log files after encrypting the wallet, I wrote [this script](https://gist.github.com/achow101/7f7143e6c3d3fdc034d3470e72823e9d) to pull private keys from the original wallet file and searches for these keys in the log files (note that you will have to change your file paths to make it work on your own machine).\r\n\r\nAs for concerns about private keys being written to slack space or being kept in memory, these behaviors no longer exist after the original wallet encryption PR and the shutting down solution from 2011.\r\n\r\ncc @ryanofsky ",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/3782274?v=4",
                        "login": "achow101"
                    },
                    "body": "@ryanofsky I've implemented something which is basically what you described. It seems to work, although I'm not sure how to test the thread safe-ness of it. Let me know what you think.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NzIwNTc1MA==",
                    "publishedAt": "2018-02-21T03:54:36Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12493#issuecomment-367205750"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/3782274?v=4",
                        "login": "achow101"
                    },
                    "body": "Rebased",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3Njk3ODA3MA==",
                    "publishedAt": "2018-03-28T17:56:12Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12493#issuecomment-376978070"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/3782274?v=4",
                        "login": "achow101"
                    },
                    "body": "Fixed travis and rebased again.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NzcwNDIzMQ==",
                    "publishedAt": "2018-03-31T16:16:30Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12493#issuecomment-377704231"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/3782274?v=4",
                        "login": "achow101"
                    },
                    "body": "Rebased",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MDk1MjI2OQ==",
                    "publishedAt": "2018-04-12T21:38:07Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12493#issuecomment-380952269"
                }
            ],
            "totalCount": 4
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "b766d7bb8ff0494ea3961945f15abaa4b13d0830"
                    }
                }
            ],
            "totalCount": 4
        },
        "createdAt": "2018-02-20T21:29:14Z",
        "deletions": 30,
        "id": "MDExOlB1bGxSZXF1ZXN0MTcwMzEzNTU0",
        "labels": {
            "nodes": [
                {
                    "color": "08a781",
                    "id": "MDU6TGFiZWwxNDk0MjQ=",
                    "name": "Wallet"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "number": 12493,
        "state": "OPEN",
        "title": "[wallet] Reopen CDBEnv after encryption instead of shutting down",
        "updatedAt": "2018-04-12T22:37:48Z"
    },
    {
        "additions": 4,
        "author": {
            "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
            "login": "promag",
            "url": "https://github.com/promag"
        },
        "body": "Fixes #10987.\r\n\r\nHere are the steps to test the feature:\r\n\r\n1. start bitcoind, generate a couple of transactions and then stop:\r\n```\r\nbitcoind -regtest -printtoconsole\r\nbitcoin-cli -regtest generate 100\r\n```\r\n2. apply the following patch\r\n```diff\r\ndiff --git a/src/wallet/wallet.cpp b/src/wallet/wallet.cpp\r\nindex 2478d67ce..8f8cea40c 100644\r\n--- a/src/wallet/wallet.cpp\r\n+++ b/src/wallet/wallet.cpp\r\n@@ -1671,6 +1671,7 @@ CBlockIndex* CWallet::ScanForWalletTransactions(CBlockIndex* pindexStart, CBlock\r\n         }\r\n         while (pindex && !fAbortRescan && !ShutdownRequested())\r\n         {\r\n+            MilliSleep(500);\r\n             if (pindex->nHeight % 100 == 0 && dProgressTip - dProgressStart > 0.0) {\r\n                 double gvp = 0;\r\n                 {\r\n```\r\n3. start bitcoind with rescan flag, interrupt with CTRL+C and the output should look like:\r\n```\r\nbitcoind -regtest -printtoconsole -rescan\r\n...\r\n^C2018-02-22 01:00:55 AddToWallet e8bfb4501b630ad2acb91e88ab0112a779766536d2c564b04faae45ae90e18f7\r\n2018-02-22 01:00:55 Rescan interrupted by shutdown request at block 5. Progress=1.000000\r\n2018-02-22 01:00:55  rescan                 1774ms\r\n2018-02-22 01:00:55 setKeyPool.size() = 1995\r\n2018-02-22 01:00:55 mapWallet.size() = 10145\r\n2018-02-22 01:00:55 mapAddressBook.size() = 3\r\n2018-02-22 01:00:55 Shutdown: In progress...\r\n2018-02-22 01:00:55 scheduler thread interrupt\r\n2018-02-22 01:00:55 Shutdown: done\r\n```\r\n",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "Seems not urgently important, but maybe worth to do.\r\nMy only concern is to include `init.h` in `wallet.cpp` (since the long term goal is to make the wallet more independent from the sublayers).",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2ODI3MjY1MA==",
                    "publishedAt": "2018-02-25T00:43:50Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12507#issuecomment-368272650"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
                        "login": "promag"
                    },
                    "body": "I thought the concern was having the init depending on the wallet.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2ODMwMTQ3Ng==",
                    "publishedAt": "2018-02-25T11:25:00Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12507#issuecomment-368301476"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
                        "login": "promag"
                    },
                    "body": "Rebased after #12287.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2ODMwMTgxNg==",
                    "publishedAt": "2018-02-25T11:30:14Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12507#issuecomment-368301816"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
                        "login": "promag"
                    },
                    "body": "I wonder if the rescan should resume in the next run? The problem is the same if `abortrescan` is called - keys are stored but transactions can be missed.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2ODM1NDk1MA==",
                    "publishedAt": "2018-02-25T23:22:11Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12507#issuecomment-368354950"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
                        "login": "promag"
                    },
                    "body": "I guess it fixes #12596.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MTI4ODE1MA==",
                    "publishedAt": "2018-03-07T21:18:54Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12507#issuecomment-371288150"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
                        "login": "MarcoFalke"
                    },
                    "body": "Am I reading this correctly, that the rescan would be aborted instead of paused (and resumed on the next run), similar to reindex? This might be confusing to users.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MjM2NzY0Nw==",
                    "publishedAt": "2018-03-12T16:15:04Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12507#issuecomment-372367647"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
                        "login": "promag"
                    },
                    "body": "@MarcoFalke right, but if `abortrescan` is called, the rescan is also not resumed. Also, not interrupting might lead the user to force kill which is not desirable.\r\n\r\nI can implement the \"resume rescan\" option here, just waiting for more feedback.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MjM3MDc4Mw==",
                    "publishedAt": "2018-03-12T16:23:40Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12507#issuecomment-372370783"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/548488?v=4",
                        "login": "sipa"
                    },
                    "body": "@MarcoFalke In what way do you think this is not expected behavior?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3Mzg3NTU1Nw==",
                    "publishedAt": "2018-03-17T00:01:05Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12507#issuecomment-373875557"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
                        "login": "MarcoFalke"
                    },
                    "body": "Since rescanning might take several hours, some users might prefer to shut down the node temporarily and then continue the rescan process whenever they start the node again. (Without having to manually specify `rescanblockchain` with a block height.)\r\n\r\nValid use cases are probably\r\n* (1) abort rescan, (2) shut down (3) restart and don't resume rescan\r\n* (1) shut down, (2) restart and resume rescan",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MzkzMDMzMQ==",
                    "publishedAt": "2018-03-17T15:50:50Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12507#issuecomment-373930331"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
                        "login": "MarcoFalke"
                    },
                    "body": "Since the rescan in the gui is specifically advertised to be non-resumable, the following code can be used to fix the gui:\r\n\r\n```diff\r\n--- a/src/qt/splashscreen.cpp\r\n+++ b/src/qt/splashscreen.cpp\r\n@@ -225,8 +225,16 @@ void SplashScreen::paintEvent(QPaintEvent *event)\r\n     painter.drawText(r, curAlignment, curMessage);\r\n }\r\n \r\n-void SplashScreen::closeEvent(QCloseEvent *event)\r\n+void SplashScreen::closeEvent(QCloseEvent* event)\r\n {\r\n+#ifdef ENABLE_WALLET\r\n+    for (CWallet* wallet : connectedWallets) {\r\n+        if (wallet->IsScanning()) {\r\n+            // We don't resume the ongoing rescan\r\n+            wallet->AbortRescan();\r\n+        }\r\n+    }\r\n+#endif\r\n     StartShutdown(); // allows an \"emergency\" shutdown during startup\r\n     event->ignore();\r\n }\r\n```\r\n\r\nI am not sure how to abort an ongoing rescan in bitcoind on startup, since the rpc will be started later.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MzkzMjQ3NQ==",
                    "publishedAt": "2018-03-17T16:19:19Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12507#issuecomment-373932475"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/2734?v=4",
                        "login": "eklitzke"
                    },
                    "body": "I think the issue about interrupted re-scans should be tracked in a separate issue elsewhere. That's something I'm interested in working on at some point, i.e. in general if you shut down you node in the middle of a rescan it should make a best-effort to restart at the same point it was interrupted at.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NDEyMTkxMw==",
                    "publishedAt": "2018-03-19T07:24:03Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12507#issuecomment-374121913"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "Needs rebase\r\nutACK 3c647844d960c80f45f0359bcb311638f4a733b2\r\nAgree with @eklitzke that interruptible rescans could be next and can be independent from this PR.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MTQyNTcwMg==",
                    "publishedAt": "2018-04-15T18:05:12Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12507#issuecomment-381425702"
                }
            ],
            "totalCount": 12
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "3c647844d960c80f45f0359bcb311638f4a733b2"
                    }
                }
            ],
            "totalCount": 1
        },
        "createdAt": "2018-02-22T01:01:33Z",
        "deletions": 1,
        "id": "MDExOlB1bGxSZXF1ZXN0MTcwNjMxMjI3",
        "labels": {
            "nodes": [
                {
                    "color": "08a781",
                    "id": "MDU6TGFiZWwxNDk0MjQ=",
                    "name": "Wallet"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "CONFLICTING",
        "mergedAt": null,
        "number": 12507,
        "state": "OPEN",
        "title": "Interrupt rescan on shutdown request",
        "updatedAt": "2018-04-15T18:05:12Z"
    },
    {
        "additions": 50,
        "author": {
            "avatarUrl": "https://avatars3.githubusercontent.com/u/250224?v=4",
            "login": "kallewoof",
            "url": "https://github.com/kallewoof"
        },
        "body": "Rebases #9167 by @morcos on master.",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/11154118?v=4",
                        "login": "ken2812221"
                    },
                    "body": "What's the purpose of changing coding style?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NzY0OTUwMA==",
                    "publishedAt": "2018-02-22T11:15:04Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12508#issuecomment-367649500"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/250224?v=4",
                        "login": "kallewoof"
                    },
                    "body": "@ken2812221 To abide by the coding style conventions (see contributing on main page).",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2NzY3MTAyMQ==",
                    "publishedAt": "2018-02-22T12:51:23Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12508#issuecomment-367671021"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1063656?v=4",
                        "login": "jnewbery"
                    },
                    "body": "Needs rebase",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3ODczOTA3OA==",
                    "publishedAt": "2018-04-04T20:44:36Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12508#issuecomment-378739078"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/250224?v=4",
                        "login": "kallewoof"
                    },
                    "body": "So, the new `IsAllFromMe` code does not check if `GetDebit(ISMINE_ALL) > 0`, which `IsMine` does. The result is that the existing code will say 'not eligible' and the new code will say 'eligible', for many of the coin selector test cases. I think adding a check for `GetDebit` to `IsAllFromMe` is the right approach, but I believe @morcos removed this part for a reason in #9167.\r\n\r\nPing @morcos. Still investigating the issue, so this may become irrelevant.\r\n\r\nEdit: It seems this:\r\n```\r\nCTransaction(hash=777c42d727, ver=2, vin.size=0, vout.size=1, nLockTime=0)\r\n    CTxOut(nValue=0.01000000, scriptPubKey=)\r\n```\r\nis considered all mine. Which technically speaking is correct, but `CWalletTx::GetDebit` explicitly returns 0 (i.e. not mine) for `vin.empty()`, so I might adapt that logic in `IsAllFromMe` as well.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3OTU5NjQ5MQ==",
                    "publishedAt": "2018-04-09T00:41:30Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12508#issuecomment-379596491"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/250224?v=4",
                        "login": "kallewoof"
                    },
                    "body": "I believe fdb1d59 (count 0-vin transactions as not mine in `IsAllFromMe`) and 5073476 (consider coinbase transaction as all mine in `CWallet`) address the problems, ~~but I'm not sure the latter is entirely correct in all cases. If a random person checks a coinbase transaction, I think it will claim it is theirs now. I think adding a 'can spend' check should suffice here~~.\r\n\r\nEdit: `CWallet::IsAllFromMe` is only used in the feebumper, and since coinbase transactions can't be fee-bumped anyway, 5073476 should be fine. To clarify: the `IsFromMe` code already behaves this way (i.e. consider coinbase transactions as from me, if in miner wallet); it may be worth it to fall back to `IsFromMe` style check of `GetDebit(..) > 0` though.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3OTYxMTg1MQ==",
                    "publishedAt": "2018-04-09T02:40:09Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12508#issuecomment-379611851"
                }
            ],
            "totalCount": 5
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "50734761d4c11eefbc3310facc07fdbeb3ed3787"
                    }
                }
            ],
            "totalCount": 10
        },
        "createdAt": "2018-02-22T05:25:29Z",
        "deletions": 32,
        "id": "MDExOlB1bGxSZXF1ZXN0MTcwNjYwMDUy",
        "labels": {
            "nodes": [
                {
                    "color": "08a781",
                    "id": "MDU6TGFiZWwxNDk0MjQ=",
                    "name": "Wallet"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "CONFLICTING",
        "mergedAt": null,
        "number": 12508,
        "state": "OPEN",
        "title": "IsAllFromMe",
        "updatedAt": "2018-04-09T03:26:24Z"
    },
    {
        "additions": 1,
        "author": {
            "avatarUrl": "https://avatars1.githubusercontent.com/u/10217?v=4",
            "login": "Sjors",
            "url": "https://github.com/Sjors"
        },
        "body": "This should make it possible to build dependencies for iPhone 8, iPhone X and other iOs devices with that or new chips.",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/10217?v=4",
                        "login": "Sjors"
                    },
                    "body": "It seems I need to make some additional change...\r\n\r\n```\r\nmake HOST=aarch64-apple-darwin14 NO_QT=1\r\nheartbeat_test.c => ../test/heartbeat_test.c\r\nmaking links in engines...\r\nmaking links in tools...\r\nmake[2]: Nothing to be done for `links'.\r\ngenerating dummy tests (if needed)...\r\nmake[2]: Nothing to be done for `generate'.\r\n\r\nSince you've disabled or enabled at least one algorithm, you need to do\r\nthe following before building:\r\n\r\n\tmake depend\r\n\r\nConfigured for iphoneos-cross.\r\nBuilding openssl...\r\nmaking all in crypto...\r\n/usr/bin/perl ../util/mkbuildinf.pl \"-I. -I.. -I../include  -DOPENSSL_THREADS -D_REENTRANT -pipe -O2 -I/Volumes/SSD/src/bitcoin/depends/aarch64-apple-darwin14/include -O3 -isysroot /SDKs/ -fomit-frame-pointer -fno-common\" \"iphoneos-cross\" >buildinf.h\r\n/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang -mmacosx-version-min=10.8 -I. -I.. -I../include  -DOPENSSL_THREADS -D_REENTRANT -pipe -O2 -I/Volumes/SSD/src/bitcoin/depends/aarch64-apple-darwin14/include -O3 -isysroot /SDKs/ -fomit-frame-pointer -fno-common   -c -o cryptlib.o cryptlib.c\r\nclang: warning: no such sysroot directory: '/SDKs/' [-Wmissing-sysroot]\r\nIn file included from cryptlib.c:117:\r\n./cryptlib.h:62:10: fatal error: 'stdlib.h' file not found\r\n#include <stdlib.h>\r\n         ^~~~~~~~~~\r\n1 error generated.\r\nmake[2]: *** [cryptlib.o] Error 1\r\nmake[1]: *** [build_crypto] Error 1\r\nmake: *** [/Volumes/SSD/src/bitcoin/depends/work/build/aarch64-apple-darwin14/openssl/1.0.1k-df65369e03c/./.stamp_built] Error 2\r\n```\r\n\r\nFull [log](https://gist.github.com/Sjors/3c95740a85a3ce23f4a15e78ebd65afa).",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2ODg0NTY1NA==",
                    "publishedAt": "2018-02-27T11:36:08Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12557#issuecomment-368845654"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/863730?v=4",
                        "login": "fanquake"
                    },
                    "body": "@Sjors Are you still working on this?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MjkzODcxNw==",
                    "publishedAt": "2018-04-20T01:46:30Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12557#issuecomment-382938717"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/10217?v=4",
                        "login": "Sjors"
                    },
                    "body": "@fanquake waiting for hints.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MzA5NDgxNg==",
                    "publishedAt": "2018-04-20T13:24:58Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12557#issuecomment-383094816"
                }
            ],
            "totalCount": 3
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "3bc95754217298dc6daf55f4e7f62419ad7249bb"
                    }
                }
            ],
            "totalCount": 1
        },
        "createdAt": "2018-02-27T11:33:08Z",
        "deletions": 0,
        "id": "MDExOlB1bGxSZXF1ZXN0MTcxNjM1OTQ5",
        "labels": {
            "nodes": [
                {
                    "color": "5319e7",
                    "id": "MDU6TGFiZWw2MTg4OTQxNg==",
                    "name": "Build system"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "number": 12557,
        "state": "OPEN",
        "title": "[WIP] [depends] openssl: add aarch64_darwin",
        "updatedAt": "2018-04-20T13:24:58Z"
    },
    {
        "additions": 6,
        "author": {
            "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
            "login": "promag",
            "url": "https://github.com/promag"
        },
        "body": "",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "Can you please add some rationale as to how you checked that the cs_main lock can be safely removed from these functions?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MDU3NTgxNA==",
                    "publishedAt": "2018-03-05T21:40:06Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12559#issuecomment-370575814"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
                        "login": "promag"
                    },
                    "body": "I've manually checked what calls were made in each RPC, and checked that none uses something protected by `cs_main`. I guess this could be checked by `AssertLockIsHeld` or similar, but it's not widely adopted yet.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MDU4MDg2OA==",
                    "publishedAt": "2018-03-05T21:55:44Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12559#issuecomment-370580868"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "Thanks. What I'm a little bit worried about is that some of the CWallet calls might internally lock cs_main, which will cause potential deadlocks due to lock ordering if cs_wallet is already held. Or maybe not now, but that someone will do so in the future.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MDU5MTMxMQ==",
                    "publishedAt": "2018-03-05T22:32:18Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12559#issuecomment-370591311"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
                        "login": "promag"
                    },
                    "body": "@laanwj that would be detected either by review or by lock order check?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4Mzk1ODQxOQ==",
                    "publishedAt": "2018-04-24T14:42:27Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12559#issuecomment-383958419"
                }
            ],
            "totalCount": 4
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "909cad7a55c2d9af5998cc93b4d31b66b88867b9"
                    }
                }
            ],
            "totalCount": 7
        },
        "createdAt": "2018-02-27T16:24:32Z",
        "deletions": 7,
        "id": "MDExOlB1bGxSZXF1ZXN0MTcxNzEzNjcx",
        "labels": {
            "nodes": [
                {
                    "color": "0052cc",
                    "id": "MDU6TGFiZWw5ODI3OTE3Nw==",
                    "name": "RPC/REST/ZMQ"
                },
                {
                    "color": "08a781",
                    "id": "MDU6TGFiZWwxNDk0MjQ=",
                    "name": "Wallet"
                }
            ],
            "totalCount": 2
        },
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "number": 12559,
        "state": "OPEN",
        "title": "Avoid locking cs_main in some wallet RPC",
        "updatedAt": "2018-04-24T14:42:27Z"
    },
    {
        "additions": 210,
        "author": {
            "avatarUrl": "https://avatars3.githubusercontent.com/u/3782274?v=4",
            "login": "achow101",
            "url": "https://github.com/achow101"
        },
        "body": "Revival/rebase of #11085\r\n\r\nAdds a new command `sethdseed` which allows you to either set or generate a new HD seed to be used. A new keypool can be generated or the original one kept and new keys added to the keypool will come from the new HD seed.\r\n\r\nWallets that are not HD will be upgraded to be version FEATURE_HD_SPLIT when the `sethdseed` RPC command is used.\r\n\r\nI have also add some tests for this.\r\n\r\nAdditionally `-upgradewallet` can now be used to upgrade a wallet from non-HD to HD. When it is used for such an upgrade, the keypool will be regenerated.",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "I think this can be useful, though the following potential risks may be harmful in certain scenarios:\r\n* Missing key rotation: generating a new hd seed may imply for novice users that this protects from a compromised seed/masterkey.\r\n* seed option: if someone uses the optional seed parameter, it's possible that the child keys have already been used to send funds to. Eventually a rescan or a UTXO-set scan should be considered?\r\n* \"Upgrading\" existing non-hd wallets: leads to a mix of HD non HD-keys. Hard to \"untangle\" the non HD keys in case one wants to forward all funds to the new hd keyspace.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2OTU4MDUwNQ==",
                    "publishedAt": "2018-03-01T12:45:09Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12560#issuecomment-369580505"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/3782274?v=4",
                        "login": "achow101"
                    },
                    "body": "> Missing key rotation: generating a new hd seed may imply for novice users that this protects from a compromised seed/masterkey.\r\n\r\nThe help text could be updated to indicate that only coins sent to newly generated addresses will have keys generated with the new seed.\r\n\r\n> seed option: if someone uses the optional seed parameter, it's possible that the child keys have already been used to send funds to. Eventually a rescan or a UTXO-set scan should be considered?\r\n\r\nI could add a rescan option that is disabled by default. It could only be enabled if explicitly set and if the keypool is regenerated.\r\n\r\n> \"Upgrading\" existing non-hd wallets: leads to a mix of HD non HD-keys. Hard to \"untangle\" the non HD keys in case one wants to forward all funds to the new hd keyspace.\r\n\r\nAt the time of upgrade, one could send all coins to a new address.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2OTc0OTgxMQ==",
                    "publishedAt": "2018-03-01T22:14:59Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12560#issuecomment-369749811"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/3782274?v=4",
                        "login": "achow101"
                    },
                    "body": "Had to rebase this.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NDAzNzUzOQ==",
                    "publishedAt": "2018-03-18T19:30:51Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12560#issuecomment-374037539"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/649246?v=4",
                        "login": "TheBlueMatt"
                    },
                    "body": "At the risk of expanding the scope, can we fix -upgradewallet to work for HD as well here? The fact that upgradewallet will work to upgrade your wallet to HD-1 and then you have to call sethdseed to upgrade seems....strange.\r\nSeparately, can we either check that we're fully synced before allowing an HD master rotate or keep around old HD keys for key derivation? I'd prefer the second, but its obviously a ton more complicated, so just ensuring that we're at least synced first is likely sufficient to ensure people dont rotate and miss some payments.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NzU2NzQ1NA==",
                    "publishedAt": "2018-03-30T16:47:29Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12560#issuecomment-377567454"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/3782274?v=4",
                        "login": "achow101"
                    },
                    "body": "I changed `-upgradewallet` so it upgrades non-HD wallets to HD and HD chain split. I've updated the OP and title to indicate as such.\r\n\r\nUnfortunately automated tests can't be done with `-upgradewallet`.\r\n\r\n> Separately, can we either check that we're fully synced before allowing an HD master rotate \r\n\r\nThis seems incompatible with `-upgradewallet` as an upgrade method.\r\n\r\n> or keep around old HD keys for key derivation? I'd prefer the second, but its obviously a ton more complicated, so just ensuring that we're at least synced first is likely sufficient to ensure people dont rotate and miss some payments.\r\n\r\nI think this should be done as a separate PR. It's quite a bit of scope creep.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NzcxMzMxOQ==",
                    "publishedAt": "2018-03-31T18:26:58Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12560#issuecomment-377713319"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/649246?v=4",
                        "login": "TheBlueMatt"
                    },
                    "body": "> This seems incompatible with -upgradewallet as an upgrade method.\r\n\r\nI dont care as much about it for first-upgrade (first-upgrade-to-HD is actually no different from just using your existing wallet from a backup/keypool perspective, as long as you dont flush keypool, its just a new way to generate keypool entries), but for HD master *rotation*, I think making sure we dont need any future new keys is pretty easy to add, no?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NzkzNDg1Nw==",
                    "publishedAt": "2018-04-02T13:58:32Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12560#issuecomment-377934857"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/3782274?v=4",
                        "login": "achow101"
                    },
                    "body": "> I dont care as much about it for first-upgrade (first-upgrade-to-HD is actually no different from just using your existing wallet from a backup/keypool perspective\r\n\r\nRight, duh.\r\n\r\n***\r\n\r\nI rebased this and added a check for IBD so it won't set a new seed if we are still in IBD.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3OTA1NzMxNA==",
                    "publishedAt": "2018-04-05T19:55:22Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12560#issuecomment-379057314"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/881253?v=4",
                        "login": "jimpo"
                    },
                    "body": "Thinking about this a bit more, it definitely feels odd that I can't sethdseed to a past value. If I have a seed set, then change it to a new one, then want to change it back, I'm not allowed to do that. Not a big deal I guess...\r\n\r\nutACK modulo the linter error:\r\n```\r\nsrc/wallet/wallet.cpp:                LogPrintf(\"Upgrading wallet to use HD chain split\");\r\n^---- failure generated from contrib/devtools/lint-logs.sh\r\n```",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MDk5Njk2Ng==",
                    "publishedAt": "2018-04-13T01:56:19Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12560#issuecomment-380996966"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/3782274?v=4",
                        "login": "achow101"
                    },
                    "body": "Fixed the linter I think",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MTAwMzgyMA==",
                    "publishedAt": "2018-04-13T02:38:58Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12560#issuecomment-381003820"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/3782274?v=4",
                        "login": "achow101"
                    },
                    "body": "I changed `sethdseed` to only work on HD wallets and not modify the wallet version.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MjEyNjUwMg==",
                    "publishedAt": "2018-04-17T20:12:07Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12560#issuecomment-382126502"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/548488?v=4",
                        "login": "sipa"
                    },
                    "body": "utACK afafc9b92dc1c501ca1ff63a5042e1925b7ac55a. I think it's fine that running with -upgradewallet defaults to NO_DEFAULT_KEY.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MjU4MDg4Nw==",
                    "publishedAt": "2018-04-19T01:34:09Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12560#issuecomment-382580887"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/649246?v=4",
                        "login": "TheBlueMatt"
                    },
                    "body": "One option might be splitting the existing keypool between internal and external at the time of the upgrade, though that also violates previous API guarantees. The only \"full\" fix would require the new-key-from-pool callsites to be aware of the upgrade, though I don't think that'd be a ton of code.\n\nOn April 19, 2018 6:57:17 PM UTC, Pieter Wuille <notifications@github.com> wrote:\n>sipa commented on this pull request.\n>\n>\n>\n>> +            LOCK(walletInstance->cs_wallet);\n>+            bool hd_upgrade = false;\n>+            if (walletInstance->CanSupportFeature(FEATURE_HD) &&\n>!walletInstance->IsHDEnabled()) {\n>+                LogPrintf(\"Upgrading wallet to HD\\n\");\n>+                walletInstance->SetMinVersion(FEATURE_HD);\n>+\n>+                // generate a new master key\n>+                CPubKey masterPubKey =\n>walletInstance->GenerateNewHDMasterKey();\n>+                if (!walletInstance->SetHDMasterKey(masterPubKey))\n>+                    throw std::runtime_error(std::string(__func__) +\n>\": Storing master key failed\");\n>+                hd_upgrade = true;\n>+            }\n>+            // Upgrade to HD chain split if necessary\n>+            if (walletInstance->CanSupportFeature(FEATURE_HD_SPLIT)) {\n>+                LogPrintf(\"Upgrading wallet to use HD chain split\\n\");\n>+                walletInstance->SetMinVersion(FEATURE_HD_SPLIT);\n>\n>Good point, @TheBlueMatt. I was forgetting about the distinction \"need\n>a new backup\" and \"need new software in the future\".\n>\n>What would you suggest as an ideal solution? `-upgradewallet` by\n>default never making a change that requires a new backup, while having\n>another option (`-fullupgradewallet` ?) to indicate you're aware a new\n>backup is needed?\n>\n>-- \n>You are receiving this because you were mentioned.\n>Reply to this email directly or view it on GitHub:\n>https://github.com/bitcoin/bitcoin/pull/12560#discussion_r182850939\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4Mjg0NjE5OA==",
                    "publishedAt": "2018-04-19T19:01:49Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12560#issuecomment-382846198"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/649246?v=4",
                        "login": "TheBlueMatt"
                    },
                    "body": "I don't think InitWarning is sufficient. For GUI I'd expect a pop-up asking if I'd like to continue, on bitcoind people don't read their debug.log, so unless we want to implement the \"knowledge of past upgrade\" in new key logic (which I think is probably doable), we probably need a different option :(.\n\nOn April 19, 2018 7:59:53 PM UTC, Andrew Chow <notifications@github.com> wrote:\n>achow101 commented on this pull request.\n>\n>\n>\n>> +            LOCK(walletInstance->cs_wallet);\n>+            bool hd_upgrade = false;\n>+            if (walletInstance->CanSupportFeature(FEATURE_HD) &&\n>!walletInstance->IsHDEnabled()) {\n>+                LogPrintf(\"Upgrading wallet to HD\\n\");\n>+                walletInstance->SetMinVersion(FEATURE_HD);\n>+\n>+                // generate a new master key\n>+                CPubKey masterPubKey =\n>walletInstance->GenerateNewHDMasterKey();\n>+                if (!walletInstance->SetHDMasterKey(masterPubKey))\n>+                    throw std::runtime_error(std::string(__func__) +\n>\": Storing master key failed\");\n>+                hd_upgrade = true;\n>+            }\n>+            // Upgrade to HD chain split if necessary\n>+            if (walletInstance->CanSupportFeature(FEATURE_HD_SPLIT)) {\n>+                LogPrintf(\"Upgrading wallet to use HD chain split\\n\");\n>+                walletInstance->SetMinVersion(FEATURE_HD_SPLIT);\n>\n>What about an `InitWarning` message that appears when the keypool is\n>regenerated that a new backup will need to be made?\n>\n>-- \n>You are receiving this because you were mentioned.\n>Reply to this email directly or view it on GitHub:\n>https://github.com/bitcoin/bitcoin/pull/12560#discussion_r182867406\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4Mjg2NDQxNA==",
                    "publishedAt": "2018-04-19T20:06:57Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12560#issuecomment-382864414"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/3782274?v=4",
                        "login": "achow101"
                    },
                    "body": "> For GUI I'd expect a pop-up asking if I'd like to continue\r\n\r\nThere's `UIInterface.ThreadSafeQuestion` which can be used for that.\r\n\r\n> on bitcoind people don't read their debug.log\r\n\r\n`InitError`, `InitWarning`, and `ThreadSafeQuestion` all print to stderr for bitcoind. Also a recent change makes `-printtoconsole` default when using without `-daemon`.\r\n\r\n~~I suppose the case with `-daemon` can really only be accounted for with a separate option.~~ Actually it should still print even with `-daemon`.\r\n\r\n(I don't like the idea of introducing another option for this)",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4Mjg2NzQ4Mw==",
                    "publishedAt": "2018-04-19T20:18:13Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12560#issuecomment-382867483"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/649246?v=4",
                        "login": "TheBlueMatt"
                    },
                    "body": "If you get a chance to implement tracking upgrade and remaining-original-keypool stuff I have a feeling it'll be workable.\n\nOn April 19, 2018 8:18:22 PM UTC, Andrew Chow <notifications@github.com> wrote:\n>> For GUI I'd expect a pop-up asking if I'd like to continue\n>\n>There's `UIInterface.ThreadSafeQuestion` which can be used for that.\n>\n>> on bitcoind people don't read their debug.log\n>\n>`InitError`, `InitWarning`, and `ThreadSafeQuestion` all print to\n>stderr for bitcoind (unless `-daemon`). Also a recent change makes\n>`-printtoconsole` default when using without `-daemon`.\n>\n>I suppose the case with `-daemon` can really only be accounted for with\n>a separate option.\n>\n>-- \n>You are receiving this because you were mentioned.\n>Reply to this email directly or view it on GitHub:\n>https://github.com/bitcoin/bitcoin/pull/12560#issuecomment-382867483\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4Mjg2ODczOA==",
                    "publishedAt": "2018-04-19T20:22:43Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12560#issuecomment-382868738"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/3782274?v=4",
                        "login": "achow101"
                    },
                    "body": "> If you get a chance to implement tracking upgrade and remaining-original-keypool stuff I have a feeling it'll be workable.\r\n\r\nSo basically use the original keypool until it runs out, and then new keys are generated from the seed? So the callers (particularly getting change keys) will need to know whether it should use external keypool if it was upgraded but not run out yet?\r\n\r\nI assume that this will still require warning that a new backup is required.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4Mjg3MDg3MQ==",
                    "publishedAt": "2018-04-19T20:30:07Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12560#issuecomment-382870871"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/649246?v=4",
                        "login": "TheBlueMatt"
                    },
                    "body": "Yes, but that doesn't need a new backup any more than using up your current keypool does. The real issue is I believe we'd need a version bump for it (and, thus, you'd need to upgrade to the new version and wouldn't be able to upgrade to HD/HD_SPLIT/NO_DEFAULT_KEY but would have to skip them and upgrade to the new version).\n\nOn April 19, 2018 8:30:18 PM UTC, Andrew Chow <notifications@github.com> wrote:\n>> If you get a chance to implement tracking upgrade and\n>remaining-original-keypool stuff I have a feeling it'll be workable.\n>\n>So basically use the original keypool until it runs out, and then new\n>keys are generated from the seed? So the callers (particularly getting\n>change keys) will need to know whether it should use external keypool\n>if it was upgraded but not run out yet?\n>\n>I assume that this will still require warning that a new backup is\n>required.\n>\n>-- \n>You are receiving this because you were mentioned.\n>Reply to this email directly or view it on GitHub:\n>https://github.com/bitcoin/bitcoin/pull/12560#issuecomment-382870871\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4Mjg3MzUyNw==",
                    "publishedAt": "2018-04-19T20:39:27Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12560#issuecomment-382873527"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/3782274?v=4",
                        "login": "achow101"
                    },
                    "body": "I don't think that a wallet version upgrade is necessarily required.\r\n\r\nFor upgrade from non-HD to HD, it's easy to tell when you have exhausted the original keypool: the CKeyMetadata hdMsaterKeyID for each key will change from Null to the current hdMasterKeyID.\r\n\r\nNon chain split to chain split is harder. However it would be very easy if a new seed was used. I don't think there would be any adverse effects if the upgrade from non split to split resulted in a new seed being set, although that may be undesireable.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4Mjg5NjM5MQ==",
                    "publishedAt": "2018-04-19T22:10:48Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12560#issuecomment-382896391"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/3782274?v=4",
                        "login": "achow101"
                    },
                    "body": "Actually bumping the version number and having another field is easier to do and has less weirdness with `-salvagewallet` scenarios, so I'm going to to that instead.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MjkwMjQwMg==",
                    "publishedAt": "2018-04-19T22:40:28Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12560#issuecomment-382902402"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/3782274?v=4",
                        "login": "achow101"
                    },
                    "body": "Hmm, `-salvagewallet` isn't actually a problem because `pool` entries aren't retained. Also there's no guarantees of anything when that is used.\r\n\r\nThe question then is whether we want to generate a new seed for non-split to split upgrade or if there is some other way to detect that upgrade.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MjkwNTkzNQ==",
                    "publishedAt": "2018-04-19T22:59:45Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12560#issuecomment-382905935"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/3782274?v=4",
                        "login": "achow101"
                    },
                    "body": "I have decided to go with this method (from the commit message):\r\n\r\n> After upgrading to HD chain split, we want to continue to use keys from the old keypool. To do this, before we generate any new keys after upgrading, we mark all of the keypool entries as being pre-chain split and move them to a separate pre chain split keypool. Keys are fetched from that keypool until it is  mptied. Only then are the new internal and external keypools used.\r\n\r\nWith this approach, we don't need to change the wallet version.\r\n\r\nAlso rebased\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MzI3NDA2Ng==",
                    "publishedAt": "2018-04-21T07:17:10Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12560#issuecomment-383274066"
                }
            ],
            "totalCount": 21
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "ae98cf10558c1aeac4ea704935b292baf153b8fb"
                    }
                }
            ],
            "totalCount": 5
        },
        "createdAt": "2018-02-27T16:31:51Z",
        "deletions": 22,
        "id": "MDExOlB1bGxSZXF1ZXN0MTcxNzE1ODQ2",
        "labels": {
            "nodes": [
                {
                    "color": "0052cc",
                    "id": "MDU6TGFiZWw5ODI3OTE3Nw==",
                    "name": "RPC/REST/ZMQ"
                },
                {
                    "color": "08a781",
                    "id": "MDU6TGFiZWwxNDk0MjQ=",
                    "name": "Wallet"
                }
            ],
            "totalCount": 2
        },
        "mergeable": "CONFLICTING",
        "mergedAt": null,
        "number": 12560,
        "state": "OPEN",
        "title": "[wallet] Upgrade path for non-HD wallets to HD",
        "updatedAt": "2018-04-21T07:19:34Z"
    },
    {
        "additions": 93,
        "author": {
            "avatarUrl": "https://avatars1.githubusercontent.com/u/10217?v=4",
            "login": "Sjors",
            "url": "https://github.com/Sjors"
        },
        "body": "Builds on top of #12096. I'll rebase when that's merged.\r\n\r\nIf a user sends funds to a single destination, they might be trying to move all their funds to another wallet or an exchange. However it's also possible that they are making a payment and coin selection found a matching input.\r\n\r\nWith the former it's fine to reduce the output in order to increase the fee, but with the latter it's not, e.g. it could lead to underpaying an invoice. In that case we show the following warning:\r\n\r\n<img width=\"655\" alt=\"schermafbeelding 2018-02-28 om 13 38 14\" src=\"https://user-images.githubusercontent.com/10217/36788181-39b26476-1c8d-11e8-81d9-91960c5d2619.png\">\r\n\r\nAt the risk of too much UI clutter, the message could be made stronger by showing the original amount(s) vs. the new amount(s).\r\n\r\nFor comparison, this message is shown when a change output can be reduced:\r\n\r\n<img width=\"354\" alt=\"schermafbeelding 2018-02-28 om 13 50 20\" src=\"https://user-images.githubusercontent.com/10217/36788687-28bbff04-1c8f-11e8-99bc-31ed9b32af54.png\">\r\n\r\nIf in the future we're able to add inputs, we should probably offer the user a choice if they prefer to reduce an output instead. It's worth keeping that in mind when choosing the right wording here.",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/10217?v=4",
                        "login": "Sjors"
                    },
                    "body": "> add a parameter to feebumper::CreateTransaction to return whether a non-change output was reduced\r\n\r\n@kallewoof can that be part of #12096, e.g. if `reduce_output==-2` it picks the biggest output?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2OTI1MDQ3MQ==",
                    "publishedAt": "2018-02-28T14:10:23Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12565#issuecomment-369250471"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/1095675?v=4",
                        "login": "luke-jr"
                    },
                    "body": "I don't think this is the right route. While I think users should be able to reduce outputs if desired, we should by default offer to add inputs, not reduce outputs.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2OTI5NDg4Nw==",
                    "publishedAt": "2018-02-28T16:24:57Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12565#issuecomment-369294887"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
                        "login": "promag"
                    },
                    "body": "@luke-jr I think that discussion is for #12096. Also see https://github.com/bitcoin/bitcoin/pull/12096#issuecomment-356089931.\r\n\r\nEdit: ok you were there already.\r\n\r\n\u261d\ufe0fIIUC `feebumper::CreateTransaction` doesn't add inputs. I've suggested that in https://github.com/bitcoin/bitcoin/pull/12096#issuecomment-355578491",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2OTMwNDI1MA==",
                    "publishedAt": "2018-02-28T16:52:09Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12565#issuecomment-369304250"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/1095675?v=4",
                        "login": "luke-jr"
                    },
                    "body": "Indeed, to rephrase: users should be able to reduce outputs; it just should require explicitly asking to do so, and shouldn't be the default/recommended behaviour.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2OTMwOTM2MQ==",
                    "publishedAt": "2018-02-28T17:07:12Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12565#issuecomment-369309361"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/765487?v=4",
                        "login": "bedri"
                    },
                    "body": "If a customer paying for a good for the vendor and vendor agrees to pay the\ntransaction fee, then the customer can make a transaction with nearly zero\nfee which will wait a long time for confirmations and then increase the fee\nto the agreed amount and accepting the reduction in the output. So that\nvendor will be able to pay the transaction fee.\nIf the vendor does not willing to pay the transaction fee (no agreement\nmade between the vendor and the customer about this) then the customer can\nmake a regular transaction to pay for the good. If customer decides that\nhe/she put a low fee on the transaction so that the transaction will take a\nlong time to occur then he/she should bumpfee without reducing the output.\n\nSo bumpfee reduction from the output should be optional and should be\nasked. For the above showcase, it may also be a good idea that if a bumpfee\nmade by reducing the output, the receiving side of the transaction (vendor\nin the above case) should also be asked if he/she agrees with the\nreduction. If he/she does not agree then the bumpfee should not occur.\n\nOn Wed, Feb 28, 2018 at 8:18 PM, Luke Dashjr <notifications@github.com>\nwrote:\n\n> Indeed, to rephrase: users should be able to reduce outputs; it just\n> should require explicitly asking to do so, and shouldn't be the\n> default/recommended behaviour.\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/bitcoin/bitcoin/pull/12565#issuecomment-369309361>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AAuuLwNRNM-bPtKZ1uaMYcWwIvEps_4Pks5tZYfNgaJpZM4SWmpP>\n> .\n>\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2OTM2NjIxMg==",
                    "publishedAt": "2018-02-28T20:07:19Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12565#issuecomment-369366212"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/10217?v=4",
                        "login": "Sjors"
                    },
                    "body": "@luke-jr `Cancel` is the default option, but without an alternative I can see how users would just click OK even if it's not a good idea. Perhaps it's better to hold back this PR until `feebumper::CreateTransaction` supports adding inputs. By default the `OK` button would just add an input. We could show each of the destination addresses with a check box \"reduce amount\". That would seem like a safer UX.\r\n\r\nUnless that change takes forever. Maybe we can tag this with 0.17, and revisit the discussion if this better alternative isn't ready?\r\n\r\n@bedri there's no way (that I know) for the wallet to communicate with the merchant. The only thing we can do is inform the user that they should do this.\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDM2OTUyMDA5NA==",
                    "publishedAt": "2018-03-01T08:52:37Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12565#issuecomment-369520094"
                }
            ],
            "totalCount": 6
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "81bcb253e18ff830a80145dfebf8339e5f47993a"
                    }
                }
            ],
            "totalCount": 4
        },
        "createdAt": "2018-02-28T12:52:36Z",
        "deletions": 20,
        "id": "MDExOlB1bGxSZXF1ZXN0MTcxOTQ0NzI1",
        "labels": {
            "nodes": [
                {
                    "color": "02d7e1",
                    "id": "MDU6TGFiZWwxMzU5NDY=",
                    "name": "GUI"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "CONFLICTING",
        "mergedAt": null,
        "number": 12565,
        "state": "OPEN",
        "title": "[qt] bumpfee: offer user to reduce output for transactions without change",
        "updatedAt": "2018-03-01T08:52:37Z"
    },
    {
        "additions": 60,
        "author": {
            "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
            "login": "promag",
            "url": "https://github.com/promag"
        },
        "body": "Currently, in the transactions table, the fee is added as debit to the first output. It's a different behaviour from `gettransaction` RPC where the values are seen separately:\r\n```\r\ngettransaction 56d4c03f65f32acecd80ec6ec1b5cd12eddcd35d705f2d4c82a90c85b1cf872a\r\n\r\n{\r\n  ...\r\n  \"details\": [\r\n    {\r\n      \"account\": \"\",\r\n      \"address\": \"2N3AFooPuYvN6zWPpThPB8w8V48Ph31PuKH\",\r\n      \"category\": \"send\",\r\n      \"amount\": -1,\r\n      \"label\": \"\",\r\n      \"vout\": 0,\r\n      \"fee\": -0.0000022,\r\n      \"abandoned\": false\r\n    },\r\n    {\r\n      \"account\": \"\",\r\n      \"address\": \"2N42JYZHhwRXgrpuztod6CcEXfUDLTqbhY7\",\r\n      \"category\": \"send\",\r\n      \"amount\": -1,\r\n      \"label\": \"\",\r\n      \"vout\": 1,\r\n      \"fee\": -0.0000022,\r\n      \"abandoned\": false\r\n    }\r\n  ],\r\n  ...\r\n}\r\n```\r\n\r\nBefore:\r\n<img width=\"848\" alt=\"screen shot 2018-03-01 at 18 44 20\" src=\"https://user-images.githubusercontent.com/3534524/36863063-940a2b86-1d80-11e8-95ff-a2cb39174fc1.png\">\r\nAfter:\r\n<img width=\"850\" alt=\"screen shot 2018-03-06 at 13 55 08\" src=\"https://user-images.githubusercontent.com/3534524/37035998-43b6a5f0-2146-11e8-9729-9f79956b2808.png\">\r\nThe row background now alternates based on txid, so in the capture above, the first 3 rows refer to the same transaction.",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "Concept ACK, I think it is clearer to list the fee separately. On the other hand, this compounds the issue that it's not possible to see in the list what transaction output records group to one transaction.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MDUyMDI2OQ==",
                    "publishedAt": "2018-03-05T18:42:51Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12578#issuecomment-370520269"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
                        "login": "promag"
                    },
                    "body": "@laanwj that's an existing problem isn't?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MDUyNDEwOQ==",
                    "publishedAt": "2018-03-05T18:55:09Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12578#issuecomment-370524109"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "> @laanwj that's an existing problem isn't?\r\n\r\nYes, that's what I said. However this compounds it, because it means every transaction will get multiple records, whereas it used to be that this only happens for (rarer) multi-sends. Not an argument against doing this, but something to be aware of, as people will ask \"what does this fee belong to\". They can find out by looking at the transaction details.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MDUzNTAwNw==",
                    "publishedAt": "2018-03-05T19:29:20Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12578#issuecomment-370535007"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
                        "login": "promag"
                    },
                    "body": "Yeah, in the typical listing it will show an alternating \"Fee\" row.\r\n\r\nI was thinking in adding a checkbox to show/hide individual fee rows.\r\n\r\nAnother thing that could help the grouping is to change from alternate rows into \"alternate txids\", but that is something more complicated to do (as it depends on the proxy model parameters).",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MDU1MTkwNw==",
                    "publishedAt": "2018-03-05T20:22:22Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12578#issuecomment-370551907"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "> Another thing that could help the grouping is to change from alternate rows into \"alternate txids\", but that is something more complicated to do (as it depends on the proxy model parameters).\r\n\r\nYeah that can be done in a future PR. Sounds like a good idea.\r\nI wonder how that will/should interact with sorting on alternative columns, though.\r\n\r\n> I was thinking in adding a checkbox to show/hide individual fee rows.\r\n\r\nMight be overkill, just adds an extra configuration that needs to be supported. But no strong opinion.\r\n\r\nDo add it to the release notes, this is something that users are bound to notice.\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MDU1ODY1MA==",
                    "publishedAt": "2018-03-05T20:45:19Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12578#issuecomment-370558650"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/1095675?v=4",
                        "login": "luke-jr"
                    },
                    "body": "Concept ACK. It might (or might not) make sense to only do it for multi-debits...",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MDU5NDkxOA==",
                    "publishedAt": "2018-03-05T22:45:31Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12578#issuecomment-370594918"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
                        "login": "promag"
                    },
                    "body": "@laanwj I've implemented alternating rows based on transaction id (see after image above). The implementation is not efficient but it's enough to evaluate the concept.\r\n\r\n@luke-jr even for single-debit it's weird to have the fee associated to that address, sounds like you sent that value there.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MDc5MDQ2Mg==",
                    "publishedAt": "2018-03-06T14:02:07Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12578#issuecomment-370790462"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
                        "login": "promag"
                    },
                    "body": "Added release notes.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MDkxMDk2Ng==",
                    "publishedAt": "2018-03-06T20:07:23Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12578#issuecomment-370910966"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "Concept ACK especially with the grouping (odd/even background alternative). IMO the grouping could be more visible (group entries from a transaction with an outline border line or similar)",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MDIwMzE5Nw==",
                    "publishedAt": "2018-04-10T18:32:58Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12578#issuecomment-380203197"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
                        "login": "promag"
                    },
                    "body": "> group entries from a transaction with an outline border line or similar\r\n\r\nI'll try something along that, but it's not something usual right?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MDkxMDY1MA==",
                    "publishedAt": "2018-04-12T19:00:03Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12578#issuecomment-380910650"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "> I'll try something along that, but it's not something usual right?\r\n\r\nI guess that is something that could be improved in a follow up PR.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MDkyMTQwNw==",
                    "publishedAt": "2018-04-12T19:40:19Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12578#issuecomment-380921407"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
                        "login": "promag"
                    },
                    "body": "Rebased.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MTI1OTg4MA==",
                    "publishedAt": "2018-04-13T21:02:57Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12578#issuecomment-381259880"
                }
            ],
            "totalCount": 12
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "ae7a25fafc08482ba8af2174c3e8002bbe5a3bac"
                    }
                }
            ],
            "totalCount": 3
        },
        "createdAt": "2018-03-01T18:31:13Z",
        "deletions": 15,
        "id": "MDExOlB1bGxSZXF1ZXN0MTcyMzE3MDYx",
        "labels": {
            "nodes": [
                {
                    "color": "02d7e1",
                    "id": "MDU6TGFiZWwxMzU5NDY=",
                    "name": "GUI"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "number": 12578,
        "state": "OPEN",
        "title": "Add transaction record type Fee",
        "updatedAt": "2018-04-13T21:06:54Z"
    },
    {
        "additions": 24,
        "author": {
            "avatarUrl": "https://avatars0.githubusercontent.com/u/9197696?v=4",
            "login": "chrislennon",
            "url": "https://github.com/chrislennon"
        },
        "body": "fixes #12574 \r\n\r\nFirst time contributing - could do with some advice completing this.\r\n\r\nTo me, issue consists of three parts:\r\n\r\n- [x] Creation of sub-directory within temp work-space\r\n   - I have low confidence that I approached this correctly (though I believe it works)\r\n- [ ] Appending the name of the test into the folders the framework is created\r\n  - TODO - would appreciate a nudge in the correct direction to picking out the name of the executing test\r\n- [ ] Iteration number of the test\r\n  - TODO - Relating to the 2nd point, my logic would be when I have the name of the test, check the file system and iterate the trailing int i.e. `dbwrapper_1` to `dbwrapper_2`\r\n\r\n\r\nI'm happy to iterate this PR a few times until its acceptable, figured it was more sensible to seek advice than declare failure and bin the code \ud83d\ude09 ",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "Concept ACK - thanks for addressing this.\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MDQ0MDUwMw==",
                    "publishedAt": "2018-03-05T14:43:18Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12583#issuecomment-370440503"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "> would appreciate a nudge in the correct direction to picking out the name of the executing test\r\n\r\nWe could do all kind of metadata introspection. Maybe boost has a way to do that. Or we could just pass the subdirectory name to the function `unit_test_directory()` - easy and straightforward.\r\n\r\n>  Iteration number of the test \r\n\r\nSame as above, the straightforward solution would be to (optionally) pass it in.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MDQ0MTcxNQ==",
                    "publishedAt": "2018-03-05T14:46:48Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12583#issuecomment-370441715"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/18324680?v=4",
                        "login": "ccdle12"
                    },
                    "body": "Hi guys,\r\n\r\nI'm a new contributor, was looking into this PR and was just wondering if I was re-compiling the tests correctly? \r\n\r\nFor Example, I've commented out all the tests in `dbwrapper_tests.cpp` and ran `make` to compile the tests. \r\n\r\nNow when I run `test_bitcoin --log_level=all --run_test=dbwrapper_tests`, I can see all the tests in `dbrwapper_tests` are being run even though I've commented out all the tests and re-compiled?\r\n\r\nApologies if it's a silly question, I just wanted to see a \"cause and effect\" before addressing the issue of organising the tests into sub folders in the temp directory.\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MjI0NzE3Mw==",
                    "publishedAt": "2018-03-12T09:38:04Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12583#issuecomment-372247173"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/9197696?v=4",
                        "login": "chrislennon"
                    },
                    "body": "@ccdle12 I haven't experienced this directly (nor tested your above approach), typically I'm rebuilding the tests (`make -C src/test`) and running them all (`./test_bitcoin`) and I see the effect of my changes.\r\n\r\nIf you are looking to pick this up, (whilst not complete) I made some small progress on the comments above on my [PR-fixes branch](https://github.com/bitcoin/bitcoin/compare/master...chrislennon:PR-fixes) over on my fork which may assist. \r\n\r\nCurrently it covers the comment from @laanwj about changing the location of the function to a more appropriate location and the names of the unit tests. The last part it doesn't yet cover is the iteration number of the named folders.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MjI1MzYxOQ==",
                    "publishedAt": "2018-03-12T09:59:14Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12583#issuecomment-372253619"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/18324680?v=4",
                        "login": "ccdle12"
                    },
                    "body": "@chrislennon Thanks, I'll try your approach to rebuilding the tests and also look into the PR changes ",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MjI1NDQxMQ==",
                    "publishedAt": "2018-03-12T10:02:02Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12583#issuecomment-372254411"
                }
            ],
            "totalCount": 5
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "7904ed828768101268c825fba3e84915c2507739"
                    }
                }
            ],
            "totalCount": 1
        },
        "createdAt": "2018-03-02T20:47:00Z",
        "deletions": 9,
        "id": "MDExOlB1bGxSZXF1ZXN0MTcyNjAwODQ3",
        "labels": {
            "nodes": [
                {
                    "color": "d4c5f9",
                    "id": "MDU6TGFiZWw2Mjk2MzUxNg==",
                    "name": "Tests"
                },
                {
                    "color": "99a810",
                    "id": "MDU6TGFiZWw3NDk0MTY1MDg=",
                    "name": "Up for grabs"
                }
            ],
            "totalCount": 2
        },
        "mergeable": "CONFLICTING",
        "mergedAt": null,
        "number": 12583,
        "state": "OPEN",
        "title": "[WIP] Unit test sub-directories",
        "updatedAt": "2018-03-22T20:22:14Z"
    },
    {
        "additions": 1,
        "author": {
            "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
            "login": "practicalswift",
            "url": "https://github.com/practicalswift"
        },
        "body": "Use safer casting in `IsValidSignatureEncoding(...)`.\r\n\r\nThis was found when looking at the `c-lightning` codebase which contains a copy of this function.",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/2734?v=4",
                        "login": "eklitzke"
                    },
                    "body": "Can you explain what makes this safer? The types inside the existing cast are already unsigned, and AFAIK `size_t` is at least as large as `unsigned int` so I don't see how this affects overflow semantics.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MjA5NzA5OA==",
                    "publishedAt": "2018-03-11T08:07:08Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12611#issuecomment-372097098"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "Consider the case:\r\n\r\n```\r\nunsigned int lenR = 4294967295; // std::numeric_limits<unsigned int>::max()\r\nunsigned int lenS = 0;\r\n```\r\n\r\nOn my system the following then holds true:\r\n\r\n```\r\n(size_t)lenR + (size_t)lenS + 7 == 4294967302\r\n(size_t)(lenR + lenS + 7) == 6\r\n```\r\n\r\nThe latter case is the result of an unsigned integer overflow since `4294967295 + 7` cannot be represented as an unsigned int.\r\n\r\n(Luckily both `lenR` and `lenS` are guaranteed to be in the closed range `[0, 255]` as the code is currently written.)",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MjQyODE3MA==",
                    "publishedAt": "2018-03-12T19:07:48Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12611#issuecomment-372428170"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/2734?v=4",
                        "login": "eklitzke"
                    },
                    "body": "I see, and now that you point it out it makes sense. This PR is probably not the place for it, but I'm curious what you think about making these kinds of semantics better defined (e.g. by using `-fwrapv`, or related flags).",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MjU2NzI3OQ==",
                    "publishedAt": "2018-03-13T07:06:59Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12611#issuecomment-372567279"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "@eklitzke Is that an utACK? :-)\r\n\r\nRegarding `-ftrapv` for catching signed arithmetic overflows \u2013 see #12686.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3Mjk4OTk3MQ==",
                    "publishedAt": "2018-03-14T11:30:43Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12611#issuecomment-372989971"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/5767891?v=4",
                        "login": "instagibbs"
                    },
                    "body": "utACK https://github.com/bitcoin/bitcoin/pull/12611/commits/332ecf9b497dda7d4faaea50768b104dd2666bf5",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MzA3MTQ0MQ==",
                    "publishedAt": "2018-03-14T15:50:59Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12611#issuecomment-373071441"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/2734?v=4",
                        "login": "eklitzke"
                    },
                    "body": "utACK 332ecf9b497dda7d4faaea50768b104dd2666bf5",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MzM3MzA4OA==",
                    "publishedAt": "2018-03-15T13:20:36Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12611#issuecomment-373373088"
                }
            ],
            "totalCount": 6
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "332ecf9b497dda7d4faaea50768b104dd2666bf5"
                    }
                }
            ],
            "totalCount": 1
        },
        "createdAt": "2018-03-06T08:57:08Z",
        "deletions": 1,
        "id": "MDExOlB1bGxSZXF1ZXN0MTczMDkzNTAz",
        "labels": {
            "nodes": [
                {
                    "color": "009800",
                    "id": "MDU6TGFiZWwxOTIyMDIwMDA=",
                    "name": "Consensus"
                },
                {
                    "color": "E6F6D6",
                    "id": "MDU6TGFiZWwxMzU5NjE=",
                    "name": "Refactoring"
                }
            ],
            "totalCount": 2
        },
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "number": 12611,
        "state": "OPEN",
        "title": "interpreter: Use safer casting in IsValidSignatureEncoding(...)",
        "updatedAt": "2018-03-15T13:20:36Z"
    },
    {
        "additions": 10,
        "author": {
            "avatarUrl": "https://avatars3.githubusercontent.com/u/250224?v=4",
            "login": "kallewoof",
            "url": "https://github.com/kallewoof"
        },
        "body": "Currently, `TransactionWithinChainLimit` is restricted to single-output use, and needs to be called every time for different limits. If it is replaced with a chain limit value calculator, that can be called once and reused, and is generally more flexible (see e.g. #12257).\r\n\r\nThis change also makes `nMaxAncestors` signed, as the replacement method will return `-1` for \"not in the mempool\", which is different from \"0\", which means \"no ancestors/descendants in mempool\".\r\n\r\nThis is a subset of #12257.",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/3020646?v=4",
                        "login": "NicolasDorier"
                    },
                    "body": "utACK b0928df",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MTU4MDA4MA==",
                    "publishedAt": "2018-03-08T18:33:08Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12634#issuecomment-371580080"
                }
            ],
            "totalCount": 1
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "f6fb803690243cfe1ac42873ae36f0def9269e03"
                    }
                }
            ],
            "totalCount": 4
        },
        "createdAt": "2018-03-07T16:07:22Z",
        "deletions": 9,
        "id": "MDExOlB1bGxSZXF1ZXN0MTczNDk3Njk4",
        "labels": {
            "nodes": [
                {
                    "color": "E6F6D6",
                    "id": "MDU6TGFiZWwxMzU5NjE=",
                    "name": "Refactoring"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "CONFLICTING",
        "mergedAt": null,
        "number": 12634,
        "state": "OPEN",
        "title": "[refactor] Make TransactionWithinChainLimit more flexible",
        "updatedAt": "2018-04-04T08:15:35Z"
    },
    {
        "additions": 11,
        "author": {
            "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
            "login": "promag",
            "url": "https://github.com/promag"
        },
        "body": "On my system, where the wallet has 10000 unspents, the `cs_main` lock duration changed from 191ms to 36ms. The loop that generates the response takes around 155ms. So, the lock duration is reduced to around 20%.",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
                        "login": "MarcoFalke"
                    },
                    "body": "Needs rebase to fix travis (sorry)",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MTUyMjUwMQ==",
                    "publishedAt": "2018-03-08T15:31:57Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12639#issuecomment-371522501"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
                        "login": "promag"
                    },
                    "body": "Rebased.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MjE1NTIwMQ==",
                    "publishedAt": "2018-03-11T22:26:14Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12639#issuecomment-372155201"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/14220652?v=4",
                        "login": "conscott"
                    },
                    "body": "Nice. \r\n\r\nTest ACK efbc070c5cb176b0f79801e9e6d5f5a52578edc1",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3Mzg5Mzk1Nw==",
                    "publishedAt": "2018-03-17T04:40:07Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12639#issuecomment-373893957"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "General Concept ACK.\r\nThere is tiny risk that bitcoind spits out utxos that are already spent due the unlocking between `AvailableCoins` and the return output generation.... okay IMO.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NDA4ODMyMA==",
                    "publishedAt": "2018-03-19T03:05:53Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12639#issuecomment-374088320"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
                        "login": "promag"
                    },
                    "body": "@jonasschnelli yeah, the same can happen between the user receives the response and tries to use an unspent that was spent in between.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NDE3MTQxMA==",
                    "publishedAt": "2018-03-19T10:48:35Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12639#issuecomment-374171410"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/548488?v=4",
                        "login": "sipa"
                    },
                    "body": "Concept ACK, needs rebase.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NTQ2NjczMA==",
                    "publishedAt": "2018-03-22T21:40:21Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12639#issuecomment-375466730"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
                        "login": "promag"
                    },
                    "body": "Rebased and replaced 3 `mapAddressBook` lookups with 1 lookup.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NTQ5MTk4Nw==",
                    "publishedAt": "2018-03-22T23:35:37Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12639#issuecomment-375491987"
                }
            ],
            "totalCount": 7
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "4c33ef6ffe6083692f4ac0a21d810815f66ecb3e"
                    }
                }
            ],
            "totalCount": 1
        },
        "createdAt": "2018-03-07T21:01:41Z",
        "deletions": 5,
        "id": "MDExOlB1bGxSZXF1ZXN0MTczNTcyMTcy",
        "labels": {
            "nodes": [
                {
                    "color": "0052cc",
                    "id": "MDU6TGFiZWw5ODI3OTE3Nw==",
                    "name": "RPC/REST/ZMQ"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "CONFLICTING",
        "mergedAt": null,
        "number": 12639,
        "state": "OPEN",
        "title": "Reduce cs_main lock in listunspent",
        "updatedAt": "2018-04-17T14:51:45Z"
    },
    {
        "additions": 1022,
        "author": {
            "avatarUrl": "https://avatars0.githubusercontent.com/u/69154?v=4",
            "login": "maaku",
            "url": "https://github.com/maaku"
        },
        "body": "This enables gitian builds from any operating system supporting Oracle VirtualBox and HashiCorp's vagrant and packer VM-creation utilities. Simply checkout a copy of the bitcoin source tree with this PR applied from an internet-connected machine, and do `cd contrib/vagrant && make`. Dependencies and build products are properly cached to provide faster subsequent builds. Builds from dirty working trees are also supported, with the uncommitted changes applied to the source tree.\r\n\r\nBuilds are nearly identical to the usual gitian process. At this time the only difference is due to a separate bug that makes the length of the `GIT_COMMIT_ID` string exported by git-archive dependent on the state of the local git repository, which has the further implication separate from this use case that over time it would prevent reproducibility of historical releases as well. That issue is logically separate and should be fixed on its own.\r\n\r\nThis PR is a re-opening of PR #1597 from July of 2012. Unfortunately GitHub forced creation of a new PR.",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/37372069?v=4",
                        "login": "setpill"
                    },
                    "body": "Running into the following error trying to run this on Ubuntu 17.10:\r\n\r\n```\r\n[..]\r\n==> default: Checking for guest additions in VM...\r\n    default: The guest additions on this VM do not match the installed version of\r\n    default: VirtualBox! In most cases this is fine, but in rare cases it can\r\n    default: prevent things such as shared folders from working properly. If you see\r\n    default: shared folder errors, please make sure the guest additions within the\r\n    default: virtual machine match the version of VirtualBox you have installed on\r\n    default: your host and reload your VM.\r\n    default: \r\n    default: Guest Additions Version: 5.0.18_Ubuntu r106667\r\n    default: VirtualBox Version: 5.1\r\n==> default: Mounting shared folders...\r\n    default: /vagrant => [redacted]/bitcoin/contrib/vagrant\r\nVagrant was unable to mount VirtualBox shared folders. This is usually\r\nbecause the filesystem \"vboxsf\" is not available. This filesystem is\r\nmade available via the VirtualBox Guest Additions and kernel module.\r\nPlease verify that these guest additions are properly installed in the\r\nguest. This is not a bug in Vagrant and is usually caused by a faulty\r\nVagrant box. For context, the command attempted was:\r\n\r\nmount -t vboxsf -o uid=1000,gid=1000 vagrant /vagrant\r\n\r\nThe error output from the command was:\r\n\r\nmount: unknown filesystem type 'vboxsf'\r\n\r\nMakefile:220: recipe for target '.stamp-gitian-host.manifest' failed\r\nmake: *** [.stamp-gitian-host.manifest] Error 1\r\n```\r\n\r\nWhich is curious, since I can see earlier in the log it is downloading version `5.1.30` of the guest additions iso, and the system-installed version of the `virtualbox-guest-additions-iso` package is `5.1.30-1`.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MzAzOTM1OQ==",
                    "publishedAt": "2018-03-14T14:25:19Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12656#issuecomment-373039359"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/69154?v=4",
                        "login": "maaku"
                    },
                    "body": "Right. For that reason I\u2019m pretty sure this is an upstream issue with vagrant and/or virtualbox on your platform, like it is unable to communicate with the host support daemon or something. There isn\u2019t anything special that these scripts do with respect to vbox configuration.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MzA3Mjg1OA==",
                    "publishedAt": "2018-03-14T15:54:48Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12656#issuecomment-373072858"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/37372069?v=4",
                        "login": "setpill"
                    },
                    "body": "I reinstalled virtualbox using virtualbox.org's binary release channel, vagrant was already installed from vagrantup (since Ubuntu 17.10 is still on 1.9.x). Same error (but with `VirtualBox Version: 5.2` instead of `VirtualBox Version: 5.1`).\r\n\r\nIt seems like `5.0.18` corresponds to [the virtualbox-guest-additions-iso package in xenial's repositories](https://packages.ubuntu.com/xenial/virtualbox-guest-additions-iso). Out of curiosity, what host platform are you running it successfully on? What is the virtualbox version installed there?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MzA5MzczNw==",
                    "publishedAt": "2018-03-14T16:49:43Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12656#issuecomment-373093737"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/69154?v=4",
                        "login": "maaku"
                    },
                    "body": "Most recently on macOS 10.13.3 with VirtualBox 5.2.8 r121009. But I previously had this running on a 16.04 LTS integration server, before making some changes for the PR that should be unrelated. I'll try again on both 16.04 and 17.10.\r\n\r\nWhile I'm doing that, maybe try upgrading to the vbox 5.2 series?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MzA5NTcwMA==",
                    "publishedAt": "2018-03-14T16:55:05Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12656#issuecomment-373095700"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/69154?v=4",
                        "login": "maaku"
                    },
                    "body": "Also you can get Ubuntu binaries from Oracle's (non-Launchpad) PPA here:\r\n\r\nhttps://www.virtualbox.org/wiki/Linux_Downloads",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MzA5NjI3MQ==",
                    "publishedAt": "2018-03-14T16:56:37Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12656#issuecomment-373096271"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/37372069?v=4",
                        "login": "setpill"
                    },
                    "body": "That's exactly where I reinstalled it from :), edited comment to clarify I am on vbox 5.2 series.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MzA5Njc5MQ==",
                    "publishedAt": "2018-03-14T16:57:55Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12656#issuecomment-373096791"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/69154?v=4",
                        "login": "maaku"
                    },
                    "body": "@setpill are you running into this bug?\r\n\r\nhttps://github.com/hashicorp/vagrant/issues/8502",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MzA5Nzc1Nw==",
                    "publishedAt": "2018-03-14T17:00:47Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12656#issuecomment-373097757"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/69154?v=4",
                        "login": "maaku"
                    },
                    "body": "@setpill Maybe I was misreading the output you posted above. Is this a failure at the packer stage or with `vagrant up` and provisioning? Did packer complete construction of the box template?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MzA5OTU3NQ==",
                    "publishedAt": "2018-03-14T17:05:57Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12656#issuecomment-373099575"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/37372069?v=4",
                        "login": "setpill"
                    },
                    "body": "Considering that that is a bug introduced in guest-additions version `5.1.20` and fixed in `5.1.22`, and I am either running `5.1.30`/`5.2.8` or `5.0.18`, I would suspect not.\r\n\r\nI will run `make` again and capture a full log for reference.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MzEwMDUzMw==",
                    "publishedAt": "2018-03-14T17:08:39Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12656#issuecomment-373100533"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/37372069?v=4",
                        "login": "setpill"
                    },
                    "body": "[Log here](https://gist.github.com/setpill/92edfd218a449619084d09823ce5269e)",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MzEwOTMxNQ==",
                    "publishedAt": "2018-03-14T17:33:53Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12656#issuecomment-373109315"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/37372069?v=4",
                        "login": "setpill"
                    },
                    "body": "`vagrant plugin install vagrant-vbguest` fixed the problem; possibly an idea to include in the readme. Building from the `vagrant-0.16` branch did not generate matching `out_manifest`s for me but this could be ascribed to the separate bug in the first comment.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MzE3NjIzOA==",
                    "publishedAt": "2018-03-14T21:11:46Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12656#issuecomment-373176238"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/69154?v=4",
                        "login": "maaku"
                    },
                    "body": "Thanks for the update. The vagrant-X branches are private branches not meant for consumption by others. I\u2019m surprised it worked at all.\n\n> On Mar 14, 2018, at 2:13 PM, setpill <notifications@github.com> wrote:\n> \n> vagrant plugin install vagrant-vbguest fixed the problem; possibly an idea to include in the readme. Building from the vagrant-0.16 branch did not generate matching out_manifests for me but this could be ascribed to the separate bug in the first comment.\n> \n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub, or mute the thread.\n> \n",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MzE4MjA2MQ==",
                    "publishedAt": "2018-03-14T21:32:50Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12656#issuecomment-373182061"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/69154?v=4",
                        "login": "maaku"
                    },
                    "body": "Documentation has been updated.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MzIyNDkyMQ==",
                    "publishedAt": "2018-03-15T00:58:34Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12656#issuecomment-373224921"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/863730?v=4",
                        "login": "fanquake"
                    },
                    "body": "Started testing, looks like the build failed just after finishing the depends downloads:\r\n```\r\nFetching xtrans-1.3.4.tar.bz2 from http://xorg.freedesktop.org/releases/individual/lib/\r\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\r\n                                 Dload  Upload   Total   Spent    Left  Speed\r\n100   357  100   357    0     0    517      0 --:--:-- --:--:-- --:--:--   517\r\n100  178k  100  178k    0     0  38427      0  0:00:04  0:00:04 --:--:-- 59783\r\n/Users/fanquake/Downloads/bitcoin-vagrant/depends/work/download/xtrans-1.3.4/xtrans-1.3.4.tar.bz2.temp: OK\r\nmkdir -p output\r\nvagrant up\r\nBringing machine 'default' up with 'virtualbox' provider...\r\n==> default: Machine already provisioned. Run `vagrant provision` or use the `--provision`\r\n==> default: flag to force provisioning. Provisioners marked to run always will still run.\r\nvagrant ssh --command \"rm -rf ~/'bitcoin' || true\"; vagrant ssh --command \"mkdir -p ~/'bitcoin'\" || exit 1; vagrant ssh --command \"cd ~/'bitcoin' && tar -xf /vagrant/cache/src-local.tar.xz\" || exit 1; vagrant ssh --command \"cd ~/'bitcoin' && grep -v 'contrib/vagrant/Makefile' configure.ac >.configure.ac.2 && mv .configure.ac.2 configure.ac'\"; vagrant ssh --command \"cd ~/'bitcoin' && git init\" || exit 1; vagrant ssh --command \"cd ~/'bitcoin' && git config user.name 'Gitian Builder'\" || exit 1; vagrant ssh --command \"cd ~/'bitcoin' && git config user.email 'vagrant@vagrant'\" || exit 1; vagrant ssh --command \"cd ~/'bitcoin' && find . -not \\\\( -path ./.git -prune \\\\) -type f -print0 | xargs -0 git add -f\" || exit 1; vagrant ssh --command \"cd ~/'bitcoin' && env GIT_COMMITTER_NAME='`cat 'cache'/src-local.committer-name`' GIT_COMMITTER_EMAIL='`cat 'cache'/src-local.committer-email`' GIT_COMMITTER_DATE='`cat 'cache'/src-local.committer-date`' git commit --author='`cat 'cache'/src-local.author`' --date='`cat 'cache'/src-local.author-date`' -m tip\" || exit 1\r\nConnection to 127.0.0.1 closed.\r\nConnection to 127.0.0.1 closed.\r\nConnection to 127.0.0.1 closed.\r\nbash: -c: line 0: unexpected EOF while looking for matching `''\r\nbash: -c: line 1: syntax error: unexpected end of file\r\nConnection to 127.0.0.1 closed.\r\nInitialized empty Git repository in /home/vagrant/bitcoin/.git/\r\nConnection to 127.0.0.1 closed.\r\nConnection to 127.0.0.1 closed.\r\nConnection to 127.0.0.1 closed.\r\nConnection to 127.0.0.1 closed.\r\nfatal: invalid date format: date\r\nConnection to 127.0.0.1 closed.\r\nmake: *** [output/bitcoin-linux-0.17-gitian.zip] Error 1\r\n```\r\n\r\nAlso, I wasn't able to use the github-merge script to merge these changes:\r\n```\r\nfanquake:bitcoin $ merge 12656\r\nERROR: File contrib/vagrant/README was a symlink\r\nfanquake:bitcoin $ \r\n```",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NDUwMjY3Mg==",
                    "publishedAt": "2018-03-20T07:37:48Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12656#issuecomment-374502672"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/37372069?v=4",
                        "login": "setpill"
                    },
                    "body": "Windows and OSX builds both fail for me with error `cp: cannot stat 'base-trusty-amd64': No such file or directory`.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NTY4Mzg2NA==",
                    "publishedAt": "2018-03-23T14:31:42Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12656#issuecomment-375683864"
                }
            ],
            "totalCount": 15
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "65418eaffce16bdf577d507342778747e4746938"
                    }
                }
            ],
            "totalCount": 1
        },
        "createdAt": "2018-03-09T18:51:08Z",
        "deletions": 0,
        "id": "MDExOlB1bGxSZXF1ZXN0MTc0MDgwMzYx",
        "labels": {
            "nodes": [
                {
                    "color": "ffffee",
                    "id": "MDU6TGFiZWwyMzE5OTQ1NTE=",
                    "name": "Scripts and tools"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "number": 12656,
        "state": "OPEN",
        "title": "Add scripts for doing gitian builds on any platform using VirtualBox + Vagrant + Packer",
        "updatedAt": "2018-03-23T14:31:42Z"
    },
    {
        "additions": 132,
        "author": {
            "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
            "login": "practicalswift",
            "url": "https://github.com/practicalswift"
        },
        "body": "Add compile time checking for all run time locking assertions.\r\n\r\nThe intention is that literally all `EXCLUSIVE_LOCKS_REQUIRED`/`LOCKS_EXCLUDED`:s added in this PR should follow either directly or indirectly from `AssertLockHeld(\u2026)`/`AssertLockNotHeld(\u2026)`:s already existing in the repo.\r\n\r\nConsider the case where function `A(\u2026)` contains `AssertLockHeld(cs_foo)` (without\r\nfirst locking `cs_foo` in `A`), and that `B(\u2026)` calls `A(\u2026)` (without first locking `cs_main`):\r\n* It _directly_ follows that: `A(\u2026)` should have an `EXCLUSIVE_LOCKS_REQUIRED(cs_foo)` annotation.\r\n* It _indirectly_ follows that: `B(\u2026)` should have an `EXCLUSIVE_LOCKS_REQUIRED(cs_foo)` annotation.",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
                        "login": "MarcoFalke"
                    },
                    "body": "Concept ACK",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MjE1MDc5MA==",
                    "publishedAt": "2018-03-11T21:27:01Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12665#issuecomment-372150790"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "@MarcoFalke Updated! Please review :-)",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MjIxMDM4OQ==",
                    "publishedAt": "2018-03-12T06:59:26Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12665#issuecomment-372210389"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "Concept ACK - Unlike the title implies, not all the added run time checking requirements have an associated AssertLockHeld/AssertLockNotHeld (e.g. CoinSelection) is this on purpose?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MjYzODc4OA==",
                    "publishedAt": "2018-03-13T11:49:13Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12665#issuecomment-372638788"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "@laanwj Thanks for reporting. The annotations for `CoinSelection` and two other functions were incorrect. That is now fixed.\r\n\r\nThe intention is that literally all `EXCLUSIVE_LOCKS_REQUIRED`/`LOCKS_EXCLUDED`:s added in this PR should follow either directly or indirectly from `AssertLockHeld(\u2026)`/`AssertLockNotHeld(\u2026)`:s already existing in the repo.\r\n\r\nConsider the case where function `A(\u2026)` contains `AssertLockHeld(cs_foo)` (without\r\nfirst locking `cs_foo` in `A`), and that `B(\u2026)` calls `A(\u2026)` (without first locking `cs_main`):\r\n* It _directly_ follows that: `A(\u2026)` should have an `EXCLUSIVE_LOCKS_REQUIRED(cs_foo)` annotation.\r\n* It _indirectly_ follows that: `B(\u2026)` should have an `EXCLUSIVE_LOCKS_REQUIRED(cs_foo)` annotation.\r\n\r\nI'll run through all annotations again to verify that they all follow directly or indirectly from `AssertLockHeld(\u2026)`/`AssertLockNotHeld(\u2026)`:s.\r\n\r\nThese are the annotations added \u2013 let me know if something sticks out/looks weird:\r\n\r\n```\r\n[Edit: List moved to PR description. See above!]\r\n```",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MjY3MTk5MA==",
                    "publishedAt": "2018-03-13T13:52:03Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12665#issuecomment-372671990"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/10217?v=4",
                        "login": "Sjors"
                    },
                    "body": "Sadly that still didn't catch my [mistake here](https://github.com/bitcoin/bitcoin/pull/12565/files#r171235800), but I assume this is a step in that direction.\r\n\r\nLightly tested on macOS (no change, as expected).\r\n\r\n@practicalswift maybe you can put that overview and additional explanation (\"directly follows that...\") in the commit message or PR description?\r\n\r\nI didn't see a `EXCLUSIVE_LOCKS_REQUIRED ` in `LoadChainTip`; I assume that's done in a some dependent function? Maybe that can be made explicit in your overview if it's not too tedious?\r\n\r\nThe `EXLCUSIVE_LOCKS...` stuff in `validation.h` is not repeated in `validation.cpp`, that's intentional?\r\n\r\nShould violations merely throw warnings?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MjgxNTg4MA==",
                    "publishedAt": "2018-03-13T20:57:49Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12665#issuecomment-372815880"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/3211283?v=4",
                        "login": "MeshCollider"
                    },
                    "body": "Concept ACK",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MjgxOTk4MA==",
                    "publishedAt": "2018-03-13T21:11:53Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12665#issuecomment-372819980"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "@Sjors No intention to repeat annotations :-)  Which specific annotations did you see repeated in `validation.cpp`? Did you check them in the files or just in the summary?\r\n\r\nViolations are checked by Travis and cause a Travis build failure if found \u2013 see [`configure.ac`](https://github.com/bitcoin/bitcoin/blob/f13d756cdd9445d1478a70c5387df2a444045f6e/configure.ac#L251-L257).",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3Mjk1NDI3OQ==",
                    "publishedAt": "2018-03-14T09:19:32Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12665#issuecomment-372954279"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "@Sjors Did you mean that you didn't see any `AssertLockHeld(\u2026)` in `LoadChainTip`? :-)\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3Mjk1NTE4Ng==",
                    "publishedAt": "2018-03-14T09:22:51Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12665#issuecomment-372955186"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/10217?v=4",
                        "login": "Sjors"
                    },
                    "body": "> Which specific annotations did you see repeated in validation.cpp\r\n\r\nNone, so that's all good. I just found it slightly confusing that some annotations are in .h files and others in .cpp files.\r\n\r\n> Did you mean that you didn't see any `AssertLockHeld(\u2026)` in `LoadChainTip`?\r\n\r\nYes, sorry. To more specific, no `AssertLockHeld(mempool.cs)`. But if you're happy and the compiler is happy, I'm happy :-)",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MzAzNDEyOA==",
                    "publishedAt": "2018-03-14T14:10:36Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12665#issuecomment-373034128"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "@Sjors The annotations should be in the header files, but not all functions are exported so that's why some annotations end up in the `.h` files.\r\n\r\n`LoadChainTip` is annotated with `EXCLUSIVE_LOCKS_REQUIRED(mempool.cs)` since it (indirectly) calls `CheckSequenceLocks` (which contains `AssertLockHeld(mempool.cs)`) without first locking `mempool.cs`.\r\n\r\nThe call stack looks like this:\r\n\r\n```\r\nLoadChainTip\r\n  ActivateBestChain\r\n    ActivateBestChainStep\r\n      UpdateMempoolForReorg\r\n        AcceptToMemoryPool\r\n          AcceptToMemoryPoolWithTime\r\n            AcceptToMemoryPoolWorker\r\n              CheckSequenceLocks\r\n```",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MzE1NTI2NA==",
                    "publishedAt": "2018-03-14T19:59:54Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12665#issuecomment-373155264"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/548488?v=4",
                        "login": "sipa"
                    },
                    "body": "Concept ACK",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MzIyNjMyMA==",
                    "publishedAt": "2018-03-15T01:07:10Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12665#issuecomment-373226320"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "Rebased!",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3ODIxOTI5Mg==",
                    "publishedAt": "2018-04-03T11:35:34Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12665#issuecomment-378219292"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "Rebased again!",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3OTY3NjMzMg==",
                    "publishedAt": "2018-04-09T08:33:46Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12665#issuecomment-379676332"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "@laanwj This PR is a subset of #11226 (closed in favour of smaller locking PR:s). PR #11226 had a 0.17.0 milestone (originally a 0.16.0 milestone actually). Would it be possible to get a 0.17.0 milestone for this PR?\r\n\r\nOf the locking PR:s this should be the best candidate for early merge. It contains only locking annotations for which we are already asserting using `AssertLockHeld(\u2026)`. Since this PR doesn't change runtime behaviour (compile-time checks only) it should be low risk.\r\n\r\nHaving this PR merged would make the other locking assertions PR:s much smaller and easier to review since this PR contains the bulk of the assertions which the other PR:s contain too.\r\n\r\nKeeping this PR rebased is getting a bit time consuming, so let me know if I can do anything to facilitate merging :-)",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3OTY4MDAzOA==",
                    "publishedAt": "2018-04-09T08:47:29Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12665#issuecomment-379680038"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "Rebase number 3 performed :-)",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3OTkxNjQ1OQ==",
                    "publishedAt": "2018-04-09T22:43:12Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12665#issuecomment-379916459"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/10217?v=4",
                        "login": "Sjors"
                    },
                    "body": "Can confirm 9d3e5374e30cd2b1c04c0bb45da24236eb3b2b37 still compiles on macOS.\r\n\r\n@TheBlueMatt and @promag recently worked on concurrency related bugs in `init.cpp`, so they might be able to review.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MDQxNjg2NA==",
                    "publishedAt": "2018-04-11T11:18:56Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12665#issuecomment-380416864"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "Rebase number 4 performed :-)  Please review :-)",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MzM2ODU5NA==",
                    "publishedAt": "2018-04-22T09:44:48Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12665#issuecomment-383368594"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "@laanwj This PR is getting a bit heavy to keep up-to-date. Do you think this PR has a chance of getting a 0.17.0 milestone (like #11226 had before getting closed in favour of this and other smaller PR:s)? :-)",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MzM2ODk3NQ==",
                    "publishedAt": "2018-04-22T09:53:16Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12665#issuecomment-383368975"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "@MarcoFalke Updated. I've now tried to address your feedback. Turns out that I was a bit too strict with the locking requirements for `mempool.cs`, so the updated diff is significantly smaller and hopefully easier to review. Please re-review :-)",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4NDA5NTM4MQ==",
                    "publishedAt": "2018-04-24T22:06:37Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12665#issuecomment-384095381"
                }
            ],
            "totalCount": 19
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "0d3b75d59efefa2a640e29334b9205fde74cf080"
                    }
                }
            ],
            "totalCount": 1
        },
        "createdAt": "2018-03-10T17:17:32Z",
        "deletions": 119,
        "id": "MDExOlB1bGxSZXF1ZXN0MTc0MTc5NzAz",
        "labels": {
            "nodes": [
                {
                    "color": "E6F6D6",
                    "id": "MDU6TGFiZWwxMzU5NjE=",
                    "name": "Refactoring"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "number": 12665,
        "state": "OPEN",
        "title": "Add compile time checking for run time locking assertions",
        "updatedAt": "2018-04-24T22:06:37Z"
    },
    {
        "additions": 11,
        "author": {
            "avatarUrl": "https://avatars2.githubusercontent.com/u/1095675?v=4",
            "login": "luke-jr",
            "url": "https://github.com/luke-jr"
        },
        "body": "The behaviour of addnode onetry changed without notice. This restores the ability to at least get the original behaviour.\r\n\r\nNeeded for properly testing DoS rules.",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
                        "login": "MarcoFalke"
                    },
                    "body": "rpc_net.py fails",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MjMwNDM0Nw==",
                    "publishedAt": "2018-03-12T13:11:53Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12674#issuecomment-372304347"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/3211283?v=4",
                        "login": "MeshCollider"
                    },
                    "body": "Concept ACK",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MjgxOTE4MA==",
                    "publishedAt": "2018-03-13T21:09:05Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12674#issuecomment-372819180"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/649246?v=4",
                        "login": "TheBlueMatt"
                    },
                    "body": "This breaks our outbound-connection-counting logic in the aut-connect loop as it uses the manual connection flag to figure out how many other connections to make.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NzAwNDAxOQ==",
                    "publishedAt": "2018-03-28T19:17:27Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12674#issuecomment-377004019"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/1095675?v=4",
                        "login": "luke-jr"
                    },
                    "body": "Added a PR description, and kicked Travis.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NzY3NzA3Mg==",
                    "publishedAt": "2018-03-31T08:38:08Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12674#issuecomment-377677072"
                }
            ],
            "totalCount": 4
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "0670e4fffcc1cdb431fd43a61d630fe425d200c7"
                    }
                }
            ],
            "totalCount": 1
        },
        "createdAt": "2018-03-12T06:03:31Z",
        "deletions": 6,
        "id": "MDExOlB1bGxSZXF1ZXN0MTc0Mjc5MTk4",
        "labels": {
            "nodes": [
                {
                    "color": "0052cc",
                    "id": "MDU6TGFiZWw5ODI3OTE3Nw==",
                    "name": "RPC/REST/ZMQ"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "number": 12674,
        "state": "OPEN",
        "title": "RPC: Support addnode onetry without making the connection priviliged",
        "updatedAt": "2018-03-31T08:38:08Z"
    },
    {
        "additions": 21,
        "author": {
            "avatarUrl": "https://avatars3.githubusercontent.com/u/5836089?v=4",
            "login": "dexX7",
            "url": "https://github.com/dexX7"
        },
        "body": "This pull request adds a flag \"bip125-replaceable\" to the mempool RPCs getrawmempool, getmempoolentry, getmempoolancestors and getmempooldescendants, which indicates whether an unconfirmed transaction might be replaced.\r\n\r\nInitially the flag was added to the raw transaction RPCs, but thanks to @conscott, it was moved to the mempool RPCs, which actually have access to the mempool.\r\n\r\n~~This pull request adds a flag \"bip125-replaceable\" to the RPCs \"getrawtransaction\" and \"decoderawtransaction\", which indicates, whether a transaction signals BIP 125 replaceability.~~\r\n\r\nThere was some discussion in #7817, whether showing replaceability in the UI could lead to the false assumption that transactions that don't signal BIP 125 are truely non-replaceable, but given that this PR tackles the raw transaction interface, which is a rather low level tool, I believe having this extra piece of information isn't bad.",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/5836089?v=4",
                        "login": "dexX7"
                    },
                    "body": "~~Please note, I copied SignalsOptInRBF() from policy/rbf.cpp into core_write.cpp.~~\r\n\r\n~~This is probably not a good way to do, but it was done for now, because rbf.cpp isn't avaliable in LIBBITCOIN_COMMON. However, simply moving rbf.cpp from LIBBITCOIN_SERVER to LIBBITCOIN_COMMON doesn't work, because IsRBFOptIn() in rbf.cpp has mempool dependencies, which are also not available.~~\r\n\r\n~~As alternative I could imagine to split rbf.cpp into something like rbf.cpp with SignalsOptInRBF(), which becomes part of LIBBITCOIN_COMMON and rbfstate.cpp with IsRBFOptIn(), which becomes part of LIBBITCOIN_SERVER?~~",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MjI1Mjg0Mg==",
                    "publishedAt": "2018-03-12T09:56:41Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12676#issuecomment-372252842"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/5836089?v=4",
                        "login": "dexX7"
                    },
                    "body": "@conscott brought up the idea of adding the flag to mempool entries and mempool RPCs. I really like the idea, because these calls are actually mempool aware and provide full access to the mempool and thus also allow to check, whether a transaction is really replaceable instead of simply signaling replaceablity.\r\n\r\nI updated the PR accordingly, because I believe this is the way to go. @conscott if you want to submit this as PR, feel free to do so though, and I'll close this one.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MjYyOTUyMw==",
                    "publishedAt": "2018-03-13T11:10:23Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12676#issuecomment-372629523"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/5767891?v=4",
                        "login": "instagibbs"
                    },
                    "body": "re-ACK",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MjcyMjIyOQ==",
                    "publishedAt": "2018-03-13T16:10:55Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12676#issuecomment-372722229"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/14220652?v=4",
                        "login": "conscott"
                    },
                    "body": "Concept ACK. Thanks for updating @dexX7 - just left a comment about the unknown state. Will test this out tomorrow. ",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3Mjc3MDY5MA==",
                    "publishedAt": "2018-03-13T18:28:17Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12676#issuecomment-372770690"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/5836089?v=4",
                        "login": "dexX7"
                    },
                    "body": "Regarding checking the `\"unknown\"` case: in the case of the RPCs this isn't triggered, because they iterate over mempool entries, which are inherently part of the mempool, but I kind of tend to leave it there for the potential case `entryToJSON()` is called in a different context. I'd be fine with removing this path though, too.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3Mjc3MTg1OA==",
                    "publishedAt": "2018-03-13T18:31:48Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12676#issuecomment-372771858"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/3211283?v=4",
                        "login": "MeshCollider"
                    },
                    "body": "Concept ACK",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MjgxNjY5Mw==",
                    "publishedAt": "2018-03-13T21:00:37Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12676#issuecomment-372816693"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/5836089?v=4",
                        "login": "dexX7"
                    },
                    "body": "Hey guys, just to clarify: given there were mixed reactions, do you insist on removing the branch for the \"unknown\" case and replace it with an exception or is this PR good to go as it is?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4Mzg5MzcyNg==",
                    "publishedAt": "2018-04-24T11:12:50Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12676#issuecomment-383893726"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/14220652?v=4",
                        "login": "conscott"
                    },
                    "body": "@dexX7 - I was arguing over the `unknown`, but I am happy with it as is. ",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MzkwMDI1Ng==",
                    "publishedAt": "2018-04-24T11:40:43Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12676#issuecomment-383900256"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
                        "login": "MarcoFalke"
                    },
                    "body": "I just fail to see why it makes sense to burden rpc users with a third value that is never actually set.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4Mzk1OTE4Nw==",
                    "publishedAt": "2018-04-24T14:44:28Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12676#issuecomment-383959187"
                }
            ],
            "totalCount": 9
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "eef1b43b5860122bd7dc9270b5b5ba3f64b1dc0e"
                    }
                }
            ],
            "totalCount": 2
        },
        "createdAt": "2018-03-12T09:56:16Z",
        "deletions": 2,
        "id": "MDExOlB1bGxSZXF1ZXN0MTc0MzE3OTY2",
        "labels": {
            "nodes": [
                {
                    "color": "0052cc",
                    "id": "MDU6TGFiZWw5ODI3OTE3Nw==",
                    "name": "RPC/REST/ZMQ"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "number": 12676,
        "state": "OPEN",
        "title": "Show \"bip125-replaceable\" flag, when retrieving mempool entries",
        "updatedAt": "2018-04-24T14:44:28Z"
    },
    {
        "additions": 13,
        "author": {
            "avatarUrl": "https://avatars2.githubusercontent.com/u/1095675?v=4",
            "login": "luke-jr",
            "url": "https://github.com/luke-jr"
        },
        "body": "Requested by a user",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "Concept ACK",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MjQyOTYwNQ==",
                    "publishedAt": "2018-03-12T19:12:38Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12677#issuecomment-372429605"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/31025672?v=4",
                        "login": "BitcoinGeek"
                    },
                    "body": "Thank you Luke for taking it into consideration and adding it !",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MjY3NDc3NQ==",
                    "publishedAt": "2018-03-13T14:00:11Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12677#issuecomment-372674775"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/3211283?v=4",
                        "login": "MeshCollider"
                    },
                    "body": "Concept ACK, perhaps it'd be cleaner to sub-object them like you put in the title of the PR ",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MjgxNDYzOQ==",
                    "publishedAt": "2018-03-13T20:53:26Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12677#issuecomment-372814639"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/548488?v=4",
                        "login": "sipa"
                    },
                    "body": "Concept ACK",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3Mzg3OTkyMQ==",
                    "publishedAt": "2018-03-17T00:39:35Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12677#issuecomment-373879921"
                }
            ],
            "totalCount": 4
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "daeb431011eefb35b9c76c0b1072d44ac40fe2a6"
                    }
                }
            ],
            "totalCount": 1
        },
        "createdAt": "2018-03-12T18:01:35Z",
        "deletions": 0,
        "id": "MDExOlB1bGxSZXF1ZXN0MTc0NDQ5MjAx",
        "labels": {
            "nodes": [
                {
                    "color": "0052cc",
                    "id": "MDU6TGFiZWw5ODI3OTE3Nw==",
                    "name": "RPC/REST/ZMQ"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "number": 12677,
        "state": "OPEN",
        "title": "RPC: Add ancestor{count,size,fees} to listunspent output",
        "updatedAt": "2018-03-31T07:29:07Z"
    },
    {
        "additions": 3,
        "author": {
            "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
            "login": "practicalswift",
            "url": "https://github.com/practicalswift"
        },
        "body": "By generating a trap for signed overflow on addition, subtraction, multiplication operations in the Travis testing we are more likely to identify problematic code prior to merging it.",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/863730?v=4",
                        "login": "fanquake"
                    },
                    "body": "HOST=x86_64-unknown-linux-gnu\r\n```\r\nThe command \"test -n \"$USE_SHELL\" && eval '\"$USE_SHELL\" -c \"./autogen.sh\"' || ./autogen.sh\" exited with 0.\r\n$ mkdir build && cd build\r\n\r\nThe command \"mkdir build && cd build\" exited with 0.\r\n$ ../configure --cache-file=config.cache $BITCOIN_CONFIG_ALL $BITCOIN_CONFIG || ( cat config.log && false)\r\nconfigure: error: unrecognized option: `-ftrapv''\r\nTry `../configure --help' for more information\r\ncat: config.log: No such file or directory\r\n\r\nThe command \"../configure --cache-file=config.cache $BITCOIN_CONFIG_ALL $BITCOIN_CONFIG || ( cat config.log && false)\" exited with 1.\r\n$ make distdir VERSION=$HOST\r\nmake: *** No rule to make target `distdir'.  Stop.\r\n```",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MzA0MzM2Ng==",
                    "publishedAt": "2018-03-14T14:36:04Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12686#issuecomment-373043366"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/2734?v=4",
                        "login": "eklitzke"
                    },
                    "body": "This is cool, concept ack.\r\n\r\nLooks like there are some problems:\r\n * -fwrapv belongs in CXXFLAGS not in CPPFLAGS\r\n * Travis is being weird. The builders that passed seem to have used some kind of cached config and didn't actually pick up -ftrapv. The one that's failing is failing because there's a shell quoting issue with how configure is invoked.\r\n\r\nGCC 4.8 also supports -fsanitize=address and -fsanitize=thread (and newer GCC versions have a whole plethora or really interesting options). What do you think about using those options in Travis as well?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MzE5ODAyNQ==",
                    "publishedAt": "2018-03-14T22:36:09Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12686#issuecomment-373198025"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/2734?v=4",
                        "login": "eklitzke"
                    },
                    "body": "Here's an idea for another way to do this: https://github.com/eklitzke/bitcoin/commit/635e378383c41c8ef3ac03fca1755001c947b7f7 . The idea is to add `-ftrapv` when `--enable-debug` is used, and then use that option on all of the Travis jobs. `--enable-debug` also sets `-DDEBUG_LOCKORDER`.\r\n\r\nWhat do you think of this approach?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MzIwNDc0OQ==",
                    "publishedAt": "2018-03-14T23:07:41Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12686#issuecomment-373204749"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/548488?v=4",
                        "login": "sipa"
                    },
                    "body": "@eklitzke There was some work earlier to get the code to run cleanly under sanitizers (see #9743 and #9512), though I don't think we ever made it perfectly runnable without warnings.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MzIxMjQzMA==",
                    "publishedAt": "2018-03-14T23:47:54Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12686#issuecomment-373212430"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/2734?v=4",
                        "login": "eklitzke"
                    },
                    "body": "BTW the right way to fix the quoting issue in Travis is to use a bash array. It looks like Travis doesn't support these properly. If you still wanted to use this approach instead of modifying configure.ac as in my example two options:\r\n * `IFS` hacks\r\n * Create yet-another-Travis-variable and pass it down to the configure call",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MzI3NTQwNA==",
                    "publishedAt": "2018-03-15T06:36:11Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12686#issuecomment-373275404"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "@eklitzke Thanks for reviewing. I've now cherry-picked your commit (which is the better solution) into this PR.\r\n\r\nPlease re-review :-)",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MzI4NDA1Ng==",
                    "publishedAt": "2018-03-15T07:20:50Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12686#issuecomment-373284056"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "@eklitzke Enabling `-fsanitize=address` and `-fsanitize=thread` in Travis (after cleaning up remaining violations) would be really really nice!",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MzI4NDQ5MA==",
                    "publishedAt": "2018-03-15T07:23:16Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12686#issuecomment-373284490"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/2734?v=4",
                        "login": "eklitzke"
                    },
                    "body": "It looks like this doesn't work for the MingW builds, I got timeouts in my travis runs that match the ones you just cherry-picked: https://travis-ci.org/eklitzke/bitcoin/builds/353587968 . Let's disable the option for those two builders.\r\n\r\nI added some -fsanitize support to the configure script in #12692, which is a good start since it will make using those flags easier (even if the code isn't currently clean under asan/tsan).",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MzI5MzE4Mg==",
                    "publishedAt": "2018-03-15T08:06:22Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12686#issuecomment-373293182"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "@eklitzke To keep the changes as small as possible I've now enabled `-ftrapv` (via `--enable-debug`) only for one of the Travis jobs (job: \"Qt4 & system libs\"). Makes sense?\r\n\r\nPlease re-review :-)",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MzQxMjEyNw==",
                    "publishedAt": "2018-03-15T15:16:08Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12686#issuecomment-373412127"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/863730?v=4",
                        "login": "fanquake"
                    },
                    "body": "@practicalswift I don't think you've cherry-picked correctly, looks like you just swapped out the changes in your commit with @eklitzke's ?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MzU4MTM3Nw==",
                    "publishedAt": "2018-03-16T02:09:48Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12686#issuecomment-373581377"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/2734?v=4",
                        "login": "eklitzke"
                    },
                    "body": "This looks right to me, utACK e23dfbb01df044e6d0dc65f6b9333e6547202fa7.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MzYwNjAwOA==",
                    "publishedAt": "2018-03-16T05:16:03Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12686#issuecomment-373606008"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "@fanquake The cherry-pick was a previous version. e23dfbb01df044e6d0dc65f6b9333e6547202fa7 is correct. Please review :-)",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NDAyMjA2OQ==",
                    "publishedAt": "2018-03-18T17:46:21Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12686#issuecomment-374022069"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/2734?v=4",
                        "login": "eklitzke"
                    },
                    "body": "FYI this is going to conflict with #12695 . Should be an easy merge conflict though.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NTE2NzcxNQ==",
                    "publishedAt": "2018-03-22T03:26:45Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12686#issuecomment-375167715"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "@theuni Can you take a look?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NzkyNjM2NA==",
                    "publishedAt": "2018-04-02T13:12:54Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12686#issuecomment-377926364"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "Rebased! Please re-review :-)",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MTMyODA5OQ==",
                    "publishedAt": "2018-04-14T13:09:19Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12686#issuecomment-381328099"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "Interesting \u2013\u00a0judging from the Travis testing it seems that the trap is trigged indicating that we have a signed overflow taking place when running the tests. Let's find out where!",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MzUwNzU3OQ==",
                    "publishedAt": "2018-04-23T09:10:28Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12686#issuecomment-383507579"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/417043?v=4",
                        "login": "theuni"
                    },
                    "body": "Concept ACK. Please put this on top of #13005 though, as it needs the same treatment.\r\n\r\nThis needs to be checked with AX_CHECK_COMPILE_FLAG, the same way that -DDEBUG/-DDEBUG_LOCKORDER are checked there.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MzY1MzU5NA==",
                    "publishedAt": "2018-04-23T17:19:11Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12686#issuecomment-383653594"
                }
            ],
            "totalCount": 17
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "bb2d16174622be991b78f9b2ec68285fcc3270af"
                    }
                }
            ],
            "totalCount": 2
        },
        "createdAt": "2018-03-14T10:42:39Z",
        "deletions": 3,
        "id": "MDExOlB1bGxSZXF1ZXN0MTc0OTE0ODkz",
        "labels": {
            "nodes": [
                {
                    "color": "d4c5f9",
                    "id": "MDU6TGFiZWw2Mjk2MzUxNg==",
                    "name": "Tests"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "number": 12686,
        "state": "OPEN",
        "title": "Add -ftrapv to CFLAGS and CXXFLAGS when --enable-debug is used. Enable -ftrapv in Travis.",
        "updatedAt": "2018-04-23T18:05:41Z"
    },
    {
        "additions": 27,
        "author": {
            "avatarUrl": "https://avatars0.githubusercontent.com/u/2734?v=4",
            "login": "eklitzke",
            "url": "https://github.com/eklitzke"
        },
        "body": "It was recently pointed out to me that calling `fsync()` or `fdatasync()` on a new file is not sufficient to ensure it's persisted to disk, as the existence of the file itself is stored in the directory inode. This means that ensuring that a new file is actually committed also requires an `fsync()` on the parent directory. There are lots of discussions about this topic online, e.g. [here](https://www.quora.com/When-should-you-fsync-the-containing-directory-in-addition-to-the-file-itself). This only applies to new files, calling `fsync()` on an old file is always fine.\r\n\r\nIn theory this means that the block index can race block persistence, as a poorly timed power outage could cause us to commit data to the block index that gets lost in the filesystem. The change here ensures that we call `fsync()` on the blocks directory after committing new block files. I checked the LevelDB source code and they already do this when updating their writeahead log. In theory this could happen at the same time as a chain split and that could cause you to come back online and then miss the block you had committed to the index, which would put you permanently out of sync between the two. This seems pretty far fetched, but we should handle this case correctly anyway.\r\n\r\nI'm using a new autoconf macro as well, `AC_CHECK_FUNCS()`. It checks that a function is available and then defines a `HAVE_*` macro if it is, analogous to `AC_CHECK_HEADERS`. Right now `autoscan` complains a lot about the fact that we're not using this, so I figured I might as well start now while I was in this part of the code.\r\n\r\nApparently Windows doesn't have an similar method of syncing filesystem metadata---I'm not an expert on that though.\r\n\r\nAlso not strictly related to this change, but I have been working on a lot of platform-specific PRs recently and want to refactor `util.h` and `util.cpp` so the platform-specific bits are isolated from the generic util stuff. I intend to create an issue later today to describe how I think that should be done so I can get feedback before starting that work.",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/2734?v=4",
                        "login": "eklitzke"
                    },
                    "body": "Apparently macOS erroneously reports that it has `fdatasync()`, discussion here: https://github.com/haskell/unix/issues/37",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MzQ0NDA2Mw==",
                    "publishedAt": "2018-03-15T16:45:24Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12696#issuecomment-373444063"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6394033?v=4",
                        "login": "donaloconnor"
                    },
                    "body": "Just in case (I'm not very familiar with this part of Bitcoin): is there a reason this isn't done for the undo data also? If it makes sense there then maybe it's okay to do it once at the end of the function instead of in both?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MzUzOTcyMA==",
                    "publishedAt": "2018-03-15T22:13:33Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12696#issuecomment-373539720"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/2734?v=4",
                        "login": "eklitzke"
                    },
                    "body": "While I was looking at this again (originally to commit the undo data as @donaloconnor  suggested) I decided it would be nice if we could only sync the parent directory if we know there's actually a new block file on disk. The block files are 128 MB, so most of the time we're flushing we don't need to sync the parent directory.\r\n\r\nThe full logic for all of the paths that can cause a file to be created is really confusing. First I tried adding a global variable that tracks if a new file has been opened, so that we can only sync the directory when that's set. Then I was trying to understand the `fFinalize` flag so I could add a doxygen doc string to `FlushBlockToDisk()`. The full code path for how this can get called is pretty confusing and the methods aren't well documented, but it seemed like it was true in the same cases that there would be a new file, since we \"finalize\" (i.e. truncate) the file when the is not \"known to already reside on disk\". But why exactly we would need to truncate a file that doesn't exist yet is unclear. I think it's to support reorgs, but it was kind of hard to wrap my head around.\r\n\r\nSince this is pretty important logic I feel like some of these code paths at least need better comments. I am going to take another look through the code tomorrow and see if I can work it out. Maybe we end up always syncing the parent directory anyway since that's always safe, but I want to make sure I have a better grasp of all of the logic in this file.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3MzY0NjMyNg==",
                    "publishedAt": "2018-03-16T08:58:09Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12696#issuecomment-373646326"
                }
            ],
            "totalCount": 3
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "4894e368fa61cbae1370a8b83581533b0b223f45"
                    }
                }
            ],
            "totalCount": 1
        },
        "createdAt": "2018-03-15T14:21:24Z",
        "deletions": 6,
        "id": "MDExOlB1bGxSZXF1ZXN0MTc1MjY1NTU2",
        "labels": {
            "nodes": [
                {
                    "color": "000000",
                    "id": "MDU6TGFiZWwyMTk4OTA1NTU=",
                    "name": "Block storage"
                },
                {
                    "color": "f7c6c7",
                    "id": "MDU6TGFiZWwzMjM2OTc5OTY=",
                    "name": "Data corruption"
                }
            ],
            "totalCount": 2
        },
        "mergeable": "CONFLICTING",
        "mergedAt": null,
        "number": 12696,
        "state": "OPEN",
        "title": "Fix possible data race when committing block files",
        "updatedAt": "2018-03-22T14:48:03Z"
    },
    {
        "additions": 125,
        "author": {
            "avatarUrl": "https://avatars3.githubusercontent.com/u/250224?v=4",
            "login": "kallewoof",
            "url": "https://github.com/kallewoof"
        },
        "body": "Partially addresses #12703.\r\nFully addresses #9694.\r\n\r\nThis implementation simply uses the existing `importprivkey` code (moved into a separate `ImportPrivateKey` method), and does not support redeem scripts, internal, pubkeys, or keys options.\r\n\r\nOne question is if this should be simplified to where a user can put private keys in `keys` and leave `scriptPubKey` empty, or if it makes more sense to add a new field as I do here.\r\n\r\nAnother question is whether this should be incorporated more into how `importmulti` works, rather than basing it off of `importprivkey` (although with the timestamp argument, it seems like it does all we want it to).\r\n\r\n(I was initially planning on deriving the arguments for `ProcessImport` and letting it do its thing, but realized there can be multiple scriptPubKeys for one private key, so I'd have to call `ProcessImport` multiple times, with the same private key.. which will trigger an error.)",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/3211283?v=4",
                        "login": "MeshCollider"
                    },
                    "body": "Concept ACK",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3Mzk1ODgzOQ==",
                    "publishedAt": "2018-03-17T22:53:15Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12705#issuecomment-373958839"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "Concept ACK",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3Mzk3MzQxMQ==",
                    "publishedAt": "2018-03-18T05:06:46Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12705#issuecomment-373973411"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/548488?v=4",
                        "login": "sipa"
                    },
                    "body": "Thank you for working on this!\n\nI think we should be careful here though. `importprivkey` has a number a quirks that are for historical or compatibility reasons, that we shouldn't maintain:\n* `importprivkey` does not know what the corresponding address is, and thus can't know what type to use (p2pkh, p2sh-p2wpkh, p2wpkh), and thus has to assume all are possible (which results in at least labelling all 3). For `importmulti` we generally *do* have the address available. The goal here could be to provide a *default* address type (or explicitly name the type); not keep assuming it can be any.\n* Relatedly, we don't have an encoding for \"private key whose address is supposed to be P2SH-P2WPKH\". My suggestion would be to add one (I believe Electrum has some sort of standard for this). `importprivkey` can't really use these, because it already has to assume it can be any type, but `importmulti` does not need to repeat this. It could assume just P2PKH for a legacy WIP encoding, and P2SH/P2WPKH when one of those novel encodings is used.\n* `importprivkey` doesn't support key birth times; but this is not inherent, keys can have birth times.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3Mzk3Mzc0MQ==",
                    "publishedAt": "2018-03-18T05:15:48Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12705#issuecomment-373973741"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/548488?v=4",
                        "login": "sipa"
                    },
                    "body": "> One question is if this should be simplified to where a user can put private keys in keys and leave scriptPubKey empty, or if it makes more sense to add a new field as I do here.\r\n\r\nI think it should absolutely use `keys` - there is no need to add new fields to just provide the same functionality in a different way.\r\n\r\nThe way it should work IMO is that it integrates into all the functionality that exists (including labels, birth times), but simply permit the scriptpubkey/address (and for p2sh-p2wpkh, also the redeemscript) to be omitted and computed by default from the private key - provided we have figured out how to deal with the encoding of different types of address derivation.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3Mzk3NzgyOA==",
                    "publishedAt": "2018-03-18T07:18:59Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12705#issuecomment-373977828"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/250224?v=4",
                        "login": "kallewoof"
                    },
                    "body": "@sipa It seems Electrum 3.0 included an extension to WIF for segwit stuff: \r\n\r\nhttps://github.com/spesmilo/electrum/blob/5fef1e7980e6c9811448ad7d9fb6afa4460ac7fc/RELEASE-NOTES#L181-L194\r\n\r\nA good starting point might be to rework this PR to adopt that and see what people think?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NDA5MzE3OA==",
                    "publishedAt": "2018-03-19T03:46:05Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12705#issuecomment-374093178"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/250224?v=4",
                        "login": "kallewoof"
                    },
                    "body": "@promag Thanks for the feedback, see e896ba0, 6408244.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NDA5OTUxNg==",
                    "publishedAt": "2018-03-19T04:39:19Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12705#issuecomment-374099516"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/250224?v=4",
                        "login": "kallewoof"
                    },
                    "body": "@sipa Small note:\r\n\r\n> importprivkey doesn't support key birth times; but this is not inherent, keys can have birth times.\r\n\r\nThe method implementation does support birth times, in the `timestamp` argument which is always 1 for `importprivkey`, but uses the provided timestamp for `importmulti`.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NDA5OTY0Mw==",
                    "publishedAt": "2018-03-19T04:40:34Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12705#issuecomment-374099643"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/120117?v=4",
                        "login": "cdecker"
                    },
                    "body": "Concept ACK\r\n\r\nOther than the quirks that `importprivkey` has to support mentioned by @sipa, which would be nice to avoid for a new call.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NjE3MDk4Mg==",
                    "publishedAt": "2018-03-26T13:45:29Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12705#issuecomment-376170982"
                }
            ],
            "totalCount": 8
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "da1e008874e1ddc6146a9bcb0de9354207679ecb"
                    }
                }
            ],
            "totalCount": 8
        },
        "createdAt": "2018-03-16T07:40:00Z",
        "deletions": 36,
        "id": "MDExOlB1bGxSZXF1ZXN0MTc1NDYwMDM2",
        "labels": {
            "nodes": [
                {
                    "color": "0052cc",
                    "id": "MDU6TGFiZWw5ODI3OTE3Nw==",
                    "name": "RPC/REST/ZMQ"
                },
                {
                    "color": "08a781",
                    "id": "MDU6TGFiZWwxNDk0MjQ=",
                    "name": "Wallet"
                }
            ],
            "totalCount": 2
        },
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "number": 12705,
        "state": "OPEN",
        "title": "[WIP] Importmulti private key support",
        "updatedAt": "2018-04-16T02:34:08Z"
    },
    {
        "additions": 41,
        "author": {
            "avatarUrl": "https://avatars2.githubusercontent.com/u/7133040?v=4",
            "login": "ryanofsky",
            "url": "https://github.com/ryanofsky"
        },
        "body": "Based on suggestion by @sipa https://github.com/bitcoin/bitcoin/pull/12119#issuecomment-357982763\r\n\r\nAfter #12119, the NONE output type was overloaded to refer to either an output type that couldn't be parsed, or to an automatic change output mode.  This change drops the NONE enum and uses a simple bool to indicate parse failure, and a new CHANGE_AUTO enum to refer the change output type.\r\n\r\nThis change is almost a pure refactoring except it makes RPCs reject empty string (\"\") address types instead of treating them like they were unset. This simplifies the parsing code a little bit and could prevent RPC usage mistakes. It's noted in the release notes.\r\n\r\nFollows up #12408 by @MarcoFalke\r\n\r\nFollowups for future PRs:\r\n\r\n- [ ] Add explicit support for specifying \"auto\" in `ParseOutputType` as suggested by promag and sipa: https://github.com/bitcoin/bitcoin/pull/12729#issuecomment-374799567 and https://github.com/bitcoin/bitcoin/pull/12729#discussion_r175969481\r\n- [ ] Add wallet `AddressChangeType` method to complement `TransactionChangeType`:  https://github.com/bitcoin/bitcoin/pull/12729#discussion_r175969618.\r\n",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
                        "login": "promag"
                    },
                    "body": "> It is still possible to pass null\r\n\r\nOnly with named parameters.\r\n\r\n> or leave the parameter unset to use the default address type\r\n\r\nHow about explicit setting like `-changetype=auto` and `{ \"change_type\": \"auto\" }` or alike? It would allow a specific `-changetype` and `auto` change type for RPC.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NDc3NzEzNQ==",
                    "publishedAt": "2018-03-20T22:21:27Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12729#issuecomment-374777135"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/7133040?v=4",
                        "login": "ryanofsky"
                    },
                    "body": ">> It is still possible to pass null\r\n\r\n> Only with named parameters.\r\n\r\nNot sure what this is referring to. The checks are all for `isNull()`. Let me know if you would like me to rephrase the release notes in some way though.\r\n\r\n> How about explicit setting like -changetype=auto\r\n\r\nGood idea for another PR, but for now I'm just trying to do a code cleanup.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NDc3OTgyNA==",
                    "publishedAt": "2018-03-20T22:32:21Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12729#issuecomment-374779824"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
                        "login": "promag"
                    },
                    "body": "> Good idea for another PR, but for now I'm just trying to do a code cleanup.\r\n\r\nSounds good.\r\n\r\nRegarding the null/omit thing, and considering the following:\r\n```\r\n# bitcoin.conf\r\naddresstype=bech32\r\nchangetype=bech32\r\n```\r\nIMO we could allow empty string as it enables to:\r\n - launch and use software default address type overriding `bitcoin.conf`:\r\n```sh\r\nbitcoind -addresstype=\r\n```\r\n - (nit) pass empty string in bitcoin-cli without named parameters:\r\n```sh\r\nbitcoin-cli getnewaddress \"\" \"\"\r\n```\r\n - (nit) set change type to default (same as not setting):\r\n```sh\r\nbitcoin-cli fundrawtransaction \"hex\" '{\"change_type\": \"\"}'\r\n```\r\n\r\nThe first case is the most relevant.\r\n\r\nSee 242c8bd for the change (minus release notes update).",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NDc5OTU2Nw==",
                    "publishedAt": "2018-03-21T00:09:47Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12729#issuecomment-374799567"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/548488?v=4",
                        "login": "sipa"
                    },
                    "body": "utACK 30a961ba74abf1eaadbe887473493b2361170254",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NTEyMTYzMA==",
                    "publishedAt": "2018-03-21T22:50:57Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12729#issuecomment-375121630"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
                        "login": "MarcoFalke"
                    },
                    "body": "@ryanofsky Are you still working on this?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3OTMxNDY1MQ==",
                    "publishedAt": "2018-04-06T17:01:14Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12729#issuecomment-379314651"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
                        "login": "MarcoFalke"
                    },
                    "body": "Concept ACK eaaf9b4 (downgrading my utACK, since I am going to re-review from scratch)",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3OTQ3ODg1OQ==",
                    "publishedAt": "2018-04-07T15:46:46Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12729#issuecomment-379478859"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
                        "login": "MarcoFalke"
                    },
                    "body": "Needs rebase",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3OTQ5MzIxMA==",
                    "publishedAt": "2018-04-07T19:25:59Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12729#issuecomment-379493210"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/7133040?v=4",
                        "login": "ryanofsky"
                    },
                    "body": "> Needs rebase\r\n\r\nDropped second commit to avoid need for rebase: eaaf9b46768ad1cfcb445f9118e8bc701e73e427 -> 1e46d8ae897aded3367a2dd63a76991882d170fa ([pr/nonone.7](https://github.com/ryanofsky/bitcoin/commits/pr/nonone.7) -> [pr/nonone.8](https://github.com/ryanofsky/bitcoin/commits/pr/nonone.8))",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MDA1Mjk4MQ==",
                    "publishedAt": "2018-04-10T10:33:22Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12729#issuecomment-380052981"
                }
            ],
            "totalCount": 8
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "1e46d8ae897aded3367a2dd63a76991882d170fa"
                    }
                }
            ],
            "totalCount": 1
        },
        "createdAt": "2018-03-19T20:40:20Z",
        "deletions": 31,
        "id": "MDExOlB1bGxSZXF1ZXN0MTc2MDE5MjA5",
        "labels": {
            "nodes": [
                {
                    "color": "08a781",
                    "id": "MDU6TGFiZWwxNDk0MjQ=",
                    "name": "Wallet"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "number": 12729,
        "state": "OPEN",
        "title": "Get rid of ambiguous OutputType::NONE value",
        "updatedAt": "2018-04-10T10:33:22Z"
    },
    {
        "additions": 13,
        "author": {
            "avatarUrl": "https://avatars3.githubusercontent.com/u/4319748?v=4",
            "login": "pedrobranco",
            "url": "https://github.com/pedrobranco"
        },
        "body": "Fixes #12738. ",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
                        "login": "promag"
                    },
                    "body": "IMO when the UTXO is spent it should be considered unlocked no?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NDcxNjk4OA==",
                    "publishedAt": "2018-03-20T18:57:19Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12739#issuecomment-374716988"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/4319748?v=4",
                        "login": "pedrobranco"
                    },
                    "body": "> IMO when the UTXO is spent it should be considered unlocked no?\r\n\r\nAgree. Unlocking the unspent when relaying the transaction that spends it is preferable, but is a different scope of this PR since that approach is a breaking change.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NDcyMTIzOA==",
                    "publishedAt": "2018-03-20T19:11:06Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12739#issuecomment-374721238"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
                        "login": "promag"
                    },
                    "body": "Not sure what you mean with breaking change.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NDc2OTI5OA==",
                    "publishedAt": "2018-03-20T21:50:29Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12739#issuecomment-374769298"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/4319748?v=4",
                        "login": "pedrobranco"
                    },
                    "body": "> Not sure what you mean with breaking change.\r\n\r\nIf we unlock the output when sending the raw transaction, calling `lockunspent true <unspents>` will fail because they are already unlocked. It is not a breaking change for `bitcoind`, but for the ones that uses the same flow as the example [here](https://github.com/bitcoin/bitcoin/issues/12738).  ",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NDg5NTI3NA==",
                    "publishedAt": "2018-03-21T10:40:34Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12739#issuecomment-374895274"
                }
            ],
            "totalCount": 4
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "b64bf76c7172b67b71c62b883a3c454345f83015"
                    }
                }
            ],
            "totalCount": 1
        },
        "createdAt": "2018-03-20T18:53:13Z",
        "deletions": 3,
        "id": "MDExOlB1bGxSZXF1ZXN0MTc2Mjg5NDQx",
        "labels": {
            "nodes": [
                {
                    "color": "08a781",
                    "id": "MDU6TGFiZWwxNDk0MjQ=",
                    "name": "Wallet"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "number": 12739,
        "state": "OPEN",
        "title": "Fix unlocking of an already spent output",
        "updatedAt": "2018-03-21T12:06:21Z"
    },
    {
        "additions": 152,
        "author": {
            "avatarUrl": "https://avatars0.githubusercontent.com/u/2734?v=4",
            "login": "eklitzke",
            "url": "https://github.com/eklitzke"
        },
        "body": "This completely eliminates our dependency on boost::program_options, including the linking dependency:\r\n\r\n```\r\n$ ldd ./src/bitcoind | grep boost\r\n\tlibboost_system.so.1.64.0 => /lib64/libboost_system.so.1.64.0 (0x00007f56e99ad000)\r\n\tlibboost_filesystem.so.1.64.0 => /lib64/libboost_filesystem.so.1.64.0 (0x00007f56e9797000)\r\n\tlibboost_thread.so.1.64.0 => /lib64/libboost_thread.so.1.64.0 (0x00007f56e956e000)\r\n\tlibboost_chrono.so.1.64.0 => /lib64/libboost_chrono.so.1.64.0 (0x00007f56e936a000)\r\n```\r\n\r\nThe catch is that this branch has two commits: my change from #12713, and then another commit that actually removes boost::program_options (see the second for the interesting part of this change). The only thing holding up that PR is disagreement about what to do about an obscure never-meant-to-be-supported edge case in the old option parser. Hopefully everyone's universal dislike of Boost is sufficient to achieve consensus on that issue.",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "Really nice! Let's get rid of Boost\r\n\r\nStrong concept ACK",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NDg0OTczOA==",
                    "publishedAt": "2018-03-21T07:12:20Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12744#issuecomment-374849738"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/5470?v=4",
                        "login": "Empact"
                    },
                    "body": "Another concept ACK\r\n\r\nSome nits:\r\n* Could you run clang-format against your patch, there are some formatting inconsistencies:\r\n`git diff -U0 --no-color bitcoin/master | contrib/devtools/clang-format-diff.py -i -p1`\r\n* It looks like `GetNegatedArgs` / `IsArgNegated` are exposed for testing purposes only. I would be in favor of removing those for the sake of simplicity - seems testing can be covered from the existing `GetBoolArg` interface.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NDg1NDI0Nw==",
                    "publishedAt": "2018-03-21T07:40:22Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12744#issuecomment-374854247"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/5470?v=4",
                        "login": "Empact"
                    },
                    "body": "I saw the use of `GetNegatedArgs` / `IsNegatedArgs` in your other PRs. IMO best to make each PR minimal / independent and rebase as needed.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NDg1OTE5OA==",
                    "publishedAt": "2018-03-21T08:05:19Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12744#issuecomment-374859198"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1063656?v=4",
                        "login": "jnewbery"
                    },
                    "body": "One comment: config_file_iterator is able to parse sections: http://www.boost.org/doc/libs/1_66_0/doc/html/program_options/overview.html#id-1.3.31.5.10.2 . That feature isn't currently used in bitcoin but is required for #11862.\r\n\r\nHow much work would it be to enhance this PR to support INI-like config sections?\r\n\r\ncourtesy ping @ajtowns",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NTAwMzk5NQ==",
                    "publishedAt": "2018-03-21T16:23:01Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12744#issuecomment-375003995"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/2734?v=4",
                        "login": "eklitzke"
                    },
                    "body": "@jnewbery Seems pretty easy to add sections, INI format is literally just:\r\n\r\n```\r\nfoo = 'a global option'\r\nbar = 'another option'\r\n\r\n[Section One]\r\nmax-file-count = 100\r\n\r\n[Section Two]\r\nmax-file-count = 150\r\n```\r\n\r\nThe option parser needs to be updated to be section-aware anyway, as right now it stuffs everything in a global namespace.\r\n\r\nI looked at how Python checks their INI parser (configparser module) and this needs to be updated to handle comments and quoting. I will add a test case. Basically it should be able to parse this file correctly: https://github.com/python/cpython/blob/master/Lib/test/cfgparser.2",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NTEzMjMzNA==",
                    "publishedAt": "2018-03-21T23:47:08Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12744#issuecomment-375132334"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "> One comment: config_file_iterator is able to parse sections: \r\n\r\nConcept ACK - though as @jnewbery already mentions, I'd prioritize #11862 first, because adding a per-network configuration mechanism is something we've wanted for a long time. \r\n\r\nRemoving boost dependencies is what we want on the long run too, but shouldn't get in the way of providing functionality to users.\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NTIyNTc0Ng==",
                    "publishedAt": "2018-03-22T09:05:59Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12744#issuecomment-375225746"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/10217?v=4",
                        "login": "Sjors"
                    },
                    "body": "`make check` is happy on macOS.\r\n\r\nShouldn't you remove `llibboost-program-options-dev` from `travis.yml` and `control/debian/control` as well?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3ODMxNzEyNg==",
                    "publishedAt": "2018-04-03T16:44:47Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12744#issuecomment-378317126"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/417043?v=4",
                        "login": "theuni"
                    },
                    "body": "very nice! concept ACK. Will review in detail.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3ODc2MDAxNg==",
                    "publishedAt": "2018-04-04T22:04:51Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12744#issuecomment-378760016"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
                        "login": "MarcoFalke"
                    },
                    "body": "Needs rebase",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3OTU4MTg1Nw==",
                    "publishedAt": "2018-04-08T20:55:31Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12744#issuecomment-379581857"
                }
            ],
            "totalCount": 9
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "78bc52bf863fd0f212a9a29adb1c99651cc4a0eb"
                    }
                }
            ],
            "totalCount": 2
        },
        "createdAt": "2018-03-21T06:50:07Z",
        "deletions": 170,
        "id": "MDExOlB1bGxSZXF1ZXN0MTc2MzkzNTMw",
        "labels": {
            "nodes": [
                {
                    "color": "E6F6D6",
                    "id": "MDU6TGFiZWwxMzU5NjE=",
                    "name": "Refactoring"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "CONFLICTING",
        "mergedAt": null,
        "number": 12744,
        "state": "OPEN",
        "title": "WIP: eliminate dependency on boost::program_options",
        "updatedAt": "2018-04-08T20:55:31Z"
    },
    {
        "additions": 31,
        "author": {
            "avatarUrl": "https://avatars3.githubusercontent.com/u/1063656?v=4",
            "login": "jnewbery",
            "url": "https://github.com/jnewbery"
        },
        "body": "Subset of #12379 now that parts of that PR have been merged.\r\n\r\n#12362 was only observed when running the functional tests locally because:\r\n\r\n- by defatul libc logs to `/dev/tty` instead of stderr\r\n- the functional tests only check for substring inclusion in stderr when we're expecting bitcoind to fail.\r\n\r\nThis PR tightens our checking of stderr and will cause tests to fail if there is any unexpected message in stderr:\r\n\r\n- commit *Write stdout/stderr to datadir instead of temp file* writes stderr to a file in the datadir instead of a temporary file. This helps with debugging in the case of failure.\r\n- commit *Use LIBC_FATAL_STDERR=1 in tests* ensures that libc failures are logged to stderr instead of the terminal.\r\ncommit *Assert that bitcoind stdout is empty on shutdown* asserts that stderr is empty on bitcoind shutdown.",
        "closedAt": null,
        "comments": {
            "nodes": [],
            "totalCount": 0
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "c23f8046d7d95da83ac480dfe5369224d20a9578"
                    }
                }
            ],
            "totalCount": 3
        },
        "createdAt": "2018-03-22T13:52:58Z",
        "deletions": 11,
        "id": "MDExOlB1bGxSZXF1ZXN0MTc2Nzg0OTcx",
        "labels": {
            "nodes": [
                {
                    "color": "d4c5f9",
                    "id": "MDU6TGFiZWw2Mjk2MzUxNg==",
                    "name": "Tests"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "CONFLICTING",
        "mergedAt": null,
        "number": 12755,
        "state": "OPEN",
        "title": "[tests] Better stderr testing",
        "updatedAt": "2018-03-23T07:35:34Z"
    },
    {
        "additions": 57,
        "author": {
            "avatarUrl": "https://avatars0.githubusercontent.com/u/886523?v=4",
            "login": "JeremyRubin",
            "url": "https://github.com/JeremyRubin"
        },
        "body": "Summary\r\n====\r\n\r\nThis patch adds the RPC whitelisting feature requested in #12248. RPC Whitelists help enforce application policies for services being built on top of Bitcoin Core (e.g., your Lightning Node maybe shouldn't be adding new peers). The aim of this PR is not to make it advisable to connect your Bitcoin node to arbitrary services, but to reduce risk and prevent unintended access.\r\n\r\nUsing RPC Whitelists\r\n====\r\nThe way it works is you specify (in your bitcoin.conf) configurations such as\r\n\r\n```\r\nrpcauth=user1:4cc74397d6e9972e5ee7671fd241$11849357f26a5be7809c68a032bc2b16ab5dcf6348ef3ed1cf30dae47b8bcc71\r\nrpcauth=user2:181b4a25317bff60f3749adee7d6bca0$d9c331474f1322975fa170a2ffbcb176ba11644211746b27c1d317f265dd4ada\r\nrpcauth=user3:a6c8a511b53b1edcf69c36984985e$13cfba0e626db19061c9d61fa58e712d0319c11db97ad845fa84517f454f6675\r\nrpcwhitelist=user1:getnetworkinfo\r\nrpcwhitelist=user2:getnetworkinfo,getwalletinfo\r\n```\r\n\r\nNow user1 can only call getnetworkinfo, user2 can only call getnetworkinfo or getwalletinfo, while user3 can still call all RPCs. \r\n\r\nReview Request\r\n=====\r\nIn addition to normal review, would love specific review from someone working on LN (e.g., @roasbeef) and someone working on an infrastructure team at an exchange (e.g., @jimpo) to check that this works well with their system.\r\n\r\nNotes\r\n=====\r\n\r\nThe rpc list is whitespace & spelling sensitive -- I can add whitespace stripping/spellchecking if anyone feels strongly that this might reduce misconfiguration errors. Fortunately, both of these errors fail towards the RPC call being blocked.\r\n\r\nIt was unclear to me if HTTPReq_JSONRPC is the best function to patch this functionality into, or if it would be better to place it in exec or somewhere else.\r\n\r\nIt was also unclear to me if it would be preferred to cache the whitelists on startup or parse them on every RPC as is done with multiUserAuthorized. I opted for the cached approach as I thought it was a bit cleaner.\r\n\r\n\r\nFuture Work\r\n=====\r\n\r\nIn a future PR, I would like to add an inheritance scheme. This seemed more controversial so I didn't want to include that here. Inheritance semantics are tricky, but it would also make these whitelists easier to read.\r\n\r\nIt also might be good to add a `getrpcwhitelist` command to facilitate permission discovery.\r\n\r\nBefore Merge\r\n=====\r\nI'm opening the PR now for general feedback, but I should add a couple tests before merge. I'd prefer to do documentation as a separate PR, but it can be added in this PR if preferred.\r\n\r\n",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/3020646?v=4",
                        "login": "NicolasDorier"
                    },
                    "body": "Concept ACK. This is very welcome. My block explorer only rely on `sendrawtransaction`.\r\nWould like a way to have my block explorer restrict itself at runtime to make the life of my users easier, but this might come later.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NTU5NDYzOA==",
                    "publishedAt": "2018-03-23T09:36:06Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12763#issuecomment-375594638"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/5767891?v=4",
                        "login": "instagibbs"
                    },
                    "body": "concept ACK",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NTY1NzA2OQ==",
                    "publishedAt": "2018-03-23T12:58:55Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12763#issuecomment-375657069"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/5767891?v=4",
                        "login": "instagibbs"
                    },
                    "body": "@RHavar you may be interested?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NTY1NzIzMA==",
                    "publishedAt": "2018-03-23T12:59:32Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12763#issuecomment-375657230"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/33541170?v=4",
                        "login": "randolf"
                    },
                    "body": "Concept ACK.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NTY5NjE3OA==",
                    "publishedAt": "2018-03-23T15:08:13Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12763#issuecomment-375696178"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/9326759?v=4",
                        "login": "RHavar"
                    },
                    "body": "@instagibbs  To be honest, I don't see it being that useful for me  (but I don't have any objections to it either)\r\n\r\nThe main advantage I can see from this change is that you could use the same bitcoin-core instance for multiple purposes, like where one only requires access to the bitcoin-related features, and the other might need wallet access. \r\n\r\nThat's probably more interesting for consumer-level users, who are running core on their own computer. For more commercial users, we'd just use different instances of bitcoin-core itself. \r\n\r\n--\r\n\r\nThe PRC permission feature I'm more interested in is a lot more high-level; like applying spending limits. What I would like to do is be able to store say 300 BTC in my wallet, but never allow it drop below 250 BTC (by a particular RPC user). This way I could have only 50 BTC of \"risk\" (e.g. in case my service was hacked) but could benefit from having 300 BTC worth of coins (so coin-selection can do a much better job)",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NTcwMDYzNg==",
                    "publishedAt": "2018-03-23T15:21:13Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12763#issuecomment-375700636"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/5767891?v=4",
                        "login": "instagibbs"
                    },
                    "body": "@RHavar this prevents privkey dumps, as a first step at least",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NTcxMDEyMw==",
                    "publishedAt": "2018-03-23T15:48:43Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12763#issuecomment-375710123"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "Concept ACK",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NTk3MTQ1OQ==",
                    "publishedAt": "2018-03-25T13:41:50Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12763#issuecomment-375971459"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/250224?v=4",
                        "login": "kallewoof"
                    },
                    "body": "Yeah it's probably better to check if `size() > 0` and to do default-no-access if so.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NjU2MTIyOQ==",
                    "publishedAt": "2018-03-27T15:09:58Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12763#issuecomment-376561229"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/886523?v=4",
                        "login": "JeremyRubin"
                    },
                    "body": "@eklitzke \r\n\r\nIn the current scheme, a user by default has access to all RPCs to maintain backwards compatibility.\r\n\r\nOnce a file has specified that a user should have a whitelist, it defaults to everything being off.\r\n\r\nI agree this is not ideal, but don't have a great workaround.\r\n\r\nHere are two potential solutions:\r\n\r\nWe add:\r\n-rpcwhitelistenable=<rpc 1>,<rpc 2>\r\n-rpcwhitelistroot=<user>\r\n\r\nIf rpcwhitelistenable is set, the by default any user has that whitelist (allowed to be empty)? If a user is marked rpcwhitelistroot, they have all RPCs enabled. If a user is marked rpcwhitelist=<user>:blah, then they have blah.\r\n\r\nOr, we can make it such that if any rpcwhitelist is set, all users default to having an empty whitelist.\r\n\r\n\r\nDo you think this is a good tradeoff of complexity/dtrt? Which do you prefer?\r\n\r\n\r\n@promag \r\nThe other detail (in a forthcoming patch) is that if rpcwhitelist is set multiple times for a single user, it should do the intersection of the specification (e.g., monotonically smaller whitelist) rather than the union. In cases where conflicting settings have been passed, it is safer to do less.\r\n\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NjY2Mzc3NA==",
                    "publishedAt": "2018-03-27T20:27:36Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12763#issuecomment-376663774"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/548488?v=4",
                        "login": "sipa"
                    },
                    "body": "~~~I'm not sure this approach is ideal; it makes administrators responsible for knowing the list of all RPCs and their potential effects.~~~\r\n\r\nEDIT: nevermind, that's a concern for blacklists, not whitelists.\r\n\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NjY3MDA4NQ==",
                    "publishedAt": "2018-03-27T20:48:23Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12763#issuecomment-376670085"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/2734?v=4",
                        "login": "eklitzke"
                    },
                    "body": "@JeremyRubin I would add both. I guess my point is that if you need permissions at all you probably also want the ability to enable some kind of deny-by-default policy, to safeguard against a situation where you accidentally forget to lock down an account. You generally don't want to give your software engineers root access on production machines by default, and by the same token I don't think you would want to give people with bitcoind access root by default.\r\n\r\nThe way I imagine a typical setup would be something like this (ignore the made up syntax):\r\n```ini\r\n# Default permissions are for a bunch of read only rpcs\r\nrpcallowed = getblock,getblockchaininfo\r\n\r\n# Alice has the default permissions, plus stuff to admin the network\r\nrpcallowed.alice = addnode,clearbanned,listbanned\r\n\r\n# Bob has the default permissions, plus some basic access to the wallet\r\nrpcallowed.bob = getbalance,getwalletinfo,getnewaddress\r\n\r\n# Carol is an admin, she can access everything\r\nrpcallowed.carol = !all\r\n```\r\nAnd semantics something like this:\r\n * If there are no `rpcallowed` lines at all then everyone can access everything, just like how bitcoin works today\r\n * If you set `rpcallowed.alice` (Alice's list) but forget to set `rpcallowed` (the default list) then it should deny by default (maybe with a special error message attached to the RPC warning about the bad configuration)\r\n\r\nAdmittedly there is an area ripe for feature creep, but I think the above would be relatively simple to implement and good enough for a lot of cases.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3Njc0NTA5MQ==",
                    "publishedAt": "2018-03-28T03:01:27Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12763#issuecomment-376745091"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/2734?v=4",
                        "login": "eklitzke"
                    },
                    "body": "Second idea that's much more crazy/complex. I'll throw it out there though.\r\n\r\nYAML documents have a syntax to reference other elements, which are really useful for these kinds of things. You can construct a few objects in your config and reference them elsewhere, which allows you to come up with some pseduo-role system:\r\n\r\n```yaml\r\n---\r\npolicies:\r\n  # a default policy\r\n  - policy: &default\r\n      - getblock\r\n      - getblockchaininfo\r\n      - getblockcount\r\n\r\n  # network admin policy\r\n  - policy: &networkadmin\r\n      - addnode\r\n      - clearbanned\r\n      - getpeerinfo\r\n\r\nusers:\r\n  # alice has default plus network admin\r\n  - name: alice\r\n    policies:\r\n      - *default\r\n      - *networkadmin\r\n\r\n  # bob just has default policies\r\n  - name: bob\r\n    policies:\r\n      - *default\r\n\r\n  # syntax idea 1 for full access\r\n  - name: carol\r\n    admin: true\r\n\r\n  # syntax idea 2 for full access, !all is implicitly defined\r\n  - name: dave\r\n    policies: [*all]\r\n```\r\n\r\nThe `&obj` syntax introduces a name for a reference, and then `*obj` means \"substitute the literal value for obj here\". I'm not sure how it works in C++ YAML libraries, but the ones I've used in Python do the reference expansion within the YAML library. This makes it so your code can just work with dumb lists of objects, since they never see the object references.\r\n\r\nThe obvious drawback is that this would require linking against a YAML library. You could mitigate that by only having the user ACL list be in a YAML lib, so only users who actually want these feature would need to enable the YAML parser.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3Njc0ODA0MA==",
                    "publishedAt": "2018-03-28T03:20:49Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12763#issuecomment-376748040"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/886523?v=4",
                        "login": "JeremyRubin"
                    },
                    "body": "@eklitzke did you check out the issue? The original proposal covered doing an inheritance scheme. @gmaxwell  suggested that we should avoid doing any fancy config file, in favor of just a simple list.\r\n\r\nI do think that this could get overly verbose (especially if you want to grant network multiple times), but in general the paradigm should be to configure applications to manage multiple small credentials for specific purposes rather than one full-grant.\r\n\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NzU5OTc2Mg==",
                    "publishedAt": "2018-03-30T19:12:02Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12763#issuecomment-377599762"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/886523?v=4",
                        "login": "JeremyRubin"
                    },
                    "body": "I've updated this PR and rebased.\r\n\r\nThe current version has the following changes over the previous:\r\n\r\n- Strip whitespace out of rpc list\r\n- Set-Intersect conflicting whitelists (i.e., so it is equivalent to checking multiple whitelists)\r\n- If any rpcwhitelist is set, act as if all users are subject to whitelists unless rpcwhitelistdefault is set to 0. If rpcwhitelistdefault is set to 1 and no rpcwhitelist is set, act as if all users are subject to whitelists.\r\n\r\nPlease let me know if these semantics are acceptable.\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MDk5NTgxNg==",
                    "publishedAt": "2018-04-13T01:48:41Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12763#issuecomment-380995816"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/250224?v=4",
                        "login": "kallewoof"
                    },
                    "body": "LGTM. Checked code, utACK.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MTAzNDcyOA==",
                    "publishedAt": "2018-04-13T06:14:24Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12763#issuecomment-381034728"
                }
            ],
            "totalCount": 15
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "e6a75fa80828d31e2645c1dc27080b9ffde645b3"
                    }
                }
            ],
            "totalCount": 9
        },
        "createdAt": "2018-03-23T04:42:40Z",
        "deletions": 3,
        "id": "MDExOlB1bGxSZXF1ZXN0MTc2OTcyMzk1",
        "labels": {
            "nodes": [
                {
                    "color": "0052cc",
                    "id": "MDU6TGFiZWw5ODI3OTE3Nw==",
                    "name": "RPC/REST/ZMQ"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "number": 12763,
        "state": "OPEN",
        "title": "Add RPC Whitelist Feature from #12248",
        "updatedAt": "2018-04-13T09:49:52Z"
    },
    {
        "additions": 0,
        "author": {
            "avatarUrl": "https://avatars3.githubusercontent.com/u/14220652?v=4",
            "login": "conscott",
            "url": "https://github.com/conscott"
        },
        "body": "[BIP 22 - getblocktemplate](https://github.com/bitcoin/bips/blob/master/bip-0022.mediawiki#Transactions%20Object%20Format) specifies an optional flag, `required` if the transaction must be in the block.\r\n\r\nLuke's implementation #936 did not include this flag, and it was later added to the help description in #3246 (more than a year later) but the field was still never actually implemented. As far as I can tell, bitcoin core would have never actually included this in a `getblocktemplate` call, so it seems logical to remove it from the help description.\r\n\r\nIf I am missing something or this is considered harmless - I can close the PR. ",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/5767891?v=4",
                        "login": "instagibbs"
                    },
                    "body": "kicked travis, random timeout",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NTcxMTc1MQ==",
                    "publishedAt": "2018-03-23T15:53:54Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12764#issuecomment-375711751"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "Interesting, good catch.\r\nThough personally I think it makes sense to describe this possible field if it is in BIP22. Both for consistency with our documentation and the BIP, and in case core would ever want to set this flag, you'd want client implementations to take it into account.\r\nOn the other hand that's probably very unlikely. Needs more discussion.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NjY1MjE5NA==",
                    "publishedAt": "2018-03-27T19:49:46Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12764#issuecomment-376652194"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1063656?v=4",
                        "login": "jnewbery"
                    },
                    "body": "Tested ACK ac8a1d092ef59b141605f6eaf027c034dad910e6",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NjY1NjkwMA==",
                    "publishedAt": "2018-03-27T20:05:26Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12764#issuecomment-376656900"
                }
            ],
            "totalCount": 3
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "ac8a1d092ef59b141605f6eaf027c034dad910e6"
                    }
                }
            ],
            "totalCount": 1
        },
        "createdAt": "2018-03-23T05:44:30Z",
        "deletions": 1,
        "id": "MDExOlB1bGxSZXF1ZXN0MTc2OTc4Nzg5",
        "labels": {
            "nodes": [
                {
                    "color": "c7def8",
                    "id": "MDU6TGFiZWwxMTgzNzg5NjA=",
                    "name": "Mining"
                },
                {
                    "color": "0052cc",
                    "id": "MDU6TGFiZWw5ODI3OTE3Nw==",
                    "name": "RPC/REST/ZMQ"
                }
            ],
            "totalCount": 2
        },
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "number": 12764,
        "state": "OPEN",
        "title": "Remove field in getblocktemplate help that has never been used. ",
        "updatedAt": "2018-03-27T20:05:26Z"
    },
    {
        "additions": 93,
        "author": {
            "avatarUrl": "https://avatars2.githubusercontent.com/u/5470?v=4",
            "login": "Empact",
            "url": "https://github.com/Empact"
        },
        "body": "This maintains accuracy in the context of `datadirectory` changes,\r\ne.g. #12722\r\n\r\nAlso drop the related arguments to `GetConfigFile` and `ReadConfigFile`, and follow the example of `GetDebugLogPath` by calling `GetArg` within the `GetConfigFile` function.",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/5470?v=4",
                        "login": "Empact"
                    },
                    "body": "Added some testing for `ReadConfigFile`, which wasn't previously covered.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NTg0OTQ0OQ==",
                    "publishedAt": "2018-03-24T05:57:04Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12765#issuecomment-375849449"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
                        "login": "MarcoFalke"
                    },
                    "body": "Haven't looked closely, but this seems to revert #8856",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NTg4MzgxNA==",
                    "publishedAt": "2018-03-24T12:26:34Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12765#issuecomment-375883814"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/5470?v=4",
                        "login": "Empact"
                    },
                    "body": "Re #8856, seems the file has gone the other direction since then - maybe due to the introduction of ArgsManager.\r\n\r\nCurrently the following other util methods use GetArg:\r\n* GetDataDir\r\n* GetPidFile\r\n* GetDebugLogPath\r\n\r\nIn this case seems the change is required if we want to retain the state.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NjM3MDA5MQ==",
                    "publishedAt": "2018-03-27T01:57:00Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12765#issuecomment-376370091"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/5470?v=4",
                        "login": "Empact"
                    },
                    "body": "Thinking to hold this pending #12878 ",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3ODc5NTY0Mg==",
                    "publishedAt": "2018-04-05T01:38:04Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12765#issuecomment-378795642"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
                        "login": "MarcoFalke"
                    },
                    "body": "Needs rebase if still relevant",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3OTcyODI4Mw==",
                    "publishedAt": "2018-04-09T12:03:17Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12765#issuecomment-379728283"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/5470?v=4",
                        "login": "Empact"
                    },
                    "body": "Rebased and updated tests to package the config file via the `TEST_FILES_*` setup.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MDMwMjIxOA==",
                    "publishedAt": "2018-04-11T02:00:47Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12765#issuecomment-380302218"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/127186?v=4",
                        "login": "ajtowns"
                    },
                    "body": "Two thoughts:\r\n * rather than have GetConfigFile use gArgs, probably better to make GetConfigFile a member of ArgsManager?\r\n * might make sense to use to split between config args and command line args in #11862 and have GetConfigFile/ReadConfigFile only lookup command line args for the value for \"-conf\", rather than saving it separately?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MDQ2ODE2Mg==",
                    "publishedAt": "2018-04-11T14:16:47Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12765#issuecomment-380468162"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
                        "login": "MarcoFalke"
                    },
                    "body": "Sorry, needs rebase again.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MTcyMjAxMw==",
                    "publishedAt": "2018-04-16T19:31:55Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12765#issuecomment-381722013"
                }
            ],
            "totalCount": 8
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "656e23596801784c264cf0914cd5c51a5f30f982"
                    }
                }
            ],
            "totalCount": 2
        },
        "createdAt": "2018-03-23T12:14:00Z",
        "deletions": 15,
        "id": "MDExOlB1bGxSZXF1ZXN0MTc3MDUyODIw",
        "labels": {
            "nodes": [
                {
                    "color": "5319e7",
                    "id": "MDU6TGFiZWwyNDE4MzI5MjM=",
                    "name": "Utils/log/libs"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "CONFLICTING",
        "mergedAt": null,
        "number": 12765,
        "state": "OPEN",
        "title": " Store the current config file at read time, and return it from GetConfigFile if set",
        "updatedAt": "2018-04-16T19:31:56Z"
    },
    {
        "additions": 235,
        "author": {
            "avatarUrl": "https://avatars0.githubusercontent.com/u/37340825?v=4",
            "login": "ctp-tsteenholdt",
            "url": "https://github.com/ctp-tsteenholdt"
        },
        "body": "On suggestion from @TheBlueMatt I have updated `contrib/debian` files to include a systemd service in the `bitcoind` build. Tested and working on Ubuntu 16.04 and 17.10.\r\n\r\nThis fixes Issue #12758",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/33541170?v=4",
                        "login": "randolf"
                    },
                    "body": "@ctp-tsteenholdt Please remember to squash/rebase.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NTY4MTQ0OQ==",
                    "publishedAt": "2018-03-23T14:24:14Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12769#issuecomment-375681449"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/37340825?v=4",
                        "login": "ctp-tsteenholdt"
                    },
                    "body": "@randolf That makes total sense. My apologies - looking into it right now...",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NTY5MjMwNw==",
                    "publishedAt": "2018-03-23T14:57:42Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12769#issuecomment-375692307"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "We already have a `bitcoind.service` in `contrib/init/` - what is the difference with this one, can we avoid duplicating it?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NjI4NTY4Mg==",
                    "publishedAt": "2018-03-26T19:36:22Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12769#issuecomment-376285682"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/37340825?v=4",
                        "login": "ctp-tsteenholdt"
                    },
                    "body": "@randolf The pull request should look better now - please let me know if I'm missing something.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NjI4NjA4NA==",
                    "publishedAt": "2018-03-26T19:37:39Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12769#issuecomment-376286084"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/37340825?v=4",
                        "login": "ctp-tsteenholdt"
                    },
                    "body": "@laanwj I'm completely with you on that question, but I don't think we can feasibly avoid multiple versions of a file like this. The different versions of the `bitcoind.service` in the `contrib/` tree have subtle differences to make them work best for their particular purpose. The differences reflect distro-specifics such as location of environment files, dependency services etc.\r\n\r\nAlso, building a package for Ubuntu or Debian requires a full copy of the `contrib/debian/` folder, including the `bitcoind.service` file, to allow the packaging helper `dh` to recognize, treat and install it correctly.\r\n\r\nIt think distro-specific files are probably better maintained within distro specific folders such as `contrib/debian/` or `contrib/rpm/`, as part of the overall package maintenance for that distro. This avoids possible breakage from a change made for a different distro too.\r\n\r\nTo underline that the `contrib/init/` version is still very relevant, it will be the goto file for people on platforms without a specific package or people who prefer to build from source. This file can be easily adapted to work well on most systems.\r\n\r\nPlease let me know what you think.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NjQ4NDYzNg==",
                    "publishedAt": "2018-03-27T11:02:36Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12769#issuecomment-376484636"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "@ctp-tsteenholdt If it is intentional, then IMO it's not a problem. Arguably the debian-specific file is easier to maintain because at least it aims for a specific environment and can be tested there, not 'all distributions in general', which has made the file under `contrib/init/` a real pain in practice (see e.g. discussion in #12255).",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NjU0MTQ0Mg==",
                    "publishedAt": "2018-03-27T14:16:11Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12769#issuecomment-376541442"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/37340825?v=4",
                        "login": "ctp-tsteenholdt"
                    },
                    "body": "@laanwj That's exactly right.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NjU1OTA5Ng==",
                    "publishedAt": "2018-03-27T15:03:50Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12769#issuecomment-376559096"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "Would be good to have an ACK from @TheBlueMatt here.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3Njg1NDA5MQ==",
                    "publishedAt": "2018-03-28T11:30:20Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12769#issuecomment-376854091"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/37340825?v=4",
                        "login": "ctp-tsteenholdt"
                    },
                    "body": "Thanks @TheBlueMatt. Each of your comments make perfect sense and I'll have them all addressed.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NzA0Nzg2Ng==",
                    "publishedAt": "2018-03-28T21:45:27Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12769#issuecomment-377047866"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/37340825?v=4",
                        "login": "ctp-tsteenholdt"
                    },
                    "body": "I've addressed the suggestions made by @TheBlueMatt, run a test dpkg-buildpackage using the updated `contrib/debian/` tree and tested that the package changes work as expected, with success.\r\n\r\nThe commits have been updated to reflect the changes.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NzI5ODA0Mw==",
                    "publishedAt": "2018-03-29T16:45:59Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12769#issuecomment-377298043"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "@TheBlueMatt can you take another look?\r\nWould be good to get this merged, I think.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3OTQ3MTEzMA==",
                    "publishedAt": "2018-04-07T13:55:49Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12769#issuecomment-379471130"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/649246?v=4",
                        "login": "TheBlueMatt"
                    },
                    "body": "Hmm, if you're gonna pull some of the debian changes upstream, can you just pull all of them? Especially getting the changelog and other stuff out of sync seems not ideal.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MjEwODQ0NQ==",
                    "publishedAt": "2018-04-17T19:12:14Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12769#issuecomment-382108445"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/37340825?v=4",
                        "login": "ctp-tsteenholdt"
                    },
                    "body": "@TheBlueMatt I'm not sure what you mean by:\r\n\r\n_Hmm, if you're gonna pull some of the debian changes upstream, can you just pull all of them? Especially getting the changelog and other stuff out of sync seems not ideal._\r\n\r\nUpstream in this case would essentially be your PPA right? Or is there somewhere else?\r\n\r\nI can certainly take a look at any other differences between this tree and yours and see if it makes sense to include in this PR or create a separate one for getting those in sync? Is this what you mean?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MjQxMDE3NA==",
                    "publishedAt": "2018-04-18T14:38:40Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12769#issuecomment-382410174"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/649246?v=4",
                        "login": "TheBlueMatt"
                    },
                    "body": "Yea, just pull the stuff from the PPA's debian tar.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MjQxMTM1MQ==",
                    "publishedAt": "2018-04-18T14:42:06Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12769#issuecomment-382411351"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/37340825?v=4",
                        "login": "ctp-tsteenholdt"
                    },
                    "body": "Alright - I'm looking in to it...",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MjQyNTUwNQ==",
                    "publishedAt": "2018-04-18T15:22:21Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12769#issuecomment-382425505"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/37340825?v=4",
                        "login": "ctp-tsteenholdt"
                    },
                    "body": "@TheBlueMatt so I took all the changes from your upstream PPA debian tar and committed them as a single commit. After that, I committed the Systemd changes in a separate commit.\r\n\r\nAs a precaution I've run a local build and made sure that things still work as expected.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MjUwMTU2Mw==",
                    "publishedAt": "2018-04-18T19:26:47Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12769#issuecomment-382501563"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/37340825?v=4",
                        "login": "ctp-tsteenholdt"
                    },
                    "body": "So I re-resolved the conflict with #12854. This time without nuking the accepted changes of that PR. Sorry about that. Thanks @fanquake for the heads up.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MzA1Nzk0Mw==",
                    "publishedAt": "2018-04-20T10:40:50Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12769#issuecomment-383057943"
                }
            ],
            "totalCount": 17
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "2a87b1b07c5c4f8b9b34747c5f254c2ae1e824bf"
                    }
                }
            ],
            "totalCount": 2
        },
        "createdAt": "2018-03-23T13:46:07Z",
        "deletions": 9,
        "id": "MDExOlB1bGxSZXF1ZXN0MTc3MDc0MDIy",
        "labels": {
            "nodes": [
                {
                    "color": "ffffee",
                    "id": "MDU6TGFiZWwyMzE5OTQ1NTE=",
                    "name": "Scripts and tools"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "number": 12769,
        "state": "OPEN",
        "title": "Add systemd service to bitcoind in debian package",
        "updatedAt": "2018-04-20T10:40:50Z"
    },
    {
        "additions": 195,
        "author": {
            "avatarUrl": "https://avatars3.githubusercontent.com/u/3514957?v=4",
            "login": "Christewart",
            "url": "https://github.com/Christewart"
        },
        "body": "This PR is a subset of the changes in #8469. It's meant to be easier to review. This PR contains all of the build instructions needed for travis to pass. It includes one property call `key_properties.cpp` along with a generator file called `crypto_gen.{h,cpp}`. ",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "Strong concept ACK\r\n\r\nVery nice work!",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NTk5MDg3NQ==",
                    "publishedAt": "2018-03-25T18:10:26Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12775#issuecomment-375990875"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/33541170?v=4",
                        "login": "randolf"
                    },
                    "body": "@Christewart I noticed that ``depends/packages/rapidcheck.mk`` references MarcoFalke:\r\n\r\n``$(package)_download_path=https://github.com/MarcoFalke/rapidcheck/archive``\r\n\r\nDo you think it might be better to reference directly from \"bitcoin\" instead?  If so, should MarcoFalke's \"rapidcheck\" project be added to the \"bitcoin\" project to facilitate this?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NTk5OTE1Mg==",
                    "publishedAt": "2018-03-25T20:05:46Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12775#issuecomment-375999152"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/33541170?v=4",
                        "login": "randolf"
                    },
                    "body": "@Christewart In ``src/test/key_properties.cpp`` there are new references to the BOOST libraries.  As I understand it, one of the goals is to move away from BOOST, so I'm curious:  Is it possible to accomplish the same goals in this code without the additional reliance on BOOST?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NTk5OTM5MA==",
                    "publishedAt": "2018-03-25T20:08:52Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12775#issuecomment-375999390"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
                        "login": "MarcoFalke"
                    },
                    "body": "We don't plan to get rid of the boost unit test framework any time soon.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NjAwMDUxMg==",
                    "publishedAt": "2018-03-25T20:24:18Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12775#issuecomment-376000512"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/3514957?v=4",
                        "login": "Christewart"
                    },
                    "body": "@randolf I'm not sure if it is too much of a concern right now who hosts the package. If we want to move it under the bitcoin project in the future i have no problem with that. Marco was kind enough to help me out with the setup which is why his repo is currently referenced. ",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NjEzMzMyNQ==",
                    "publishedAt": "2018-03-26T11:24:47Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12775#issuecomment-376133325"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
                        "login": "MarcoFalke"
                    },
                    "body": "@randolf Ideally it should reference the proper upstream, but since they don't have any releases that might not work.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NjE1MTQ3MQ==",
                    "publishedAt": "2018-03-26T12:39:47Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12775#issuecomment-376151471"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "> We don't plan to get rid of the boost unit test framework any time soon.\r\n\r\nIndeed. @randolf In general: please don't comment on boost usage of PRs in reviews if it concerns libraries that are already used in other parts of our code (such as boost test), only if it concerns using new boost libaries (such as lexical cast and whatnot.)",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NjY1MzIxNw==",
                    "publishedAt": "2018-03-27T19:53:08Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12775#issuecomment-376653217"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/863730?v=4",
                        "login": "fanquake"
                    },
                    "body": "Testing https://github.com/bitcoin/bitcoin/pull/12775/commits/900a441eeacd9f936a2495e878174f9aeead66d2 on macOS 10.13.4:\r\n\r\nAfter installing ```cmake``` I could successfully build rapidcheck in depends:\r\n```\r\nbash-3.2$ make NO_QT=1 RAPIDCHECK=1\r\nConfiguring rapidcheck...\r\n-- The C compiler identification is AppleClang 9.1.0.9020039\r\n-- The CXX compiler identification is AppleClang 9.1.0.9020039\r\n-- Check for working C compiler: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/cc\r\n-- Check for working C compiler: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/cc -- works\r\n-- Detecting C compiler ABI info\r\n-- Detecting C compiler ABI info - done\r\n-- Detecting C compile features\r\n-- Detecting C compile features - done\r\n-- Check for working CXX compiler: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/c++\r\n-- Check for working CXX compiler: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/c++ -- works\r\n-- Detecting CXX compiler ABI info\r\n-- Detecting CXX compiler ABI info - done\r\n-- Detecting CXX compile features\r\n-- Detecting CXX compile features - done\r\n-- Configuring done\r\n-- Generating done\r\n-- Build files have been written to: /Users/xxx/GitHub/bitcoin/depends/work/build/x86_64-apple-darwin17.5.0/rapidcheck/10fc0cb-3719dbaacbb\r\nBuilding rapidcheck...\r\nScanning dependencies of target rapidcheck\r\n[  2%] Building CXX object CMakeFiles/rapidcheck.dir/src/BeforeMinimalTestCase.cpp.o\r\n[  5%] Building CXX object CMakeFiles/rapidcheck.dir/src/Check.cpp.o\r\n[  8%] Building CXX object CMakeFiles/rapidcheck.dir/src/Classify.cpp.o\r\n[ 11%] Building CXX object CMakeFiles/rapidcheck.dir/src/GenerationFailure.cpp.o\r\n[ 14%] Building CXX object CMakeFiles/rapidcheck.dir/src/Log.cpp.o\r\n[ 17%] Building CXX object CMakeFiles/rapidcheck.dir/src/Random.cpp.o\r\n[ 20%] Building CXX object CMakeFiles/rapidcheck.dir/src/Show.cpp.o\r\n[ 22%] Building CXX object CMakeFiles/rapidcheck.dir/src/detail/Any.cpp.o\r\n[ 25%] Building CXX object CMakeFiles/rapidcheck.dir/src/detail/Assertions.cpp.o\r\n[ 28%] Building CXX object CMakeFiles/rapidcheck.dir/src/detail/Base64.cpp.o\r\n[ 31%] Building CXX object CMakeFiles/rapidcheck.dir/src/detail/Configuration.cpp.o\r\n[ 34%] Building CXX object CMakeFiles/rapidcheck.dir/src/detail/DefaultTestListener.cpp.o\r\n[ 37%] Building CXX object CMakeFiles/rapidcheck.dir/src/detail/FrequencyMap.cpp.o\r\n[ 40%] Building CXX object CMakeFiles/rapidcheck.dir/src/detail/ImplicitParam.cpp.o\r\n[ 42%] Building CXX object CMakeFiles/rapidcheck.dir/src/detail/LogTestListener.cpp.o\r\n[ 45%] Building CXX object CMakeFiles/rapidcheck.dir/src/detail/MapParser.cpp.o\r\n[ 48%] Building CXX object CMakeFiles/rapidcheck.dir/src/detail/MulticastTestListener.cpp.o\r\n[ 51%] Building CXX object CMakeFiles/rapidcheck.dir/src/detail/ParseException.cpp.o\r\n[ 54%] Building CXX object CMakeFiles/rapidcheck.dir/src/detail/Platform.cpp.o\r\n[ 57%] Building CXX object CMakeFiles/rapidcheck.dir/src/detail/Property.cpp.o\r\n[ 60%] Building CXX object CMakeFiles/rapidcheck.dir/src/detail/PropertyContext.cpp.o\r\n[ 62%] Building CXX object CMakeFiles/rapidcheck.dir/src/detail/ReproduceListener.cpp.o\r\n[ 65%] Building CXX object CMakeFiles/rapidcheck.dir/src/detail/Results.cpp.o\r\n[ 68%] Building CXX object CMakeFiles/rapidcheck.dir/src/detail/Serialization.cpp.o\r\n[ 71%] Building CXX object CMakeFiles/rapidcheck.dir/src/detail/StringSerialization.cpp.o\r\n[ 74%] Building CXX object CMakeFiles/rapidcheck.dir/src/detail/TestMetadata.cpp.o\r\n[ 77%] Building CXX object CMakeFiles/rapidcheck.dir/src/detail/TestParams.cpp.o\r\n[ 80%] Building CXX object CMakeFiles/rapidcheck.dir/src/detail/Testing.cpp.o\r\n[ 82%] Building CXX object CMakeFiles/rapidcheck.dir/src/gen/Numeric.cpp.o\r\n[ 85%] Building CXX object CMakeFiles/rapidcheck.dir/src/gen/Text.cpp.o\r\n[ 88%] Building CXX object CMakeFiles/rapidcheck.dir/src/gen/detail/ExecHandler.cpp.o\r\n[ 91%] Building CXX object CMakeFiles/rapidcheck.dir/src/gen/detail/GenerationHandler.cpp.o\r\n[ 94%] Building CXX object CMakeFiles/rapidcheck.dir/src/gen/detail/Recipe.cpp.o\r\n[ 97%] Building CXX object CMakeFiles/rapidcheck.dir/src/gen/detail/ScaleInteger.cpp.o\r\n[100%] Linking CXX static library librapidcheck.a\r\n[100%] Built target rapidcheck\r\nStaging rapidcheck...\r\nPostprocessing rapidcheck...\r\nCaching rapidcheck...\r\n```\r\nDid a ```./configure --prefix=`pwd`/depends/x86_64-apple-darwin17.5.0```:\r\n```\r\nchecking rapidcheck.h usability... yes\r\nchecking rapidcheck.h presence... yes\r\nchecking for rapidcheck.h... yes\r\n```\r\n\r\nYou could add rapidcheck under the \"Options used to compile and link:\" at the end of ```./configure```\r\n\r\n```make check -j6``` failed with:\r\n```\r\nRunning tests: from test/gen/crypto_gen.cpp\r\nMissing an argument value for the parameter run_test in the argument \r\n\r\nParameter: run_test\r\n Filters, which test units to include or exclude from test module execution.\r\n Command line formats:\r\n   --run_test=<test unit filter>\r\n   -t <test unit filter>\r\n Environment variable: BOOST_TEST_RUN_FILTERS\r\n\r\nFor detailed help on Boost.Test parameters use:\r\n  test_bitcoin --help\r\nor\r\n  test_bitcoin --help=<parameter name>\r\nmake[3]: *** [test/gen/crypto_gen.cpp.test] Error 1\r\nmake[3]: *** Waiting for unfinished jobs....\r\nmake[2]: *** [check-am] Error 2\r\nmake[1]: *** [check-recursive] Error 1\r\nmake: *** [check-recursive] Error 1\r\n```",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MjY1MzMyOQ==",
                    "publishedAt": "2018-04-19T08:27:09Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12775#issuecomment-382653329"
                }
            ],
            "totalCount": 8
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "900a441eeacd9f936a2495e878174f9aeead66d2"
                    }
                }
            ],
            "totalCount": 1
        },
        "createdAt": "2018-03-24T23:39:49Z",
        "deletions": 1,
        "id": "MDExOlB1bGxSZXF1ZXN0MTc3MjY0NDYy",
        "labels": {
            "nodes": [
                {
                    "color": "d4c5f9",
                    "id": "MDU6TGFiZWw2Mjk2MzUxNg==",
                    "name": "Tests"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "number": 12775,
        "state": "OPEN",
        "title": "Integration of property based testing into Bitcoin Core",
        "updatedAt": "2018-04-19T08:27:10Z"
    },
    {
        "additions": 78,
        "author": {
            "avatarUrl": "https://avatars2.githubusercontent.com/u/834046?v=4",
            "login": "krab",
            "url": "https://github.com/krab"
        },
        "body": "Code based on pull/5804. Tested only on macOS 10.13.3 and should support 10.9+.\r\n\r\nWhat macOS versions bitcoin core currently supports?",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/5470?v=4",
                        "login": "Empact"
                    },
                    "body": "#5804",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NjA1MjUxNw==",
                    "publishedAt": "2018-03-26T05:43:10Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12783#issuecomment-376052517"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "utACK e41bb4a4568e08fe75ab8af7de7db1a2684cd989",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NjA3ODgxOQ==",
                    "publishedAt": "2018-03-26T07:59:39Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12783#issuecomment-376078819"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/10217?v=4",
                        "login": "Sjors"
                    },
                    "body": "Will review later. Good question regarding which macOS version to support. The release notes state [10.8+](https://github.com/bitcoin/bitcoin/blob/master/doc/release-notes.md#compatibility), but I wonder how true that is. Apple pushes macOS updates quite aggressively and the lack of VM's make downgrades impractical. So unless any of the active devs here still runs an older version, I don't think it's realistic to support anything but the current macOS release and maybe one earlier version .",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NjQ0MjY2Mw==",
                    "publishedAt": "2018-03-27T08:36:39Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12783#issuecomment-376442663"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "We do currently support 10.8+ and I have VMs for all OSX versions from 10.5 upwards. I do test the RC regularly in 10.8 till 10.x VMs.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NjQ0NDA5Nw==",
                    "publishedAt": "2018-03-27T08:41:42Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12783#issuecomment-376444097"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/10217?v=4",
                        "login": "Sjors"
                    },
                    "body": "@jonasschnelli ok, that's great to know. Any hints for setting up a 10.8 VM on an iMac?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NjQ0OTY1NA==",
                    "publishedAt": "2018-03-27T09:00:16Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12783#issuecomment-376449654"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "Concept ACK.\r\nShould appnap always be disabled, or just during initial sync? It's something that could be done later, but worth thinking about I think.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NjU5OTc0Mg==",
                    "publishedAt": "2018-03-27T17:01:34Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12783#issuecomment-376599742"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/417043?v=4",
                        "login": "theuni"
                    },
                    "body": "I really really don't like the idea of adding a new compiler requirement for bitcoind (which is why we closed #5804).\r\n\r\nHow about using this for bitcoin-qt only ?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NzA1MjY0OQ==",
                    "publishedAt": "2018-03-28T22:03:18Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12783#issuecomment-377052649"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/10217?v=4",
                        "login": "Sjors"
                    },
                    "body": "I think it's reasonable* to expect bitcoind users to understand their OS power management.\r\n\r\n* = [though not always true](https://botbot.me/freenode/bitcoin-core-dev/2018-03-01/?msg=97377246&page=2) :-)",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NzE5Njc4Ng==",
                    "publishedAt": "2018-03-29T10:44:38Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12783#issuecomment-377196786"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/834046?v=4",
                        "login": "krab"
                    },
                    "body": "how to i squash all my commits in PR they contain merging commits from upstream/master  :confused: ",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NzcwNzE3NQ==",
                    "publishedAt": "2018-03-31T16:55:55Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12783#issuecomment-377707175"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/834046?v=4",
                        "login": "krab"
                    },
                    "body": "Squashed all my commits into single one. \r\n\r\nOS X Mountain Lion 10.8 not supported by Apple anymore. Mozilla/Google don't support 10.8 either in their web browsers.\r\nQt 5.7 (currently used in bitcoin-qt0.16.0) support expired in June 15, 2017.\r\nQt 5.8 supports only 10.9+.\r\nQt 5.9 only 10.10+.\r\nSo OS X 10.8 support in bitcoin-qt pretty much pointless since it requires Qt 5.6/5.7 and very old XCode to build.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NzcxMzQxNQ==",
                    "publishedAt": "2018-03-31T18:28:22Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12783#issuecomment-377713415"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "> How about using this for bitcoin-qt only ?\r\n\r\nWould make sense to me. Would (for me) be preferable to having objective C in the core code.\r\n\r\n> I think it's reasonable* to expect bitcoind users to understand their OS power management.\r\n\r\nVirtually no one uses bitcoind on MacOSX. For a long time, we didn't even build it, and there was about one person that requested it :)\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3OTQ3MDgwOA==",
                    "publishedAt": "2018-04-07T13:51:32Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12783#issuecomment-379470808"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/863730?v=4",
                        "login": "fanquake"
                    },
                    "body": "Started doing some testing.\r\nUsing master (979f59850c72624137d25f80be4188c3ba6b5fa0) I can make ```bitcoin-qt``` and Bitcoin Core (app bundle) enter app nap quite quickly just by starting and then minimising the app window. \r\nYou can check App Nap status using Activity Monitor -> Energy.\r\n\r\n![master - bitcoin-qt - nap](https://user-images.githubusercontent.com/863730/38650377-15d3b06a-3e2e-11e8-9fb7-b8047ece1312.png)\r\n![master - bitcoin core - nap](https://user-images.githubusercontent.com/863730/38650379-1923b8fa-3e2e-11e8-9d7d-5f596edd0b8b.png)\r\n\r\nUsing https://github.com/bitcoin/bitcoin/pull/12783/commits/c975861a7cf407cfd6910da691a38c4fe6491530, neither process seems to go into App Nap:\r\n\r\n![pr - bitcoin-qt - no nap](https://user-images.githubusercontent.com/863730/38651089-e15e1ad8-3e31-11e8-85c9-f0b6c07a8875.png)\r\n![pr - bitcoin core - no nap](https://user-images.githubusercontent.com/863730/38651091-e2e65ee2-3e31-11e8-9c9f-bdafed226940.png)\r\n\r\n\r\n\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MDY0MzgwMQ==",
                    "publishedAt": "2018-04-12T01:16:18Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12783#issuecomment-380643801"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/417043?v=4",
                        "login": "theuni"
                    },
                    "body": "Concept ACK. What's the point of MacOSIdleInhibitor though? In #5804, CIdleInhibitor was introduced as a generic object that could used to be hold any/all platform-specific inhibitors. Here, MacOSIdleInhibitor seems to just be an extra level of indirection.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MDkwNzI1OA==",
                    "publishedAt": "2018-04-12T18:48:31Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12783#issuecomment-380907258"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/834046?v=4",
                        "login": "krab"
                    },
                    "body": "Well windows and linux can't lower cpu performance per application, on windows user can only change system-wide power plans. This thing pretty much only macos specific, MacOSIdleInhibitor  change reverted anyways.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MTAwODcwNA==",
                    "publishedAt": "2018-04-13T03:11:42Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12783#issuecomment-381008704"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/417043?v=4",
                        "login": "theuni"
                    },
                    "body": "CIdleInhibitor is still there, maybe an issue with the rebase? BitcoinCore::BitcoinCore can just create a CAppNapInhibitor.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4Mjc3NzY2OA==",
                    "publishedAt": "2018-04-19T15:24:59Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12783#issuecomment-382777668"
                }
            ],
            "totalCount": 15
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "7e84a3e31fc278c1defa0e5e575ad0ff78aa9b67"
                    }
                }
            ],
            "totalCount": 3
        },
        "createdAt": "2018-03-26T05:40:01Z",
        "deletions": 4,
        "id": "MDExOlB1bGxSZXF1ZXN0MTc3MzQ2ODE4",
        "labels": {
            "nodes": [
                {
                    "color": "660000",
                    "id": "MDU6TGFiZWwyMzQ4Nzk=",
                    "name": "macOS"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "number": 12783,
        "state": "OPEN",
        "title": "macOS: Disable AppNap",
        "updatedAt": "2018-04-19T23:32:16Z"
    },
    {
        "additions": 1,
        "author": {
            "avatarUrl": "https://avatars3.githubusercontent.com/u/250224?v=4",
            "login": "kallewoof",
            "url": "https://github.com/kallewoof"
        },
        "body": "Automake would think the target was out of date every time because e.g. '.deps' was updated.\r\n\r\nNote: I am assuming that secp256k1 depends on `*.h`, `*.c`, ~~and `libsecp256k1-config.h`~~ (it's `.h` so already included), aside from pre-existing `include/*`. If there are other files that would require a rebuild of the `LIBSECP256K1` target, they should probably be added.\r\n\r\nIt would be neat if you could exclude specific files, rather than split it up like this, but it doesn't seem possible (https://www.gnu.org/software/make/manual/html_node/Wildcard-Function.html#Wildcard-Function)\r\n\r\nShould probably note this:\r\n```Bash\r\n$ V=1 make check VERBOSE=1\r\nMaking check in src\r\nmake[1]: Entering directory '/home/user/workspace/bitcoin/src'\r\nmake[2]: Entering directory '/home/user/workspace/bitcoin/src'\r\nmake  -C secp256k1 libsecp256k1.la\r\nmake[3]: Entering directory '/home/user/workspace/bitcoin/src/secp256k1'\r\nmake[3]: 'libsecp256k1.la' is up to date.\r\nmake[3]: Leaving directory '/home/user/workspace/bitcoin/src/secp256k1'\r\nmake  check-TESTS check-local\r\nmake[3]: Entering directory '/home/user/workspace/bitcoin/src'\r\nmake[4]: Entering directory '/home/user/workspace/bitcoin/src'\r\nmake  -C secp256k1 libsecp256k1.la\r\nmake[5]: Entering directory '/home/user/workspace/bitcoin/src/secp256k1'\r\nmake[5]: 'libsecp256k1.la' is up to date.\r\nmake[5]: Leaving directory '/home/user/workspace/bitcoin/src/secp256k1'\r\nPASS: test/test_bitcoin.exe\r\n```\r\n",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "Concept ACK, but deferring to @theuni.\r\n\r\nFWIW univalue has the opposite problem. It's possible to change some files without it being detected by the build system.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NjU0NDgxNA==",
                    "publishedAt": "2018-03-27T14:25:34Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12788#issuecomment-376544814"
                }
            ],
            "totalCount": 1
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "02bbf9d2963b5251fdddabb4c90a883e912e4ae3"
                    }
                }
            ],
            "totalCount": 1
        },
        "createdAt": "2018-03-26T09:40:27Z",
        "deletions": 1,
        "id": "MDExOlB1bGxSZXF1ZXN0MTc3MzkxMzY1",
        "labels": {
            "nodes": [
                {
                    "color": "5319e7",
                    "id": "MDU6TGFiZWw2MTg4OTQxNg==",
                    "name": "Build system"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "number": 12788,
        "state": "OPEN",
        "title": "[build] Tune wildcards for LIBSECP256K1 target",
        "updatedAt": "2018-04-10T17:54:08Z"
    },
    {
        "additions": 69,
        "author": {
            "avatarUrl": "https://avatars0.githubusercontent.com/u/195769?v=4",
            "login": "skeees",
            "url": "https://github.com/skeees"
        },
        "body": "When false, wallet does not rescan the chain from its last known best block on startup or subscribe to CValidationInterface notifications.  Useful for wallet maintenance type activities where one desires to avoid the overhead of rescan on startup.\r\n\r\nFixes #12632.",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "Needs a test in `test/functional`? (possibly as part of another wallet test)",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NjI4NDU4NA==",
                    "publishedAt": "2018-03-26T19:32:24Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12792#issuecomment-376284584"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/195769?v=4",
                        "login": "skeees"
                    },
                    "body": "Will add functional test and update",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NjI5MTEwNw==",
                    "publishedAt": "2018-03-26T19:54:56Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12792#issuecomment-376291107"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/195769?v=4",
                        "login": "skeees"
                    },
                    "body": "Test added - can rebase and squash into one commit if there are no further comments / fixes",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NjMwNTg4Mg==",
                    "publishedAt": "2018-03-26T20:46:01Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12792#issuecomment-376305882"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
                        "login": "promag"
                    },
                    "body": "Fixes #12632.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NjMxNjkwNQ==",
                    "publishedAt": "2018-03-26T21:25:11Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12792#issuecomment-376316905"
                }
            ],
            "totalCount": 4
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "afe7c3852c3d241822b26d26cb80963be582b6bc"
                    }
                }
            ],
            "totalCount": 3
        },
        "createdAt": "2018-03-26T18:03:04Z",
        "deletions": 6,
        "id": "MDExOlB1bGxSZXF1ZXN0MTc3NTIzMzMx",
        "labels": {
            "nodes": [
                {
                    "color": "08a781",
                    "id": "MDU6TGFiZWwxNDk0MjQ=",
                    "name": "Wallet"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "CONFLICTING",
        "mergedAt": null,
        "number": 12792,
        "state": "OPEN",
        "title": "Add -walletupdates: resolves #12632",
        "updatedAt": "2018-03-27T18:56:10Z"
    },
    {
        "additions": 267,
        "author": {
            "avatarUrl": "https://avatars0.githubusercontent.com/u/195769?v=4",
            "login": "skeees",
            "url": "https://github.com/skeees"
        },
        "body": "Optionally only call -walletnotify command when a certain number of confirmations have been seen\r\n\r\nThis addresses issue #10021",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
                        "login": "promag"
                    },
                    "body": "NACK at quick glance. Why add complexity when it can be done outside? What happens to the queue when it restarts? Are the notifications lost? I don't think we should track state on behalf of the client.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NjY4NDAxOA==",
                    "publishedAt": "2018-03-27T21:36:49Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12801#issuecomment-376684018"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/195769?v=4",
                        "login": "skeees"
                    },
                    "body": "re recovering state upon restart - if this option is enabled the wallet rescans the last n_confirmations_required blocks to repopulate this queue (see link below): the expectation is that the number of confirmations desired is a number closer to 6 than to 100k - so the rescan shouldn't add tremendous overhead. Of course, the number of confirmations desired is up to the user, and is off by default.\r\nhttps://github.com/bitcoin/bitcoin/pull/12801/commits/d232f62462c6cebf5e03b7cbe7c87469f46ca026#diff-b2bb174788c7409b671c46ccc86034bdR4072\r\n\r\nre the NACK - @laanwj expresses some support for putting this functionality into the daemon in #10021",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NjY4NjQ1NA==",
                    "publishedAt": "2018-03-27T21:46:09Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12801#issuecomment-376686454"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/7133040?v=4",
                        "login": "ryanofsky"
                    },
                    "body": "@promag this seems like it could be significantly more efficient than the suggested workaround from https://github.com/bitcoin/bitcoin/issues/10021#issuecomment-287344757 of calling listtransactions. Or did you have a different workaround in mind?\r\n\r\nFrom the original issue, it sounds like lack of a configurable notifications gives wallet users an incentive to only wait for a single confirmation, which seems not great.\r\n\r\nAs for code complexity, I'd have to look more closely, but the new logic might be reusable to update displayed transactions in the gui more efficiently, and the state tracking might be useful in the wallet itself to get rid of some synchronous chainactive lookups.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NjY5MDI2Mg==",
                    "publishedAt": "2018-03-27T22:01:14Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12801#issuecomment-376690262"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/195769?v=4",
                        "login": "skeees"
                    },
                    "body": "Rebased to latest master (should solve test failures)",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NjkwNjc3MQ==",
                    "publishedAt": "2018-03-28T14:27:57Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12801#issuecomment-376906771"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
                        "login": "promag"
                    },
                    "body": "I'll review and test. I understand this feature is very desirable as it can save a lot of code for clients that want the Nth confirmation.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NzQ4MDAyMQ==",
                    "publishedAt": "2018-03-30T08:46:01Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12801#issuecomment-377480021"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/195769?v=4",
                        "login": "skeees"
                    },
                    "body": "(will address other comments, re: map/vec)\r\nThe tricky bits here involved being correct around chain re-orgs and I don't think a map makes that any less complex. It also doesn't let you discard the dependency on reliable invocation of the `BlockConnected` signal without introducing a lot more state, inefficient chain scanning, or discarding some of the guarantees about notification:\r\n\r\nHere's an explanation of the circular buffer approach.\r\n\r\n`n`: the number of confirmations needed for notification to occur\r\n\r\nWhen `n==1` we notify as soon as the block is mined so no state is needed.\r\n\r\nWhen `n>1` we need to keep around a state representing blocks with transactions with haven't yet been confirmed: there will be at most `n-1` of these.\r\n\r\nSince `n` is generally chosen to be a small number - and also since any node operating for sufficiently long time to observe `n` blocks will eventually have to store state of length `n-1` - we just pre-allocate a buffer with `n-1` slots. Most of the time (except for re-orgs) we will be adding a new highest height (new block) and removing the lowest height (block that has now received n confirmations and we've notified) - this is a natural fit for a circular buffer.\r\n\r\n`buffer_pos(height)`: maps every block height into a slot in this buffer with simple modulo arithmetic\r\n\r\nIf this buffer is reliably updated every time a block is connected, then it will always contain valid state for **up to** the `n-1` blocks on the active chain tip. **Up to**, and usually, but not always exactly, `n-1` because of re-orgs. In a reorg when the first block on the newly reorged chain gets connected at a height lower than the tip, we do not need to rescan any of the trailing blocks for which we no longer keep state because those have already been appropriately notified previously. We do have to maintain some bounding logic to track min/max height ranges for which we have valid state lest we accidentally send notifications for transactions in higher blocks on the re-orged out chain (b/c of the modulo based indexing into the circular buffer). With a map - you wouldn't need these min/max height bounds - but you trade that for having to explicitly clear the map for heights that are no longer needed. \r\n\r\nIn no case (map or vector) are you able to relax the constraint that `BlockConnected` must be called reliably without adding either more complex state (e.g. block hashes so you don't accidentally notify for re-orged out blocks - you won't send false notifications but you might miss some) or expensive scans of trailing blocks on every update (you wouldn't miss blocks - but it's quite inefficient and you'd either have to rescan the entire chain on startup or persist your last notified height to disk). Also there are a number of other internal components that need to have validation signals invoked reliably - so its not a new dependency.\r\n\r\nThe only other savings in logical complexity you get by substituting a map for a pre-sized vector is indexing into the structure (i.e. `map[height]` instead of `vec[buffer_pos(height)]`. \r\n\r\nOne other note here - this guarantees \"at least once\" notifications. Duplicate notifications can occur when the same blocks are connected more than once (e.g. on node restarts or chain re-orgs).",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3ODczNTc1NA==",
                    "publishedAt": "2018-04-04T20:33:11Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12801#issuecomment-378735754"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1063656?v=4",
                        "login": "jnewbery"
                    },
                    "body": "Apologies for only coming to this after it's already received some review, but I'm a concept NACK on this, and think that the method suggested here: https://github.com/bitcoin/bitcoin/issues/10021#issuecomment-287306406 is a good solution to this problem.\r\n\r\nAdding this to the server seems to be adding a lot of complexity for very little gain. There are edge cases to consider (eg transactions getting removed in re-orgs, or added at a different block height), and maintaining/debugging issues with this quite complex server code seems to be a high price to pay for something that can be achieved on the client side.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3OTg0NDQ2Nw==",
                    "publishedAt": "2018-04-09T18:14:30Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12801#issuecomment-379844467"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/73197?v=4",
                        "login": "jamesob"
                    },
                    "body": "Maybe a moot point now given some concept NACKs, but the implementation as written is faulty for a particular reorg case ([failing test here](https://github.com/jamesob/bitcoin/commit/92b620f26127b93f2b6fd389516f5e7b7d09ac7e)). Feel free to cherry-pick that commit should work on this continue.\r\n\r\nI appreciate the good explanation of your initial implementation @skeees, but I still think this approach is overly complicated and too easily hides faulty behavior. I think if work continues on this feature, we should use something along the lines of a `target_height_to_txns` map in conjunction with `ValidationInterface::BlockDisconnected` to clear keys and thus more explicitly handle reorgs. I think that'd be a bit easier to reason about.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3OTg0ODg0NA==",
                    "publishedAt": "2018-04-09T18:28:43Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12801#issuecomment-379848844"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/195769?v=4",
                        "login": "skeees"
                    },
                    "body": "Thanks for the test case! The cause is rather embarrassing - due to my lack of familiarity with c++ I was calling std::vector::empty() (a boolean test for emptiness) instead of std::vector::clear() (actually empties the vector). I've fixed that and incorporated your test @jamesob and (slightly tweaked so it tests re-orgs at multiple depths)\r\n\r\nRe the concept NACK in general - if reliance on zeroconf transactions is heavily discouraged then I think its certainly worth maintaining this in the wallet. Furthermore - as @ryanofsky has pointed out in earlier comments - there are a number of other places where this sort of state tracking would benefit the wallet and for which this logic could be further utilized. One example is coinbase maturity testing which currently calls GetDepthInMainChain(). I'd also note that while the logic added might be internally complicated - there is no additional persistent state introduced and the public interface to the class is very limited - i.e. I tried to minimize as much as possible how it interacts with the rest of the wallet (i.e. most notable of these was maintaining additional internal range bounding logic in exchange for not requiring notification on BlockDisconnected() events). ",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3OTkzMDExMQ==",
                    "publishedAt": "2018-04-10T00:02:30Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12801#issuecomment-379930111"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/73197?v=4",
                        "login": "jamesob"
                    },
                    "body": "Ironically the one provision that tends me towards a concept ACK doesn't jibe with reusing this sort of logic within parts of bitcoind, e.g. `GetDepthInMainChain()`.\r\n\r\nWith the merge of #10244 we're finally making concrete steps towards gui/wallet/node separation. I think it's fine for the wallet to encompass useful (if nonessential) features like this, especially once we have firmer separation between the three major subsystems, but I think if we were to use this class as-is in something like coinbase maturity checks and in doing so introduce a bidirectional dependency between the wallet and the node, that'd be a step backwards.\r\n\r\nUnless there was a really compelling case for this pattern to be used in bitcoind (and subsequently moved there and then exposed over an interface), I think it should stay completely isolated to `wallet` if implemented at all.\r\n\r\nThis seems like a nice feature for some users and I'm generally for it, but I'm also okay waiting on it until we get further down the road with node separation.\r\n\r\nAny chance you can just cherrypick https://github.com/jamesob/bitcoin/commit/92b620f26127b93f2b6fd389516f5e7b7d09ac7e so that the commit attribution remains intact? You can then do `git commit --amend` to make your changes.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3OTk0MDY0Mg==",
                    "publishedAt": "2018-04-10T01:03:00Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12801#issuecomment-379940642"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/195769?v=4",
                        "login": "skeees"
                    },
                    "body": "Sorry if I was unclear, but I think we're on the same page. What I was\ntrying to say was with this sort of state in wallet, you wouldn't need to\nrely quite as much on GetDepthInMainChain() which should further the goal\nof separation.\n\nYes, of course I'll amend the commit as you suggest - did not realize I\ncould do that -- along with c++, I learn new things about git every day.\n\nOn Mon, Apr 9, 2018, 9:04 PM jamesob <notifications@github.com> wrote:\n\n> Ironically the one provision that tends me towards a concept ACK doesn't\n> jibe with reusing this sort of logic within parts of bitcoind, e.g.\n> GetDepthInMainChain().\n>\n> With the merge of #10244 <https://github.com/bitcoin/bitcoin/pull/10244>\n> we're finally making concrete steps towards gui/wallet/node separation. I\n> think it's fine for the wallet to encompass useful (if nonessential)\n> features like this, especially once we have firmer separation between the\n> three major subsystems, but I think if we were to use this class as-is in\n> something like coinbase maturity checks and in doing so introduce a\n> bidirectional dependency between the wallet and the node, that'd be a step\n> backwards.\n>\n> Unless there was a really compelling case for this pattern to be used in\n> bitcoind, I think it should stay completely isolated to wallet if\n> implemented at all.\n>\n> This seems like a nice feature for some users and I'm generally for it,\n> but I'm also okay waiting on it until we get further down the road with\n> node separation.\n>\n> Any chance you can just cherrypick jamesob/bitcoin@92b620f\n> <https://github.com/jamesob/bitcoin/commit/92b620f26127b93f2b6fd389516f5e7b7d09ac7e>\n> so that the commit attribution remains intact? You can then do git commit\n> --amend to make your changes.\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/bitcoin/bitcoin/pull/12801#issuecomment-379940642>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AAL8uRzkqiRopFt184UWXGNEDTaK2ry3ks5tnAUtgaJpZM4S9fis>\n> .\n>\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3OTk0MjQ0Nw==",
                    "publishedAt": "2018-04-10T01:14:42Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12801#issuecomment-379942447"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/7133040?v=4",
                        "login": "ryanofsky"
                    },
                    "body": "I wonder if it the concerns about code complexity would be addressed by splitting up the general purpose confirmation tracking code from the application-specific wallet notification logic. If you pulled the `notify_command_template` stuff out of `WalletTransactionNotifier` class, you could be left with a more general purpose class like:\r\n\r\n```c++\r\nclass ConfirmationTracker\r\n{\r\npublic:\r\n   //! Create new confirmation tracker which invokes callbacks after a\r\n   //! specified number of confirmations.\r\n   ConfirmationTracker(int num_confirmations);\r\n\r\n   //! Register callback which will be called later when block at block_height\r\n   //! has the specified number of confirmations, or immediately if it already\r\n   //! has enough confirmations.\r\n   void addCallback(int block_height, function<void()> callback);\r\n\r\n   //! Handle new block being connected at block_height by invoking callbacks\r\n   //! registered at (block_height - num_confirmations), and dropping callbacks\r\n   //! previously registered at block_height (in case of reorgs).\r\n   void blockConnected(int block_height);\r\nprivate:\r\n   ...\r\n}\r\n```\r\n\r\nThis could be a standalone class which could just go in libbitcoin_util and not be tied to the wallet. This way wallet notification code would not be much more complicated than it is now, and it would also be possible to imagine extending this class and using it more places like in the GUI, zmq code, or non-wallet RPCs.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MDA3ODczMw==",
                    "publishedAt": "2018-04-10T12:21:09Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12801#issuecomment-380078733"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/195769?v=4",
                        "login": "skeees"
                    },
                    "body": "That sounds like a great idea - and probably the right place for this to live to be more generally useful. If I see no objections to the principle of the entire thing, I'll refactor along those lines and update in the coming days",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MDEwMDc1Ng==",
                    "publishedAt": "2018-04-10T13:37:17Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12801#issuecomment-380100756"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/7133040?v=4",
                        "login": "ryanofsky"
                    },
                    "body": "On the `GetDepthInMainChain` topic from https://github.com/bitcoin/bitcoin/pull/12801#issuecomment-379930111 and https://github.com/bitcoin/bitcoin/pull/12801#issuecomment-379940642, I think a more direct approach to tracking transaction confirmations inside the wallet might just be to add a new field to CMerkleTx. I described an idea for this here: https://github.com/bitcoin/bitcoin/pull/10973#issuecomment-380101269",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MDExMDMwMg==",
                    "publishedAt": "2018-04-10T14:03:46Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12801#issuecomment-380110302"
                }
            ],
            "totalCount": 14
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "6163f6d1885348d8daee604a47af8d573e97c352"
                    }
                }
            ],
            "totalCount": 5
        },
        "createdAt": "2018-03-27T19:22:01Z",
        "deletions": 19,
        "id": "MDExOlB1bGxSZXF1ZXN0MTc3ODM5ODY4",
        "labels": {
            "nodes": [
                {
                    "color": "08a781",
                    "id": "MDU6TGFiZWwxNDk0MjQ=",
                    "name": "Wallet"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "CONFLICTING",
        "mergedAt": null,
        "number": 12801,
        "state": "OPEN",
        "title": "Add option to only notify after wallet transactions are confirmed",
        "updatedAt": "2018-04-10T14:03:46Z"
    },
    {
        "additions": 257,
        "author": {
            "avatarUrl": "https://avatars0.githubusercontent.com/u/649246?v=4",
            "login": "TheBlueMatt",
            "url": "https://github.com/TheBlueMatt"
        },
        "body": "Replaces #10692 after #11041 was merged. Stops exporting mapBlockIndex in validation.h entirely, also making it const inside of validation.cpp outside of CChainState. Also makes chainActive const everywhere outside of CChainState and, together, removes all non-const CBlockIndex*s outside of validation/(mostly CChainState).\r\n\r\nSorry, no lyrics this time.",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/548488?v=4",
                        "login": "sipa"
                    },
                    "body": "utACK 4576f1de6725bab583797d081421b992872fd616\r\n\r\nNit: typo in commit name `nonCosntChainActive`.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NzgxNDM0Ng==",
                    "publishedAt": "2018-04-01T20:27:28Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12802#issuecomment-377814346"
                }
            ],
            "totalCount": 1
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "4576f1de6725bab583797d081421b992872fd616"
                    }
                }
            ],
            "totalCount": 12
        },
        "createdAt": "2018-03-27T19:47:15Z",
        "deletions": 204,
        "id": "MDExOlB1bGxSZXF1ZXN0MTc3ODQ1ODU1",
        "labels": {
            "nodes": [
                {
                    "color": "E6F6D6",
                    "id": "MDU6TGFiZWwxMzU5NjE=",
                    "name": "Refactoring"
                },
                {
                    "color": "6060aa",
                    "id": "MDU6TGFiZWwxMTgzNzk2NTI=",
                    "name": "Validation"
                }
            ],
            "totalCount": 2
        },
        "mergeable": "CONFLICTING",
        "mergedAt": null,
        "number": 12802,
        "state": "OPEN",
        "title": "Colonel Mustard in the Lounge with the Lead Pipe (killed mapBlockIndex outside of validation)",
        "updatedAt": "2018-04-01T20:27:28Z"
    },
    {
        "additions": 15,
        "author": {
            "avatarUrl": "https://avatars1.githubusercontent.com/u/10217?v=4",
            "login": "Sjors",
            "url": "https://github.com/Sjors"
        },
        "body": "Consistent with #12421 which highlights the transaction after send.\r\n\r\n<img width=\"747\" alt=\"1\" src=\"https://user-images.githubusercontent.com/10217/38036280-a7358ea4-32a6-11e8-8f92-417e9e1e3e8b.png\">\r\n\r\n<img width=\"685\" alt=\"2\" src=\"https://user-images.githubusercontent.com/10217/38036289-aac87040-32a6-11e8-9f94-81745ff6c592.png\">\r\n\r\n~I'm not too proud of the `QTimer::singleShot(10` bit; any suggestions on how to properly wait for the transactions table to become aware of the new transaction?~\r\n\r\nAlthough I could have called `focusTransaction()` directly from `TransactionView::bumpFee()` I'm using the same signal as the send screen. This should make it easier to move fee bump / transaction replacement functionality around later.",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/3211283?v=4",
                        "login": "MeshCollider"
                    },
                    "body": "Concept ACK",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NzAzODk5Ng==",
                    "publishedAt": "2018-03-28T21:14:22Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12818#issuecomment-377038996"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/10217?v=4",
                        "login": "Sjors"
                    },
                    "body": "Travis fails with:\r\n\r\n```\r\nqt/transactionview.cpp: In member function \u2018void TransactionView::bumpFee()\u2019:\r\nqt/transactionview.cpp:446:10: error: no matching function for call to \u2018QTimer::singleShot(int, TransactionView::bumpFee()::__lambda0)\u2019\r\n         });\r\n          ^\r\nqt/transactionview.cpp:446:10: note: candidate is:\r\nIn file included from /usr/include/qt4/QtCore/QTimer:1:0,\r\n                 from ./qt/sendcoinsdialog.h:13,\r\n                 from qt/transactionview.cpp:13:\r\n/usr/include/qt4/QtCore/qtimer.h:78:17: note: static void QTimer::singleShot(int, QObject*, const char*)\r\n     static void singleShot(int msec, QObject *receiver, const char *member);\r\n```\r\n\r\nSeems to be a QT 4 issue. Will look into that later, since it might go away if there's a way to avoid`singleShot` (or if #8263 happens first). For now I just skip it for [QT < 5.4](http://doc.qt.io/qt-5/qtimer.html#singleShot-4).",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NzE5NDQ0Mg==",
                    "publishedAt": "2018-03-29T10:33:50Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12818#issuecomment-377194442"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
                        "login": "promag"
                    },
                    "body": "Concept ACK. NACK the timed single shot \ud83d\ude04 ",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NzIwMDAwMQ==",
                    "publishedAt": "2018-03-29T10:59:38Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12818#issuecomment-377200001"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "Needs rebase",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MDM0NTUwMw==",
                    "publishedAt": "2018-04-11T06:47:14Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12818#issuecomment-380345503"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/10217?v=4",
                        "login": "Sjors"
                    },
                    "body": "Rebased\r\n\r\n@promag @jonasschnelli I replaced the single shot with `qApp->processEvents()`, which also removes the need for any `Qt4` specific code. ",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MDQwNjYzMQ==",
                    "publishedAt": "2018-04-11T10:36:01Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12818#issuecomment-380406631"
                }
            ],
            "totalCount": 5
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "90c614cb8b8fb6268b793581f8d3bde810a64f62"
                    }
                }
            ],
            "totalCount": 1
        },
        "createdAt": "2018-03-28T14:43:02Z",
        "deletions": 5,
        "id": "MDExOlB1bGxSZXF1ZXN0MTc4MDYyMzM4",
        "labels": {
            "nodes": [
                {
                    "color": "02d7e1",
                    "id": "MDU6TGFiZWwxMzU5NDY=",
                    "name": "GUI"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "number": 12818,
        "state": "OPEN",
        "title": "[qt] TransactionView: highlight replacement tx after fee bump",
        "updatedAt": "2018-04-11T10:36:02Z"
    },
    {
        "additions": 31,
        "author": {
            "avatarUrl": "https://avatars0.githubusercontent.com/u/2734?v=4",
            "login": "eklitzke",
            "url": "https://github.com/eklitzke"
        },
        "body": "When snappy compression is disabled, LevelDB does not use a block cache. This PR avoids wasting memory reserved for the block cache in that situation, and gives it to the write buffer instead.\r\n\r\nUnfortunately this behavior is not documented (I have filed a bug upstream already). You can see [here](https://github.com/bitcoin-core/leveldb/blob/bitcoin-fork/util/env_posix.cc#L202) that `PosixMmapReadableFile` takes a `scratch` argument that is unused. This isn't by accident; the return value of the method is compared against the supplied buffer [here](https://github.com/bitcoin-core/leveldb/blob/bitcoin-fork/table/format.cc#L109) to determine whether the block cache should be used.\r\n\r\nGiving more memory to the write buffer is good for a number of reasons. Among them: LevelDB checks reads against the mem table holding current writes, so the write buffer acts as an LRU within LevelDB.",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/863730?v=4",
                        "login": "fanquake"
                    },
                    "body": "#12495 has now been merged.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NzIzODYxNw==",
                    "publishedAt": "2018-03-29T13:41:23Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12825#issuecomment-377238617"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "utACK https://github.com/bitcoin/bitcoin/pull/12825/commits/607e67fffb496d4b3bf2f2e01cea964474e54e16\r\nneeds rebase to get rid of the already-merged commit",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3OTQ4NDExNA==",
                    "publishedAt": "2018-04-07T17:02:11Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12825#issuecomment-379484114"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
                        "login": "MarcoFalke"
                    },
                    "body": "Poked GitHub to get rid of the commit without rebase:\r\n\r\n<details><summary></summary>\r\n\r\n```\r\ngit push git@github.com:eklitzke/bitcoin.git f9026afe12518bae3a8d700b2c7aff5522644405:buffer-cache\r\ngit push git@github.com:eklitzke/bitcoin.git 607e67f:buffer-cache -f\r\n```\r\n</details>",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3OTQ5Mzg2OA==",
                    "publishedAt": "2018-04-07T19:36:26Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12825#issuecomment-379493868"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/2734?v=4",
                        "login": "eklitzke"
                    },
                    "body": "I have rebased this branch with master.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MjU2MjQxOQ==",
                    "publishedAt": "2018-04-18T23:37:59Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12825#issuecomment-382562419"
                }
            ],
            "totalCount": 4
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "133534cf4cc056e6a8a2e9544dda015c5617ffc7"
                    }
                }
            ],
            "totalCount": 2
        },
        "createdAt": "2018-03-29T06:18:39Z",
        "deletions": 3,
        "id": "MDExOlB1bGxSZXF1ZXN0MTc4MjM2MTYz",
        "labels": {
            "nodes": [
                {
                    "color": "981023",
                    "id": "MDU6TGFiZWwzMjY5MTgyMzA=",
                    "name": "Resource usage"
                },
                {
                    "color": "fbca04",
                    "id": "MDU6TGFiZWw5NzQ3MDc5Ng==",
                    "name": "UTXO Db and Indexes"
                }
            ],
            "totalCount": 2
        },
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "number": 12825,
        "state": "OPEN",
        "title": "Only allocate a LevelDB block cache if LevelDB will actually use it",
        "updatedAt": "2018-04-19T19:23:25Z"
    },
    {
        "additions": 279,
        "author": {
            "avatarUrl": "https://avatars0.githubusercontent.com/u/73197?v=4",
            "login": "jamesob",
            "url": "https://github.com/jamesob"
        },
        "body": "Addresses https://github.com/bitcoin/bitcoin/issues/12796.\r\n\r\nWhen a user attempts to add to the address book a sending address which is already present as a receiving address, they're presented with a confusing error indicating the address is already present in the book, despite the fact that this row is currently invisible. \r\n\r\n![selection_011](https://user-images.githubusercontent.com/73197/38096704-8a2948d2-3341-11e8-9632-7d563201f28c.jpg)\r\n\r\nThis change adds a more specific error message indicating its existence as a receiving address (as discussed in the linked issue).\r\n\r\n![selection_016](https://user-images.githubusercontent.com/73197/38198467-fa26164e-365a-11e8-8fc5-ddab9caf2fbd.jpg)\r\n\r\nThis change also adds some tests exercising use of the address book via QT. Adding so much test code for such a trivial change may seem weird, but it's my hope that this will make further test-writing for address book usage (and other QT features) more approachable.",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/73197?v=4",
                        "login": "jamesob"
                    },
                    "body": "Incorporated @ryanofsky's feedback and rebased ([diff](https://gist.github.com/jamesob/6bd9721e11431d636fd2b9f6399a45ef)).",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NzUzNDE5OA==",
                    "publishedAt": "2018-03-30T14:19:55Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12830#issuecomment-377534198"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
                        "login": "promag"
                    },
                    "body": "Concept ACK. Will review later.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NzgwNzQzNw==",
                    "publishedAt": "2018-04-01T18:40:03Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12830#issuecomment-377807437"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/73197?v=4",
                        "login": "jamesob"
                    },
                    "body": "Fixed Travis failures (unchecked `db_cxx.h` include, whitespace) and rebased.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NzkzMjI3MA==",
                    "publishedAt": "2018-04-02T13:46:14Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12830#issuecomment-377932270"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/73197?v=4",
                        "login": "jamesob"
                    },
                    "body": "Thanks for the review, @jnewbery. Typo fixed and rebased.\r\n```diff\r\n $ diff -u <(git diff master...a540696) <(git diff master...2d15e9c)\r\n\r\n--- /proc/self/fd/11    2018-04-02 11:30:04.855218939 -0400\r\n+++ /proc/self/fd/12    2018-04-02 11:30:04.855218939 -0400\r\n@@ -192,7 +192,7 @@\r\n      Mode mode;\r\n diff --git a/src/qt/test/addressbooktests.cpp b/src/qt/test/addressbooktests.cpp\r\n new file mode 100644\r\n-index 0000000000..bc9ace14d7\r\n+index 0000000000..84c765e48a\r\n --- /dev/null\r\n +++ b/src/qt/test/addressbooktests.cpp\r\n @@ -0,0 +1,140 @@\r\n@@ -243,7 +243,7 @@\r\n + *\r\n + * There are three cases tested:\r\n + *\r\n-+ *   - new_address: a new address would should add as a send address successfully.\r\n++ *   - new_address: a new address which should add as a send address successfully.\r\n + *   - existing_s_address: an existing sending address which won't add successfully.\r\n + *   - existing_r_address: an existing receiving address which won't add successfully.\r\n + *\r\n```",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3Nzk1NjExMg==",
                    "publishedAt": "2018-04-02T15:30:42Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12830#issuecomment-377956112"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1063656?v=4",
                        "login": "jnewbery"
                    },
                    "body": "reACK 2d15e9ce7d2ca4cc48ce0010e3c1c227a81f3b78",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3Nzk2MTM4OA==",
                    "publishedAt": "2018-04-02T15:52:39Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12830#issuecomment-377961388"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/73197?v=4",
                        "login": "jamesob"
                    },
                    "body": "Rebased, conflicts from the #10244 merge resolved.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3OTg5NTAyMA==",
                    "publishedAt": "2018-04-09T21:09:43Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12830#issuecomment-379895020"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/73197?v=4",
                        "login": "jamesob"
                    },
                    "body": "Rebased and addressed @jnewbery's feedback (thanks!):\r\n\r\n- Reworked `getAddress` definition and calls to remove use of default params (https://github.com/bitcoin/bitcoin/pull/12830/commits/9db465201d46535a9030d052d858f0e5e2c6e796)\r\n- Moved the `qt/test/util.cpp` makefile inclusion to the right commit (https://github.com/bitcoin/bitcoin/pull/12830/commits/82e8fce0366527fd9f7ab14c32567cf4ef323abd)\r\n- Removed the unused `addressTableModel`",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MDE2Njg0MA==",
                    "publishedAt": "2018-04-10T16:36:48Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12830#issuecomment-380166840"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1063656?v=4",
                        "login": "jnewbery"
                    },
                    "body": "utACK 41180ac. Good stuff!",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MDE5Njc4Mw==",
                    "publishedAt": "2018-04-10T18:12:34Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12830#issuecomment-380196783"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/73197?v=4",
                        "login": "jamesob"
                    },
                    "body": "Incorporated @jonasschnelli's good feedback about `tr()` usage. I've also recompiled the EN qt locale with `cd src/ && make translate` and have squashed that in.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MDIxNDY1NQ==",
                    "publishedAt": "2018-04-10T19:10:32Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12830#issuecomment-380214655"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1063656?v=4",
                        "login": "jnewbery"
                    },
                    "body": "utACK the change to editaddressdialog.cpp. Not sure about bitcoin_en.ts - is that something that usually gets changed in each commit, or just once before a release?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MDIxNzk5Mg==",
                    "publishedAt": "2018-04-10T19:22:51Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12830#issuecomment-380217992"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/73197?v=4",
                        "login": "jamesob"
                    },
                    "body": "@jnewbery happy to revert the change to bitcoin_en.ts, but @jonasschnelli seemed to think it'd be best to squash them in. [The documentation on translation](https://github.com/bitcoin/bitcoin/blob/master/doc/translation_process.md#writing-code-with-translations) also seems to suggest that the EN locale file should be changed in tandem with QT strings: \r\n\r\n> src/qt/locale/bitcoin_en.ts is treated in a special way. It is used as the source for all other translations. Whenever a string in the source code is changed, this file must be updated to reflect those changes.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MDIzMzU3Mw==",
                    "publishedAt": "2018-04-10T20:20:15Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12830#issuecomment-380233573"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/73197?v=4",
                        "login": "jamesob"
                    },
                    "body": "Reverted EN locale changes per @jonasschnelli's advice on IRC.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MDIzNjk4NA==",
                    "publishedAt": "2018-04-10T20:32:21Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12830#issuecomment-380236984"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1063656?v=4",
                        "login": "jnewbery"
                    },
                    "body": "utACK e6e1da33783408182e52fa73a11b6559ee0022f7",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MDI3OTUyNw==",
                    "publishedAt": "2018-04-10T23:31:10Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12830#issuecomment-380279527"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/73197?v=4",
                        "login": "jamesob"
                    },
                    "body": "Any other feedback here?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MTU5Mjc4NA==",
                    "publishedAt": "2018-04-16T13:07:18Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12830#issuecomment-381592784"
                }
            ],
            "totalCount": 14
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "e6e1da33783408182e52fa73a11b6559ee0022f7"
                    }
                }
            ],
            "totalCount": 4
        },
        "createdAt": "2018-03-29T15:17:29Z",
        "deletions": 40,
        "id": "MDExOlB1bGxSZXF1ZXN0MTc4MzYwMjAy",
        "labels": {
            "nodes": [
                {
                    "color": "02d7e1",
                    "id": "MDU6TGFiZWwxMzU5NDY=",
                    "name": "GUI"
                },
                {
                    "color": "d4c5f9",
                    "id": "MDU6TGFiZWw2Mjk2MzUxNg==",
                    "name": "Tests"
                }
            ],
            "totalCount": 2
        },
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "number": 12830,
        "state": "OPEN",
        "title": "[qt] [tests] Clarify address book error messages, add tests",
        "updatedAt": "2018-04-16T13:07:18Z"
    },
    {
        "additions": 593,
        "author": {
            "avatarUrl": "https://avatars1.githubusercontent.com/u/10217?v=4",
            "login": "Sjors",
            "url": "https://github.com/Sjors"
        },
        "body": "When QT launches, move the following QSettings to `bitcoin_rw.conf` (added in #11082):\r\n\r\n-`lang` (language)\r\n-`dbcache` (nDatabaseCache)\r\n-`par` (nThreadsScriptVerif)\r\n-`spendzeroconfchange` (bSpendZeroConfChange)\r\n-`upnp` (fUseUPnP)\r\n-`listen` (fListen)\r\n-`proxy` (fUseProxy)\r\n-`onion` (fUseSeparateProxyTor)\r\n\r\nThis is a step towards being able to configure `prune` from the GUI (#6461). \r\n\r\nThere's potentially a safety benefit in storing  `listen`, `proxy` and `onion` in `bitcoin_rw.conf` in case the user ever decides to run `bitcoind`.\r\n\r\nTODO:\r\n- [x] use `bitcoin_rw.conf` instead of `bitcoin.conf`\r\n- [x] `upnp`, `listen`\r\n- [x] `proxy`, `onion`\r\n- [x] add release note\r\n- [x] fix QT4 compiler issues",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "Please, never write to `bitcoin.conf`. It is exceptionally bad form for a daemon to write to its configuration file. If you want to do this, I'd suggest adding an additional file (in the datadir) for read/write settings (as @luke-jr did AFAIK).",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NzM2MTU5OQ==",
                    "publishedAt": "2018-03-29T20:25:55Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12833#issuecomment-377361599"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/10217?v=4",
                        "login": "Sjors"
                    },
                    "body": "@laanwj two files is indeed what @luke-jr did, but I don't see how that changes anything. It's critical that `bitcoind` uses this second file (for settings like `prune`) and treats it the same as `bitcoin.conf`. So by the same reasoning it shouldn't write to that second file.\r\n\r\nAlso note that only QT needs this ability, so I could refactor it such that `bitcoind` daemon only has read-only access.\r\n\r\nI thought of a completely different approach to handle the `prune` case, so we might be able to kick this shared settings can down the road. Will open a PR for later.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NzQ4MDYzOA==",
                    "publishedAt": "2018-03-30T08:49:34Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12833#issuecomment-377480638"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "> @laanwj two files is indeed what @luke-jr did, but I don't see how that changes anything. \r\n\r\nOne thing is permissions. The data directory is guaranteed writable. The configuration file might be `-conf=/etc/bitcoind.conf`.\r\n\r\n> Also note that only QT needs this ability, so I could refactor it such that bitcoind daemon only has read-only access.\r\n\r\nUnlike QSettings the second file would be used by both the GUI and the daemon. \r\n\r\nAnd it might be useful to edit settings in bitcoind at real-time as well. The GUI shouldn't really be special there, that gets in the way of the whole idea of unifying the settings mechanism.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NzQ5NzA1Nw==",
                    "publishedAt": "2018-03-30T10:24:24Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12833#issuecomment-377497057"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/10217?v=4",
                        "login": "Sjors"
                    },
                    "body": "If `bitcoin.conf` is not writeable, because the user configured a custom read-only directory, the UI elements that change settings this way could be disabled.\r\n\r\n> And it might be useful to edit settings in bitcoind at real-time as well.\r\n\r\nIndeed.\r\n\r\nI thought having two separate files leads to a more complicated implementation than just having one, but I didn't remove that much from the original code so far. It helps that settings can be overridden by repeating them in the new file.\r\n\r\nSo in that case it might more sense to get #11082 merged, in which case this PR just adds QSettings migration code on top of that.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NzU0Mzg2Mw==",
                    "publishedAt": "2018-03-30T15:03:54Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12833#issuecomment-377543863"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/10217?v=4",
                        "login": "Sjors"
                    },
                    "body": "I pushed a new version that uses `bitcoin_rw.conf`. I could probably add some helper functions to make the change more compact.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3ODMwNTA1MA==",
                    "publishedAt": "2018-04-03T16:08:30Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12833#issuecomment-378305050"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "I'm not sure if moving the QT settings from pure QT format in the QT chosen file to the bitcoind compatible `bitcoin_rw.conf` format reduces the complexity. Configuration file complexity can be harmful (-datadir, eventually once config files per network, includes, etc.).\r\n\r\nI also think we could expose prune to the QT layer without sharing the configuration value with bitcoind.\r\n\r\nUsers using bitcoind & QT with the same settings and datadir do probably know the ramification of GUI only settings. A warning when enabling prune in QT (once implemented) that it will not automatically be enabled in daemon mode seems sufficient to me.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3ODU4MTYwNQ==",
                    "publishedAt": "2018-04-04T12:24:56Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12833#issuecomment-378581605"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/10217?v=4",
                        "login": "Sjors"
                    },
                    "body": "@jonasschnelli in addition to a warning, we can even make `bitcoind` actually handle QT's `prune` elegantly, see my suggestion [here](https://github.com/bitcoin/bitcoin/issues/6461#issuecomment-377485323).\r\n\r\nFor settings other than prune there might be similar workarounds on a case by case basis (other than warning).",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3ODU5MjgyOA==",
                    "publishedAt": "2018-04-04T13:06:01Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12833#issuecomment-378592828"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/10217?v=4",
                        "login": "Sjors"
                    },
                    "body": "This and #11082 need a likely non-trivial rebase after #11862. I'm going to try the other approach first though.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MjAyNjA2OQ==",
                    "publishedAt": "2018-04-17T15:03:31Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12833#issuecomment-382026069"
                }
            ],
            "totalCount": 8
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "518f630e64f7d7bbc80540614d40682b9b981037"
                    }
                }
            ],
            "totalCount": 2
        },
        "createdAt": "2018-03-29T19:01:12Z",
        "deletions": 151,
        "id": "MDExOlB1bGxSZXF1ZXN0MTc4NDEzNzIw",
        "labels": {
            "nodes": [
                {
                    "color": "02d7e1",
                    "id": "MDU6TGFiZWwxMzU5NDY=",
                    "name": "GUI"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "CONFLICTING",
        "mergedAt": null,
        "number": 12833,
        "state": "OPEN",
        "title": "[qt] move QSettings to bitcoin.conf where possible",
        "updatedAt": "2018-04-17T15:03:31Z"
    },
    {
        "additions": 41,
        "author": {
            "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
            "login": "promag",
            "url": "https://github.com/promag"
        },
        "body": "Follow up of #12172, this change prevents calling `savemempool` RPC concurrently.",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
                        "login": "promag"
                    },
                    "body": "In order to test the new check and error add:\r\n```diff\r\n--- a/src/rpc/blockchain.cpp\r\n+++ b/src/rpc/blockchain.cpp\r\n@@ -1619,6 +1619,8 @@ UniValue savemempool(const JSONRPCRequest& request)\r\n         throw JSONRPCError(RPC_MISC_ERROR, \"Currently dumping the mempool\");\r\n     }\r\n\r\n+    MilliSleep(10000);\r\n+\r\n     if (!g_is_mempool_loaded) {\r\n         throw JSONRPCError(RPC_MISC_ERROR, \"The mempool was not loaded yet\");\r\n     }\r\n```\r\nThen run\r\n```sh\r\nbitcoin-cli -regtest savemempool & bitcoin-cli -regtest savemempool\r\n```\r\nShould print `Currently dumping the mempool` immediately.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3NzU3MTMzNQ==",
                    "publishedAt": "2018-03-30T17:03:50Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12842#issuecomment-377571335"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "After #12863 I'm even more convinced that this might be the wrong approach. Protecting access using a mutex instead of returning these kind of 'busy errors' would avoid having to implement retry-poll-loops client-side (including in the tests).\r\n\r\nIf you want to stick with this you'd at least need to define a new error code that means 'transient error', similar to `RPC_IN_WARMUP`. But I think pushing this responsibility to the client is unnecessary.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3ODE2NjI4Mg==",
                    "publishedAt": "2018-04-03T08:12:35Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12842#issuecomment-378166282"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
                        "login": "promag"
                    },
                    "body": "@laanwj indeed it's very arguable. I think it's preferable to have the client retrying than reserving resources on the server side. IMO having the client waiting is also not desirable because the client can wait indefinitely and also timeout (but then he can raise the timeout) and we would process the request anyway (?). Getting an error instead of waiting is also more informative and allows the client to explicitly log and retry when he feels like.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3ODIwMDQwNw==",
                    "publishedAt": "2018-04-03T10:14:58Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12842#issuecomment-378200407"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "OTOH\r\n- Then the API wouldn't be changed. Users of `savemempool` can rely on the call working, or fatally failing.\r\n- Hanging indefinitely is a bug no matter what. If it takes too long, something is wrong.\r\n- Interrupt semantics usually require *less* resources than polling. In this case: sleeping on a mutex requires virtually no resources. Whereas repetitive RPC requests take up CPU cycles and I/O.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3ODIxNDkyNQ==",
                    "publishedAt": "2018-04-03T11:17:01Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12842#issuecomment-378214925"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
                        "login": "MarcoFalke"
                    },
                    "body": "I think we had reports that loading the mempool took 1.5 hours or so, just noting without further comment.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3ODMwMzMwMw==",
                    "publishedAt": "2018-04-03T16:03:14Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12842#issuecomment-378303303"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
                        "login": "promag"
                    },
                    "body": "> Then the API wouldn't be changed. Users of savemempool can rely on the call working, or fatally failing.\r\n\r\nThe caller should always have error handling, and this new error would fall in his \"unkown error\".\r\n\r\n> Hanging indefinitely is a bug no matter what. If it takes too long, something is wrong.\r\n\r\nWe have calls that can hang a lot of time, for instance when the wallet is really big (as in lots of keys, lots of transactions).\r\n\r\n> Interrupt semantics usually require less resources than polling.\r\n\r\nRight, but at least a thread and a socket is on hold. And when the mutex is acquired, it might do something that is no longer relevant - in this case dumping the mempool again..\r\n\r\nWe have this semantic in `rescanblockchain`, do you think we should change that too?\r\n\r\nAnd regarding #12863, having the client blindingly wait for 1.5 hours should not be an option (?)",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3ODQxODk5NQ==",
                    "publishedAt": "2018-04-03T22:25:58Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12842#issuecomment-378418995"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/548488?v=4",
                        "login": "sipa"
                    },
                    "body": "I'm also more a fan of blocking until the existing save has finished. Given that no modifications in the mempool can happen in the mean time anyway (I think?), we could even just wait until the existing save operation finishes and then return from both RPC calls (without an additional save).",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3ODQzMTQyMQ==",
                    "publishedAt": "2018-04-03T23:28:50Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12842#issuecomment-378431421"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
                        "login": "promag"
                    },
                    "body": "> Given that no modifications in the mempool can happen in the mean time anyway\r\n\r\nActually it can, `DumpMempool` takes a copy of the mempool contents and then releases the lock to then write to file. So while writing to disk, the mempool can change.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3ODQzNTExMA==",
                    "publishedAt": "2018-04-03T23:50:43Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12842#issuecomment-378435110"
                }
            ],
            "totalCount": 8
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "7f722a1f0c82e1cc8dd9f6af9159bf7d7b8f2626"
                    }
                }
            ],
            "totalCount": 1
        },
        "createdAt": "2018-03-30T17:01:28Z",
        "deletions": 2,
        "id": "MDExOlB1bGxSZXF1ZXN0MTc4NTk2NTY4",
        "labels": {
            "nodes": [
                {
                    "color": "fef2c0",
                    "id": "MDU6TGFiZWwxNjQyMDg1NzI=",
                    "name": "Mempool"
                },
                {
                    "color": "0052cc",
                    "id": "MDU6TGFiZWw5ODI3OTE3Nw==",
                    "name": "RPC/REST/ZMQ"
                }
            ],
            "totalCount": 2
        },
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "number": 12842,
        "state": "OPEN",
        "title": "Prevent concurrent savemempool",
        "updatedAt": "2018-04-03T23:50:43Z"
    },
    {
        "additions": 94,
        "author": {
            "avatarUrl": "https://avatars0.githubusercontent.com/u/6910086?v=4",
            "login": "GabrielDav",
            "url": "https://github.com/GabrielDav"
        },
        "body": "This closes #11613 \r\n* Added ```from_me``` to ```listunspent``` and ```gettransaction```. This field indicates whether the source of the transaction was an address on the current node\r\n* Added ```source``` query filter to ```listunspent```. Using this filter a user can list transactions from all sources (all), only from the current node (from_me) or from external sources (external)\r\n* Added ```bip125-replaceable``` to ```listunspent```. This field indicates whether the transactions was marked as bip125-replaceable",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/9326759?v=4",
                        "login": "RHavar"
                    },
                    "body": "Concept ACK.\r\n\r\nNit: I think `from_me` should be a boolean not a string for `yes`|`no`.  I also think all the filtering stuff is a mess, and there's probably no point adding to it. Especially something like this is so easy to \"client side\" filter, I don't think there's really much gains by supporting it.  (But don't really care either way, just seems like more code)\r\n ",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3ODA5NTg0NA==",
                    "publishedAt": "2018-04-03T01:09:34Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12862#issuecomment-378095844"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6910086?v=4",
                        "login": "GabrielDav"
                    },
                    "body": "@RHavar \r\n\r\n> I think from_me should be a boolean not a string for yes|no\r\n\r\nYes, needs to be fixed. Confusion was caused by ```replaceable``` which can have non binary values.\r\n\r\n>  I also think all the filtering stuff is a mess, and there's probably no point adding to it\r\n\r\nI agree. However, there is no clear solution - either this needs to be marked as obsolete/to remove, or it needs to be updated when adding new output fields. Usually query is added when either:\r\n\r\n- Data extraction have additional cost that can be reduced querying beforehand. This is not the case here since the data needed is already extracted before applying query.\r\n- List is ever expanding. Again, this is not the case because list might change size depending on number of wallets and unused inputs. I would not expect this list to be too large to handle in the future.\r\n\r\nIt would be nice to get additional opinion and potentially create an issue to remove query parameters. But as it stands now the proper way to add new output fields is to add them in query as well to be consistent with intentions of this method.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3ODIxNTQ3NQ==",
                    "publishedAt": "2018-04-03T11:19:26Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12862#issuecomment-378215475"
                }
            ],
            "totalCount": 2
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "0f984fe3af3ff84fffcca4bb68cca43973387664"
                    }
                }
            ],
            "totalCount": 4
        },
        "createdAt": "2018-04-02T19:56:28Z",
        "deletions": 22,
        "id": "MDExOlB1bGxSZXF1ZXN0MTc4OTE3NTQ3",
        "labels": {
            "nodes": [
                {
                    "color": "0052cc",
                    "id": "MDU6TGFiZWw5ODI3OTE3Nw==",
                    "name": "RPC/REST/ZMQ"
                },
                {
                    "color": "08a781",
                    "id": "MDU6TGFiZWwxNDk0MjQ=",
                    "name": "Wallet"
                }
            ],
            "totalCount": 2
        },
        "mergeable": "CONFLICTING",
        "mergedAt": null,
        "number": 12862,
        "state": "OPEN",
        "title": " Add from_me and bip125-replaceable to listunspent and gettransaction",
        "updatedAt": "2018-04-03T19:43:11Z"
    },
    {
        "additions": 114,
        "author": {
            "avatarUrl": "https://avatars3.githubusercontent.com/u/250224?v=4",
            "login": "kallewoof",
            "url": "https://github.com/kallewoof"
        },
        "body": "This PR does not change the behavior. It only adds underlying support for formats beyond 'compressed pubkey' and 'uncompressed pubkey'.\r\n\r\nThe key types are based on the key types in ~~Ethereum~~ Electrum 3.0: https://github.com/spesmilo/electrum/blob/82e88cb89df35288b80dfdbe071da74247351251/RELEASE-NOTES#L95-L108\r\n\r\nThe legacy types `KEY_P2PKH_{UN}COMPRESSED` map to the current WIF format. If used/seen, they indicate that the corresponding public key type is *unknown*, and when imported, they will simply iterate over all types and watch all of them (P2PKH, P2SH-P2WPKH, P2WPKH (bech32), and so on). (Current behavior.)\r\n\r\nWhen one of the other types is used, the current code will behave exactly the same as above. In a future PR, the code will be changed to only import the corresponding type when importing a private key.\r\n\r\nThis is related to #12705, see in particular https://github.com/bitcoin/bitcoin/pull/12705#issuecomment-373973741.\r\n\r\nA BIP proposal for this PR is here: https://github.com/kallewoof/bips/blob/bip-typed-wif/bip-extended-privkey.mediawiki\r\n\r\nCorresponding ML post here: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-April/015870.html",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/250224?v=4",
                        "login": "kallewoof"
                    },
                    "body": "Ping @sipa & @promag",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3ODE2MjE0MQ==",
                    "publishedAt": "2018-04-03T07:57:20Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12869#issuecomment-378162141"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/863730?v=4",
                        "login": "fanquake"
                    },
                    "body": "```\r\nThe key types are based on the key types in Ethereum 3.0: \r\n```\r\n\ud83d\ude2f",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3ODIyMDYyOA==",
                    "publishedAt": "2018-04-03T11:41:03Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12869#issuecomment-378220628"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/5767891?v=4",
                        "login": "instagibbs"
                    },
                    "body": "TIL Ethereum has Segwit.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3ODI4NzkwNg==",
                    "publishedAt": "2018-04-03T15:19:00Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12869#issuecomment-378287906"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/250224?v=4",
                        "login": "kallewoof"
                    },
                    "body": "Oops.. fixed.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3ODQ1NjA5MQ==",
                    "publishedAt": "2018-04-04T02:02:19Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12869#issuecomment-378456091"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "Ideally we would first draft/spec the WIF \"standard\" in the form of a BIP.\r\n\r\nGeneral Concpet ACK",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3ODU3MTU1Mg==",
                    "publishedAt": "2018-04-04T11:43:54Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12869#issuecomment-378571552"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/250224?v=4",
                        "login": "kallewoof"
                    },
                    "body": "> Ideally we would first draft/spec the WIF \"standard\" in the form of a BIP.\r\n\r\nI did. The ~~PR~~ proposal* is here: https://github.com/kallewoof/bips/blob/bip-typed-wif/bip-extended-privkey.mediawiki\r\n\r\nI posted it in the ML but as a reply to the existing thread, here: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-April/015870.html\r\n\r\n(* It is not actually a PR yet.)",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3OTE0NTE4OA==",
                    "publishedAt": "2018-04-06T04:31:29Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12869#issuecomment-379145188"
                }
            ],
            "totalCount": 6
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "ae6095fe64072bf514152498a8a1b214186dc1a6"
                    }
                }
            ],
            "totalCount": 3
        },
        "createdAt": "2018-04-03T07:52:39Z",
        "deletions": 77,
        "id": "MDExOlB1bGxSZXF1ZXN0MTc5MDE5MDk3",
        "labels": {
            "nodes": [
                {
                    "color": "08a781",
                    "id": "MDU6TGFiZWwxNDk0MjQ=",
                    "name": "Wallet"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "number": 12869,
        "state": "OPEN",
        "title": "Extend WIF format with key type",
        "updatedAt": "2018-04-11T08:48:54Z"
    },
    {
        "additions": 33,
        "author": {
            "avatarUrl": "https://avatars0.githubusercontent.com/u/73197?v=4",
            "login": "jamesob",
            "url": "https://github.com/jamesob"
        },
        "body": "As noted in https://github.com/bitcoin/bitcoin/pull/12843, we're currently missing bugs unique to bitcoin-qt during the Travis build because the functional test framework only uses bitcoind (and not bitcoin-qt).\r\n\r\nRun a single Travis job under xvfb for framebuffer virtualization and using bitcoin-qt as the binary. I've also removed the `NEED_XVFB` configuration since our usage of xvfb is outdated [per Travis' docs](https://docs.travis-ci.com/user/gui-and-headless-browsers/#Using-xvfb-to-Run-Tests-That-Require-a-GUI) and the corresponding pre-build step is no longer necessary.",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1063656?v=4",
                        "login": "jnewbery"
                    },
                    "body": "Concept ACK!",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3ODM5MzA0Mw==",
                    "publishedAt": "2018-04-03T20:44:23Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12873#issuecomment-378393043"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "Concept ACK",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3ODQwMDMwMw==",
                    "publishedAt": "2018-04-03T21:09:52Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12873#issuecomment-378400303"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/10217?v=4",
                        "login": "Sjors"
                    },
                    "body": "Concept ACK",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3ODY0NjIyNQ==",
                    "publishedAt": "2018-04-04T15:40:50Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12873#issuecomment-378646225"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/73197?v=4",
                        "login": "jamesob"
                    },
                    "body": "Closing and re-opening in an attempt to get Travis to kick off a build - I was flagged (and then unflagged) as abusing Travis.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3ODY4NjA2Mg==",
                    "publishedAt": "2018-04-04T17:45:15Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12873#issuecomment-378686062"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "@jamesob Try force pushing a change instead (say after changing the commit message) - that should trigger a Travis rebuild. Closing and re-opening an issue will create a notification to followers to I think force pushing is a better way to wake up Travis :-)",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3OTc2ODkzMw==",
                    "publishedAt": "2018-04-09T14:20:42Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12873#issuecomment-379768933"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/73197?v=4",
                        "login": "jamesob"
                    },
                    "body": "@practicalswift I'm really sorry about the spam, but force pushing isn't kicking off a Travis build for this PR (for reasons unknown to me). You can see above that @MarcoFalke had to do the same thing. I'll try opening a new PR next time I'd otherwise have to resort to an open/close. Sorry again for the trouble.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3OTc4OTU5Mw==",
                    "publishedAt": "2018-04-09T15:19:26Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12873#issuecomment-379789593"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "@jamesob I've now restarted the failing Travis build jobs :-)",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3OTc5NTY0MA==",
                    "publishedAt": "2018-04-09T15:37:34Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12873#issuecomment-379795640"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "@jamesob You may want to contact Travis CI support and make sure you're account has not been flagged on their side. That happens and they're usually fixing that quickly after receiving a ticket about it.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3OTc5NjgxNg==",
                    "publishedAt": "2018-04-09T15:41:04Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12873#issuecomment-379796816"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "Concept ACK (needs rebase)",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MDE0OTk1Nw==",
                    "publishedAt": "2018-04-10T15:47:57Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12873#issuecomment-380149957"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/14220652?v=4",
                        "login": "conscott"
                    },
                    "body": "Concept ACK b42a408783b345d3f6c46e26a2d24dd00e1cff70\r\n\r\nSeems one test is failing due to #12863. \r\n\r\nFor the actual [bitcoin-qt job failing](https://travis-ci.org/bitcoin/bitcoin/jobs/367908554) I tried to reproduce errors locally with Xvfd, manually setting BITCOIND to bitcoin-qt, but had no luck (all tests pass). \r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MzU2NzgxNQ==",
                    "publishedAt": "2018-04-23T13:05:19Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12873#issuecomment-383567815"
                }
            ],
            "totalCount": 10
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "15a2f8f7d253db2b95d46ebbce053c6e5aa86b22"
                    }
                }
            ],
            "totalCount": 2
        },
        "createdAt": "2018-04-03T20:41:07Z",
        "deletions": 5,
        "id": "MDExOlB1bGxSZXF1ZXN0MTc5MjEzOTMz",
        "labels": {
            "nodes": [
                {
                    "color": "d4c5f9",
                    "id": "MDU6TGFiZWw2Mjk2MzUxNg==",
                    "name": "Tests"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "number": 12873,
        "state": "OPEN",
        "title": "[ci] Run functional tests using bitcoin-qt in one Travis job",
        "updatedAt": "2018-04-23T13:05:19Z"
    },
    {
        "additions": 45,
        "author": {
            "avatarUrl": "https://avatars3.githubusercontent.com/u/250224?v=4",
            "login": "kallewoof",
            "url": "https://github.com/kallewoof"
        },
        "body": "Declaring a function (`void foo(int bar);`) is default `extern`. The scripted commit cleans up cases of `extern void foo(int bar);` (with scripted diff verification) and the build commit adds a rule to the linters that forbids new code of this kind.",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
                        "login": "promag"
                    },
                    "body": "utACK b4264f2, nice.\r\n\r\nNit, 2nd commit could have same prefix format `build: `.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3ODUzNjc2OA==",
                    "publishedAt": "2018-04-04T09:21:12Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12879#issuecomment-378536768"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/250224?v=4",
                        "login": "kallewoof"
                    },
                    "body": "I tend to use [brackets]. I am trying to bracket the scripted-diff to see if that's accepted too.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3ODU0MDY1MA==",
                    "publishedAt": "2018-04-04T09:35:38Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12879#issuecomment-378540650"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
                        "login": "promag"
                    },
                    "body": "According to @laanwj the widely used format is `foo: `.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3ODU0Mjc3MA==",
                    "publishedAt": "2018-04-04T09:43:51Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12879#issuecomment-378542770"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "Concept ACK. Thanks for adding a lint script to make this cleanup persistent!\r\n\r\nI don't have any suggestions beyond what `shellcheck` suggests:\r\n\r\n```\r\n$ shellcheck contrib/devtools/lint-extern-fundecl.sh\r\n\r\nIn lint-extern-fundecl.sh line 9:\r\nHEADER_ID_PREFIX=\"BITCOIN_\"\r\n^-- SC2034: HEADER_ID_PREFIX appears unused. Verify it or export it.\r\n\r\n\r\nIn lint-extern-fundecl.sh line 10:\r\nHEADER_ID_SUFFIX=\"_H\"\r\n^-- SC2034: HEADER_ID_SUFFIX appears unused. Verify it or export it.\r\n\r\n\r\nIn lint-extern-fundecl.sh line 17:\r\n    if [[ $(egrep -c \"extern ([^_\\\"\\(]+)\\(\" ${SOURCE_FILE}) != 0 ]]; then\r\n            ^-- SC2196: egrep is non-standard and deprecated. Use grep -E instead.\r\n                                            ^-- SC2086: Double quote to prevent globbing and word splitting.\r\n```\r\n\r\nSuggested changes:\r\n\r\n```diff\r\n@@ -6,15 +6,12 @@\r\n #\r\n # Check unnecessary extern keyword usage for function declarations.\r\n\r\n-HEADER_ID_PREFIX=\"BITCOIN_\"\r\n-HEADER_ID_SUFFIX=\"_H\"\r\n-\r\n REGEXP_EXCLUDE_FILES_WITH_PREFIX=\"src/(crypto/ctaes/|leveldb/|secp256k1/|tinyformat.h|univalue/)\"\r\n\r\n EXIT_CODE=0\r\n for SOURCE_FILE in $(git ls-files -- \"*.h\" \"*.cpp\" | grep -vE \"^${REGEXP_EXCLUDE_FILES_WITH_PREFIX}\")\r\n do\r\n-    if [[ $(egrep -c \"extern ([^_\\\"\\(]+)\\(\" ${SOURCE_FILE}) != 0 ]]; then\r\n+    if [[ $(grep -E -c \"extern ([^_\\\"\\(]+)\\(\" \"${SOURCE_FILE}\") != 0 ]]; then\r\n         echo \"${SOURCE_FILE} is using unnecessary extern keyword for function declarations\"\r\n         EXIT_CODE=1\r\n     fi\r\n```",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3ODU1Njg3Mg==",
                    "publishedAt": "2018-04-04T10:39:23Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12879#issuecomment-378556872"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "Like the `shellcheck` suggestions? Please review #12871 to help bring `shellcheck` to Travis :-)",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3ODU1NzYwNw==",
                    "publishedAt": "2018-04-04T10:42:22Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12879#issuecomment-378557607"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
                        "login": "MarcoFalke"
                    },
                    "body": "Not sure if this really needs a scripted diff and lint script. Seems overkill. Just remove them in one commit and mention that in the commit message.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3ODYxNTA2MQ==",
                    "publishedAt": "2018-04-04T14:15:29Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12879#issuecomment-378615061"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "@MarcoFalke Why remove the lint script? The lint script makes this improvement persistent. What would be good reasons to switch to a temporary fix when the permanent fix is already in place?\r\n\r\nA temporary fix in this case will generate follow-up PRs in the future that will require review time. Better let Travis take care of finding trivial mechanical issues via the lint script so that human reviewers can focus on the important higher level stuff.\r\n\r\nThe lint script is already written, it is really easy to read and the logic is so simple that the script is very unlikely to generate false positives or any maintenance burden going forward. Looks like an obvious win to me? :-)",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3ODYyMDg5Mw==",
                    "publishedAt": "2018-04-04T14:32:01Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12879#issuecomment-378620893"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
                        "login": "MarcoFalke"
                    },
                    "body": "There is no harm in having the `extern` there. It is just a minor style change. With the same rationale we could start enforcing that all code is clang formatted, but that would not be maintainable. The linters are there to catch potential bugs and documentation inconsistencies, not minor style issues.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3ODYyNzY1OA==",
                    "publishedAt": "2018-04-04T14:49:51Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12879#issuecomment-378627658"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "@MarcoFalke I'm not sure that is a fair comparison. A more fair comparison would be: assuming that the entire code base was 100 % clang formatted, wouldn't it then make sense to have a linter that made sure that it stayed that way and no clang formatting violations were introduced in subsequent PR:s?\r\n\r\nAutomation is our friend :-)",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3ODYzNTIxMA==",
                    "publishedAt": "2018-04-04T15:09:28Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12879#issuecomment-378635210"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
                        "login": "MarcoFalke"
                    },
                    "body": "Adding a script of 22 lines that needs to be maintained (*) and run on every pull request is just not worth it. (Again having the redundant `extern` has zero harm or cost, so the trade-offs are clear, imo)\r\n\r\n(*) See how you have already two comments for the script.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3ODc2MDA1NQ==",
                    "publishedAt": "2018-04-04T22:05:00Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12879#issuecomment-378760055"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "@MarcoFalke My review comments on the script just underscores my point on how automatic linting frees up review time for humans \u2013 all my review comments on this PR would all have been made automatically by `shellcheck` (and thus fixed before human review) once #12871 is merged.\r\n\r\nI agree that redundant code has no \"technical harm\", but if automatic linting can guarantee that PR:s reaching human review are free from redundant code then I think that is an easy win.\r\n\r\nPerhaps we differ in the assumptions we make?\r\n\r\nAssumptions I make:\r\n* Computing time is cheap (i.e. a few ms extra runtime in Travis doesn't matter).\r\n* We only add linting scripts that exhibit a low rate of false positives.\r\n* Review time is more scarce than developer time.\r\n* We prefer that issues that humans are likely to point out during manual code review (such as `Nit: I think you have a redundant extern there`) to be fixed before the human review process takes place.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3ODgyNjEyOA==",
                    "publishedAt": "2018-04-05T05:42:14Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12879#issuecomment-378826128"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
                        "login": "promag"
                    },
                    "body": "> and run on every pull request is just not worth it\r\n\r\n@MarcoFalke IMO that should not be an argument against.\r\n\r\n> Again having the redundant extern has zero harm or cost\r\n\r\nI'd only say \"cost\", because wrong indentation or code format also has zero harm.\r\n\r\nGenerally I support mechanisms to keep the code consistent. But I kind of understand @MarcoFalke points as this is not an usual case. I would totally support this if the compiler/linker had a flag to warn/error these unnecessary extern usages.\r\n\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3ODg2NjY1Ng==",
                    "publishedAt": "2018-04-05T08:56:21Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12879#issuecomment-378866656"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/250224?v=4",
                        "login": "kallewoof"
                    },
                    "body": "@MarcoFalke Generally, anything that could convince someone to make a PR, that could be automated, and that is repeated in new code, is worth automating. This has zero cost (and can probably even be same-binary verified), but will probably save PR time, even with the maintenance of that script (it's basically the same as the include-guards one, so if it breaks, the other one does too, most likely).\r\n\r\n@practicalswift Cool about shellchecker. Will check out the PR.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3OTExNTg3MA==",
                    "publishedAt": "2018-04-06T00:33:50Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12879#issuecomment-379115870"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/250224?v=4",
                        "login": "kallewoof"
                    },
                    "body": "@promag That must be new (prefer `foo:`)! Will switch to that style. (Also did do so in these commits.)",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3OTE0NjE2NA==",
                    "publishedAt": "2018-04-06T04:40:55Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12879#issuecomment-379146164"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "ACK 4d3f609481b6214ff2ce4de44ed40ad66e79e630",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3OTE1NDgxNQ==",
                    "publishedAt": "2018-04-06T05:47:15Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12879#issuecomment-379154815"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "> There is no harm in having the extern there. It is just a minor style change. With the same rationale we could start enforcing that all code is clang formatted, but that would not be maintainable. The linters are there to catch potential bugs and documentation inconsistencies, not minor style issues.\r\n\r\nI agree. Let's not over-burden the projects will all kinds of linters for trivial things. This seems over-zealous. There's no risk that a redundant 'extern' causes any actual bugs. It doesn't even cause confusion to developers reading the code.\r\n\r\nFYI I held back on writing `doc/developer-notes.md` for a long time because I was afraid of things like this. Everyone has their pet issues with code style. In the end I did, but added a clear rationale for everything mentioned. The rationale should always serve to avoid bugs and vulnerabilities, as well as other problems visible to end users.\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MDE5NzkwNQ==",
                    "publishedAt": "2018-04-10T18:16:04Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12879#issuecomment-380197905"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
                        "login": "MarcoFalke"
                    },
                    "body": "I'd also suggest to get rid of the scripted diff, it is easier to review without having to also review the scripted diff.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MDIwMzgyOA==",
                    "publishedAt": "2018-04-10T18:35:09Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12879#issuecomment-380203828"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/250224?v=4",
                        "login": "kallewoof"
                    },
                    "body": "@laanwj \r\n\r\n> I agree. Let's not over-burden the projects will all kinds of linters for trivial things. This seems over-zealous. There's no risk that a redundant 'extern' causes any actual bugs. It doesn't even cause confusion to developers reading the code.\r\n\r\nThat's kind of the point, in a way. Using `extern` when you don't need to has no side effects, which means a lot of people think they have to use it. By forbidding it in new code, we free up time from reviewing other people who come in later to \"fix\" the problem. It's trivial to fix and perhaps even delightfully educational.\r\n\r\n@MarcoFalke \r\n\r\n> I'd also suggest to get rid of the scripted diff, it is easier to review without having to also review the scripted diff.\r\n\r\nI thought scripted diffs were implemented to make it *easier* to review, as you have an anchor in code that defines what you are changing. Is that not why they exist?\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MDMyNTg3NQ==",
                    "publishedAt": "2018-04-11T04:47:11Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12879#issuecomment-380325875"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "Agree with @kallewoof 100 %.\r\n\r\nI don't understand the sudden dislike for regression tests and scripted-diffs :-)\r\n\r\nI fail to see how this regression test could be a bad thing. Automation is our friend.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MDMzMzI4MQ==",
                    "publishedAt": "2018-04-11T05:38:19Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12879#issuecomment-380333281"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/7133040?v=4",
                        "login": "ryanofsky"
                    },
                    "body": "I agree with kallewoof and practicalswift. Scripted diffs can guard against unintentended changes, in addition to making prs easier to review. If you only want to review part of a PR, it seems easy enough to say \"utACK for code changes but I didn't review the script\". I also like all the linters (though I would encourage someone would add a \"make lint\" command so they are easier to run locally).",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MDQ2MDAzNg==",
                    "publishedAt": "2018-04-11T13:53:49Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12879#issuecomment-380460036"
                }
            ],
            "totalCount": 20
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "4d3f609481b6214ff2ce4de44ed40ad66e79e630"
                    }
                }
            ],
            "totalCount": 2
        },
        "createdAt": "2018-04-04T08:03:13Z",
        "deletions": 26,
        "id": "MDExOlB1bGxSZXF1ZXN0MTc5MzEwNTk4",
        "labels": {
            "nodes": [
                {
                    "color": "E6F6D6",
                    "id": "MDU6TGFiZWwxMzU5NjE=",
                    "name": "Refactoring"
                },
                {
                    "color": "ffffee",
                    "id": "MDU6TGFiZWwyMzE5OTQ1NTE=",
                    "name": "Scripts and tools"
                }
            ],
            "totalCount": 2
        },
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "number": 12879,
        "state": "OPEN",
        "title": "[scripted-diff] No extern function declarations",
        "updatedAt": "2018-04-11T14:03:23Z"
    },
    {
        "additions": 6,
        "author": {
            "avatarUrl": "https://avatars2.githubusercontent.com/u/5404807?v=4",
            "login": "murrayn",
            "url": "https://github.com/murrayn"
        },
        "body": "Just a few optimizations to bech32::Decode():\r\n\r\n1) return sooner if a mix of upper and lowercase is seen\r\n2) get rid of subsequent '(c < 33 || c > 126)' check which is redundant (already performed above)\r\n3) get rid of LowerCase(). Does tolower() not perform the same function?\r\n4) add a couple more bech32 tests (mixed-case)\r\n",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "`LowerCase()` and `std::tolower()` are not equivalent. `std::tolower()` takes the currently installed C locale into account.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3ODU2NDcyMg==",
                    "publishedAt": "2018-04-04T11:13:39Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12881#issuecomment-378564722"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/863730?v=4",
                        "login": "fanquake"
                    },
                    "body": "@murrayn After fixing any nits, please also [squash your commits](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#squashing-commits).",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3ODc5MTMxOA==",
                    "publishedAt": "2018-04-05T01:06:54Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12881#issuecomment-378791318"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "> LowerCase() and std::tolower() are not equivalent. std::tolower() takes the currently installed C locale into account.\r\n\r\nThanks for catching this. We should be extremely careful to not introduce locale dependencies in the low-level string parsing functions. We've had serious problems with those in the past. This can result in country-specific bugs...",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3ODg0NDI0NA==",
                    "publishedAt": "2018-04-05T07:25:16Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12881#issuecomment-378844244"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/548488?v=4",
                        "login": "sipa"
                    },
                    "body": "Please don't overthink this. Decoding addresses is hardly relevant (I don't think anyone would notice if they were 100x slower). My goal when writing this was more clarity and simplicity than speed, though I'm obviously not opposed to performance improvements if they don't conflict with those goals.\n\nI am interested in whether the additional branches don't make performance worse though. My gut feeling is that they impact performance more than comparisons.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3ODkwOTkxOA==",
                    "publishedAt": "2018-04-05T11:50:32Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12881#issuecomment-378909918"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/5404807?v=4",
                        "login": "murrayn"
                    },
                    "body": "@sipa Thanks for the feedback. I've reworked the code again to reflect your input.\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3OTEyODgwNw==",
                    "publishedAt": "2018-04-06T02:10:30Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12881#issuecomment-379128807"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
                        "login": "MarcoFalke"
                    },
                    "body": "To get rid of the merge commit, please squash your commits according to https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#squashing-commits",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MDU3MTM3NQ==",
                    "publishedAt": "2018-04-11T19:38:20Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12881#issuecomment-380571375"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/5404807?v=4",
                        "login": "murrayn"
                    },
                    "body": "Not sure if this PR is stalled due to the earlier comment about benchmarks...I didn't think benchmarks would be as interesting after my most recent commit, in which the code was more straightforward. Just in case, I have benchmarked:\r\n\r\n    if (c >= 'a' && c <= 'z') lower = 1;\r\n    else if (c >= 'A' && c <= 'Z') upper = 1;\r\n    else if (c < 33 || c > 126) return 0;\r\n\r\nversus\r\n\r\n    if (c < 33 || c > 126) return 0;\r\n    if (c >= 'a' && c <= 'z') lower = 1;\r\n    if (c >= 'A' && c <= 'Z') upper = 1;\r\n\r\nand my results show the former is significantly faster; however, with -O2 compiler optimization enabled they benchmark identically, which isn't surprising.\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MzAzOTA4OQ==",
                    "publishedAt": "2018-04-20T09:22:46Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12881#issuecomment-383039089"
                }
            ],
            "totalCount": 7
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "60f61f99529f54f85c847d61122c70c0358ebecc"
                    }
                }
            ],
            "totalCount": 1
        },
        "createdAt": "2018-04-04T10:39:45Z",
        "deletions": 3,
        "id": "MDExOlB1bGxSZXF1ZXN0MTc5MzQ5Mzkx",
        "labels": {
            "nodes": [
                {
                    "color": "E6F6D6",
                    "id": "MDU6TGFiZWwxMzU5NjE=",
                    "name": "Refactoring"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "number": 12881,
        "state": "OPEN",
        "title": "Tighten up bech32::Decode(); add tests.",
        "updatedAt": "2018-04-20T09:22:46Z"
    },
    {
        "additions": 55,
        "author": {
            "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
            "login": "practicalswift",
            "url": "https://github.com/practicalswift"
        },
        "body": "Fix lock-order-inversion (potential deadlock) in `DoS_tests`. Reported by Clang's TSAN.\r\n\r\nMakes `src/test/test_bitcoin` pass also when compiled with TreadSanitizer (`./configure --with-sanitizers=thread` with `clang`).",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/863730?v=4",
                        "login": "fanquake"
                    },
                    "body": "@practicalswift Can you include some more information about recreating this? I've done a naive:\r\n```\r\n./autogen.sh && ./configure --with-sanitizers=thread && make check -j6\r\n```\r\n(macOS 10.13.4 with XCode 9.3) and am having trouble recreating the issue.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MTUxMjg2OQ==",
                    "publishedAt": "2018-04-16T07:59:05Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12882#issuecomment-381512869"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "@fanquake I just verified using clang version 7.0.0 (trunk) under Linux using the following commands:\r\n\r\n```\r\n$ git clone https://github.com/bitcoin/bitcoin\r\n$ cd bitcoin/\r\n$ ./autogen.sh\r\n$ CC=clang-7 CXX=clang++-7 ./configure --disable-asm --enable-debug --with-sanitizers=thread --disable-wallet\r\n$ make check\r\n\u2026\r\nSUMMARY: ThreadSanitizer: lock-order-inversion (potential deadlock) (/root/repro/bitcoin/src/test/test_bitcoin+0xc5897) in pthread_mutex_lock\r\n```\r\n\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MTUzMDYxOQ==",
                    "publishedAt": "2018-04-16T09:04:43Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12882#issuecomment-381530619"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "@sipa As a fellow friend of the sanitizers (#9743, #9512), would you mind reviewing this one? :-)",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MTcyMjA2OQ==",
                    "publishedAt": "2018-04-16T19:32:08Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12882#issuecomment-381722069"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
                        "login": "MarcoFalke"
                    },
                    "body": "It could help reviewers if you explained why it is a deadlock in the OP and then also describe why your patch fixes it.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MTczMDgwMw==",
                    "publishedAt": "2018-04-16T20:02:03Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12882#issuecomment-381730803"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "@MarcoFalke Ah, sorry: the reason for the potential deadlock warning (lock-order-inversion) is simply that the lock order between `cs_main` and `foo->cs_sendProcessing` differed between tests prior to this commit.\r\n\r\nAfter this commit the following lock order is used:\r\n\r\n```\r\n1. LOCK(cs_main);\r\n2. LOCK(foo->cs_sendProcessing);\r\n```\r\n\r\nPrior to this commit the following lock order was also used:\r\n\r\n```\r\n1. LOCK(foo->cs_sendProcessing);\r\n2. LOCK(cs_main);\r\n```\r\n\r\nThis is part of the `-fsanitize=thread` output:\r\n\r\n```\r\nWARNING: ThreadSanitizer: lock-order-inversion (potential deadlock) (pid=20357)\r\n  Cycle in lock order graph: M6554537 (0x55cf759864f8) => M453033967624932984 (0x000000000000) => M6554537\r\n\r\n  Mutex M453033967624932984 acquired here while holding mutex M6554537 in main thread:\r\n  \u2026\r\n    #8 DoS_tests::outbound_slow_chain_eviction::test_method() /\u2026/bitcoin/src/test/DoS_tests.cpp:74:5 (test_bitcoin+0x376064)\r\n    #9 DoS_tests::outbound_slow_chain_eviction_invoker() /\u2026/bitcoin/src/test/DoS_tests.cpp:55:1 (test_bitcoin+0x375782)\r\n  \u2026\r\n  Mutex M6554537 acquired here while holding mutex M453033967624932984 in main thread:\r\n  \u2026\r\n    #8 PeerLogicValidation::InitializeNode(CNode*) /\u2026/bitcoin/src/net_processing.cpp:581:9 (test_bitcoin+0x8b955c)\r\n    #9 DoS_tests::DoS_banning::test_method() /\u2026/bitcoin/src/test/DoS_tests.cpp:201:16 (test_bitcoin+0x379a18)\r\n    #10 DoS_tests::DoS_banning_invoker() /\u2026/bitcoin/src/test/DoS_tests.cpp:178:1 (test_bitcoin+0x378e42)\r\n```",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MTczOTM0NQ==",
                    "publishedAt": "2018-04-16T20:31:57Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12882#issuecomment-381739345"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/863730?v=4",
                        "login": "fanquake"
                    },
                    "body": "Thanks @practicalswift.\r\nI've recreated the potential deadlock on Ubuntu using clang 6.0.0-1ubuntu2 (tags/RELEASE_600/final):\r\n```\r\nRunning tests: DoS_tests from test/DoS_tests.cpp\r\nRunning 6 test cases...\r\nEntering test module \"Bitcoin Test Suite\"\r\ntest/DoS_tests.cpp(45): Entering test suite \"DoS_tests\"\r\ntest/DoS_tests.cpp(55): Entering test case \"outbound_slow_chain_eviction\"\r\ntest/DoS_tests.cpp(55): Leaving test case \"outbound_slow_chain_eviction\"; testing time: 320057us\r\ntest/DoS_tests.cpp(109): Entering test case \"stale_tip_peer_management\"\r\ntest/DoS_tests.cpp(109): Leaving test case \"stale_tip_peer_management\"; testing time: 254718us\r\ntest/DoS_tests.cpp(178): Entering test case \"DoS_banning\"\r\n==================\r\nWARNING: ThreadSanitizer: lock-order-inversion (potential deadlock) (pid=14733)\r\n  Cycle in lock order graph: M131611 (0x556f72060500) => M131679 (0x7ffe31689738) => M131611\r\n\r\n  Mutex M131679 acquired here while holding mutex M131611 in main thread:\r\n    #0 pthread_mutex_lock ??:? (test_bitcoin+0xcb457)\r\n    #1 __gthread_mutex_lock(pthread_mutex_t*) /usr/bin/../lib/gcc/x86_64-linux-gnu/8.0.1/../../../../include/x86_64-linux-gnu/c++/8.0.1/bits/gthr-default.h:748 (test_bitcoin+0x158dc3)\r\n    #2 __gthread_recursive_mutex_lock(pthread_mutex_t*) /usr/bin/../lib/gcc/x86_64-linux-gnu/8.0.1/../../../../include/x86_64-linux-gnu/c++/8.0.1/bits/gthr-default.h:810 (test_bitcoin+0x158d45)\r\n    #3 std::recursive_mutex::lock() /usr/bin/../lib/gcc/x86_64-linux-gnu/8.0.1/../../../../include/c++/8.0.1/mutex:107 (test_bitcoin+0x15e415)\r\n    #4 AnnotatedMixin<std::recursive_mutex>::lock() /home/ubuntu/bitcoin/src/./sync.h:59 (test_bitcoin+0x15e395)\r\n    #5 std::unique_lock<CCriticalSection>::lock() /usr/bin/../lib/gcc/x86_64-linux-gnu/8.0.1/../../../../include/c++/8.0.1/bits/std_mutex.h:267 (test_bitcoin+0x15e2fe)\r\n    #6 CCriticalBlock::Enter(char const*, char const*, int) /home/ubuntu/bitcoin/src/./sync.h:128 (test_bitcoin+0x15de07)\r\n    #7 CCriticalBlock /home/ubuntu/bitcoin/src/./sync.h:149 (test_bitcoin+0x1597c7)\r\n    #8 DoS_tests::outbound_slow_chain_eviction::test_method() /home/ubuntu/bitcoin/src/test/DoS_tests.cpp:74 (test_bitcoin+0x3a90a3)\r\n    #9 DoS_tests::outbound_slow_chain_eviction_invoker() /home/ubuntu/bitcoin/src/test/DoS_tests.cpp:55 (test_bitcoin+0x3a863e)\r\n    #10 boost::detail::function::void_function_invoker0<void (*)(), void>::invoke(boost::detail::function::function_buffer&) /usr/include/boost/function/function_template.hpp:118 (test_bitcoin+0x1dde4a)\r\n    #11 boost::detail::function::function_obj_invoker0<boost::detail::forward, int>::invoke(boost::detail::function::function_buffer&) ??:? (libboost_unit_test_framework.so.1.65.1+0x4b2cd)\r\n    #12 __libc_start_main ??:? (libc.so.6+0x21b96)\r\n\r\n    Hint: use TSAN_OPTIONS=second_deadlock_stack=1 to get more informative warning message\r\n\r\n  Mutex M131611 acquired here while holding mutex M131679 in main thread:\r\n    #0 pthread_mutex_lock ??:? (test_bitcoin+0xcb457)\r\n    #1 __gthread_mutex_lock(pthread_mutex_t*) /usr/bin/../lib/gcc/x86_64-linux-gnu/8.0.1/../../../../include/x86_64-linux-gnu/c++/8.0.1/bits/gthr-default.h:748 (test_bitcoin+0x158dc3)\r\n    #2 __gthread_recursive_mutex_lock(pthread_mutex_t*) /usr/bin/../lib/gcc/x86_64-linux-gnu/8.0.1/../../../../include/x86_64-linux-gnu/c++/8.0.1/bits/gthr-default.h:810 (test_bitcoin+0x158d45)\r\n    #3 std::recursive_mutex::lock() /usr/bin/../lib/gcc/x86_64-linux-gnu/8.0.1/../../../../include/c++/8.0.1/mutex:107 (test_bitcoin+0x15e415)\r\n    #4 AnnotatedMixin<std::recursive_mutex>::lock() /home/ubuntu/bitcoin/src/./sync.h:59 (test_bitcoin+0x15e395)\r\n    #5 std::unique_lock<CCriticalSection>::lock() /usr/bin/../lib/gcc/x86_64-linux-gnu/8.0.1/../../../../include/c++/8.0.1/bits/std_mutex.h:267 (test_bitcoin+0x15e2fe)\r\n    #6 CCriticalBlock::Enter(char const*, char const*, int) /home/ubuntu/bitcoin/src/./sync.h:128 (test_bitcoin+0x15de07)\r\n    #7 CCriticalBlock /home/ubuntu/bitcoin/src/./sync.h:149 (test_bitcoin+0x1597c7)\r\n    #8 PeerLogicValidation::InitializeNode(CNode*) /home/ubuntu/bitcoin/src/net_processing.cpp:583 (test_bitcoin+0x92b76c)\r\n    #9 DoS_tests::DoS_banning::test_method() /home/ubuntu/bitcoin/src/test/DoS_tests.cpp:201 (test_bitcoin+0x3acf87)\r\n    #10 DoS_tests::DoS_banning_invoker() /home/ubuntu/bitcoin/src/test/DoS_tests.cpp:178 (test_bitcoin+0x3ac22e)\r\n    #11 boost::detail::function::void_function_invoker0<void (*)(), void>::invoke(boost::detail::function::function_buffer&) /usr/include/boost/function/function_template.hpp:118 (test_bitcoin+0x1dde4a)\r\n    #12 boost::detail::function::function_obj_invoker0<boost::detail::forward, int>::invoke(boost::detail::function::function_buffer&) ??:? (libboost_unit_test_framework.so.1.65.1+0x4b2cd)\r\n    #13 __libc_start_main ??:? (libc.so.6+0x21b96)\r\n\r\nSUMMARY: ThreadSanitizer: lock-order-inversion (potential deadlock) ??:? in pthread_mutex_lock\r\n==================\r\n==================\r\nWARNING: ThreadSanitizer: lock-order-inversion (potential deadlock) (pid=14733)\r\n  Cycle in lock order graph: M131611 (0x556f72060500) => M131679 (0x7ffe31689738) => M131611\r\n\r\n  Mutex M131679 acquired here while holding mutex M131611 in main thread:\r\n    #0 pthread_mutex_lock ??:? (test_bitcoin+0xcb457)\r\n    #1 __gthread_mutex_lock(pthread_mutex_t*) /usr/bin/../lib/gcc/x86_64-linux-gnu/8.0.1/../../../../include/x86_64-linux-gnu/c++/8.0.1/bits/gthr-default.h:748 (test_bitcoin+0x158dc3)\r\n    #2 __gthread_recursive_mutex_lock(pthread_mutex_t*) /usr/bin/../lib/gcc/x86_64-linux-gnu/8.0.1/../../../../include/x86_64-linux-gnu/c++/8.0.1/bits/gthr-default.h:810 (test_bitcoin+0x158d45)\r\n    #3 std::recursive_mutex::lock() /usr/bin/../lib/gcc/x86_64-linux-gnu/8.0.1/../../../../include/c++/8.0.1/mutex:107 (test_bitcoin+0x15e415)\r\n    #4 AnnotatedMixin<std::recursive_mutex>::lock() /home/ubuntu/bitcoin/src/./sync.h:59 (test_bitcoin+0x15e395)\r\n    #5 std::unique_lock<CCriticalSection>::lock() /usr/bin/../lib/gcc/x86_64-linux-gnu/8.0.1/../../../../include/c++/8.0.1/bits/std_mutex.h:267 (test_bitcoin+0x15e2fe)\r\n    #6 CCriticalBlock::Enter(char const*, char const*, int) /home/ubuntu/bitcoin/src/./sync.h:128 (test_bitcoin+0x15de07)\r\n    #7 CCriticalBlock /home/ubuntu/bitcoin/src/./sync.h:149 (test_bitcoin+0x1597c7)\r\n    #8 DoS_tests::outbound_slow_chain_eviction::test_method() /home/ubuntu/bitcoin/src/test/DoS_tests.cpp:74 (test_bitcoin+0x3a90a3)\r\n    #9 DoS_tests::outbound_slow_chain_eviction_invoker() /home/ubuntu/bitcoin/src/test/DoS_tests.cpp:55 (test_bitcoin+0x3a863e)\r\n    #10 boost::detail::function::void_function_invoker0<void (*)(), void>::invoke(boost::detail::function::function_buffer&) /usr/include/boost/function/function_template.hpp:118 (test_bitcoin+0x1dde4a)\r\n    #11 boost::detail::function::function_obj_invoker0<boost::detail::forward, int>::invoke(boost::detail::function::function_buffer&) ??:? (libboost_unit_test_framework.so.1.65.1+0x4b2cd)\r\n    #12 __libc_start_main ??:? (libc.so.6+0x21b96)\r\n\r\n    Hint: use TSAN_OPTIONS=second_deadlock_stack=1 to get more informative warning message\r\n\r\n  Mutex M131611 acquired here while holding mutex M131679 in main thread:\r\n    #0 pthread_mutex_lock ??:? (test_bitcoin+0xcb457)\r\n    #1 __gthread_mutex_lock(pthread_mutex_t*) /usr/bin/../lib/gcc/x86_64-linux-gnu/8.0.1/../../../../include/x86_64-linux-gnu/c++/8.0.1/bits/gthr-default.h:748 (test_bitcoin+0x158dc3)\r\n    #2 __gthread_recursive_mutex_lock(pthread_mutex_t*) /usr/bin/../lib/gcc/x86_64-linux-gnu/8.0.1/../../../../include/x86_64-linux-gnu/c++/8.0.1/bits/gthr-default.h:810 (test_bitcoin+0x158d45)\r\n    #3 std::recursive_mutex::lock() /usr/bin/../lib/gcc/x86_64-linux-gnu/8.0.1/../../../../include/c++/8.0.1/mutex:107 (test_bitcoin+0x15e415)\r\n    #4 AnnotatedMixin<std::recursive_mutex>::lock() /home/ubuntu/bitcoin/src/./sync.h:59 (test_bitcoin+0x15e395)\r\n    #5 std::unique_lock<CCriticalSection>::lock() /usr/bin/../lib/gcc/x86_64-linux-gnu/8.0.1/../../../../include/c++/8.0.1/bits/std_mutex.h:267 (test_bitcoin+0x15e2fe)\r\n    #6 CCriticalBlock::Enter(char const*, char const*, int) /home/ubuntu/bitcoin/src/./sync.h:128 (test_bitcoin+0x15de07)\r\n    #7 CCriticalBlock /home/ubuntu/bitcoin/src/./sync.h:149 (test_bitcoin+0x1597c7)\r\n    #8 PeerLogicValidation::InitializeNode(CNode*) /home/ubuntu/bitcoin/src/net_processing.cpp:583 (test_bitcoin+0x92b76c)\r\n    #9 DoS_tests::DoS_banning::test_method() /home/ubuntu/bitcoin/src/test/DoS_tests.cpp:201 (test_bitcoin+0x3acf87)\r\n    #10 DoS_tests::DoS_banning_invoker() /home/ubuntu/bitcoin/src/test/DoS_tests.cpp:178 (test_bitcoin+0x3ac22e)\r\n    #11 boost::detail::function::void_function_invoker0<void (*)(), void>::invoke(boost::detail::function::function_buffer&) /usr/include/boost/function/function_template.hpp:118 (test_bitcoin+0x1dde4a)\r\n    #12 boost::detail::function::function_obj_invoker0<boost::detail::forward, int>::invoke(boost::detail::function::function_buffer&) ??:? (libboost_unit_test_framework.so.1.65.1+0x4b2cd)\r\n    #13 __libc_start_main ??:? (libc.so.6+0x21b96)\r\n\r\nSUMMARY: ThreadSanitizer: lock-order-inversion (potential deadlock) ??:? in pthread_mutex_lock\r\n==================\r\ntest/DoS_tests.cpp(178): Leaving test case \"DoS_banning\"; testing time: 148936us\r\ntest/DoS_tests.cpp(224): Entering test case \"DoS_banscore\"\r\ntest/DoS_tests.cpp(224): Leaving test case \"DoS_banscore\"; testing time: 117896us\r\ntest/DoS_tests.cpp(261): Entering test case \"DoS_bantime\"\r\ntest/DoS_tests.cpp(261): Leaving test case \"DoS_bantime\"; testing time: 109843us\r\ntest/DoS_tests.cpp(304): Entering test case \"DoS_mapOrphans\"\r\ntest/DoS_tests.cpp(304): Leaving test case \"DoS_mapOrphans\"; testing time: 2757430us\r\ntest/DoS_tests.cpp(45): Leaving test suite \"DoS_tests\"; testing time: 3709153us\r\nLeaving test module \"Bitcoin Test Suite\"; testing time: 3709218us\r\n\r\n*** No errors detected\r\nThreadSanitizer: reported 2 warnings\r\n```\r\nCan confirm that this patch make the warning disappear. ",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MTg0MzYzNQ==",
                    "publishedAt": "2018-04-17T05:08:31Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12882#issuecomment-381843635"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
                        "login": "MarcoFalke"
                    },
                    "body": "So what exactly needs `cs_sendProcessing` and why is it not scoped on that?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MTk5MDY2MQ==",
                    "publishedAt": "2018-04-17T13:23:48Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12882#issuecomment-381990661"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "@MarcoFalke `SendMessages(\u2026)` requires holding `cs_sendProcessing`, right?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MjAwMjMzMQ==",
                    "publishedAt": "2018-04-17T13:58:01Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12882#issuecomment-382002331"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
                        "login": "MarcoFalke"
                    },
                    "body": "Can't vouch for that, but it seems so.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MjAwNjQ0MQ==",
                    "publishedAt": "2018-04-17T14:10:04Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12882#issuecomment-382006441"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
                        "login": "MarcoFalke"
                    },
                    "body": "@practicalswift Mind to update according to my suggestion?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MjUwOTkyMg==",
                    "publishedAt": "2018-04-18T19:57:36Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12882#issuecomment-382509922"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "@MarcoFalke Do you mean with more narrowly scoped locks? Something like this?\r\n\r\n```diff\r\ndiff --git a/src/net_processing.h b/src/net_processing.h\r\nindex 195d0d2..6802887 100644\r\n--- a/src/net_processing.h\r\n+++ b/src/net_processing.h\r\n@@ -72,7 +72,7 @@ public:\r\n     * @param[in]   interrupt       Interrupt condition for processing threads\r\n     * @return                      True if there is more work to be done\r\n     */\r\n-    bool SendMessages(CNode* pto, std::atomic<bool>& interrupt) override;\r\n+    bool SendMessages(CNode* pto, std::atomic<bool>& interrupt) override EXCLUSIVE_LOCKS_REQUIRED(pto->cs_sendProcessing);\r\n\r\n     /** Consider evicting an outbound peer based on the amount of time they've been behind our tip */\r\n     void ConsiderEviction(CNode *pto, int64_t time_in_seconds);\r\ndiff --git a/src/test/DoS_tests.cpp b/src/test/DoS_tests.cpp\r\nindex abc31e6..3d1ac7a 100644\r\n--- a/src/test/DoS_tests.cpp\r\n+++ b/src/test/DoS_tests.cpp\r\n@@ -66,25 +66,40 @@ BOOST_AUTO_TEST_CASE(outbound_slow_chain_eviction)\r\n     dummyNode1.fSuccessfullyConnected = true;\r\n\r\n     // This test requires that we have a chain with non-zero work.\r\n-    LOCK(cs_main);\r\n-    BOOST_CHECK(chainActive.Tip() != nullptr);\r\n-    BOOST_CHECK(chainActive.Tip()->nChainWork > 0);\r\n+    {\r\n+        LOCK(cs_main);\r\n+        BOOST_CHECK(chainActive.Tip() != nullptr);\r\n+        BOOST_CHECK(chainActive.Tip()->nChainWork > 0);\r\n+    }\r\n\r\n     // Test starts here\r\n-    LOCK(dummyNode1.cs_sendProcessing);\r\n-    peerLogic->SendMessages(&dummyNode1, interruptDummy); // should result in getheaders\r\n-    LOCK(dummyNode1.cs_vSend);\r\n-    BOOST_CHECK(dummyNode1.vSendMsg.size() > 0);\r\n-    dummyNode1.vSendMsg.clear();\r\n+    {\r\n+        LOCK2(cs_main, dummyNode1.cs_sendProcessing);\r\n+        peerLogic->SendMessages(&dummyNode1, interruptDummy); // should result in getheaders\r\n+    }\r\n+    {\r\n+        LOCK2(cs_main, dummyNode1.cs_vSend);\r\n+        BOOST_CHECK(dummyNode1.vSendMsg.size() > 0);\r\n+        dummyNode1.vSendMsg.clear();\r\n+    }\r\n\r\n     int64_t nStartTime = GetTime();\r\n     // Wait 21 minutes\r\n     SetMockTime(nStartTime+21*60);\r\n-    peerLogic->SendMessages(&dummyNode1, interruptDummy); // should result in getheaders\r\n-    BOOST_CHECK(dummyNode1.vSendMsg.size() > 0);\r\n+    {\r\n+        LOCK2(cs_main, dummyNode1.cs_sendProcessing);\r\n+        peerLogic->SendMessages(&dummyNode1, interruptDummy); // should result in getheaders\r\n+    }\r\n+    {\r\n+        LOCK2(cs_main, dummyNode1.cs_vSend);\r\n+        BOOST_CHECK(dummyNode1.vSendMsg.size() > 0);\r\n+    }\r\n     // Wait 3 more minutes\r\n     SetMockTime(nStartTime+24*60);\r\n-    peerLogic->SendMessages(&dummyNode1, interruptDummy); // should result in disconnect\r\n+    {\r\n+        LOCK2(cs_main, dummyNode1.cs_sendProcessing);\r\n+        peerLogic->SendMessages(&dummyNode1, interruptDummy); // should result in disconnect\r\n+    }\r\n     BOOST_CHECK(dummyNode1.fDisconnect == true);\r\n     SetMockTime(0);\r\n\r\n@@ -190,8 +205,10 @@ BOOST_AUTO_TEST_CASE(DoS_banning)\r\n         LOCK(cs_main);\r\n         Misbehaving(dummyNode1.GetId(), 100); // Should get banned\r\n     }\r\n-    LOCK(dummyNode1.cs_sendProcessing);\r\n-    peerLogic->SendMessages(&dummyNode1, interruptDummy);\r\n+    {\r\n+        LOCK2(cs_main, dummyNode1.cs_sendProcessing);\r\n+        peerLogic->SendMessages(&dummyNode1, interruptDummy);\r\n+    }\r\n     BOOST_CHECK(connman->IsBanned(addr1));\r\n     BOOST_CHECK(!connman->IsBanned(ip(0xa0b0c001|0x0000ff00))); // Different IP, not banned\r\n\r\n@@ -205,15 +222,20 @@ BOOST_AUTO_TEST_CASE(DoS_banning)\r\n         LOCK(cs_main);\r\n         Misbehaving(dummyNode2.GetId(), 50);\r\n     }\r\n-    LOCK(dummyNode2.cs_sendProcessing);\r\n-    peerLogic->SendMessages(&dummyNode2, interruptDummy);\r\n+    {\r\n+        LOCK2(cs_main, dummyNode2.cs_sendProcessing);\r\n+        peerLogic->SendMessages(&dummyNode2, interruptDummy);\r\n+    }\r\n     BOOST_CHECK(!connman->IsBanned(addr2)); // 2 not banned yet...\r\n     BOOST_CHECK(connman->IsBanned(addr1));  // ... but 1 still should be\r\n     {\r\n         LOCK(cs_main);\r\n         Misbehaving(dummyNode2.GetId(), 50);\r\n     }\r\n-    peerLogic->SendMessages(&dummyNode2, interruptDummy);\r\n+    {\r\n+        LOCK2(cs_main, dummyNode2.cs_sendProcessing);\r\n+        peerLogic->SendMessages(&dummyNode2, interruptDummy);\r\n+    }\r\n     BOOST_CHECK(connman->IsBanned(addr2));\r\n\r\n     bool dummy;\r\n@@ -237,20 +259,28 @@ BOOST_AUTO_TEST_CASE(DoS_banscore)\r\n         LOCK(cs_main);\r\n         Misbehaving(dummyNode1.GetId(), 100);\r\n     }\r\n-    LOCK(dummyNode1.cs_sendProcessing);\r\n-    peerLogic->SendMessages(&dummyNode1, interruptDummy);\r\n+    {\r\n+        LOCK2(cs_main, dummyNode1.cs_sendProcessing);\r\n+        peerLogic->SendMessages(&dummyNode1, interruptDummy);\r\n+    }\r\n     BOOST_CHECK(!connman->IsBanned(addr1));\r\n     {\r\n         LOCK(cs_main);\r\n         Misbehaving(dummyNode1.GetId(), 10);\r\n     }\r\n-    peerLogic->SendMessages(&dummyNode1, interruptDummy);\r\n+    {\r\n+        LOCK2(cs_main, dummyNode1.cs_sendProcessing);\r\n+        peerLogic->SendMessages(&dummyNode1, interruptDummy);\r\n+    }\r\n     BOOST_CHECK(!connman->IsBanned(addr1));\r\n     {\r\n         LOCK(cs_main);\r\n         Misbehaving(dummyNode1.GetId(), 1);\r\n     }\r\n-    peerLogic->SendMessages(&dummyNode1, interruptDummy);\r\n+    {\r\n+        LOCK2(cs_main, dummyNode1.cs_sendProcessing);\r\n+        peerLogic->SendMessages(&dummyNode1, interruptDummy);\r\n+    }\r\n     BOOST_CHECK(connman->IsBanned(addr1));\r\n     gArgs.ForceSetArg(\"-banscore\", std::to_string(DEFAULT_BANSCORE_THRESHOLD));\r\n\r\n@@ -277,8 +307,10 @@ BOOST_AUTO_TEST_CASE(DoS_bantime)\r\n         LOCK(cs_main);\r\n         Misbehaving(dummyNode.GetId(), 100);\r\n     }\r\n-    LOCK(dummyNode.cs_sendProcessing);\r\n-    peerLogic->SendMessages(&dummyNode, interruptDummy);\r\n+    {\r\n+        LOCK2(cs_main, dummyNode.cs_sendProcessing);\r\n+        peerLogic->SendMessages(&dummyNode, interruptDummy);\r\n+    }\r\n     BOOST_CHECK(connman->IsBanned(addr));\r\n\r\n     SetMockTime(nStartTime+60*60);\r\n```",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MjU0ODg2MQ==",
                    "publishedAt": "2018-04-18T22:27:02Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12882#issuecomment-382548861"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
                        "login": "MarcoFalke"
                    },
                    "body": "@practicalswift Looks very verbose, but fine to me. Shouldn't hurt to document the locking assumtions in tests?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4Mjc2NzgxMg==",
                    "publishedAt": "2018-04-19T14:56:48Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12882#issuecomment-382767812"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "@MarcoFalke Do you have an example on how to document the locking assumption in the tests?\r\n\r\nThat is beyond the suggested documentation in form of the annotation:\r\n\r\n```\r\nbool SendMessages(CNode* pto, std::atomic<bool>& interrupt) override \r\n    EXCLUSIVE_LOCKS_REQUIRED(pto->cs_sendProcessing);\r\n```",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4Mjc3MDY0OQ==",
                    "publishedAt": "2018-04-19T15:04:35Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12882#issuecomment-382770649"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
                        "login": "MarcoFalke"
                    },
                    "body": "I think your suggested diff is fine",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4Mjc3MTE1MA==",
                    "publishedAt": "2018-04-19T15:05:55Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12882#issuecomment-382771150"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "@MarcoFalke Applied. Please review :-)",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4Mjc3NDUyMQ==",
                    "publishedAt": "2018-04-19T15:15:46Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12882#issuecomment-382774521"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "@MarcoFalke Thanks! Please review updated version :-)",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MjgwMjcxNg==",
                    "publishedAt": "2018-04-19T16:41:37Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12882#issuecomment-382802716"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
                        "login": "MarcoFalke"
                    },
                    "body": "utACK 640523f77882c655ade8373eea1062691bf72b98",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4Mjg4MDI3Mg==",
                    "publishedAt": "2018-04-19T21:04:32Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12882#issuecomment-382880272"
                }
            ],
            "totalCount": 17
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "640523f77882c655ade8373eea1062691bf72b98"
                    }
                }
            ],
            "totalCount": 1
        },
        "createdAt": "2018-04-04T12:05:54Z",
        "deletions": 23,
        "id": "MDExOlB1bGxSZXF1ZXN0MTc5MzY4ODk2",
        "labels": {
            "nodes": [
                {
                    "color": "d4c5f9",
                    "id": "MDU6TGFiZWw2Mjk2MzUxNg==",
                    "name": "Tests"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "number": 12882,
        "state": "OPEN",
        "title": "tests: Make test_bitcoin pass under ThreadSanitzer (clang). Fix lock-order-inversion (potential deadlock).",
        "updatedAt": "2018-04-20T08:00:40Z"
    },
    {
        "additions": 30,
        "author": {
            "avatarUrl": "https://avatars3.githubusercontent.com/u/250224?v=4",
            "login": "kallewoof",
            "url": "https://github.com/kallewoof"
        },
        "body": "This adds a \"fee\" field to the resulting JSON for `signrawtransaction*` so a user can double check the fee they're paying before sending a transaction. The field is only shown in cases where the input amounts are all known.\r\n\r\n```\r\n$ ./bitcoin-cli -regtest signrawtransactionwithwallet 0200000001901c16d5ac11824ca64c9c9dbe925c83fc1af9872bb23bbc9c6cd25419e2f69c0000000000feffffff0210b2d0df0000000017a914d9214ccd777e5cce540d38c3466c2cb5545339c5874031354a0000000017a914bee793caf793996dc9f617a5ad04ec2b87c6f9538700000000\r\n{\r\n  \"hex\": \"0200000001901c16d5ac11824ca64c9c9dbe925c83fc1af9872bb23bbc9c6cd25419e2f69c00000000494830450221008fd0d0cfd16a06f282e720129351f2756f416b916f7a0a3be8d5db0c7db107af022028dafae6ec7d30882efe101c16b5f3893254bf5385664eddadf0d3f6e479381c01feffffff0210b2d0df0000000017a914d9214ccd777e5cce540d38c3466c2cb5545339c5874031354a0000000017a914bee793caf793996dc9f617a5ad04ec2b87c6f9538700000000\",\r\n  \"complete\": true,\r\n  \"fee\": 0.00003760,\r\n  \"feerate\": 0.00020000\r\n}\r\n```\r\n",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/3782274?v=4",
                        "login": "achow101"
                    },
                    "body": "Concept NACK. `amount` is not guaranteed to be correct (default 0) for non-segwit inputs if users are specifying their own UTXOs. Since the input amount is not required for non-segwit inputs, it will be 0 and the fee will be negative. Furthermore, even if `complete=true`, we do not necessarily have all of the UTXOs that are being spent from so even then we can't accurately calculate the input amount.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3OTUxODU1MA==",
                    "publishedAt": "2018-04-08T04:06:32Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12911#issuecomment-379518550"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/250224?v=4",
                        "login": "kallewoof"
                    },
                    "body": "@achow101 Are you against even if it only displays fee when all input amounts are known? (I.e. add check instead of using fComplete)",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3OTUxOTUyMQ==",
                    "publishedAt": "2018-04-08T04:33:10Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12911#issuecomment-379519521"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/3782274?v=4",
                        "login": "achow101"
                    },
                    "body": "I'm not against it if the input amounts are known.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3OTUyNzIxOA==",
                    "publishedAt": "2018-04-08T07:20:15Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12911#issuecomment-379527218"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/250224?v=4",
                        "login": "kallewoof"
                    },
                    "body": "@achow101 I believe I cover all cases of it being known/unknown with the updated code.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3OTU4NTU4Mw==",
                    "publishedAt": "2018-04-08T21:50:18Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12911#issuecomment-379585583"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
                        "login": "promag"
                    },
                    "body": "Concept ACK.\r\n\r\nThings to do:\r\n - [x] update to help message referring new response key;\r\n - [x] update existing tests or add new ones;\r\n - [x] release note.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3OTU4Nzc1OA==",
                    "publishedAt": "2018-04-08T22:25:00Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12911#issuecomment-379587758"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/250224?v=4",
                        "login": "kallewoof"
                    },
                    "body": "@promag Thanks, done. :)",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3OTU5Mjk0Mg==",
                    "publishedAt": "2018-04-08T23:54:28Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12911#issuecomment-379592942"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
                        "login": "promag"
                    },
                    "body": "LGTM, will test later.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3OTU5MzY2OA==",
                    "publishedAt": "2018-04-09T00:04:11Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12911#issuecomment-379593668"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/250224?v=4",
                        "login": "kallewoof"
                    },
                    "body": "I pushed another commit (a35bc32) which also shows fee rate (both in btc/kb and sat/b), as someone requested it. Will squash unless people speak against the idea.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3OTYzOTA4MQ==",
                    "publishedAt": "2018-04-09T05:44:18Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12911#issuecomment-379639081"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
                        "login": "promag"
                    },
                    "body": "Fee rate is something the user can easily compute with the fee and hex size. Not sure about that.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3OTY1NzI5NQ==",
                    "publishedAt": "2018-04-09T07:15:38Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12911#issuecomment-379657295"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/250224?v=4",
                        "login": "kallewoof"
                    },
                    "body": "@promag I agree it can be easily derived, but not sure there's any drawbacks to printing it either...",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3OTY1ODY2NQ==",
                    "publishedAt": "2018-04-09T07:21:46Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12911#issuecomment-379658665"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
                        "login": "promag"
                    },
                    "body": "@kallewoof maybe just display in one unit only? And if it goes forward maybe add the same fee rate to `fundrawtransaction`?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3OTcxODA2MQ==",
                    "publishedAt": "2018-04-09T11:17:43Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12911#issuecomment-379718061"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/250224?v=4",
                        "login": "kallewoof"
                    },
                    "body": "@promag Done.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3OTk1MTkzMA==",
                    "publishedAt": "2018-04-10T02:16:34Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12911#issuecomment-379951930"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/548488?v=4",
                        "login": "sipa"
                    },
                    "body": "I'm not sure this is the right place. Hopefully you know the fee/feerate before deciding to sign something, and the fact that `signrawtransaction` happens to have all the necessary information (sometimes) is more an implementation accident than inherent to its function.\r\n\r\nIs there a pressing use case? Otherwise I would argue to instead move PSBT forward, and add an RPC to analyse a PSBT which can give this can of information, independent from the signing logic.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MDE2NzkwOA==",
                    "publishedAt": "2018-04-10T16:39:54Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12911#issuecomment-380167908"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/250224?v=4",
                        "login": "kallewoof"
                    },
                    "body": "@sipa That is exactly the problem: I misread the input value and ended up throwing ~$10 away, which triggered my creating this PR.\r\n\r\nNote that the feerate is also listed in `fundrawtransaction` -- adding it to `signrawtransaction` seems like a natural complement.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MDMyNTE2MQ==",
                    "publishedAt": "2018-04-11T04:42:02Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12911#issuecomment-380325161"
                }
            ],
            "totalCount": 14
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "f973ce14f7831428dff53dc65ac1cb6678f978b6"
                    }
                }
            ],
            "totalCount": 4
        },
        "createdAt": "2018-04-08T02:55:01Z",
        "deletions": 1,
        "id": "MDExOlB1bGxSZXF1ZXN0MTgwMTM2Mjky",
        "labels": {
            "nodes": [
                {
                    "color": "0052cc",
                    "id": "MDU6TGFiZWw5ODI3OTE3Nw==",
                    "name": "RPC/REST/ZMQ"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "CONFLICTING",
        "mergedAt": null,
        "number": 12911,
        "state": "OPEN",
        "title": "wallet: Show fee in results for signrawtransaction* when known",
        "updatedAt": "2018-04-11T04:42:02Z"
    },
    {
        "additions": 1167,
        "author": {
            "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
            "login": "practicalswift",
            "url": "https://github.com/practicalswift"
        },
        "body": "As discussed in \"up for grabs\" PR #12192:\r\n* Remove redundant license reference (see https://github.com/bitcoin/bitcoin/pull/12192#issuecomment-367986454)\r\n* Update copyright year (see https://github.com/bitcoin/bitcoin/pull/12192#issuecomment-365604197)",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
                        "login": "MarcoFalke"
                    },
                    "body": "Just to mention, that our license file is not contained if someone downloads an individual file only.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3OTU1NjUwMg==",
                    "publishedAt": "2018-04-08T14:55:02Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12914#issuecomment-379556502"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "@MarcoFalke From a licensing perspective the contained text \"MIT software license\" should hopefully be sufficiently well-defined in case someone downloads an individual file only, don't you think?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3OTY2MDA0NA==",
                    "publishedAt": "2018-04-09T07:27:38Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12914#issuecomment-379660044"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "Rebased. Please review :-)",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MzM2ODUyNA==",
                    "publishedAt": "2018-04-22T09:43:24Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12914#issuecomment-383368524"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "Rebased!",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4NDA2MTM2OQ==",
                    "publishedAt": "2018-04-24T20:02:51Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12914#issuecomment-384061369"
                }
            ],
            "totalCount": 4
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "220d5a8f7b8079488d78a3c5a4aaafdf46f3a01f"
                    }
                }
            ],
            "totalCount": 2
        },
        "createdAt": "2018-04-08T12:37:56Z",
        "deletions": 1783,
        "id": "MDExOlB1bGxSZXF1ZXN0MTgwMTU3Njcw",
        "labels": {
            "nodes": [
                {
                    "color": "02d7e1",
                    "id": "MDU6TGFiZWwxNDgyMTY=",
                    "name": "Docs"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "number": 12914,
        "state": "OPEN",
        "title": "scripted-diff: Remove redundant license reference (HTTP URL). Update copyright year.",
        "updatedAt": "2018-04-24T20:02:51Z"
    },
    {
        "additions": 82,
        "author": {
            "avatarUrl": "https://avatars3.githubusercontent.com/u/1063656?v=4",
            "login": "jnewbery",
            "url": "https://github.com/jnewbery"
        },
        "body": "Addresses #12084 and #8684\r\n\r\nThis renames a couple of functions and members (no functional changes, expect log prints):\r\n\r\n- Rename CKey::SetMaster to CKey::SetSeed\r\n- Rename CHDChain::masterKeyId to CHDChain::seedID\r\n- Rename CHDChain::hdMasterKeyID to CHDChain::hdSeedID\r\n- Rename CWallet::GenerateNewHDMasterKey to CWallet::GenerateNewHDSeed\r\n- Rename CWallet::SetHDMasterKey to CWallet::SetHDSeed\r\n\r\nAs well it introduces a tiny API change:\r\n\r\n- RPC API change: Rename \"hdmasterkeyid\" to \"hdseedid\", rename \"hdmaster\" in wallet-dump output to \"hdseed\"\r\n\r\nFixes also a bug:\r\n\r\n- Bugfix: use \"s\" instead of the incorrect \"m\" for the seed-key hd-keypath key metadata",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1063656?v=4",
                        "login": "jnewbery"
                    },
                    "body": "This is #12094 reimplemented as a scripted diff.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3OTc4ODUyMQ==",
                    "publishedAt": "2018-04-09T15:16:26Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12924#issuecomment-379788521"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "utACK d41c76281f4abe06927560789f4a9623e1414f4c",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3OTc5MDE5NQ==",
                    "publishedAt": "2018-04-09T15:21:06Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12924#issuecomment-379790195"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "Concept ACK",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3OTg5MTE4OA==",
                    "publishedAt": "2018-04-09T20:55:42Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12924#issuecomment-379891188"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "Concept ACK",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MDE1Njk2MA==",
                    "publishedAt": "2018-04-10T16:06:48Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12924#issuecomment-380156960"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "Needs rebase",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MTkxMDkxMA==",
                    "publishedAt": "2018-04-17T09:04:36Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12924#issuecomment-381910910"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1063656?v=4",
                        "login": "jnewbery"
                    },
                    "body": "Rebased and added release notes.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MjA1MTA4Mw==",
                    "publishedAt": "2018-04-17T16:12:21Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12924#issuecomment-382051083"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
                        "login": "MarcoFalke"
                    },
                    "body": "Would it make sense to additionally push back the \"hdmasterkeyid\" key-value pair for one release? This might make it easier to quickly downgrade after a failed upgrade to the latest release.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MjA1NzQxOQ==",
                    "publishedAt": "2018-04-17T16:31:51Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12924#issuecomment-382057419"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1063656?v=4",
                        "login": "jnewbery"
                    },
                    "body": "@MarcoFalke - sorry I don't fully understand. Can you point out in the code where you mean?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MjA5NDYxNQ==",
                    "publishedAt": "2018-04-17T18:27:15Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12924#issuecomment-382094615"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1063656?v=4",
                        "login": "jnewbery"
                    },
                    "body": "@MarcoFalke - addressed your review comment.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MjE1OTk3NQ==",
                    "publishedAt": "2018-04-17T21:49:52Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12924#issuecomment-382159975"
                }
            ],
            "totalCount": 9
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "dead17b22fc5d03e17c55729de93f8b75da8bf83"
                    }
                }
            ],
            "totalCount": 4
        },
        "createdAt": "2018-04-09T15:16:12Z",
        "deletions": 61,
        "id": "MDExOlB1bGxSZXF1ZXN0MTgwMzQxOTIy",
        "labels": {
            "nodes": [
                {
                    "color": "08a781",
                    "id": "MDU6TGFiZWwxNDk0MjQ=",
                    "name": "Wallet"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "CONFLICTING",
        "mergedAt": null,
        "number": 12924,
        "state": "OPEN",
        "title": "Fix hdmaster-key / seed-key confusion (scripted diff)",
        "updatedAt": "2018-04-17T21:49:52Z"
    },
    {
        "additions": 14,
        "author": {
            "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
            "login": "practicalswift",
            "url": "https://github.com/practicalswift"
        },
        "body": "Initialize variables previously neither defined where defined nor in constructor:\r\n* `editStatus`\r\n* `autoCompleter` \r\n\r\nAlso; initialize non-static class members where they are defined in accordance with developer notes.",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "Makes sense and code looks better afterwards.\r\nutACK f131872653dadafd9af8bec255dfd2bddd75a471",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MDE5OTAxNQ==",
                    "publishedAt": "2018-04-10T18:19:35Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12928#issuecomment-380199015"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
                        "login": "MarcoFalke"
                    },
                    "body": "In which case you can remove the redundant initialization from the constructor, no?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MDIwMjg3NA==",
                    "publishedAt": "2018-04-10T18:31:54Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12928#issuecomment-380202874"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
                        "login": "promag"
                    },
                    "body": "I meant to say what @MarcoFalke asked.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MDI3MjIxMQ==",
                    "publishedAt": "2018-04-10T22:50:20Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12928#issuecomment-380272211"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "@promag @MarcoFalke Is this the suggested change? :-)\r\n\r\n```diff\r\ndiff --git a/src/qt/addresstablemodel.cpp b/src/qt/addresstablemodel.cpp\r\nindex 1e3acd7..b6ecd40 100644\r\n--- a/src/qt/addresstablemodel.cpp\r\n+++ b/src/qt/addresstablemodel.cpp\r\n@@ -159,7 +159,7 @@ public:\r\n };\r\n\r\n AddressTableModel::AddressTableModel(WalletModel *parent) :\r\n-    QAbstractTableModel(parent),walletModel(parent),priv(0)\r\n+    QAbstractTableModel(parent), walletModel(parent)\r\n {\r\n     columns << tr(\"Label\") << tr(\"Address\");\r\n     priv = new AddressTablePriv(this);\r\ndiff --git a/src/qt/rpcconsole.cpp b/src/qt/rpcconsole.cpp\r\nindex 5122bab..7924840 100644\r\n--- a/src/qt/rpcconsole.cpp\r\n+++ b/src/qt/rpcconsole.cpp\r\n@@ -455,12 +455,7 @@ RPCConsole::RPCConsole(interfaces::Node& node, const PlatformStyle *_platformSty\r\n     QWidget(parent),\r\n     m_node(node),\r\n     ui(new Ui::RPCConsole),\r\n-    clientModel(0),\r\n-    historyPtr(0),\r\n-    platformStyle(_platformStyle),\r\n-    peersTableContextMenu(0),\r\n-    banTableContextMenu(0),\r\n-    consoleFontSize(0)\r\n+    platformStyle(_platformStyle)\r\n {\r\n     ui->setupUi(this);\r\n     QSettings settings;\r\n```\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MDMzODY4MA==",
                    "publishedAt": "2018-04-11T06:11:01Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12928#issuecomment-380338680"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
                        "login": "promag"
                    },
                    "body": "Yes.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MDM0MzI3MQ==",
                    "publishedAt": "2018-04-11T06:35:36Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12928#issuecomment-380343271"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "Updated. Now including @MarcoFalke and @promag's suggestions. Please re-review :-)",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MDQwNjA2Ng==",
                    "publishedAt": "2018-04-11T10:33:28Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12928#issuecomment-380406066"
                }
            ],
            "totalCount": 6
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "1e7813e9bbb2561eafdf89481e92411be44f887a"
                    }
                }
            ],
            "totalCount": 3
        },
        "createdAt": "2018-04-09T23:25:59Z",
        "deletions": 19,
        "id": "MDExOlB1bGxSZXF1ZXN0MTgwNDUzNDg2",
        "labels": {
            "nodes": [
                {
                    "color": "02d7e1",
                    "id": "MDU6TGFiZWwxMzU5NDY=",
                    "name": "GUI"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "number": 12928,
        "state": "OPEN",
        "title": "qt: Initialize non-static class members that were previously neither initialized where defined nor in constructor",
        "updatedAt": "2018-04-11T10:33:28Z"
    },
    {
        "additions": 324,
        "author": {
            "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
            "login": "promag",
            "url": "https://github.com/promag"
        },
        "body": "This PR doesn't change behaviour, it's purely a refactor.\r\n\r\nAll `CWalletTx` methods that use the wallet pointer are moved to `CWallet` and then the wallet pointer is removed from `CWalletTx`.\r\n\r\nThis should also ease adding thread safety analysis annotations like #11634.",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
                        "login": "promag"
                    },
                    "body": "@practicalswift you may find this useful for #11634.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3OTkzNDY2MA==",
                    "publishedAt": "2018-04-10T00:22:58Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12929#issuecomment-379934660"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/5767891?v=4",
                        "login": "instagibbs"
                    },
                    "body": "concept ACK!",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3OTkzOTE5Ng==",
                    "publishedAt": "2018-04-10T00:53:26Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12929#issuecomment-379939196"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "Concept ACK\r\n\r\nThanks!",
                    "id": "MDEyOklzc3VlQ29tbWVudDM3OTk5MTM5Mg==",
                    "publishedAt": "2018-04-10T06:42:26Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12929#issuecomment-379991392"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
                        "login": "promag"
                    },
                    "body": "Thanks @ryanofsky for the review!\r\n\r\n> It seems especially awkward to now have CWallet methods that take const CWalletTx& references and then change their mutable members.\r\n\r\nFor instance, should this \r\n```cpp\r\nCAmount CWallet::GetDebit(const CTxIn &txin, const isminefilter& filter) const;\r\nCAmount CWallet::GetDebit(const CWalletTx& wtx, const isminefilter& filter) const;\r\n```\r\nbe this (without `const CWalletTx`)?\r\n```cpp\r\nCAmount CWallet::GetDebit(const CTxIn &txin, const isminefilter& filter) const;\r\nCAmount CWallet::GetDebit(CWalletTx& wtx, const isminefilter& filter) const;\r\n```\r\nIMO it's no worse than the original code (const method):\r\n```cpp\r\nCAmount CWalletTx::GetDebit(const isminefilter& filter) const;\r\n```\r\nHence the mutable members.\r\n\r\n> and just pass in new pwallet arguments where needed.\r\n\r\nStarted doing that but sounded very lame, for instance (feels wrong doesn't it):\r\n```cpp\r\nwtx.GetDebit(pwallet, filter);\r\n```\r\nAlso, I'd have to check if that approach helps in #11634.\r\n\r\n> Moving all these methods also makes this PR much bigger than it needs to be\r\n\r\nI've moved the code in `wallet.cpp` up and down and made some fixes to the code convention. I can revert those and keep the code in the same place, without reorganising it, the diff will be pretty smaller. WDYT?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MDYzMTA0Mg==",
                    "publishedAt": "2018-04-11T23:53:16Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12929#issuecomment-380631042"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
                        "login": "promag"
                    },
                    "body": "@ryanofsky updated b2f5def...721f499.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MDc0MTgxNw==",
                    "publishedAt": "2018-04-12T09:39:24Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12929#issuecomment-380741817"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/863730?v=4",
                        "login": "fanquake"
                    },
                    "body": "This needs a rebase.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MjI3NDgxNw==",
                    "publishedAt": "2018-04-18T06:16:26Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12929#issuecomment-382274817"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/5470?v=4",
                        "login": "Empact"
                    },
                    "body": "utACK 721f499",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MjQyOTgyMw==",
                    "publishedAt": "2018-04-18T15:34:18Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12929#issuecomment-382429823"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
                        "login": "promag"
                    },
                    "body": "@Empact @ryanofsky if you don't mind I'd prefer to keep this as \"move only\" as possible. The idea here is to remove wallet pointer from `CWalletTx`. I can follow up those suggestions though.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MjQ3MTc3Mg==",
                    "publishedAt": "2018-04-18T17:47:33Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12929#issuecomment-382471772"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/7133040?v=4",
                        "login": "ryanofsky"
                    },
                    "body": "> @ryanofsky if you don't mind I'd prefer to keep this as \"move only\" as possible\r\n\r\nI'm actually still not sure what was wrong with my suggestion to pass wallet references where needed and not move code around out all all: https://github.com/bitcoin/bitcoin/pull/12929#pullrequestreview-111389750. In your last comment you only wrote that this \"sounded very lame\" and \"feels wrong,\" which is fine, though I didn't understand the objection.\r\n\r\nCWallet is a already huge, monolithic class so your current change which removes all CWalletTx methods and moves them to CWallet doesn't really make it much worse. It just also seems perfectly logical to me that methods accessing wallet transactions would be part of the `CWalletTx` instead of `CWallet`.\r\n\r\nAnyway, I did ACK previously, and can rereview if needed for merge.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MjQ4MjAwMg==",
                    "publishedAt": "2018-04-18T18:21:00Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12929#issuecomment-382482002"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
                        "login": "promag"
                    },
                    "body": "Between `wtx.GetDebit(pwallet, filter)` or `pwallet->GetDebit(wtx, filter)` I prefer the second because the call is made to the \"parent\" asking for \"child\" details. But that is my preference and your suggestion patch is for sure smaller.\r\n\r\nI was thinking removing all cache members from `CWalletTx` and have the wallet manage that cache as a whole and I think this change would simplify that.\r\n\r\nAnyway, this started because of #11634, and I'm going to rebase that to see if https://github.com/bitcoin/bitcoin/pull/11634#discussion_r175351144 is resolved.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MjUyNzAwNQ==",
                    "publishedAt": "2018-04-18T20:57:42Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12929#issuecomment-382527005"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1063656?v=4",
                        "login": "jnewbery"
                    },
                    "body": "Concept ACK, though I prefer @ryanofsky's suggestion to just pass wallet references where needed.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4Mzc0MDIzOA==",
                    "publishedAt": "2018-04-23T22:15:00Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12929#issuecomment-383740238"
                }
            ],
            "totalCount": 11
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "74bc69002eb2183cc7160c9e4e68cf0c1e580530"
                    }
                }
            ],
            "totalCount": 16
        },
        "createdAt": "2018-04-10T00:11:08Z",
        "deletions": 356,
        "id": "MDExOlB1bGxSZXF1ZXN0MTgwNDU5MTM1",
        "labels": {
            "nodes": [
                {
                    "color": "E6F6D6",
                    "id": "MDU6TGFiZWwxMzU5NjE=",
                    "name": "Refactoring"
                },
                {
                    "color": "08a781",
                    "id": "MDU6TGFiZWwxNDk0MjQ=",
                    "name": "Wallet"
                }
            ],
            "totalCount": 2
        },
        "mergeable": "CONFLICTING",
        "mergedAt": null,
        "number": 12929,
        "state": "OPEN",
        "title": "Remove CWallet dependency from CWalletTx",
        "updatedAt": "2018-04-23T22:15:01Z"
    },
    {
        "additions": 819,
        "author": {
            "avatarUrl": "https://avatars0.githubusercontent.com/u/195769?v=4",
            "login": "skeees",
            "url": "https://github.com/skeees"
        },
        "body": "This is still in progress and not fully completed yet, but wanted to put it out for review in terms of overall design/architecture\r\n\r\nThe high level goal here (in this, and if accepted, subsequent PRs) is to allow for net and validation to live on separate threads and communicate mostly via message passing - both for the efficiency benefits that further parallelism in the net layer might provide, but also perhaps moreso as a step towards the goal of reducing the amount of shared state and forcing a cleaner separation between the net and validation layers in the core node. \r\n\r\nTo keep this PR as self contained as possible - this set of commits does the following:\r\n  - defines `ProducerConsumerQueue() / ConsumerThread()`: infrastructure to facilitate async communication between the net and validation layers\r\n  - defines ValidationLayer(): an interface where requests for (just `CBlock` for now) validation can be submitted and processed asynchronously\r\n  - replaces synchronous calls of `ProcessNewBlock()` in net_processing with the new async interface `ValidationLayer::SubmitForValidation(CBlock) -> std::future<BlockValidationResult>`\r\n\r\nBecause the P2P layer assumes that for a given node every message is fully processed before any subsequent messages are processed, when an asynchronous validation request is submitted for a block coming from a node - that node is \"frozen\" until that request has been fully validated. In the meantime - the net layer may continue servicing other nodes that do not have pending asynchronous validation requests.\r\n\r\nThe ProducerConsumerQueue() was left sufficiently generic so that it may be interposed  in other places where separation of components via asynchronous message passing might make sense from a design perspective.",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/863730?v=4",
                        "login": "fanquake"
                    },
                    "body": "cc @theuni\r\n@skeees Have you looked through the current work being done to refactor the P2P code? See [here](https://github.com/bitcoin/bitcoin/projects/4) for an overview.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MDMyMzQyMg==",
                    "publishedAt": "2018-04-11T04:28:02Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12934#issuecomment-380323422"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/195769?v=4",
                        "login": "skeees"
                    },
                    "body": "Thanks, yes I have looked through those. This is more focused on separation between net_processing (PeerLogicValidation) and validation, whereas those primarily tackle socket handling and other ConnMan stuff. I don't think there's anything here that's redundant or incompatible with those refactors",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MDQ1MTI4NA==",
                    "publishedAt": "2018-04-11T13:27:26Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12934#issuecomment-380451284"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/5767891?v=4",
                        "login": "instagibbs"
                    },
                    "body": "cc @TheBlueMatt ",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MTAwMTg4Mg==",
                    "publishedAt": "2018-04-13T02:26:09Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12934#issuecomment-381001882"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/195769?v=4",
                        "login": "skeees"
                    },
                    "body": "Thank you for the review - one thing (general design related) to add to the discussion here:\r\n\r\nSince I've submitted this request - I happened to stumble upon two race conditions in validation that stem from concurrent calls to ProcessNewBlock (#12988, #13023) \r\nThis pr should simplify the concurrency model for block validation (a single validation thread pulls a block to validate from the queue and validates it completely before moving on to the next block) and would have inadvertently fixed those two referenced race conditions.\r\n\r\nExplicitly simplifying the concurrency model hopefully reduces a bit the cognitive burden of future code changes in validation and I don't think makes anything substantially less efficient - much of validation is already single threaded (because of cs_main), and certain pieces fundamentally cannot be concurrent (i.e. connecttip). Validation is already complicated enough to understand on its own without worrying about concurrency.\r\n\r\nSeems like the clarity gains will outweigh the minor efficiency hit here - +the async api into should allow all the stuff around validation to be more easily be parallelized with less risk of inadvertently introducing a consensus bug. And it makes process separation / alternate p2p more natural if that's ever to be a thing in the future.\r\n\r\nIf this design seems useful - my intention is to finish this pr up (some stuff around compact blocks that I still have to work through + refit the couple of places in rpc that call ProcessNewBlock) and explore subsequent prs to put a similar model in place around the mempool. I'd also like to explore feasibility for header processing.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4Mzc0Nzc2MQ==",
                    "publishedAt": "2018-04-23T22:52:16Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12934#issuecomment-383747761"
                }
            ],
            "totalCount": 4
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "d30aba7de9288ecf4573d1a04a17b351695043e0"
                    }
                }
            ],
            "totalCount": 6
        },
        "createdAt": "2018-04-10T21:54:36Z",
        "deletions": 47,
        "id": "MDExOlB1bGxSZXF1ZXN0MTgwNzM4NDcz",
        "labels": {
            "nodes": [],
            "totalCount": 0
        },
        "mergeable": "CONFLICTING",
        "mergedAt": null,
        "number": 12934,
        "state": "OPEN",
        "title": "[WIP] [net] [validation] Call ProcessNewBlock() asynchronously",
        "updatedAt": "2018-04-23T23:03:38Z"
    },
    {
        "additions": 759,
        "author": {
            "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
            "login": "MarcoFalke",
            "url": "https://github.com/MarcoFalke"
        },
        "body": "Moving the orphan processing into a new function makes it possible to call it from other places. E.g. `sendrawtransaction` or when a transaction is received via a `NetMsgType` different from `TX`.\r\n\r\nAlso, add test coverage for the function in our ~unit~ functional test framework.",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/5470?v=4",
                        "login": "Empact"
                    },
                    "body": "Concept ACK, both for the addition of testing and due to the fact that ProcessMessage is >1300 lines at the moment. Would be great if other applications of the method were ready, to help inform its interface.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MDM0NzU1OA==",
                    "publishedAt": "2018-04-11T06:57:19Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12935#issuecomment-380347558"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/195769?v=4",
                        "login": "skeees"
                    },
                    "body": "This is a move-only commit - so maybe not the right place - but it might be nice to separate the misbehaving peer punishment logic from the re-attempting to accept orphans to the mempool logic - good first step though",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MDUyMTQwNA==",
                    "publishedAt": "2018-04-11T16:51:24Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12935#issuecomment-380521404"
                }
            ],
            "totalCount": 2
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "0c2bc587f6107fcc546ba2b11605fb0828c7fce3"
                    }
                }
            ],
            "totalCount": 12
        },
        "createdAt": "2018-04-10T23:23:35Z",
        "deletions": 617,
        "id": "MDExOlB1bGxSZXF1ZXN0MTgwNzUzNDk4",
        "labels": {
            "nodes": [
                {
                    "color": "E6F6D6",
                    "id": "MDU6TGFiZWwxMzU5NjE=",
                    "name": "Refactoring"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "CONFLICTING",
        "mergedAt": null,
        "number": 12935,
        "state": "OPEN",
        "title": "Add ProcessOrphans (move-only)",
        "updatedAt": "2018-04-16T20:32:11Z"
    },
    {
        "additions": 18,
        "author": {
            "avatarUrl": "https://avatars2.githubusercontent.com/u/5470?v=4",
            "login": "Empact",
            "url": "https://github.com/Empact"
        },
        "body": "For those cases where the version and program are not useful.",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "utACK b9f0169bcce3ca7c9d0646ddda5bf264062be87b\r\n\r\nNice simplification",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MDQxMTQ0Nw==",
                    "publishedAt": "2018-04-11T10:56:38Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12938#issuecomment-380411447"
                }
            ],
            "totalCount": 1
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "1bc489629240652f7a27b4833f822150175ccabe"
                    }
                }
            ],
            "totalCount": 2
        },
        "createdAt": "2018-04-11T04:21:34Z",
        "deletions": 20,
        "id": "MDExOlB1bGxSZXF1ZXN0MTgwNzg2ODU0",
        "labels": {
            "nodes": [
                {
                    "color": "E6F6D6",
                    "id": "MDU6TGFiZWwxMzU5NjE=",
                    "name": "Refactoring"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "number": 12938,
        "state": "OPEN",
        "title": "Avoid unused locals for CScript::IsWitnessProgram",
        "updatedAt": "2018-04-16T03:53:08Z"
    },
    {
        "additions": 79,
        "author": {
            "avatarUrl": "https://avatars2.githubusercontent.com/u/5470?v=4",
            "login": "Empact",
            "url": "https://github.com/Empact"
        },
        "body": "The estimate_mode arg is optional in documentation and handling,\r\nbut the RPCTypeCheck applied to it did not allow null, therefore\r\nits presence was enforced. Note this only affected null values,\r\nnot entirely absent arguments because RPCTypeCheck only tests\r\nagainst the params list as exists and no farther, so this is a\r\nnarrow bug.\r\n\r\nThis also replaces redundant testing via RPCTypeCheck &\r\nRPCTypeCheckArgument in favor of non-redundant calls to\r\nRPCTypeCheckArgument. The prior redundancy existed due\r\nto the prior limitation of the RPCTypeCheckArgument not\r\nbeing able to allow null.\r\n\r\nAdded some call and light functional testing on estimatesmartfee\r\nand estimaterawfee as well.",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/5470?v=4",
                        "login": "Empact"
                    },
                    "body": "From the developer-notes:\r\n\r\n> Missing arguments and 'null' should be treated the same: as default values. If there is no default value, both cases should fail in the same way. The easiest way to follow this guideline is detect unspecified arguments with params[x].isNull() instead of params.size() <= x. The former returns true if the argument is either null or missing, while the latter returns true if is missing, and false if it is null.\r\n> \r\n> Rationale: Avoids surprises when switching to name-based arguments. Missing name-based arguments are passed as 'null'.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MzczNDE1Nw==",
                    "publishedAt": "2018-04-23T21:48:36Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12940#issuecomment-383734157"
                }
            ],
            "totalCount": 1
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "232df46173e2ec396ef0d36535f527a4cabac82d"
                    }
                }
            ],
            "totalCount": 2
        },
        "createdAt": "2018-04-11T08:07:26Z",
        "deletions": 10,
        "id": "MDExOlB1bGxSZXF1ZXN0MTgwODIwNjQz",
        "labels": {
            "nodes": [
                {
                    "color": "0052cc",
                    "id": "MDU6TGFiZWw5ODI3OTE3Nw==",
                    "name": "RPC/REST/ZMQ"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "number": 12940,
        "state": "OPEN",
        "title": "rpc: Fix estimatesmartfee to properly handle a null estimate_mode arg",
        "updatedAt": "2018-04-23T21:48:36Z"
    },
    {
        "additions": 5,
        "author": {
            "avatarUrl": "https://avatars0.githubusercontent.com/u/5767891?v=4",
            "login": "instagibbs",
            "url": "https://github.com/instagibbs"
        },
        "body": "I'm hitting a corner case in my mainnet wallet where I load a restore a wallet, call `rescanblockchain` from RPC, and it's \"double counting\" an output I've sent to myself since currently it never marks input transactions as dirty. This is fixed by a restart of the wallet.\r\n\r\nNote that this only happens with keys with birthdate *after* the blocks containing the spent funds which gets scanned on startup, so it's hard to test without a set seed function.",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "Makes sense.\r\nThanks for the fix.\r\nutACK afd4c643c5813fe37051ab0ec55591be962e0d98",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MjAzMzk0Nw==",
                    "publishedAt": "2018-04-17T15:25:28Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12944#issuecomment-382033947"
                }
            ],
            "totalCount": 1
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "afd4c643c5813fe37051ab0ec55591be962e0d98"
                    }
                }
            ],
            "totalCount": 1
        },
        "createdAt": "2018-04-11T13:30:10Z",
        "deletions": 5,
        "id": "MDExOlB1bGxSZXF1ZXN0MTgwOTA0MTU3",
        "labels": {
            "nodes": [
                {
                    "color": "08a781",
                    "id": "MDU6TGFiZWwxNDk0MjQ=",
                    "name": "Wallet"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "number": 12944,
        "state": "OPEN",
        "title": "[wallet] ScanforWalletTransactions should mark input txns as dirty",
        "updatedAt": "2018-04-17T15:25:28Z"
    },
    {
        "additions": 197,
        "author": {
            "avatarUrl": "https://avatars3.githubusercontent.com/u/881253?v=4",
            "login": "jimpo",
            "url": "https://github.com/jimpo"
        },
        "body": "This is purely a refactor with no behavior changes.\r\n\r\nThis creates a new class `BCLog::Logger` to encapsulate all global logging configuration and state.",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "Concept ACK, splitting the logging functionality out of util makes sense, util.cpp is large, haphazard and this is a clearly distinguishable concern from the rest.\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MDY4NzgxOA==",
                    "publishedAt": "2018-04-12T05:57:32Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12954#issuecomment-380687818"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
                        "login": "MarcoFalke"
                    },
                    "body": "Concept ACK. Needs rebase",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MTE0MTg4Nw==",
                    "publishedAt": "2018-04-13T13:51:30Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12954#issuecomment-381141887"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
                        "login": "MarcoFalke"
                    },
                    "body": "Needs rebase again. (Since this has some Concept ACKs, but is somewhat largish, it might be easier to merge in two steps. First the move-only commit in a separate pull request and then the refactoring in this pull request)",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MjAzNDQ2OA==",
                    "publishedAt": "2018-04-17T15:26:52Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12954#issuecomment-382034468"
                }
            ],
            "totalCount": 3
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "d903273cf8e51d2789ba8a88c608a66e63dcdc14"
                    }
                }
            ],
            "totalCount": 6
        },
        "createdAt": "2018-04-11T22:03:55Z",
        "deletions": 171,
        "id": "MDExOlB1bGxSZXF1ZXN0MTgxMDQwNzQx",
        "labels": {
            "nodes": [
                {
                    "color": "E6F6D6",
                    "id": "MDU6TGFiZWwxMzU5NjE=",
                    "name": "Refactoring"
                },
                {
                    "color": "5319e7",
                    "id": "MDU6TGFiZWwyNDE4MzI5MjM=",
                    "name": "Utils/log/libs"
                }
            ],
            "totalCount": 2
        },
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "number": 12954,
        "state": "OPEN",
        "title": "util: Refactor logging code into a global object",
        "updatedAt": "2018-04-23T06:50:51Z"
    },
    {
        "additions": 6,
        "author": {
            "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
            "login": "practicalswift",
            "url": "https://github.com/practicalswift"
        },
        "body": "Fix Clang Static Analyzer warnings reported by @kallewoof in #12961: \r\n\r\n* Fix dead stores. Values were stored but never read.\r\n* Add assertion to guide static analyzers. See #12961 for details.",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/5470?v=4",
                        "login": "Empact"
                    },
                    "body": "Could you elaborate on why it needs the guidance?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MDY5NDk3Mg==",
                    "publishedAt": "2018-04-12T06:37:59Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12963#issuecomment-380694972"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "@Empact See the report linked in #12961 :-)",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MDY5NTI4Mg==",
                    "publishedAt": "2018-04-12T06:39:27Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12963#issuecomment-380695282"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/5470?v=4",
                        "login": "Empact"
                    },
                    "body": "utACK 7e95d97",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MDcwNTU2Mg==",
                    "publishedAt": "2018-04-12T07:26:51Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12963#issuecomment-380705562"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "Updated. Please re-review :-)",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MDc4ODM5Ng==",
                    "publishedAt": "2018-04-12T12:31:21Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12963#issuecomment-380788396"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/127186?v=4",
                        "login": "ajtowns"
                    },
                    "body": "utACK 159c32d1f111e6bad490bd23ae215462e8ba4374",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MTAzNDg0MA==",
                    "publishedAt": "2018-04-13T06:15:02Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12963#issuecomment-381034840"
                }
            ],
            "totalCount": 5
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "159c32d1f111e6bad490bd23ae215462e8ba4374"
                    }
                }
            ],
            "totalCount": 2
        },
        "createdAt": "2018-04-12T06:30:40Z",
        "deletions": 11,
        "id": "MDExOlB1bGxSZXF1ZXN0MTgxMTAyMjUw",
        "labels": {
            "nodes": [
                {
                    "color": "E6F6D6",
                    "id": "MDU6TGFiZWwxMzU5NjE=",
                    "name": "Refactoring"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "number": 12963,
        "state": "OPEN",
        "title": "Fix Clang Static Analyzer warnings",
        "updatedAt": "2018-04-13T06:15:02Z"
    },
    {
        "additions": 54,
        "author": {
            "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
            "login": "jonasschnelli",
            "url": "https://github.com/jonasschnelli"
        },
        "body": "Bitcoin Core has been designed to synchronise/verify as fast as possible. This is usually desirable, though, on systems where other applications require a reasonable amount of CPU time (ex. desktop systems) the CPU usage maximisation of Bitcoin Core may be intrusive.\r\n\r\nThis PR adds two RPC calls:\r\n* `setscriptthreadsenabled` allows to disable/re-enable the script verification threads during runtime.\r\n* `scriptthreadsinfo` show information about the script verification threads (enabled/disabled and num threads)\r\n\r\nThis would be a base requirement for a \"cpu throttle\" feature in the GUI allowing one to temporary \"throttle\" verification (and therefore make the system usable for other tasks while syncing in the background)\r\n\r\nThe concept-draft for long-term resource profile:\r\nhttps://gist.github.com/jonasschnelli/a3eb47147069b99d7c63d7da997b4225\r\n\r\nToDo:\r\n- [ ] Add tests \r\n- [ ] Release notes",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/886523?v=4",
                        "login": "JeremyRubin"
                    },
                    "body": "Couple comments on the concept:\r\n\r\n- Maybe add a time argument (e.g., disable for 5 hours)\r\n- Maybe add code to differentiate between sync and receiving a new block. I can see why you might want to background sync, but when you are getting a new block, the pause won't be that long and it is really good for the network if this is faster\r\n- Perhaps also good to control how many threads get used? E.g., use 2 threads out of 4\r\n- Why is this better than just restarting the node with fewer threads?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MTA0MzAxMQ==",
                    "publishedAt": "2018-04-13T06:59:49Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12965#issuecomment-381043011"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "@promag \r\n> I think this is almost only useful when changed in the UI right?\r\n\r\nI think its useful for bitcoind users as well. Assume you want to do another CPU intense task on your system, you could `setscriptthreadsenabled false`, do your task and `setscriptthreadsenabled true`.\r\n\r\n@JeremyRubin \r\nAgree with all your features... I guess they could be implemented in another PR.\r\n\r\n> Why is this better than just restarting the node with fewer threads?\r\n\r\nRestarting Bitcoin-Core just to reduce it's script verification threads seems unideal. A restart is always painful (dbcache, partial re-validation).",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MTA3MDUyNg==",
                    "publishedAt": "2018-04-13T08:53:55Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12965#issuecomment-381070526"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "Needed rebase",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MjMwNDg0MA==",
                    "publishedAt": "2018-04-18T08:19:05Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12965#issuecomment-382304840"
                }
            ],
            "totalCount": 3
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "dfab6c6866e639197db5c00d1e81ce0a4ff07b0e"
                    }
                }
            ],
            "totalCount": 1
        },
        "createdAt": "2018-04-12T08:46:03Z",
        "deletions": 1,
        "id": "MDExOlB1bGxSZXF1ZXN0MTgxMTMwMTE0",
        "labels": {
            "nodes": [
                {
                    "color": "0052cc",
                    "id": "MDU6TGFiZWw5ODI3OTE3Nw==",
                    "name": "RPC/REST/ZMQ"
                },
                {
                    "color": "6060aa",
                    "id": "MDU6TGFiZWwxMTgzNzk2NTI=",
                    "name": "Validation"
                }
            ],
            "totalCount": 2
        },
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "number": 12965,
        "state": "OPEN",
        "title": "Add RPC call setscriptthreadsenabled: allow to temp. throttle CPU usage",
        "updatedAt": "2018-04-18T08:19:05Z"
    },
    {
        "additions": 44,
        "author": {
            "avatarUrl": "https://avatars3.githubusercontent.com/u/250224?v=4",
            "login": "kallewoof",
            "url": "https://github.com/kallewoof"
        },
        "body": "This is very much a WIP, but feedback is welcome.\r\n\r\nThis adds support for using the mempool state when calculating the fee rate for transactions. It is currently only supported in `estimatesmartfee` RPC command, but intention is to make it available in `sendtoaddress` and friends eventually.\r\n\r\nTo do (at minimum):\r\n* [ ] Optimize portion value (in fees.cpp), currently `(0.1+(conservative*0.05))*max(0.5, 1-0.1*confTarget))`\r\n* [ ] Remove debug cruft\r\n",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/7463573?v=4",
                        "login": "sdaftuar"
                    },
                    "body": "I think it would be helpful if you could post (or link to a gist) the overall design you're aiming for here, so that reviewers can think about the algorithm's robustness without having to dive into the implementation first.\r\n\r\nI did start to take a look, and I wanted to point out that the first commit looks incorrect -- `GetSortedDepthAndScore()` does not return the mempool sorted in the same way as block creation.  Instead it sorts the mempool by ancestor count first (so all transactions with no ancestors appear before their descendants), and by feerate of the transaction second (not feerate including ancestors).  The mining sort order is based on sorting transactions by their feerate with ancestors (which is done in one of the mempool.mapTx indices), and then updating that feerate-with-ancestors calculation as transactions are selected for inclusion.\r\n\r\nSo a simple approximation of the mining calculation would to walk the mempool in the ancestor-feerate-order, and tally up the weight of transactions as you go.  In order to get it precise, though, you'd probably just want to invoke `CreateNewBlock()` directly.\r\n\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MjAxMTg5Nw==",
                    "publishedAt": "2018-04-17T14:25:24Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12966#issuecomment-382011897"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/7463573?v=4",
                        "login": "sdaftuar"
                    },
                    "body": "> I think it would be helpful if you could post (or link to a gist) the overall design you're aiming for here, so that reviewers can think about the algorithm's robustness without having to dive into the implementation first.\r\n\r\nSorry, I should have just finished reading the PR -- I think I understand it now, never mind!",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MjAxMzE3Ng==",
                    "publishedAt": "2018-04-17T14:28:46Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12966#issuecomment-382013176"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/250224?v=4",
                        "login": "kallewoof"
                    },
                    "body": "@sdaftuar Thanks for looking!\r\n\r\n> the first commit looks incorrect -- `GetSortedDepthAndScore()` does not return the mempool sorted in the same way as block creation. Instead it sorts the mempool by ancestor count first (so all transactions with no ancestors appear before their descendants), and by feerate of the transaction second (not feerate including ancestors). \r\n\r\nI wanted to ask about that. Thanks for clarifying -- I would like to avoid the block creation code, as I think it results in side effects that are not desirable (I believe early prototypes of `testrawtransaction` had issues due to trying to reuse that functionality). I could be mistaken. Anyway, that's a pity. I was hoping there was a clean way to get the transactions in order. I also found out that the ancestor stuff actually plays a big role in blocks, so I may need to take that into account after all.\r\n\r\nAfter making this PR, I realized I was a bit hasty. I need to do proper profiling before making a serious proposal. I'm considering closing, but I think it's fine since it has `[WIP]` tag...?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MjIxMTM0Mg==",
                    "publishedAt": "2018-04-18T01:14:23Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12966#issuecomment-382211342"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/7463573?v=4",
                        "login": "sdaftuar"
                    },
                    "body": "CreateNewBlock should be side effect free (the issue you're bringing up with `testrawtransaction` and the like involves mempool acceptance testing, which is not side-effect free).  It's not super-fast (especially because we test block validity after construction), but we could consider just exposing the package selection algorithm if that's helpful here. \r\n\r\nI don't see a problem with keeping this open with [WIP] in order to gather more feedback.  I do think it's worth trying to have a wider discussion about how to best expose data relating to fee estimates, to let advanced users have access to useful data which may still be experimental while ensuring that default usage for typical users is robust.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MjM5OTgxNg==",
                    "publishedAt": "2018-04-18T14:09:48Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12966#issuecomment-382399816"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/250224?v=4",
                        "login": "kallewoof"
                    },
                    "body": "@sdaftuar That's good news! I'll definitely look into using the package selection stuff.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MjU1ODc2OA==",
                    "publishedAt": "2018-04-18T23:17:39Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12966#issuecomment-382558768"
                }
            ],
            "totalCount": 5
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "e1586bca7ed2ea09e23c83861a5af718c350031b"
                    }
                }
            ],
            "totalCount": 4
        },
        "createdAt": "2018-04-12T09:28:56Z",
        "deletions": 8,
        "id": "MDExOlB1bGxSZXF1ZXN0MTgxMTQxNTUw",
        "labels": {
            "nodes": [
                {
                    "color": "fef2c0",
                    "id": "MDU6TGFiZWwxNjQyMDg1NzI=",
                    "name": "Mempool"
                },
                {
                    "color": "5319e7",
                    "id": "MDU6TGFiZWw4MjQyODI1MQ==",
                    "name": "TX fees and policy"
                }
            ],
            "totalCount": 2
        },
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "number": 12966,
        "state": "OPEN",
        "title": "[WIP] Mempool optimized feerate",
        "updatedAt": "2018-04-18T23:17:39Z"
    },
    {
        "additions": 85,
        "author": {
            "avatarUrl": "https://avatars2.githubusercontent.com/u/863730?v=4",
            "login": "fanquake",
            "url": "https://github.com/fanquake"
        },
        "body": "Backports:\r\n- #12626 Limit the number of IPs addrman learns from each DNS seeder\r\n- #12650 gui: Fix issue: \"default port not shown correctly in settings dialog\"\r\n- #12756 [config] Remove blockmaxsize option\r\n- #12985 Windows: Avoid launching as admin when NSIS installer ends.\r\n- #12946 depends: Fix Qt build with XCode 9.3\r\n- #12999 qt: Show the Window when double clicking the taskbar icon\r\n\r\nto the 0.16 branch.",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
                        "login": "MarcoFalke"
                    },
                    "body": "ACK the gui changes. Also thanks for doing the backports!",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MDc5NzA5NQ==",
                    "publishedAt": "2018-04-12T13:02:29Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12967#issuecomment-380797095"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/7463573?v=4",
                        "login": "sdaftuar"
                    },
                    "body": "Neither of these are clean cherry-picks, unfortunately, but I thought I'd suggest backporting #12904 and #12902, both of which cause spurious test failures for me (I run the tests on the 0.16 branch regularly).",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MTY0MzYxNQ==",
                    "publishedAt": "2018-04-16T15:22:35Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12967#issuecomment-381643615"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/2559390?v=4",
                        "login": "Michagogo"
                    },
                    "body": "Regarding the NSIS bit, this may not be a good idea: https://mdb-blog.blogspot.com/2013/01/nsis-lunch-program-as-user-from-uac.html?showComment=1388694317801#c939517856791332836",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MjM0MTEwNQ==",
                    "publishedAt": "2018-04-18T10:27:44Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12967#issuecomment-382341105"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/863730?v=4",
                        "login": "fanquake"
                    },
                    "body": "~~~@sdaftuar I've added #12902 along with a few other commits. Will have a look at #12904 as well.~~~\r\nTest changes are happening in #13049.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MjM0MzE3OA==",
                    "publishedAt": "2018-04-18T10:36:09Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12967#issuecomment-382343178"
                }
            ],
            "totalCount": 4
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "da37d8342b1f0ffb0b05794140c8413dc6bd1a7e"
                    }
                }
            ],
            "totalCount": 6
        },
        "createdAt": "2018-04-12T10:27:59Z",
        "deletions": 26,
        "id": "MDExOlB1bGxSZXF1ZXN0MTgxMTU3NDEy",
        "labels": {
            "nodes": [
                {
                    "color": "c0ffff",
                    "id": "MDU6TGFiZWwzOTAwMjQ3OTA=",
                    "name": "Backport"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "number": 12967,
        "state": "OPEN",
        "title": "[0.16] Backports",
        "updatedAt": "2018-04-24T04:26:44Z"
    },
    {
        "additions": 291,
        "author": {
            "avatarUrl": "https://avatars2.githubusercontent.com/u/8421793?v=4",
            "login": "TheCharlatan",
            "url": "https://github.com/TheCharlatan"
        },
        "body": "With the introduction of Ubuntu 18.04 (Bionic Beaver) modern versions of gcc and mingw that allow compilation of versions of Qt greater than 5.8 are now readily available. This pull request implements optional Qt5.9.4 support for Windows and Linux depends static builds. Qt version 5.9.4 can be activated by setting the QT_59 flag when building depends, for example: `make HOST=x86_64-linux-gnu QT_59=1` , later the support for this version is activated in configure by passing in `--enable-qt59`, for example `CONFIG_SITE=`pwd`/depends/x86_64-linux-gnu/share/config.site ./configure --prefix=/ --enable-qt59`.\r\nSupport for macos is not provided yet in this pull request. I am not sure if the current SDK has recent enough tools to facilitate a build. ",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
                        "login": "MarcoFalke"
                    },
                    "body": "According to https://doc.qt.io/qt-5.10/supported-platforms-and-configurations.html#qt-5-9 gcc4.8 is supported. Also, I could build your receipt on ubuntu trusty, which comes with gcc4.8. I think you can get rid of the optional flag to compile qt5.9?\r\n\r\nEdit: I didn't try windows or mac cross builds, so those might be causing issues ... ?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MDk4ODE3MA==",
                    "publishedAt": "2018-04-13T00:56:40Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12971#issuecomment-380988170"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/863730?v=4",
                        "login": "fanquake"
                    },
                    "body": "The plan is to just move depends to Qt 5.9+ quite soon, I have been delayed doing that work. \r\nI don't think we want to want to have support for 5.7 and 5.9 in depends at the same time. \r\nWould you be interested in turning this work into a Qt 5.7 -> 5.9 upgrade?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MDk5MTkyNg==",
                    "publishedAt": "2018-04-13T01:23:43Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12971#issuecomment-380991926"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/8421793?v=4",
                        "login": "TheCharlatan"
                    },
                    "body": "@MarcoFalke The compiler version for linux native compilation is not a problem. It is though as soon as you are trying to cross compile to windows (which requires Mingw5.3). \r\nI originally did not want to open the pr for this reason, since it would mean that the current travis tests would be broken because of the windows build requirement. I heard though that @theuni is working on getting the entire toolchain on depends, so I decided to publish the patch nevertheless to prevent duplicate work and enable other developers to already compile bitcoin static with a modern Qt version. \r\n\r\nThe macos build needs some further investigation. It fails upon creating qmake and the current qmake patch does not seem to work. Upon some investigation, I saw that multiple people had to do some manual property setting on xcode to make the build work. I am not sure if this is related though. ",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MTA1MTA2MQ==",
                    "publishedAt": "2018-04-13T07:37:02Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12971#issuecomment-381051061"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
                        "login": "MarcoFalke"
                    },
                    "body": "> cross compile to windows (which requires Mingw5.3)\r\n\r\nHmm. Imo we could drop support for cross-compile to windows on trusty and just require xenial or above.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MTEzNzEzMw==",
                    "publishedAt": "2018-04-13T13:35:14Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12971#issuecomment-381137133"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
                        "login": "MarcoFalke"
                    },
                    "body": "Could do a rebase since #12946 is merged?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MTQxNjU1Ng==",
                    "publishedAt": "2018-04-15T15:51:56Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12971#issuecomment-381416556"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/8421793?v=4",
                        "login": "TheCharlatan"
                    },
                    "body": "Rebased.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MTQyMDAzMQ==",
                    "publishedAt": "2018-04-15T16:40:23Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12971#issuecomment-381420031"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/863730?v=4",
                        "login": "fanquake"
                    },
                    "body": "@TheCharlatan Thanks for the work so far, however did you see my comment above? I think this would be better as a straight 5.7 -> 5.9 upgrade, instead of adding an additional version of Qt to depends. We would like to use Qt 5.9+ to build the next release anyways.\r\n\r\nRegardless of the that this needs a few fixes.\r\n\r\nThere are currently [whitespace linting errors](https://travis-ci.org/bitcoin/bitcoin/jobs/366832841#L794).\r\n\r\nA linux Travis build is [currently failing](https://travis-ci.org/bitcoin/bitcoin/jobs/366832847):\r\n[linux-raw-log.txt](https://github.com/bitcoin/bitcoin/files/1913637/linux-raw-log.txt)\r\n\r\n```\r\nconfigure: error: Package requirements (Qt5PlatformSupport) were not met:\r\nNo package 'Qt5PlatformSupport' found\r\nConsider adjusting the PKG_CONFIG_PATH environment variable if you\r\ninstalled software in a non-standard prefix.\r\nAlternatively, you may set the environment variables QTPLATFORM_CFLAGS\r\nand QTPLATFORM_LIBS to avoid the need to call pkg-config.\r\nSee the pkg-config man page for more details.\r\nThis file contains any messages produced by compilers while\r\nrunning configure, to aid debugging if configure makes a mistake.\r\nIt was created by Bitcoin Core configure 0.16.99, which was\r\ngenerated by GNU Autoconf 2.69.  Invocation command line was\r\n  $ ../configure --cache-file=config.cache --disable-dependency-tracking --prefix=/home/travis/build/bitcoin/bitcoin/depends/x86_64-unknown-linux-gnu --bindir=/home/travis/build/bitcoin/bitcoin/out/12971/27461.7-x86_64-unknown-linux-gnu/bin --libdir=/home/travis/build/bitcoin/bitcoin/out/12971/27461.7-x86_64-unknown-linux-gnu/lib --enable-glibc-back-compat --enable-reduce-exports\r\n```\r\n\r\nThe macOS build would also need to be [fixed/updated](https://travis-ci.org/bitcoin/bitcoin/jobs/366832848):\r\n[macOS-raw-log.txt](https://github.com/bitcoin/bitcoin/files/1913643/macOS-raw-log.txt)\r\n\r\n```\r\nConfiguring qt59...\r\nCreating qmake...\r\nmake[1]: Entering directory `/home/travis/build/bitcoin/bitcoin/depends/work/build/x86_64-apple-darwin11/qt59/5.9.4-01715d30425/qtbase/qmake'\r\nmake[1]: Leaving directory `/home/travis/build/bitcoin/bitcoin/depends/work/build/x86_64-apple-darwin11/qt59/5.9.4-01715d30425/qtbase/qmake'\r\nInfo: creating cache file /home/travis/build/bitcoin/bitcoin/depends/work/build/x86_64-apple-darwin11/qt59/5.9.4-01715d30425/qtbase/.qmake.cache\r\nCommand line: -bindir /home/travis/build/bitcoin/bitcoin/depends/x86_64-apple-darwin11/native/bin -c++std c++11 -confirm-license -dbus-runtime -hostprefix /home/travis/build/bitcoin/bitcoin/depends/x86_64-apple-darwin11/native -no-cups -no-egl -no-eglfs -no-freetype -no-gif -no-glib -no-icu -no-iconv -no-kms -no-linuxfb -no-libudev -no-mtdev -no-openvg -no-reduce-relocations -no-qml-debug -no-sql-db2 -no-sql-ibase -no-sql-oci -no-sql-tds -no-sql-mysql -no-sql-odbc -no-sql-psql -no-sql-sqlite -no-sql-sqlite2 -no-use-gold-linker -nomake examples -nomake tests -opensource -openssl-linked -optimized-qmake -pch -pkg-config -prefix /home/travis/build/bitcoin/bitcoin/depends/x86_64-apple-darwin11 -qt-libpng -qt-libjpeg -qt-pcre -system-zlib -static -silent -v -release -xplatform macx-clang-linux -device-option MAC_SDK_PATH=/home/travis/build/bitcoin/bitcoin/depends/SDKs/MacOSX10.11.sdk -device-option MAC_SDK_VERSION=10.11 -device-option CROSS_COMPILE=x86_64-apple-darwin11- -device-option MAC_MIN_VERSION=10.8 -device-option MAC_TARGET=x86_64-apple-darwin11 -device-option MAC_LD64_VERSION=253.9\r\nProject ERROR: Could not resolve SDK --show-sdk-path for 'macosx'\r\nmake: *** [/home/travis/build/bitcoin/bitcoin/depends/work/build/x86_64-apple-darwin11/qt59/5.9.4-01715d30425/qtbase/.stamp_configured] Error 3\r\nmake: Leaving directory `/home/travis/build/bitcoin/bitcoin/depends'\r\n```",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MTQ2MDQxOA==",
                    "publishedAt": "2018-04-16T02:10:43Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12971#issuecomment-381460418"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/8421793?v=4",
                        "login": "TheCharlatan"
                    },
                    "body": "@fanquake thanks for the review. \r\nIf I were to change this to a straight upgrade, how would travis, or gitian windows builds be done?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MTQ5Nzk4NA==",
                    "publishedAt": "2018-04-16T06:55:47Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12971#issuecomment-381497984"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
                        "login": "MarcoFalke"
                    },
                    "body": "Our gitian descriptors will be switched to bionic soon: #12511. Similarly, we can switch travis to xenial. Those will happen in separate pull request, so don't worry about them.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MTU4NTEyOA==",
                    "publishedAt": "2018-04-16T12:39:52Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12971#issuecomment-381585128"
                }
            ],
            "totalCount": 9
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "f870067fbfa7f4d4d8ba1ed9cf96e09bf4ea0e17"
                    }
                }
            ],
            "totalCount": 1
        },
        "createdAt": "2018-04-13T00:07:25Z",
        "deletions": 23,
        "id": "MDExOlB1bGxSZXF1ZXN0MTgxMzU2MTU5",
        "labels": {
            "nodes": [
                {
                    "color": "5319e7",
                    "id": "MDU6TGFiZWw2MTg4OTQxNg==",
                    "name": "Build system"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "number": 12971,
        "state": "OPEN",
        "title": "Ugrade Qt depends to Qt5.9.4",
        "updatedAt": "2018-04-16T12:39:52Z"
    },
    {
        "additions": 574,
        "author": {
            "avatarUrl": "https://avatars0.githubusercontent.com/u/649246?v=4",
            "login": "TheBlueMatt",
            "url": "https://github.com/TheBlueMatt"
        },
        "body": "These are the non-feeestimator-specific refactoring commits from #11775, mostly focusing on splitting the validationinterface into two parlell interfaces.\r\n\r\nThere were no changes except reordering commits and rebasing on latest master.",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
                        "login": "MarcoFalke"
                    },
                    "body": "weak re-utACK e95db395592c763e8c77f619db7a8f5dbaa0a604 (Only changes were a rebase to solve conflicts and three minor comment clarifications)",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MjA0Nzc4Ng==",
                    "publishedAt": "2018-04-17T16:02:09Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12979#issuecomment-382047786"
                }
            ],
            "totalCount": 1
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "ab3f927538021a89e38cfa55a312bb8c0a0adb46"
                    }
                }
            ],
            "totalCount": 10
        },
        "createdAt": "2018-04-13T18:58:38Z",
        "deletions": 528,
        "id": "MDExOlB1bGxSZXF1ZXN0MTgxNTcwMjY0",
        "labels": {
            "nodes": [
                {
                    "color": "E6F6D6",
                    "id": "MDU6TGFiZWwxMzU5NjE=",
                    "name": "Refactoring"
                },
                {
                    "color": "6060aa",
                    "id": "MDU6TGFiZWwxMTgzNzk2NTI=",
                    "name": "Validation"
                }
            ],
            "totalCount": 2
        },
        "mergeable": "CONFLICTING",
        "mergedAt": null,
        "number": 12979,
        "state": "OPEN",
        "title": "Split validationinterface into paralell validation/mempool interfaces",
        "updatedAt": "2018-04-20T22:45:48Z"
    },
    {
        "additions": 3,
        "author": {
            "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
            "login": "jonasschnelli",
            "url": "https://github.com/jonasschnelli"
        },
        "body": "",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
                        "login": "promag"
                    },
                    "body": "Concept ACK. Will review.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MTI1MzQ1Mg==",
                    "publishedAt": "2018-04-13T20:33:37Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12980#issuecomment-381253452"
                }
            ],
            "totalCount": 1
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "404c7a10ff301a9399c51c5f5a4d502061196c42"
                    }
                }
            ],
            "totalCount": 1
        },
        "createdAt": "2018-04-13T19:27:03Z",
        "deletions": 0,
        "id": "MDExOlB1bGxSZXF1ZXN0MTgxNTc2Mzc1",
        "labels": {
            "nodes": [
                {
                    "color": "E6F6D6",
                    "id": "MDU6TGFiZWwxMzU5NjE=",
                    "name": "Refactoring"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "number": 12980,
        "state": "OPEN",
        "title": "Allow quicker shutdowns during LoadBlockIndex()",
        "updatedAt": "2018-04-16T00:18:10Z"
    },
    {
        "additions": 45,
        "author": {
            "avatarUrl": "https://avatars0.githubusercontent.com/u/5767891?v=4",
            "login": "instagibbs",
            "url": "https://github.com/instagibbs"
        },
        "body": "Keypath data is a much more reliable way of detecting change outputs. \r\n\r\nThere are a number of cases where the legacy detection fails, leading to odd results, such as a wallet rescan that results in missed results in `listtransactions` with self-sends.",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/5767891?v=4",
                        "login": "instagibbs"
                    },
                    "body": "I will add listtransaction test soon.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MTI3MDA5OQ==",
                    "publishedAt": "2018-04-13T21:55:02Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12983#issuecomment-381270099"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/5767891?v=4",
                        "login": "instagibbs"
                    },
                    "body": "pushed a test that covered a corner case this fixes\r\n\r\nI realize the test itself carries a comment describing yet another corner case I've stumbled on that doesn't have any super easy fix. For the purposes of the testing what we care about I just set `keypool=2` for a single node near the end of the test, but I could also just have the entire test with this setting, as it changes nothing about the overarching tests in place.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MTM2NDM1MA==",
                    "publishedAt": "2018-04-14T22:12:02Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12983#issuecomment-381364350"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "utACK 843e07cd5ffb4c9f8d73ef0e2aeed03303122a5b\r\nSeems to not create any performance impacts.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MTkwNjI2NQ==",
                    "publishedAt": "2018-04-17T08:52:16Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12983#issuecomment-381906265"
                }
            ],
            "totalCount": 3
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "843e07cd5ffb4c9f8d73ef0e2aeed03303122a5b"
                    }
                }
            ],
            "totalCount": 2
        },
        "createdAt": "2018-04-13T21:54:05Z",
        "deletions": 19,
        "id": "MDExOlB1bGxSZXF1ZXN0MTgxNjA0MzU2",
        "labels": {
            "nodes": [
                {
                    "color": "08a781",
                    "id": "MDU6TGFiZWwxNDk0MjQ=",
                    "name": "Wallet"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "number": 12983,
        "state": "OPEN",
        "title": "[wallet] Modify change identification to use hdsplit keypath",
        "updatedAt": "2018-04-17T14:06:17Z"
    },
    {
        "additions": 3,
        "author": {
            "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
            "login": "practicalswift",
            "url": "https://github.com/practicalswift"
        },
        "body": "Make the columns in subsequent `UpdateTip` log entries horizontally aligned. This change improves usability by making it easier to follow the `tx`, `date`, `progress` and `cache` values over time.\r\n\r\nBefore this commit:\r\n\r\n```\r\n2019-01-01T00:00:01Z UpdateTip: new best=\u2026 log2_work=69.12542 tx=9560969 date='2018-12-05T18:58:07Z' progress=0.029954 cache=442.8MiB(3363038txo)\r\n2019-01-01T00:00:02Z UpdateTip: new best=\u2026 log2_work=69.125457 tx=9561022 date='2018-12-05T19:00:07Z' progress=0.029955 cache=442.8MiB(3362966txo)\r\n2019-01-01T00:00:03Z UpdateTip: new best=\u2026 log2_work=69.12549 tx=9561034 date='2018-12-05T19:05:44Z' progress=0.029955 cache=442.8MiB(3362970txo)\r\n2019-01-01T00:00:04Z UpdateTip: new best=\u2026 log2_work=69.125523 tx=9561231 date='2018-12-05T19:08:07Z' progress=0.029955 cache=442.8MiB(3363051txo)\r\n2019-01-01T00:00:05Z UpdateTip: new best=\u2026 log2_work=69.1255 tx=9561382 date='2018-12-05T19:20:45Z' progress=0.029956 cache=442.9MiB(3363120txo)\r\n```\r\n\r\nAfter this commit:\r\n\r\n```\r\n2019-01-01T00:00:01Z UpdateTip: new best=\u2026 log2_work=69.125420 tx=9560969 date='2018-12-05T18:58:07Z' progress=0.029954 cache=442.8MiB(3363038txo)\r\n2019-01-01T00:00:02Z UpdateTip: new best=\u2026 log2_work=69.125457 tx=9561022 date='2018-12-05T19:00:07Z' progress=0.029955 cache=442.8MiB(3362966txo)\r\n2019-01-01T00:00:03Z UpdateTip: new best=\u2026 log2_work=69.125490 tx=9561034 date='2018-12-05T19:05:44Z' progress=0.029955 cache=442.8MiB(3362970txo)\r\n2019-01-01T00:00:04Z UpdateTip: new best=\u2026 log2_work=69.125523 tx=9561231 date='2018-12-05T19:08:07Z' progress=0.029955 cache=442.8MiB(3363051txo)\r\n2019-01-01T00:00:05Z UpdateTip: new best=\u2026 log2_work=69.125500 tx=9561382 date='2018-12-05T19:20:45Z' progress=0.029956 cache=442.9MiB(3363120txo)\r\n```\r\n",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1063656?v=4",
                        "login": "jnewbery"
                    },
                    "body": "Very weak concept ACK. More readable is more readable, and this should backwards compatible for any logs parsers. However, I doubt this is really causing any issues for users.\r\n\r\nYou can remove the `.6`. Precision to 6 places is the default for the `f` specifier.\r\n\r\nNote that logs may still be misaligned, since `height` and `tx` are variable length:\r\n\r\n```\r\n2018-04-16T16:34:54.121611Z UpdateTip: new best=656e322c61225c569e5ddff92a8fd76f5e75caedcb939c84e5c983b55d03e8d6 height=6 version=0x00000001 log2_work=3.807355 tx=7 date='2018-04-16T16:34:59Z' progress=1.000000 cache=0.0MiB(6txo)\r\n2018-04-16T16:34:54.122402Z UpdateTip: new best=4ff634020e0a6fa840ce804c060edf48cc6546e06a968f1ef35ea1c76a3c0296 height=7 version=0x00000001 log2_work=4.000000 tx=8 date='2018-04-16T16:35:00Z' progress=1.000000 cache=0.0MiB(7txo)\r\n2018-04-16T16:34:54.123955Z UpdateTip: new best=7a19ad4c4b46af72439150c63f7caf2cdc895b8965ebc2474ad446b64d4400df height=8 version=0x00000001 log2_work=4.169925 tx=9 date='2018-04-16T16:35:01Z' progress=1.000000 cache=0.0MiB(8txo)\r\n2018-04-16T16:34:54.125164Z UpdateTip: new best=29dc32b5768e040b0f4c7d113b318b4289822620df853acffb1d99e371ae7186 height=9 version=0x00000001 log2_work=4.321928 tx=10 date='2018-04-16T16:35:02Z' progress=1.000000 cache=0.0MiB(9txo)\r\n2018-04-16T16:34:54.126942Z UpdateTip: new best=25e6d690728852ebca2668184f593281ad8d8fe7b14453f16d26d59ec9dcf67f height=10 version=0x00000001 log2_work=4.459432 tx=11 date='2018-04-16T16:35:03Z' progress=1.000000 cache=0.0MiB(10txo)\r\n2018-04-16T16:34:54.128761Z UpdateTip: new best=05f226635e04ec8d7d03a77de80357a3bb63b12cd0feff4852e0efad72e57b87 height=11 version=0x00000001 log2_work=4.584963 tx=12 date='2018-04-16T16:35:04Z' progress=1.000000 cache=0.0MiB(11txo)\r\n```",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MTY2OTg2MQ==",
                    "publishedAt": "2018-04-16T16:42:03Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12984#issuecomment-381669861"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "@jnewbery Thanks for the review! I'm now using `%f`.\r\n\r\nI'm scratching my own itch here: I interact with `bitcoind` solely via the command-line and I find the column jumping due to the `log2_work` formatting to make the output harder to read (my logs consist almost solely of `UpdateTip` messages) :-)\r\n\r\nUsability is about making the overall experience more pleasant (often by small incremental improvements) \u2013 not necessarily \"fixing issues\" :-)\r\n\r\nIn my experience `height` and `tx` are not a problem in the same way since they only jump to the right on 10x increases.\r\n\r\nPlease re-review :-)",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MTcwMjU2NA==",
                    "publishedAt": "2018-04-16T18:25:02Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12984#issuecomment-381702564"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1063656?v=4",
                        "login": "jnewbery"
                    },
                    "body": "utACK 43dd50258ea48e6c6f49f4be5858e6c69c9597ed",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MTcwOTM5Nw==",
                    "publishedAt": "2018-04-16T18:48:33Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12984#issuecomment-381709397"
                }
            ],
            "totalCount": 3
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "43dd50258ea48e6c6f49f4be5858e6c69c9597ed"
                    }
                }
            ],
            "totalCount": 1
        },
        "createdAt": "2018-04-14T12:55:31Z",
        "deletions": 3,
        "id": "MDExOlB1bGxSZXF1ZXN0MTgxNjQ2NTI4",
        "labels": {
            "nodes": [
                {
                    "color": "5319e7",
                    "id": "MDU6TGFiZWwyNDE4MzI5MjM=",
                    "name": "Utils/log/libs"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "number": 12984,
        "state": "OPEN",
        "title": "logs: Make the columns in subsequent UpdateTip log entries horizontally aligned",
        "updatedAt": "2018-04-16T18:48:33Z"
    },
    {
        "additions": 53,
        "author": {
            "avatarUrl": "https://avatars2.githubusercontent.com/u/6299681?v=4",
            "login": "PierreRochard",
            "url": "https://github.com/PierreRochard"
        },
        "body": "After multiple wallets became supported, wallet-related\r\nlog messages became ambiguous as to which wallet they\r\nwere being emitted by.\r\n\r\nfixes #11317",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/6299681?v=4",
                        "login": "PierreRochard"
                    },
                    "body": "Thank you @dooglus for bringing attention to this in #11317 and opening #11320. \r\n\r\nThis is #11320 with the following changes:\r\n * rebased on master\r\n * added the wallet name in three additional logging messages for `rpcdump.cpp`'s `importwallet` function\r\n\r\nIn #11320 @promag and @luke-jr suggested approaches to reducing the repetition of `\"[%s]\" GetName()` boilerplate. @jimpo, in the context of #12954, what are your thoughts?\r\n\r\nThis is outside of the scope of this PR and may be controversial, but I do think we would benefit from automated testing of log messages. This could either be done by checking the `debug.log` of nodes in existing tests, or as a separate test script.\r\n\r\nOpen questions:\r\n\r\n1. There are logging calls in two `WalletBatch` methods where it's not immediately apparent to me how to get the wallet's name: `WalletBatch::FindWalletTx` and `WalletBatch::RecoverKeysOnlyFilter`. Is there something I'm not seeing? If the only solution is refactoring then I'll leave them alone in this PR.\r\n\r\n2. `CWallet`'s `m_name` defaults to an empty string, so we end up with lots of empty square brackets in the log messages. Should we have a default wallet name?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MTQ0MzU2Nw==",
                    "publishedAt": "2018-04-15T22:35:53Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12992#issuecomment-381443567"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/881253?v=4",
                        "login": "jimpo"
                    },
                    "body": "I luke-jr's suggestion of `CWallet::LogPrintf`. The main benefit is not even reducing boilerplate, it's to reduce the amount of refactoring required if someone decides that there is a better way of presenting the wallet info on the log line. Also, I think it'll be more obvious that way when people add new log statements in wallet files as compared to noticing the extra log argument and having to realize that it's a standard.\r\n\r\nWith regards to #12954, I don't see any issues. Won't even be a git conflict, I don't think.\r\n\r\nThis is an example of a case where [structured logging](https://stackify.com/what-is-structured-logging-and-why-developers-need-it/) might be useful (being able to tag log statments with key-value pairs in a not-ad-hoc way). I know the Bitcoin ABC team is thinking about this.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MTQ4NTI4MA==",
                    "publishedAt": "2018-04-16T05:39:47Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12992#issuecomment-381485280"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
                        "login": "MarcoFalke"
                    },
                    "body": "Agree that it makes sense to move this to `CWallet::LogPrintf` instead.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MTU5ODMyMA==",
                    "publishedAt": "2018-04-16T13:25:43Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12992#issuecomment-381598320"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1063656?v=4",
                        "login": "jnewbery"
                    },
                    "body": "Concept ACK. I agree that `CWallet::LogPrintf` would be useful.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MTYxMDQ3NQ==",
                    "publishedAt": "2018-04-16T14:03:45Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12992#issuecomment-381610475"
                }
            ],
            "totalCount": 4
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "2a967c9c584d0799cf53231786e13b8f57f546c8"
                    }
                }
            ],
            "totalCount": 1
        },
        "createdAt": "2018-04-15T22:25:15Z",
        "deletions": 52,
        "id": "MDExOlB1bGxSZXF1ZXN0MTgxNzI0NzU1",
        "labels": {
            "nodes": [
                {
                    "color": "08a781",
                    "id": "MDU6TGFiZWwxNDk0MjQ=",
                    "name": "Wallet"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "CONFLICTING",
        "mergedAt": null,
        "number": 12992,
        "state": "OPEN",
        "title": "[wallet] Add wallet name to log messages",
        "updatedAt": "2018-04-16T14:03:45Z"
    },
    {
        "additions": 6,
        "author": {
            "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
            "login": "MarcoFalke",
            "url": "https://github.com/MarcoFalke"
        },
        "body": "According to https://wiki.ubuntu.com/Releases#End_of_Life, Zesty is EOL, so bump to Artful for now.\r\n\r\nNote that Artful is going to be EOL soon as well, so I am not sure how to proceed after that.",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/11154118?v=4",
                        "login": "ken2812221"
                    },
                    "body": "Maybe we can wait for Bionic to be released",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MTk5MTc3Mw==",
                    "publishedAt": "2018-04-17T13:27:11Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12997#issuecomment-381991773"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
                        "login": "MarcoFalke"
                    },
                    "body": "@ken2812221 We should do that if WSL supports Bionic. Though, I am not sure what their schedule is to officially switch from Xenial to Bionic.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MTk5NzUxMA==",
                    "publishedAt": "2018-04-17T13:44:22Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12997#issuecomment-381997510"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "No strong opinion but as Bionic will be out so soon I'm not sure it makes sense to do this in the meantime. As you say, artful as non-LTS release is very short-lived.\r\n\r\nAlso: installing packages from a newer Ubuntu distro on Xenial is still a weird, and potentially breaking thing to do. I hope WSL will switch to Bionic soon and all of this workaround can go!\r\n\r\nin any acse if you tested it you have my concept ACK.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MjAxOTc3NA==",
                    "publishedAt": "2018-04-17T14:46:48Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12997#issuecomment-382019774"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
                        "login": "MarcoFalke"
                    },
                    "body": "I did test by running through the whole readme step by step. Though, as you mention, it definitely breaks (other) things, so I am all for switching to Bionic as soon as WSL has it out.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MjA0OTY4MA==",
                    "publishedAt": "2018-04-17T16:08:00Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12997#issuecomment-382049680"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/11154118?v=4",
                        "login": "ken2812221"
                    },
                    "body": "ACK fad2958 \r\n\r\nThere are [some ways](https://github.com/Microsoft/WSL/issues/2618) to install Bionic on WSL from squashfs file. However, it's not official.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MjI1MDMwOQ==",
                    "publishedAt": "2018-04-18T03:57:40Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/12997#issuecomment-382250309"
                }
            ],
            "totalCount": 5
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "fad29582c4f370981c494f6595613c95b172ac40"
                    }
                }
            ],
            "totalCount": 1
        },
        "createdAt": "2018-04-16T15:38:03Z",
        "deletions": 6,
        "id": "MDExOlB1bGxSZXF1ZXN0MTgxOTA3MDY4",
        "labels": {
            "nodes": [
                {
                    "color": "02d7e1",
                    "id": "MDU6TGFiZWwxNDgyMTY=",
                    "name": "Docs"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "number": 12997,
        "state": "OPEN",
        "title": "[doc] build-windows: Switch to Artful, since Zesty is EOL",
        "updatedAt": "2018-04-18T03:57:40Z"
    },
    {
        "additions": 90,
        "author": {
            "avatarUrl": "https://avatars1.githubusercontent.com/u/548488?v=4",
            "login": "sipa",
            "url": "https://github.com/sipa"
        },
        "body": "Currently our wallet code will treat bare multisig outputs (meaning scriptPubKeys with multiple public keys + `OP_CHECKMULTISIG` operator in it) as ours without the user asking for it, as long as all private keys in it are in our wallet.\r\n\r\nThis is a pointless feature. As it only works when all private keys are in one place, it's useless compared to single key outputs (P2PK, P2PKH, P2WPKH, P2SH-P2WPKH), and worse in terms of space, cost, UTXO size, and ability to test (due to lack of address format for them).\r\n\r\nFurthermore, they are problematic in that producing a list of all `scriptPubKeys` we accept is not tractable (it involves all combinations of all public keys that are ours). In further wallet changes I'd like to move to a model where all scriptPubKeys that are treated as ours are explicit, rather than defined by whatever keys we have. The current behavior of the wallet is very hard to model in such a design, so I'd like to get rid of it.\r\n\r\nI think there are two options:\r\n* Remove it entirely (do not ever accept bare multisig outputs as ours, unless watched)\r\n* Only accept bare multisig outputs in situations where the P2SH version of that output would also be acceptable\r\n\r\nThis PR implements the first option. The second option was explored in #12874.\r\n",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/548488?v=4",
                        "login": "sipa"
                    },
                    "body": "Addressed @promag's nits, and added a few more code cleanups.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MjU0NTEzOA==",
                    "publishedAt": "2018-04-18T22:09:38Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/13002#issuecomment-382545138"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/548488?v=4",
                        "login": "sipa"
                    },
                    "body": "Addressed @promag's nits.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MjU3NzE4NQ==",
                    "publishedAt": "2018-04-19T01:10:02Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/13002#issuecomment-382577185"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
                        "login": "promag"
                    },
                    "body": "@sipa thanks.\r\n\r\nCode wise ACK 2687bd0.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MjU3OTYyOQ==",
                    "publishedAt": "2018-04-19T01:25:44Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/13002#issuecomment-382579629"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/881253?v=4",
                        "login": "jimpo"
                    },
                    "body": "utACK 7d0f80b",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4NDAzMzM3NA==",
                    "publishedAt": "2018-04-24T18:27:03Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/13002#issuecomment-384033374"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
                        "login": "promag"
                    },
                    "body": "utACK 7d0f80b.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4NDA4MTQ0Nw==",
                    "publishedAt": "2018-04-24T21:11:33Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/13002#issuecomment-384081447"
                }
            ],
            "totalCount": 5
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "7d0f80bbf4de8c17b6db9a035ba32698ad076e2e"
                    }
                }
            ],
            "totalCount": 9
        },
        "createdAt": "2018-04-17T01:13:11Z",
        "deletions": 44,
        "id": "MDExOlB1bGxSZXF1ZXN0MTgyMDI3MDAx",
        "labels": {
            "nodes": [
                {
                    "color": "08a781",
                    "id": "MDU6TGFiZWwxNDk0MjQ=",
                    "name": "Wallet"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "number": 13002,
        "state": "OPEN",
        "title": "Do not treat bare multisig outputs as IsMine unless watched",
        "updatedAt": "2018-04-24T21:11:33Z"
    },
    {
        "additions": 116,
        "author": {
            "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
            "login": "MarcoFalke",
            "url": "https://github.com/MarcoFalke"
        },
        "body": "",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "Concept ACK - nice!",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MTk0MzY5Ng==",
                    "publishedAt": "2018-04-17T10:43:04Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/13003#issuecomment-381943696"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
                        "login": "MarcoFalke"
                    },
                    "body": "Added a commit to address the documentation nit",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4NDAxODk1MA==",
                    "publishedAt": "2018-04-24T17:41:02Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/13003#issuecomment-384018950"
                }
            ],
            "totalCount": 2
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "fa02c5b38b4343e70ddb656c971c9707075f5a8f"
                    }
                }
            ],
            "totalCount": 2
        },
        "createdAt": "2018-04-17T03:17:32Z",
        "deletions": 26,
        "id": "MDExOlB1bGxSZXF1ZXN0MTgyMDQxMDU0",
        "labels": {
            "nodes": [
                {
                    "color": "d4c5f9",
                    "id": "MDU6TGFiZWw2Mjk2MzUxNg==",
                    "name": "Tests"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "number": 13003,
        "state": "OPEN",
        "title": "qa: Add test for orphan handling",
        "updatedAt": "2018-04-24T17:41:02Z"
    },
    {
        "additions": 36,
        "author": {
            "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
            "login": "practicalswift",
            "url": "https://github.com/practicalswift"
        },
        "body": "Cherry-picked (and rebased) 94189645e67f364c4445d62e2b00c282d885cbbf from the \"up for grabs\" PR: \"[build] Make --enable-debug pick better options\" (#12695).\r\n\r\nSee previous review in #12695.\r\n\r\n",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "One small thing that needs to be fixed before merge is that `CPPFLAGS`, `CXXFLAGS` and `LDFLAGS` gets stuffed with redundant spaces when printing which looks a bit messy:\r\n\r\n```\r\n$ ./configure\r\n\u2026\r\n  CC            = gcc\r\n  CFLAGS        = -g -O2\r\n  CPPFLAGS      =   -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=2  -DHAVE_BUILD_INFO -D__STDC_FORMAT_MACROS\r\n  CXX           = g++ -std=c++11\r\n  CXXFLAGS      =   -Wstack-protector -fstack-protector-all   -g -O2 -Wall -Wextra -Wformat -Wvla -Wformat-security -Wno-unused-parameter\r\n  LDFLAGS       = -pthread  -Wl,-z,relro -Wl,-z,now -pie\r\n  ARFLAGS       = cr\r\n```\r\n\r\nI'll find a way to fix that.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MTkxMjY4OQ==",
                    "publishedAt": "2018-04-17T09:09:35Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/13005#issuecomment-381912689"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "Added a commit fixing the annoying extra whitespace:\r\n\r\n```\r\n$ ./configure\r\n\u2026\r\n  CC            = gcc\r\n  CFLAGS        = -g -O2\r\n  CPPFLAGS      = -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=2 -DHAVE_BUILD_INFO -D__STDC_FORMAT_MACROS\r\n  CXX           = g++ -std=c++11\r\n  CXXFLAGS      = -Wstack-protector -fstack-protector-all -g -O2 -Wall -Wextra -Wformat -Wvla -Wformat-security -Wno-unused-parameter\r\n  LDFLAGS       = -pthread -Wl,-z,relro -Wl,-z,now -pie\r\n  ARFLAGS       = cr\r\n```\r\n\r\nPlease review :-)",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MTkyNDk3MA==",
                    "publishedAt": "2018-04-17T09:44:34Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/13005#issuecomment-381924970"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "re-utACK\r\nPing @theuni - he proposed some changes in #12695, so would like to know if he's ok with the current state.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MjMzMDQ4Ng==",
                    "publishedAt": "2018-04-18T09:48:07Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/13005#issuecomment-382330486"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/7133040?v=4",
                        "login": "ryanofsky"
                    },
                    "body": "utACK 8a0ad1a2333b329d6eb8d34a25277181ee675f23. The first commit is just rebased and has no changes since my previous review in the other PR. The second commit is new and looks ok, though I think the echo_joined function is overkill. I think you should just drop quotes around the variables and let the shell collapse spaces:\r\n\r\n```sh\r\necho \"  CXXFLAGS      =\" $DEBUG_CXXFLAGS $HARDENED_CXXFLAGS $ERROR_CXXFLAGS $CXXFLAGS\r\n```",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MjUxMjU3Mw==",
                    "publishedAt": "2018-04-18T20:07:05Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/13005#issuecomment-382512573"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/417043?v=4",
                        "login": "theuni"
                    },
                    "body": "Agree with @ryanofsky about echo_joined. I'd prefer to just drop the second commit.\r\nutACK otherwise.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MjU1ODcxNQ==",
                    "publishedAt": "2018-04-18T23:17:20Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/13005#issuecomment-382558715"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/2734?v=4",
                        "login": "eklitzke"
                    },
                    "body": "Apologies, I was travelling without access to my laptop while this was put up for grabs. This seems fine but I think we came to the conclusion that we should not try to join the output, which was where my first commit was at. We can fix the whitespace formatting in another pass using AX_APPEND_COMPILE_FLAGS. ",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MjU2OTE1Mw==",
                    "publishedAt": "2018-04-19T00:17:56Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/13005#issuecomment-382569153"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "@eklitzke Good idea about fixing the whitespace with `AX_APPEND_COMPILE_FLAGS`. Could you help with a diff for that?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MjYxODgyMQ==",
                    "publishedAt": "2018-04-19T05:53:51Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/13005#issuecomment-382618821"
                }
            ],
            "totalCount": 7
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "8a0ad1a2333b329d6eb8d34a25277181ee675f23"
                    }
                }
            ],
            "totalCount": 2
        },
        "createdAt": "2018-04-17T08:47:57Z",
        "deletions": 12,
        "id": "MDExOlB1bGxSZXF1ZXN0MTgyMDkzMjgw",
        "labels": {
            "nodes": [
                {
                    "color": "5319e7",
                    "id": "MDU6TGFiZWw2MTg4OTQxNg==",
                    "name": "Build system"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "number": 13005,
        "state": "OPEN",
        "title": "Make --enable-debug to pick better options",
        "updatedAt": "2018-04-19T05:53:51Z"
    },
    {
        "additions": 11,
        "author": {
            "avatarUrl": "https://avatars2.githubusercontent.com/u/54533?v=4",
            "login": "IPGlider",
            "url": "https://github.com/IPGlider"
        },
        "body": "In `getmempoolancestors`, `getmempooldescendants`, `getmempoolentry` and `getrawmempool` RPCs `size` returns the virtual transaction size as defined in BIP 141. Renaming it to `vsize` makes it consistent with returned value and other calls such as `getrawtransaction`.\r\n\r\nRelated to #11218.",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/863730?v=4",
                        "login": "fanquake"
                    },
                    "body": "@IPGlider You'll also need to update ```test/functional/mining_prioritisetransaction.py```. See the Travis [build failure](https://travis-ci.org/bitcoin/bitcoin/jobs/367787349#L2408).\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MjI3MzcxMA==",
                    "publishedAt": "2018-04-18T06:10:29Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/13008#issuecomment-382273710"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/54533?v=4",
                        "login": "IPGlider"
                    },
                    "body": "@fanquake Thanks for letting me know. I have now fixed the tests. I will squash the commits if requested.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MjM1NjUxOA==",
                    "publishedAt": "2018-04-18T11:34:44Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/13008#issuecomment-382356518"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/5470?v=4",
                        "login": "Empact"
                    },
                    "body": "Squash please.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MjM5NDQzNg==",
                    "publishedAt": "2018-04-18T13:54:13Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/13008#issuecomment-382394436"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/54533?v=4",
                        "login": "IPGlider"
                    },
                    "body": "I have kept the size field for compatibility as requested by @MarcoFalke. I also added a deprecation message and squashed the commits. Let me know if anything else is needed.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4Mjc0NzgwNg==",
                    "publishedAt": "2018-04-19T14:02:24Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/13008#issuecomment-382747806"
                }
            ],
            "totalCount": 4
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "98e9e9aef509941349d6a80891ea2c2455746615"
                    }
                }
            ],
            "totalCount": 1
        },
        "createdAt": "2018-04-17T18:17:54Z",
        "deletions": 8,
        "id": "MDExOlB1bGxSZXF1ZXN0MTgyMjUyNDg4",
        "labels": {
            "nodes": [
                {
                    "color": "0052cc",
                    "id": "MDU6TGFiZWw5ODI3OTE3Nw==",
                    "name": "RPC/REST/ZMQ"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "number": 13008,
        "state": "OPEN",
        "title": "rpc: Rename size to vsize in mempool related calls",
        "updatedAt": "2018-04-19T14:55:53Z"
    },
    {
        "additions": 78,
        "author": {
            "avatarUrl": "https://avatars3.githubusercontent.com/u/18470351?v=4",
            "login": "wbarobinson",
            "url": "https://github.com/wbarobinson"
        },
        "body": "",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/863730?v=4",
                        "login": "fanquake"
                    },
                    "body": "Thanks for the contribution. Some of these changes seem like re-writing for the sake of re-writing/updating. In any case, please [squash](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#squashing-commits) all your changes into a single commit with a descriptive [commit message](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#contributor-workflow). ",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MjI3NDQxMA==",
                    "publishedAt": "2018-04-18T06:14:06Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/13010#issuecomment-382274410"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "Concept ACK, but please squash into one commit and remove the trailing whitespace:\r\n\r\n```\r\nThis diff appears to have added new lines with trailing whitespace.\r\nThe following changes were suspected:\r\ndiff --git a/doc/tor.md b/doc/tor.md\r\n@@ -108,2 +108,2 @@ Connecting to Tor's control socket API requires one of two authentication method\r\n+configured. For cookie authentication the user running bitcoind must have write access\r\n+to the `CookieAuthFile` specified in Tor configuration. In some cases, this is\r\n@@ -111 +111 @@ preconfigured and the creation of a hidden service is automatic. If permission p\r\n+are seen with `-debug=tor` they can be resolved by adding both the user running Tor and\r\n^---- failure generated from contrib/devtools/lint-whitespace.sh\r\n```",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MjM3OTQ4Mg==",
                    "publishedAt": "2018-04-18T13:05:57Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/13010#issuecomment-382379482"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "Nice first-time documentation contribution. Thanks! Please squash into one commit.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MjQwMzAyMg==",
                    "publishedAt": "2018-04-18T14:18:56Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/13010#issuecomment-382403022"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/18470351?v=4",
                        "login": "wbarobinson"
                    },
                    "body": "Thank you for your feedback, you have been super helpful. I have squashed the commits.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4Mjc1MjE5MQ==",
                    "publishedAt": "2018-04-19T14:13:47Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/13010#issuecomment-382752191"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "ACK 791075c609a759f70b2536ce6d9a8e404ba70404",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4Mjc1NDY0Mg==",
                    "publishedAt": "2018-04-19T14:20:01Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/13010#issuecomment-382754642"
                }
            ],
            "totalCount": 5
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "791075c609a759f70b2536ce6d9a8e404ba70404"
                    }
                }
            ],
            "totalCount": 1
        },
        "createdAt": "2018-04-17T20:31:58Z",
        "deletions": 79,
        "id": "MDExOlB1bGxSZXF1ZXN0MTgyMjkwMzUx",
        "labels": {
            "nodes": [
                {
                    "color": "02d7e1",
                    "id": "MDU6TGFiZWwxNDgyMTY=",
                    "name": "Docs"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "number": 13010,
        "state": "OPEN",
        "title": "Trivial: Language Cleanup",
        "updatedAt": "2018-04-23T21:57:53Z"
    },
    {
        "additions": 18,
        "author": {
            "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
            "login": "MarcoFalke",
            "url": "https://github.com/MarcoFalke"
        },
        "body": "Also, delete copy and move constructor, since references or smart\r\npointers are preferred.",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "Concept ACK",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MjM3ODc2MA==",
                    "publishedAt": "2018-04-18T13:03:27Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/13011#issuecomment-382378760"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/7463573?v=4",
                        "login": "sdaftuar"
                    },
                    "body": "@sipa raised design concerns with caching data like this in CTransaction previously (see #9700)",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MjcyMDM3Mg==",
                    "publishedAt": "2018-04-19T12:45:45Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/13011#issuecomment-382720372"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/649246?v=4",
                        "login": "TheBlueMatt"
                    },
                    "body": "Honestly I think we need to revive #9700. Now that SegWit has some use, giving up on the huge performance gains of that (and this) for (IMO) minor design concerns is an absurd tradeoff.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MzE0Mjc3Ng==",
                    "publishedAt": "2018-04-20T16:01:28Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/13011#issuecomment-383142776"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/548488?v=4",
                        "login": "sipa"
                    },
                    "body": "Then at the very least introduce alternate versions of CTransaction/CBlock that don't precompute anything, for use in reindexing and rescanning and serving blocks from disk. Otherwise you'll waste your time computing wtxids/sighashes in those cases, where they're never used.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MzE0NTA0Ng==",
                    "publishedAt": "2018-04-20T16:09:09Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/13011#issuecomment-383145046"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/649246?v=4",
                        "login": "TheBlueMatt"
                    },
                    "body": "Indeed, though we may want to look into something wholesale smarter for rescan, its already impossibly slow even when considering the amount of I/O required.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MzE0NTkyOQ==",
                    "publishedAt": "2018-04-20T16:11:48Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/13011#issuecomment-383145929"
                }
            ],
            "totalCount": 5
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "fa77996373fa82870f003665ee2af59b55c137a5"
                    }
                }
            ],
            "totalCount": 1
        },
        "createdAt": "2018-04-17T21:05:42Z",
        "deletions": 20,
        "id": "MDExOlB1bGxSZXF1ZXN0MTgyMjk4NjU0",
        "labels": {
            "nodes": [
                {
                    "color": "6060aa",
                    "id": "MDU6TGFiZWwxMTgzNzk2NTI=",
                    "name": "Validation"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "number": 13011,
        "state": "OPEN",
        "title": "Cache witness hash in CTransaction",
        "updatedAt": "2018-04-23T10:11:16Z"
    },
    {
        "additions": 96,
        "author": {
            "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
            "login": "jonasschnelli",
            "url": "https://github.com/jonasschnelli"
        },
        "body": "Idea is outlined here: #12651\r\n\r\nThis allows to enable the txindex when pruning is enabled.\r\nDuring pruning a block file, the `CDiskTxPos` objects in the txindex do get migrated to a \"per-blockheight\" approach allowing to get the blockhash and tx-position of every txid.\r\n\r\nOnce #10794 (`requestblocks`, or similar) is merged, `getrawtransaction` could wait until the block is fetched via the connected peers and return the transaction. Retrieving a transaction would still be fast enough for non-high-load usage (less then a second to a couple of seconds).\r\n\r\nThis would allow to run a txindex with ~20GB of diskspace for non high-load usage like personal block explorers.\r\n\r\nToDo:\r\n* [ ] Tests\r\n* [ ] Release-Notes",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/10217?v=4",
                        "login": "Sjors"
                    },
                    "body": "Does this work on top of #11857?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MjY5NTQzMQ==",
                    "publishedAt": "2018-04-19T11:04:08Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/13014#issuecomment-382695431"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "@sjors: I originally developed this on top of 11857... it's a trivial offset. So yes. It works on top of that.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MjcwNzQyMA==",
                    "publishedAt": "2018-04-19T11:56:20Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/13014#issuecomment-382707420"
                }
            ],
            "totalCount": 2
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "ce86c1aa6fbe4c4ccf86033a31f08ebfbec7a1db"
                    }
                }
            ],
            "totalCount": 4
        },
        "createdAt": "2018-04-18T07:49:25Z",
        "deletions": 28,
        "id": "MDExOlB1bGxSZXF1ZXN0MTgyMzk0MTE2",
        "labels": {
            "nodes": [
                {
                    "color": "fbca04",
                    "id": "MDU6TGFiZWw5NzQ3MDc5Ng==",
                    "name": "UTXO Db and Indexes"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "number": 13014,
        "state": "OPEN",
        "title": "Allow txindex in prune mode",
        "updatedAt": "2018-04-23T21:09:40Z"
    },
    {
        "additions": 219,
        "author": {
            "avatarUrl": "https://avatars0.githubusercontent.com/u/195769?v=4",
            "login": "skeees",
            "url": "https://github.com/skeees"
        },
        "body": "Originally this PR was just to add tests around concurrency in block validation - those tests seem to have uncovered another bug in ActivateBestChain - this now fixes that bug and adds tests.\r\n\r\nActivateBestChain (invoked after a new block is validated) proceeds in steps - acquiring and releasing cs_main while incrementally disconnecting and connecting blocks to sync to the most work chain known (FindMostWorkChain()). Every time cs_main is released the result of FindMostWorkChain() can change - but currently that value is cached across acquisitions of cs_main and only refreshed when an invalid chain is explored. It needs to be refreshed every time cs_main is reacquired. The test added in https://github.com/bitcoin/bitcoin/pull/13023/commits/6094ce73045fe0b4654ff94327c2059512af88fb will occasionally fail without the commit fixing this issue https://github.com/bitcoin/bitcoin/pull/13023/commits/26bfdbaddbb9f13864deb7241c6d513f22c5ab62\r\n\r\n\r\nOriginal description below\r\n--\r\n\r\nAfter a bug discovered where UpdatedBlockTip() notifications could be triggered out of order (#12978), these unit tests check certain invariants about these signals.\r\n\r\nThe scheduler test asserts that a SingleThreadedSchedulerClient processes callbacks fully and sequentially.\r\n\r\nThe block validation test generates a random chain and calls ProcessNewBlock from multiple threads at random and in parallel. ValidationInterface callbacks verify that the ordering of BlockConnected BlockDisconnected and UpdatedBlockTip events occur as expected.",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/195769?v=4",
                        "login": "skeees"
                    },
                    "body": "Updated to address reviewer comments and fix a bug that this test seems to have uncovered",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MzEzMjc0Mw==",
                    "publishedAt": "2018-04-20T15:27:36Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/13023#issuecomment-383132743"
                }
            ],
            "totalCount": 1
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "6094ce73045fe0b4654ff94327c2059512af88fb"
                    }
                }
            ],
            "totalCount": 3
        },
        "createdAt": "2018-04-18T20:09:34Z",
        "deletions": 5,
        "id": "MDExOlB1bGxSZXF1ZXN0MTgyNTg5MTE0",
        "labels": {
            "nodes": [
                {
                    "color": "6060aa",
                    "id": "MDU6TGFiZWwxMTgzNzk2NTI=",
                    "name": "Validation"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "number": 13023,
        "state": "OPEN",
        "title": "Always refresh most work chain when reacquiring cs_main in ActivateBestChain()",
        "updatedAt": "2018-04-23T18:38:22Z"
    },
    {
        "additions": 7,
        "author": {
            "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
            "login": "promag",
            "url": "https://github.com/promag"
        },
        "body": "This PR turns the functions introduced in #13017 thread safe. This is required to correctly support dynamically loading wallets, which is implemented in #10740.",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
                        "login": "promag"
                    },
                    "body": "Please review #13017 first.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4Mjc0MzkwNA==",
                    "publishedAt": "2018-04-19T13:52:32Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/13028#issuecomment-382743904"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1063656?v=4",
                        "login": "jnewbery"
                    },
                    "body": "Concept ACK.\r\n\r\nNote that this will allow dynamically loading wallets, but more is required before we add dynamic unloading of wallets (this doesn't prevent one thread from removing a wallet while another thread still has a pointer to that wallet).",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4Mjg4MzMwMQ==",
                    "publishedAt": "2018-04-19T21:16:09Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/13028#issuecomment-382883301"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
                        "login": "promag"
                    },
                    "body": "> this doesn't prevent one thread from removing a wallet while another thread still has a pointer to that wallet\r\n\r\n@jnewbery true, that's one of the reasons to switch to shared pointers. A wallet can be unregistered and only (enqueued-to-)(unloaded+released) when reference count is zero.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MjkzMzU0Nw==",
                    "publishedAt": "2018-04-20T01:22:49Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/13028#issuecomment-382933547"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
                        "login": "promag"
                    },
                    "body": "#13017 is merged, rebased.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MzQ3Mzg1NA==",
                    "publishedAt": "2018-04-23T06:59:10Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/13028#issuecomment-383473854"
                }
            ],
            "totalCount": 4
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "e2f58f421b1a6e360bbf7efdfbba398918ce19d3"
                    }
                }
            ],
            "totalCount": 1
        },
        "createdAt": "2018-04-19T13:52:18Z",
        "deletions": 1,
        "id": "MDExOlB1bGxSZXF1ZXN0MTgyNzgzNjUw",
        "labels": {
            "nodes": [
                {
                    "color": "08a781",
                    "id": "MDU6TGFiZWwxNDk0MjQ=",
                    "name": "Wallet"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "number": 13028,
        "state": "OPEN",
        "title": "Make vpwallets usage thread safe",
        "updatedAt": "2018-04-24T16:26:27Z"
    },
    {
        "additions": 93,
        "author": {
            "avatarUrl": "https://avatars1.githubusercontent.com/u/10217?v=4",
            "login": "Sjors",
            "url": "https://github.com/Sjors"
        },
        "body": "`bool fPruneMode` is replaced by an enum class to include an `UNKNOWN` state.\r\n\r\n`fHavePruned` is used to set `fPruneNode` if argument is not explictly set.",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/10217?v=4",
                        "login": "Sjors"
                    },
                    "body": "I may have been a bit overzealous with `assert(fPruneMode != PruneMode::UNKNOWN`.\r\n\r\n`fHavePruned` is unknown during `ParameterInteraction` methods, because it is loaded from block index db, the location of which could be set by a parameter. It might be more elegant to split the `ParameterInteraction` methods into before and after databases have been loaded. That might also help to avoid various remaining instances of `gArgs.GetArg(\"-prune\"`.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4Mjc2MDEwMg==",
                    "publishedAt": "2018-04-19T14:34:58Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/13029#issuecomment-382760102"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "I'm not entirely sure about this. Guessing values for options according to context has the drawback that the system becomes less transparent, harder to troubleshoot. \r\n\r\nAlso it's good to avoid `IsArgSet` as much as possible as it's not possible to re-set an argument back to unset state, even by clearing it.\r\n\r\nIt also seems a large code change for what feels like a small argument handling change.\r\n\r\nAnd if we do this, should we do the same for txindex?\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MzgyNTg3NQ==",
                    "publishedAt": "2018-04-24T07:04:33Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/13029#issuecomment-383825875"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "@Sjors: can you elaborate a little bit the use case this solves?\r\n\r\nAgree with @laanwj that other arguments would have the same problem (if we would agree it is a problem).\r\nIt seems that this adds unnecessary complexity.\r\nI think the current behaviour of refusing to run pruned blockchains where `prune=` is not set is correct.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4Mzg0MzM2Mw==",
                    "publishedAt": "2018-04-24T08:12:02Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/13029#issuecomment-383843363"
                }
            ],
            "totalCount": 3
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "7a65e3c41eb977c0445c52ba4977faaae058a27f"
                    }
                }
            ],
            "totalCount": 1
        },
        "createdAt": "2018-04-19T14:27:32Z",
        "deletions": 33,
        "id": "MDExOlB1bGxSZXF1ZXN0MTgyNzk0NTkx",
        "labels": {
            "nodes": [],
            "totalCount": 0
        },
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "number": 13029,
        "state": "OPEN",
        "title": "Interpret absense of prune= as prune=1 if there are pruned blocks",
        "updatedAt": "2018-04-24T08:12:02Z"
    },
    {
        "additions": 12,
        "author": {
            "avatarUrl": "https://avatars0.githubusercontent.com/u/197660?v=4",
            "login": "sipsorcery",
            "url": "https://github.com/sipsorcery"
        },
        "body": "This PR allows utiltime.cpp to compile with msvc after the changes introduced in #12973.",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/417043?v=4",
                        "login": "theuni"
                    },
                    "body": "I closed #9566 because I thought it was getting out of hand, but since we're going that way anyway, here's how my attempt at it looked back then:\r\nhttps://github.com/bitcoin/bitcoin/pull/9566/files#diff-8e9b29a6133dd7bf43643c37c5c4689aR27",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MjkxMDA3NQ==",
                    "publishedAt": "2018-04-19T23:19:50Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/13031#issuecomment-382910075"
                }
            ],
            "totalCount": 1
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "abd58a2fcae767e9074c49b64e9c89e5168d7005"
                    }
                }
            ],
            "totalCount": 1
        },
        "createdAt": "2018-04-19T22:46:45Z",
        "deletions": 0,
        "id": "MDExOlB1bGxSZXF1ZXN0MTgyOTE4Mzg0",
        "labels": {
            "nodes": [
                {
                    "color": "5319e7",
                    "id": "MDU6TGFiZWwyNDE4MzI5MjM=",
                    "name": "Utils/log/libs"
                },
                {
                    "color": "884400",
                    "id": "MDU6TGFiZWwyMzQ4Nzc=",
                    "name": "Windows"
                }
            ],
            "totalCount": 2
        },
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "number": 13031,
        "state": "OPEN",
        "title": "Fix for utiltime to compile with msvc.",
        "updatedAt": "2018-04-20T16:12:26Z"
    },
    {
        "additions": 758,
        "author": {
            "avatarUrl": "https://avatars3.githubusercontent.com/u/881253?v=4",
            "login": "jimpo",
            "url": "https://github.com/jimpo"
        },
        "body": "I'm re-opening #11857 as a new pull request because the last one stopped loading for people\r\n\r\n-------------------------------\r\n\r\nThis refactors the tx index code to be in it's own class and get built concurrently with validation code. The main benefit is decoupling and moving the txindex into a separate DB. The primary motivation is to lay the groundwork for other indexers that might be desired (such as the [compact filters](https://github.com/bitcoin/bips/pull/636)). The basic idea is that the TxIndex spins up its own thread, which first syncs the txindex to the current block index, then once in sync the BlockConnected ValidationInterface hook writes new blocks.\r\n\r\n### DB changes\r\n\r\nAt the suggestion of some other developers, the txindex has been split out into a separate database. A data migration runs at startup on any nodes with a legacy txindex. Currently the migration blocks node initialization until complete.\r\n\r\n### Open questions\r\n\r\n- Should the migration of txindex data from the old DB to the new DB block in init or should it happen in a background thread? The downside to backgrounding it is that `getrawtransaction` would return an error message saying the txindex is syncing while the migration is running.\r\n\r\n### Impact\r\n\r\nIn a sample size n=1 test where I synced nodes from scratch, the average time [Index writing](https://github.com/bitcoin/bitcoin/blob/master/src/validation.cpp#L1903) was 3.36ms in master and 1.72ms in this branch. The average time between `UpdateTip` log lines for sequential blocks between 400,000 and IBD end on mainnet was 0.297204s in master and 0.286134s in this branch. Most likely this is just variance in IBD times, but I can try with some more trials if people want.",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/10217?v=4",
                        "login": "Sjors"
                    },
                    "body": "If anyone wants to read the old PR and has difficulty loading the page, it helps to use another browser session that's logged out.\r\n\r\nOnly comment of mine I'd like to export to this PR is the suggestion to backport \"the migration code that removes txindex without requiring a reindex would be useful for folks who regret having set `txindex=1` on a node with slow hardware.\"\r\n\r\nTested 3272b17637c5, including `kill -9`ing the migration from legacy to the new db.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MzA0NTk1NA==",
                    "publishedAt": "2018-04-20T09:49:21Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/13033#issuecomment-383045954"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/73197?v=4",
                        "login": "jamesob"
                    },
                    "body": "Reverse chron. summary of ACKs from #11857:\r\n- @TheBlueMatt: utACK https://github.com/bitcoin/bitcoin/commit/523dd763bfe39150e369332e415215d33f2a3ef5\r\n- @jamesob: Tested ACK https://github.com/bitcoin/bitcoin/commit/ea8be45ace75b649584c163deca3051c4f33aa16\r\n- @jtimon: Concept ACK\r\n- @ryanofsky: utACK https://github.com/bitcoin/bitcoin/commit/806b2f1764b6e5a9c7abec887bfa89cd386648d8\r\n- @Sjors: Tested (ACK, maybe?) https://github.com/bitcoin/bitcoin/commit/806b2f1764b6e5a9c7abec887bfa89cd386648d8\r\n- @jonasschnelli: Concept ACK\r\n- @sipa: Concept ACK\r\n- @laanwj: Concept ACK\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MzYyOTM3Mg==",
                    "publishedAt": "2018-04-23T16:03:11Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/13033#issuecomment-383629372"
                }
            ],
            "totalCount": 2
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "40eabf6a71eef65cf66b20300988323fcc1afcb5"
                    }
                }
            ],
            "totalCount": 12
        },
        "createdAt": "2018-04-20T00:11:26Z",
        "deletions": 86,
        "id": "MDExOlB1bGxSZXF1ZXN0MTgyOTMwMTA4",
        "labels": {
            "nodes": [
                {
                    "color": "fbca04",
                    "id": "MDU6TGFiZWw5NzQ3MDc5Ng==",
                    "name": "UTXO Db and Indexes"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "number": 13033,
        "state": "OPEN",
        "title": "Build txindex in parallel with validation",
        "updatedAt": "2018-04-24T22:20:16Z"
    },
    {
        "additions": 129,
        "author": {
            "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
            "login": "promag",
            "url": "https://github.com/promag"
        },
        "body": "This PR (re)introduces `WalletManager` but follows a different approach than #12587 by @jonasschnelli. It builds on top of #13028 and #13017.\r\n\r\nA global `g_wallet_manager` instance is also added which is only available in builds with `ENABLE_WALLET`.\r\n\r\nThe goal here is to have a better place for all code that manages wallet instances, which will be useful for: \r\n - wallet lifecycle;\r\n - wallet background tasks coordination (flush for instance);\r\n - src/interface/walletmanager.h for UI and process separation (@ryanofsky sgty?);\r\n - RPC wallet load/unload calls.",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
                        "login": "promag"
                    },
                    "body": "Note to reviewers, I would prefer to have base PR's reviewed and merged first, but feel free to stay around and comment.\r\n\r\n2nd commit is mostly moved code (67420d3).",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4Mjk0MDU1Mg==",
                    "publishedAt": "2018-04-20T01:54:33Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/13034#issuecomment-382940552"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/7133040?v=4",
                        "login": "ryanofsky"
                    },
                    "body": "> which will be useful for [...] src/interface/walletmanager.h for UI and process separation (@ryanofsky sgty?);\r\n\r\nIt does not seem correct to me to claim shallow organizational changes like this PR, #12587, or #13017 will help with process separation or with loading and unloading wallets after startup. I don't think these changes will hurt anything either (except maybe giving me a few interesting merge conflicts to resolve in 0b39b173e32e1a6e54abbd8d583cd0321a8b26c2 from #10973). But at best they seem like flailing around with code organization and running in place.\r\n\r\nPersonally, I would prefer to just manage wallets with standard c++ data structures and synchronization primitives instead of having a management interface. But if you'd prefer to have a management interface, I don't see a reason why you'd want it to use pimpl, or a reason why you would want to expose and duplicate it in [`src/interfaces/`](https://github.com/bitcoin/bitcoin/tree/master/src/interfaces) outside the wallet, instead of just adding a simple `handleUnloadWallet` callback for the GUI to complement the existing [`handleLoadWallet`](https://github.com/bitcoin/bitcoin/blob/8b262eb2d80bfa27ae8501078ce47bc1407e9c55/src/interfaces/node.h#L214-L216) and [`getWallets`](https://github.com/bitcoin/bitcoin/blob/8b262eb2d80bfa27ae8501078ce47bc1407e9c55/src/interfaces/node.h#L191-L192).\r\n\r\nAll of these are just surface disagreements about code organization, though, that really don't have any effect on features. If I could encourage you to work on an actual feature, I think it would be either writing code to implement wallet unloading, or writing a design doc or sequence diagram showing what data structures in the GUI and wallet need to be updated in what order for wallet unloading to work safely and responsively. ",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MzA1OTQ1MQ==",
                    "publishedAt": "2018-04-20T10:48:15Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/13034#issuecomment-383059451"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
                        "login": "promag"
                    },
                    "body": "@ryanofsky thanks for the feedback.\r\n\r\n> I don't see a reason why you'd want it to use pimpl\r\n\r\nNo reason at all, removed.\r\n\r\n> Personally, I would prefer to just manage wallets with standard c++ data structures and synchronization primitives instead of having a management interface\r\n\r\nIn the case of dynamic wallet load/unload that would lead to code duplication right? - UI and RPC layers want to load/unload wallets.\r\n\r\n> But if you'd prefer to have a management interface\r\n\r\nIt's not a matter of my preference. It just makes sense to have such entity like `CAddrMan`, `CConnman` and `BanMan`. Also, see PR description for other things that can be handled by `WalletManager`.\r\n\r\n> All of these are just surface disagreements about code organization, though, that really don't have any effect on features.\r\n\r\n> It does not seem correct to me to claim shallow organizational changes like this PR, #12587, or #13017 will help with process separation or with loading and unloading wallets after startup\r\n\r\nI disagree if these changes make it easy to actually implement and review those features. Historically big PR's lack  reviews, have lots of discussions and later are usually split in multiple PR's.\r\n\r\n>  If I could encourage you to work on an actual feature, I think it would be either writing code to implement wallet unloading\r\n\r\nI am, please read PR description and #11402 rationale.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MzA4MDQ2OQ==",
                    "publishedAt": "2018-04-20T12:29:46Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/13034#issuecomment-383080469"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
                        "login": "promag"
                    },
                    "body": "> why you would want to expose and duplicate it in src/interfaces/ outside the wallet, instead of just adding a simple handleUnloadWallet callback for the GUI to complement the existing handleLoadWallet and getWallets.\r\n\r\n@ryanofsky I don't, I was asking for your feedback. So you also suggest to add `interfaces::Node::loadWallet` and `interfaces::Node::unloadWallet` and or alike?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MzA4MjUzNg==",
                    "publishedAt": "2018-04-20T12:38:20Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/13034#issuecomment-383082536"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/7133040?v=4",
                        "login": "ryanofsky"
                    },
                    "body": "> So you also suggest to add interfaces::Node::loadWallet and interfaces::Node::unloadWallet and or alike?\r\n\r\n`loadWallet` might make sense in short term. Longer term with #10102, though I think it would be replaced by a `makeWallet` method in [`interfaces::Init`](https://github.com/ryanofsky/bitcoin/blob/pr/ipc/src/interfaces/init.h) to allow the GUI to create wallets without going through the node at all.\r\n\r\n`unloadWallet` should probably be avoided in favor of having more flexible shutdown methods on the `Wallet` interface itself and cleanup in the destructor.\r\n\r\nMore broadly, I think there will probably be multiple PRs updating the GUI to support wallet loading and unloading. The first PR might follow up #10740 and use existing `handleLoadWallet` callback to get newly loaded wallets to show up in the GUI. Independently there could be a PR that adds a `handleUnloadWallet` method and removes unloaded wallets in the GUI. And there could be one or two PRs adding GUI controls for loading and unloading wallets adding a new `loadWallet` method. And a cleanup PR could drop `getWallets` after dynamic loading works.\r\n\r\nBut the implementation of all these features will primarily consist of updates to gui and wallet code. Changes to `interfaces/` code should only be one or two line diffs, and basically be an afterthought.\r\n\r\n>> Personally, I would prefer to just manage wallets with standard c++ data structures and synchronization primitives instead of having a management interface\r\n\r\n> In the case of dynamic wallet load/unload that would lead to code duplication right? - UI and RPC layers want to load/unload wallets.\r\n\r\nNo, but this is a bikeshed debate, so please implement what you like! My preference would be to use `std::vector<std::unique_ptr<interfaces::Wallet>>` in the gui code and `std::map<std::string, std::weak_ptr<CWallet>>` in rpc and wallet code, along with plain mutexes and condition variables. But if you and others prefer more layered abstractions in the style of `WalletManager`, more power to you!\r\n\r\n> > But if you'd prefer to have a management interface\r\n\r\n> It's not a matter of my preference. It just makes sense to have such entity like CAddrMan, CConnman and BanMan.\r\n\r\nDisagree, but this is the same bikeshed debate, so again you should feel free to proceed in whatever way makes sense to you. In my opinion, it makes sense to have classes like `AddrMan` and `ConnMan` that manage more complex state, but it doesn't necessarily make sense to have a class that just manages a list of pointers.\r\n\r\n> Also, see PR description for other things that can be handled by WalletManager.\r\n\r\nYeah, I didn't mention it, but this seemed pretty weird to me. This suggests having a bunch of methods that pertain to _individual_ wallets as part of a class that's supposed to be about managing a _list_ of wallets. Again, this is another bikeshed debate: you might prefer a code organization with more nested layers, and I might prefer an code organization with fewer layers, but I don't think the difference is very important, and I do think you should implement what you like.\r\n\r\n> I disagree if these changes make it easy to actually implement and review those features. Historically big PR's lack reviews, have lots of discussions and later are usually split in multiple PR's.\r\n\r\nIt's doesn't seem true to me that introducing WalletManager helps implement process separation or wallet unloading. You should feel free to add it anyway, but I think if you sat down and drew a sequence diagram of how wallet and gui state needs to be updated when an unload request comes in, the data structures and notification mechanisms that should be used, and tradeoffs in layering would become more clear, and you could start implementing features more simply without unnecessarily shuffling a bunch of code around first.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MzEyNDUwOA==",
                    "publishedAt": "2018-04-20T15:00:32Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/13034#issuecomment-383124508"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1063656?v=4",
                        "login": "jnewbery"
                    },
                    "body": "needs rebase",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4Mzk4NjQ2NA==",
                    "publishedAt": "2018-04-24T15:59:37Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/13034#issuecomment-383986464"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
                        "login": "promag"
                    },
                    "body": "Rebased.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4Mzk5NjY0MA==",
                    "publishedAt": "2018-04-24T16:30:09Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/13034#issuecomment-383996640"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1063656?v=4",
                        "login": "jnewbery"
                    },
                    "body": "Seems reasonable. Is the plan for `WalletManager` to eventually subsume `WalletInit`?\r\n\r\nTested ACK d04cd68d5d1a6b1ddaa36b9eb6884014f62da6ea",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4NDAyMDM5Mg==",
                    "publishedAt": "2018-04-24T17:45:42Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/13034#issuecomment-384020392"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
                        "login": "promag"
                    },
                    "body": "@jnewbery thanks for the review.\r\n\r\n> Is the plan for WalletManager to eventually subsume WalletInit?\r\n\r\nIMO some code in `WalletInit` could be moved to `WalletManager`, especially the one that can be used by dynamic wallet load/unloading. `WalletInit` would call those new methods.\r\n\r\nSome other code of `CWallet` could be moved here too. I'll follow up.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4NDAyOTM3OQ==",
                    "publishedAt": "2018-04-24T18:13:53Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/13034#issuecomment-384029379"
                }
            ],
            "totalCount": 9
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "d04cd68d5d1a6b1ddaa36b9eb6884014f62da6ea"
                    }
                }
            ],
            "totalCount": 2
        },
        "createdAt": "2018-04-20T01:53:23Z",
        "deletions": 64,
        "id": "MDExOlB1bGxSZXF1ZXN0MTgyOTQxMDA5",
        "labels": {
            "nodes": [
                {
                    "color": "E6F6D6",
                    "id": "MDU6TGFiZWwxMzU5NjE=",
                    "name": "Refactoring"
                },
                {
                    "color": "08a781",
                    "id": "MDU6TGFiZWwxNDk0MjQ=",
                    "name": "Wallet"
                }
            ],
            "totalCount": 2
        },
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "number": 13034,
        "state": "OPEN",
        "title": "Introduce WalletManager",
        "updatedAt": "2018-04-24T18:13:53Z"
    },
    {
        "additions": 203,
        "author": {
            "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
            "login": "practicalswift",
            "url": "https://github.com/practicalswift"
        },
        "body": "This linter will check for code accidentally introducing locale dependencies.\r\n\r\nUnnecessary locale dependence can cause bugs that are very tricky to isolate and fix. We should avoid using locale dependent functions if possible.\r\n\r\nContext: https://github.com/bitcoin/bitcoin/pull/12881#issuecomment-378564722\r\n\r\nExample output:\r\n\r\n```\r\n$ contrib/devtools/lint-locale-dependence.sh\r\nThe locale dependent function tolower(...) appears to be used:\r\nsrc/init.cpp:    if (s[0] == '0' && std::tolower(s[1]) == 'x') {\r\n\r\nUnnecessary locale dependence can cause bugs that are very\r\ntricky to isolate and fix. Please avoid using locale dependent\r\nfunctions if possible.\r\n\r\nAdvice not applicable in this specific case? Add an exception\r\nby updating the ignore list in contrib/devtools/lint-locale-dependence.sh\r\n```\r\n\r\n**Note to reviewers:** What is the most appropriate `LOCALE_DEPENDENT_FUNCTIONS` function list? What should be added or removed?",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "@laanwj Do you think the `LOCALE_DEPENDENT_FUNCTIONS` list is correct? :-)",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MzM2ODE5Mg==",
                    "publishedAt": "2018-04-22T09:36:27Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/13041#issuecomment-383368192"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "Concept ACK. I think this is a good idea.\r\n\r\n> @laanwj Do you think the LOCALE_DEPENDENT_FUNCTIONS list is correct? :-)\r\n\r\nIt's a good start.\r\nPlease add `strftime` too, that's the one that caused recent discussion in #12973.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MzU4Mzk3MQ==",
                    "publishedAt": "2018-04-23T13:55:38Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/13041#issuecomment-383583971"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "@laanwj `strftime` and `strptime` added. Please re-review :-)",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MzU4NjgyNw==",
                    "publishedAt": "2018-04-23T14:04:19Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/13041#issuecomment-383586827"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "@laanwj Updated version with the known violations list split over multiple lines. Please re-review :-)",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MzYwODg4Nw==",
                    "publishedAt": "2018-04-23T15:06:12Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/13041#issuecomment-383608887"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "Candidates for inclusion in the list of locale dependent functions:\r\n\r\n```\r\n$ nm /usr/lib/debug/lib/x86_64-linux-gnu/libc-2.23.so | grep -E '_l$' | \\\r\n      cut -f3 -d' ' | grep -E '^[a-z]' | sort | sed 's/_l$//g'\r\nisalnum\r\nisalpha\r\nisblank\r\niscntrl\r\nisdigit\r\nisgraph\r\nislower\r\nisprint\r\nispunct\r\nisspace\r\nisupper\r\niswalnum\r\niswalpha\r\niswblank\r\niswcntrl\r\niswctype\r\niswdigit\r\niswgraph\r\niswlower\r\niswprint\r\niswpunct\r\niswspace\r\niswupper\r\niswxdigit\r\nisxdigit\r\nnl_langinfo\r\nstrcasecmp\r\nstrcoll\r\nstrerror\r\nstrfmon\r\nstrftime\r\nstrncasecmp\r\nstrptime\r\nstrtod\r\nstrtof\r\nstrtold\r\nstrtol\r\nstrtoll\r\nstrtoul\r\nstrtoull\r\nstrxfrm\r\ntolower\r\ntoupper\r\ntowctrans\r\ntowlower\r\ntowupper\r\nwcscasecmp\r\nwcscoll\r\nwcsftime\r\nwcsncasecmp\r\nwcstod\r\nwcstof\r\nwcstold\r\nwcstol\r\nwcstoll\r\nwcstoul\r\nwcstoull\r\nwcsxfrm\r\nwctrans\r\nwctype\r\n```",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MzYxNTEwNw==",
                    "publishedAt": "2018-04-23T15:24:07Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/13041#issuecomment-383615107"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "The use of `strtoul(...)` and `strtoull(...)` might be problematic too?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MzYxNzc3Mw==",
                    "publishedAt": "2018-04-23T15:31:12Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/13041#issuecomment-383617773"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "Updated: Added more functions to `LOCALE_DEPENDENT_FUNCTIONS`. Added two known violations for `strtoul(...)` and `strtoull(...)` in `utilstrencodings.cpp`.\r\n\r\nPlease re-review :-)",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MzYyMTEyMw==",
                    "publishedAt": "2018-04-23T15:40:23Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/13041#issuecomment-383621123"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "utACK 29b73b509f1aa537a835f9e75878622c3a18335f",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MzgxNTQ5Mw==",
                    "publishedAt": "2018-04-24T06:13:49Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/13041#issuecomment-383815493"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "@theuni @sipa Your language expertise is needed :-)\r\n\r\nIf you have time to review this PR \u2013 does  `LOCALE_DEPENDENT_FUNCTIONS` look reasonable? :-)",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4Mzg2NjM3NA==",
                    "publishedAt": "2018-04-24T09:28:49Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/13041#issuecomment-383866374"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "Updated:\r\n* Added more functions to `LOCALE_DEPENDENT_FUNCTIONS`.\r\n* Added known `atoi(\u2026)` violations for `bitcoin-tx.cpp`, `init.cpp`, `qt/rpcconsole.cpp`, `torcontrol.cpp`, `util.cpp`, `utilstrencodings.cpp` and `utilstrencodings.h`.\r\n* Added known `*printf(\u2026)` violations for `dbwrapper.cpp`, `test/dbwrapper_tests.cpp` and `util.cpp`.\r\n* Now invoking `git grep` only once in order to minimize run-time.\r\n\r\nPlease re-review :-)",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MzkxMTUzNA==",
                    "publishedAt": "2018-04-24T12:26:34Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/13041#issuecomment-383911534"
                }
            ],
            "totalCount": 10
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "ddb17190afd89b120f6ac7f9b0b0458d092ffade"
                    }
                }
            ],
            "totalCount": 1
        },
        "createdAt": "2018-04-20T12:20:11Z",
        "deletions": 0,
        "id": "MDExOlB1bGxSZXF1ZXN0MTgzMDQ1Nzkz",
        "labels": {
            "nodes": [
                {
                    "color": "ffffee",
                    "id": "MDU6TGFiZWwyMzE5OTQ1NTE=",
                    "name": "Scripts and tools"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "number": 13041,
        "state": "OPEN",
        "title": "build: Add linter checking for accidental introduction of locale dependence",
        "updatedAt": "2018-04-24T16:22:02Z"
    },
    {
        "additions": 4,
        "author": {
            "avatarUrl": "https://avatars1.githubusercontent.com/u/20664531?v=4",
            "login": "qshuai",
            "url": "https://github.com/qshuai"
        },
        "body": "#### There are two reasons to remove the code(as you see):\r\n- The calculated nBits will be replaced by the following GetNextWorkRequired(.) function. So calculating difficulty(nBits) in UpdateTime() function is meaningless. The main chain does not matter. But testnet will exec twice.\r\n- UpdateTime() function should remain single role for updating timestamp item of block.",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/20664531?v=4",
                        "login": "qshuai"
                    },
                    "body": "As mentioned above(testnet will exec twice), the referenced code is [here](https://github.com/bitcoin/bitcoin/blob/master/src/miner.cpp#L168-L169).\r\n```\r\nUpdateTime(pblock, chainparams.GetConsensus(), pindexPrev); \r\npblock->nBits          = GetNextWorkRequired(pindexPrev, pblock, chainparams.GetConsensus());\r\n```",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MzgxOTMyNA==",
                    "publishedAt": "2018-04-24T06:34:02Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/13042#issuecomment-383819324"
                }
            ],
            "totalCount": 1
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "f404765c8ba6ca16f0c7d9e274fd64cf28675a6b"
                    }
                }
            ],
            "totalCount": 1
        },
        "createdAt": "2018-04-20T12:46:06Z",
        "deletions": 8,
        "id": "MDExOlB1bGxSZXF1ZXN0MTgzMDUxNzE4",
        "labels": {
            "nodes": [
                {
                    "color": "E6F6D6",
                    "id": "MDU6TGFiZWwxMzU5NjE=",
                    "name": "Refactoring"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "number": 13042,
        "state": "OPEN",
        "title": "Calculated nBits will be replaced by the following GetNextWorkRequire\u2026",
        "updatedAt": "2018-04-24T06:34:03Z"
    },
    {
        "additions": 128,
        "author": {
            "avatarUrl": "https://avatars1.githubusercontent.com/u/10217?v=4",
            "login": "Sjors",
            "url": "https://github.com/Sjors"
        },
        "body": "The default suggested value is 20 GB; ~1 month of worst case data. Minimum is 1 GB (550 MB rounded up).\r\n\r\nWhen the user toggles this setting, a strong warning appears that undoing requires re-downloading the chain:\r\n\r\n<img width=\"499\" alt=\"warning\" src=\"https://user-images.githubusercontent.com/10217/39052845-9d4a3c1e-44ad-11e8-99a4-d86d785f5123.png\">\r\n\r\nTooltip points out that actual disk usage can be higher. It's a bit vague on the \"advanced features\", because I'm assuming anyone who needs to use `-rescan` and `-txindex` will read the documentation, and a more detailed text would needlessly confuse everyone else.\r\n\r\n<img width=\"610\" alt=\"default\" src=\"https://user-images.githubusercontent.com/10217/39052840-995c2a7c-44ad-11e8-8088-1c6da42d11f1.png\">\r\n\r\n\r\nThe UI uses gigabytes for readability and easy of use. There is also no manual pruning UI (`prune=1`). The user will have to use `bitcoin.conf` for those things.\r\n\r\nFixes #6461. When combined with #13029 the user, after pruning their node, can safely reset settings and/or use bitcoind without having to edit `bitcoin.conf`. However I don't think that's an essential prerequisite.",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "Concept ACK, will test and review. THanks a lot for adding this.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MzUzNTk1MQ==",
                    "publishedAt": "2018-04-23T10:58:19Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/13043#issuecomment-383535951"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/178464?v=4",
                        "login": "jonasschnelli"
                    },
                    "body": "Nice! Concept ACK.\r\nThanks for adding this\r\nOne thought: why not adding this (additionally) to the intro screen (including showing the approximate disk usage reduction)?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MzU0OTM3OA==",
                    "publishedAt": "2018-04-23T11:56:23Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/13043#issuecomment-383549378"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "> The default suggested value is 20 GB; ~1 month of worst case data. Minimum is 1 GB (550 MB rounded up).\r\n\r\nWhat would be the motivation to not to default to the minimum?\r\n\r\nTested OK:\r\n- Enabled the checkbox (without changing the default of 20GB), restarted the client, next run it prunes:\r\n```\r\n2018-04-23T13:27:38Z init message: Pruning blockstore...\r\n2018-04-23T13:28:20Z Prune: UnlinkPrunedFiles deleted blk/rev (00000)\r\n...\r\n2018-04-23T13:28:20Z Prune: UnlinkPrunedFiles deleted blk/rev (00783)\r\n```\r\n- Re-enabling the checkbox and restarting causes the client to re-download the block chain, as expected, after the following dialog and clicking OK:\r\n![untitled](https://user-images.githubusercontent.com/126646/39129974-44bcdca8-470c-11e8-89b2-217bf8b3f37e.png)\r\n\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MzU3NDU5OA==",
                    "publishedAt": "2018-04-23T13:27:20Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/13043#issuecomment-383574598"
                }
            ],
            "totalCount": 3
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "a47549348afd96aa902babfdacae0160afcc015e"
                    }
                }
            ],
            "totalCount": 1
        },
        "createdAt": "2018-04-20T13:22:24Z",
        "deletions": 2,
        "id": "MDExOlB1bGxSZXF1ZXN0MTgzMDYwODU1",
        "labels": {
            "nodes": [
                {
                    "color": "02d7e1",
                    "id": "MDU6TGFiZWwxMzU5NDY=",
                    "name": "GUI"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "number": 13043,
        "state": "OPEN",
        "title": "[qt] OptionsDialog: add prune setting",
        "updatedAt": "2018-04-23T13:27:20Z"
    },
    {
        "additions": 9,
        "author": {
            "avatarUrl": "https://avatars0.githubusercontent.com/u/5767891?v=4",
            "login": "instagibbs",
            "url": "https://github.com/instagibbs"
        },
        "body": "Our headers announcement logic will download any blocks that match the total work: https://github.com/bitcoin/bitcoin/blob/8b262eb2d80bfa27ae8501078ce47bc1407e9c55/src/net_processing.cpp#L1443\r\n\r\nCompact block responses are asymmetric with this: We only intentionally download the block when the new chain has more work, or when it's already marked as \"in flight\".\r\n\r\nA wrinkle here is that the new behavior will only affect high bandwidth compact block peers: currently low bandwidth compact block peers have already marked this particular block as \"in flight\", which allows the full block to be downloaded with this catch-all \"some reason\" logic. For high bandwidth compact block peers this message is the first the block has been heard of it, and previous behavior is to simply ignore the compact block announcement.\r\n\r\nThis change synchronizes the treatment of new block announcements.",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/5767891?v=4",
                        "login": "instagibbs"
                    },
                    "body": "@practicalswift fixed",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MzI5MjIxOA==",
                    "publishedAt": "2018-04-21T12:43:07Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/13045#issuecomment-383292218"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/1530283?v=4",
                        "login": "rebroad"
                    },
                    "body": "why not simply request the compact block rather than a full block?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MzMzNTk2MA==",
                    "publishedAt": "2018-04-21T22:16:34Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/13045#issuecomment-383335960"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/649246?v=4",
                        "login": "TheBlueMatt"
                    },
                    "body": "Should mark the block as in flight if it wasn't already and we requested it. Probably should be checking if it's in flight from the same peer too (which would be required if you mark it, and should probably have been done either way).\n\n@promag because the mempool reconstruction will be useless so it'll be worse than a normal request.\n\nOn April 21, 2018 10:16:43 PM UTC, Rebroad <notifications@github.com> wrote:\n>why not simply request the compact block rather than a full block?\n>\n>-- \n>You are receiving this because you are subscribed to this thread.\n>Reply to this email directly or view it on GitHub:\n>https://github.com/bitcoin/bitcoin/pull/13045#issuecomment-383335960\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MzMzODM1NA==",
                    "publishedAt": "2018-04-21T22:55:49Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/13045#issuecomment-383338354"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/5767891?v=4",
                        "login": "instagibbs"
                    },
                    "body": "@TheBlueMatt Added the filter-by-sender and marking block as in flight.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MzU4ODQ3Nw==",
                    "publishedAt": "2018-04-23T14:09:12Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/13045#issuecomment-383588477"
                }
            ],
            "totalCount": 4
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "b45a45672c29616782db6231f0e7d727c026fd35"
                    }
                }
            ],
            "totalCount": 1
        },
        "createdAt": "2018-04-20T17:26:06Z",
        "deletions": 4,
        "id": "MDExOlB1bGxSZXF1ZXN0MTgzMTI0MTI5",
        "labels": {
            "nodes": [
                {
                    "color": "006b75",
                    "id": "MDU6TGFiZWw5ODI5ODAwNw==",
                    "name": "P2P"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "number": 13045,
        "state": "OPEN",
        "title": "[p2p] getblock for 1-block reorgs in response to compact block message",
        "updatedAt": "2018-04-24T13:38:31Z"
    },
    {
        "additions": 9,
        "author": {
            "avatarUrl": "https://avatars3.githubusercontent.com/u/31627588?v=4",
            "login": "lucash-dev",
            "url": "https://github.com/lucash-dev"
        },
        "body": "WIP:\r\nThis PR speeds up several unit tests, as a partial fix to issue [#10026](https://github.com/bitcoin/bitcoin/issues/10026):\r\n\r\ntest_big_witness_transaction: reduced run time in about 70%.\r\n...more to come",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "Travis issue was an intermittent issue, it's passing now.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4Mzg2MzQ1MA==",
                    "publishedAt": "2018-04-24T09:19:10Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/13050#issuecomment-383863450"
                }
            ],
            "totalCount": 1
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "1f9f1deed8f0c741b1c12c8abc987f3595f30f41"
                    }
                }
            ],
            "totalCount": 1
        },
        "createdAt": "2018-04-21T19:11:46Z",
        "deletions": 2,
        "id": "MDExOlB1bGxSZXF1ZXN0MTgzMjM3NjU2",
        "labels": {
            "nodes": [
                {
                    "color": "d4c5f9",
                    "id": "MDU6TGFiZWw2Mjk2MzUxNg==",
                    "name": "Tests"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "number": 13050,
        "state": "OPEN",
        "title": "[WIP] [tests] improvements to slow unit tests",
        "updatedAt": "2018-04-24T09:19:10Z"
    },
    {
        "additions": 21,
        "author": {
            "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
            "login": "MarcoFalke",
            "url": "https://github.com/MarcoFalke"
        },
        "body": "This removes the need to override the executable locations by just reading them from the config file. Beside making the code easier to read, running individual test on Windows is now possible by default (without providing further command line arguments).\r\n\r\nNote: Of course, it is still possible to manually specify the location through the `BITCOIND` environment variable, e.g. `bitcoin-qt`.",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "Makes sense. utACK fa811b0b1df1e884833a0d4d849b241ca0f449aa",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MzQ3NzEzMQ==",
                    "publishedAt": "2018-04-23T07:14:33Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/13051#issuecomment-383477131"
                }
            ],
            "totalCount": 1
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "fa811b0b1df1e884833a0d4d849b241ca0f449aa"
                    }
                }
            ],
            "totalCount": 1
        },
        "createdAt": "2018-04-21T20:40:00Z",
        "deletions": 30,
        "id": "MDExOlB1bGxSZXF1ZXN0MTgzMjQxMzE3",
        "labels": {
            "nodes": [
                {
                    "color": "d4c5f9",
                    "id": "MDU6TGFiZWw2Mjk2MzUxNg==",
                    "name": "Tests"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "number": 13051,
        "state": "OPEN",
        "title": "qa: Normalize executable location",
        "updatedAt": "2018-04-24T04:32:28Z"
    },
    {
        "additions": 162,
        "author": {
            "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
            "login": "practicalswift",
            "url": "https://github.com/practicalswift"
        },
        "body": "Enable automatic detection of undefined names in Python tests scripts. Remove wildcard imports.\r\n\r\nWildcard imports make it unclear which names are present in the namespace, confusing both readers and many automated tools.\r\n\r\nAn additional benefit of not using wildcard imports in tests scripts is that readers of a test script then can infer the rough testing scope just by looking at the imports.\r\n\r\nBefore this commit:\r\n\r\n```\r\n$ contrib/devtools/lint-python.sh | head -10\r\n./test/functional/feature_rbf.py:8:1: F403 'from test_framework.util import *' used; unable to detect undefined names\r\n./test/functional/feature_rbf.py:9:1: F403 'from test_framework.script import *' used; unable to detect undefined names\r\n./test/functional/feature_rbf.py:10:1: F403 'from test_framework.mininode import *' used; unable to detect undefined names\r\n./test/functional/feature_rbf.py:15:12: F405 bytes_to_hex_str may be undefined, or defined from star imports: test_framework.mininode, test_framework.script, test_framework.util\r\n./test/functional/feature_rbf.py:17:58: F405 CScript may be undefined, or defined from star imports: test_framework.mininode, test_framework.script, test_framework.util\r\n./test/functional/feature_rbf.py:25:13: F405 COIN may be undefined, or defined from star imports: test_framework.mininode, test_framework.script, test_framework.util\r\n./test/functional/feature_rbf.py:26:31: F405 satoshi_round may be undefined, or defined from star imports: test_framework.mininode, test_framework.script, test_framework.util\r\n./test/functional/feature_rbf.py:26:60: F405 COIN may be undefined, or defined from star imports: test_framework.mininode, test_framework.script, test_framework.util\r\n./test/functional/feature_rbf.py:30:41: F405 satoshi_round may be undefined, or defined from star imports: test_framework.mininode, test_framework.script, test_framework.util\r\n./test/functional/feature_rbf.py:30:68: F405 COIN may be undefined, or defined from star imports: test_framework.mininode, test_framework.script, test_framework.util\r\n$\r\n```\r\n\r\nAfter this commit: \r\n\r\n```\r\n$ contrib/devtools/lint-python.sh | head -10\r\n$\r\n```",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1063656?v=4",
                        "login": "jnewbery"
                    },
                    "body": "This is the fourth attempt at this (see #9876, #10366 and #11274).\r\n\r\nI'm a big concept ACK. Wildcard imports are bad for the reasons you've listed. However, this has been NACKed by other contributors and none of us have yet been successful in getting it merged.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MzQxNzA3OQ==",
                    "publishedAt": "2018-04-22T22:23:27Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/13054#issuecomment-383417079"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "@jnewbery Thanks for the big concept ACK! One difference with this PR compared to the previous ones is that this makes sure no wildcard imports are re-introduced in the future thanks to the Travis check. So this should hopefully be the last time we have to think about wildcard imports :-)",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MzQ3MzU5MQ==",
                    "publishedAt": "2018-04-23T06:57:49Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/13054#issuecomment-383473591"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
                        "login": "MarcoFalke"
                    },
                    "body": "Just as a note: As a work around when writing tests, I replace the import list with a wildcard-star and then run some de-wildcard python script before submitting the pull request.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4Mzk4MTIwNw==",
                    "publishedAt": "2018-04-24T15:45:06Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/13054#issuecomment-383981207"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "@MarcoFalke That's a convenient workflow! What tool do you use? [`dewildcard`](https://github.com/quentinsf/dewildcard)?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4Mzk5NTcwMA==",
                    "publishedAt": "2018-04-24T16:27:15Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/13054#issuecomment-383995700"
                }
            ],
            "totalCount": 4
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "b3e92defbeff40a04062396d2dd496886dba292e"
                    }
                }
            ],
            "totalCount": 2
        },
        "createdAt": "2018-04-22T18:10:39Z",
        "deletions": 97,
        "id": "MDExOlB1bGxSZXF1ZXN0MTgzMjg2MTY3",
        "labels": {
            "nodes": [
                {
                    "color": "d4c5f9",
                    "id": "MDU6TGFiZWw2Mjk2MzUxNg==",
                    "name": "Tests"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "number": 13054,
        "state": "OPEN",
        "title": "tests: Enable automatic detection of undefined names in Python tests scripts. Remove wildcard imports.",
        "updatedAt": "2018-04-24T16:27:15Z"
    },
    {
        "additions": 81,
        "author": {
            "avatarUrl": "https://avatars1.githubusercontent.com/u/198132?v=4",
            "login": "nixbox",
            "url": "https://github.com/nixbox"
        },
        "body": "refs #12995",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "Some lint issues:\r\n```\r\n./test/util/rpcauth-test.py:19:1: E402 module level import not at top of file\r\n./test/util/rpcauth-test.py:20:1: E402 module level import not at top of file\r\n./test/util/rpcauth-test.py:21:1: E402 module level import not at top of file\r\n./test/util/rpcauth-test.py:22:1: E402 module level import not at top of file\r\n^---- failure generated from contrib/devtools/lint-python.sh\r\n```\r\nAlso the test fails to launch:\r\n```\r\n/usr/bin/python3.4 ../test/util/rpcauth-test.py\r\n/usr/bin/python3.4: can't open file '../test/util/rpcauth-test.py': [Errno 2] No such file or directory\r\n```",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MzYwNjM4Nw==",
                    "publishedAt": "2018-04-23T14:59:14Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/13056#issuecomment-383606387"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/198132?v=4",
                        "login": "nixbox"
                    },
                    "body": "Fixed the lint issues.\r\n\r\nFixed the \"No such file or directory\" problem as well.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4Mzc3MzM2Mw==",
                    "publishedAt": "2018-04-24T01:27:07Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/13056#issuecomment-383773363"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "utACK ebff14786b7addd4bcc6e74691394a77019f2bf6",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MzkwNzE1NA==",
                    "publishedAt": "2018-04-24T12:09:52Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/13056#issuecomment-383907154"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/198132?v=4",
                        "login": "nixbox"
                    },
                    "body": "Mistakenly did a force push. Addressed all of your nits.\r\n\r\nThanks for the feedback!",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4NDAxMTgxNg==",
                    "publishedAt": "2018-04-24T17:18:25Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/13056#issuecomment-384011816"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1063656?v=4",
                        "login": "jnewbery"
                    },
                    "body": "Tested ACK 6674a75bfbdf680d0a3648f44c6591ff5fc983cf.\r\n\r\nTravis failure was unrelated failure in `mining_prioritisetransaction.py`. I've restarted the job.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4NDA0Nzk5Mg==",
                    "publishedAt": "2018-04-24T19:15:49Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/13056#issuecomment-384047992"
                }
            ],
            "totalCount": 5
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "6674a75bfbdf680d0a3648f44c6591ff5fc983cf"
                    }
                }
            ],
            "totalCount": 1
        },
        "createdAt": "2018-04-23T07:47:56Z",
        "deletions": 19,
        "id": "MDExOlB1bGxSZXF1ZXN0MTgzMzUwNzkz",
        "labels": {
            "nodes": [
                {
                    "color": "d4c5f9",
                    "id": "MDU6TGFiZWw2Mjk2MzUxNg==",
                    "name": "Tests"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "number": 13056,
        "state": "OPEN",
        "title": "[tests] Make rpcauth.py testable and add unit tests",
        "updatedAt": "2018-04-24T19:15:49Z"
    },
    {
        "additions": 45,
        "author": {
            "avatarUrl": "https://avatars0.githubusercontent.com/u/5767891?v=4",
            "login": "instagibbs",
            "url": "https://github.com/instagibbs"
        },
        "body": "This section of code loops over the same coins twice, in two different ways depending on whether other inputs are allowed, even though the net effect is just an early return in one case. One used the available coins list(pruned to just preselected coins) and the other the preselected coins directly. Instead just do it once, and return early if no other inputs are allowed.\r\n\r\nNote that by definition coin control is in use, so \"fSpendable\" will always be true, so filtering for this is a NOP.\r\n\r\nAdded basic unit test case as well.",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/5470?v=4",
                        "login": "Empact"
                    },
                    "body": "NACK 4aaa5ba - this code isn't redundant, the out args are used by caller `CWallet::CreateTransaction`",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MzY5NTMwMw==",
                    "publishedAt": "2018-04-23T19:32:22Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/13057#issuecomment-383695303"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/5470?v=4",
                        "login": "Empact"
                    },
                    "body": "The fact that the test suite passes with this removal is a smell though - how about a test for `CreateTransaction` or `SelectCoins` that fails with this removal?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MzcxNDQxMg==",
                    "publishedAt": "2018-04-23T20:36:59Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/13057#issuecomment-383714412"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/5767891?v=4",
                        "login": "instagibbs"
                    },
                    "body": "I will write tests fix this, thanks. Just not at my computer today.\n\nOn Mon, Apr 23, 2018, 4:38 PM Ben Woosley <notifications@github.com> wrote:\n\n> The fact that the test suite passes with this removal is a smell though -\n> how about a test for CreateTransaction or SelectCoins that fails with\n> this removal?\n>\n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/bitcoin/bitcoin/pull/13057#issuecomment-383714412>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AFgC061sK4esuliPqtBCPdCuCC-mFlJ3ks5trjuzgaJpZM4Tf7aM>\n> .\n>\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MzcxNjcxNQ==",
                    "publishedAt": "2018-04-23T20:44:54Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/13057#issuecomment-383716715"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "> The fact that the test suite passes with this removal is a smell though - how about a test for CreateTransaction or SelectCoins that fails with this removal?\r\n\r\nThis is what I was afraid of - I don't think we test the part of the wallet code that is used by the GUI coin selection very well.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MzgxMjU5OA==",
                    "publishedAt": "2018-04-24T05:57:16Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/13057#issuecomment-383812598"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/5767891?v=4",
                        "login": "instagibbs"
                    },
                    "body": "did some additional refactoring to make flow easier to follow(early return if you captured enough value with presets), and added a basic unit test that should have failed with previous broken iteration",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4Mzk2MzYwMw==",
                    "publishedAt": "2018-04-24T14:56:02Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/13057#issuecomment-383963603"
                }
            ],
            "totalCount": 5
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "358c298ff8b35834ad0cb6ebb492b8ca5305430a"
                    }
                }
            ],
            "totalCount": 1
        },
        "createdAt": "2018-04-23T13:47:33Z",
        "deletions": 28,
        "id": "MDExOlB1bGxSZXF1ZXN0MTgzNDQwMjk1",
        "labels": {
            "nodes": [
                {
                    "color": "E6F6D6",
                    "id": "MDU6TGFiZWwxMzU5NjE=",
                    "name": "Refactoring"
                },
                {
                    "color": "08a781",
                    "id": "MDU6TGFiZWwxNDk0MjQ=",
                    "name": "Wallet"
                }
            ],
            "totalCount": 2
        },
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "number": 13057,
        "state": "OPEN",
        "title": "refactor pre-selected coin code",
        "updatedAt": "2018-04-24T14:56:02Z"
    },
    {
        "additions": 207,
        "author": {
            "avatarUrl": "https://avatars3.githubusercontent.com/u/1063656?v=4",
            "login": "jnewbery",
            "url": "https://github.com/jnewbery"
        },
        "body": "Adds a `createwallet` RPC to dynamically create a new wallet at runtime.\r\n\r\nIncludes tests and release notes.",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1063656?v=4",
                        "login": "jnewbery"
                    },
                    "body": "Builds on top of #10740. Please review that first.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MzY1NTE3NQ==",
                    "publishedAt": "2018-04-23T17:24:20Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/13058#issuecomment-383655175"
                }
            ],
            "totalCount": 1
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "f8b7016b52e7aab34b3f9773401a33c8f60a389c"
                    }
                }
            ],
            "totalCount": 10
        },
        "createdAt": "2018-04-23T17:24:11Z",
        "deletions": 56,
        "id": "MDExOlB1bGxSZXF1ZXN0MTgzNTAzNDkz",
        "labels": {
            "nodes": [
                {
                    "color": "08a781",
                    "id": "MDU6TGFiZWwxNDk0MjQ=",
                    "name": "Wallet"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "CONFLICTING",
        "mergedAt": null,
        "number": 13058,
        "state": "OPEN",
        "title": "[wallet] `createwallet` RPC - create new wallet at runtime",
        "updatedAt": "2018-04-24T14:06:05Z"
    },
    {
        "additions": 90,
        "author": {
            "avatarUrl": "https://avatars3.githubusercontent.com/u/1063656?v=4",
            "login": "jnewbery",
            "url": "https://github.com/jnewbery"
        },
        "body": "labels are associated with addresses (rather than addresses being\r\nassociated with labels, as was the case with accounts). The\r\ngetlabeladdress does not make sense in this model, so remove it.\r\n\r\ngetaccountaddress is still supported for one release as the accounts\r\nAPI is deprecated.",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1063656?v=4",
                        "login": "jnewbery"
                    },
                    "body": "Builds on top of #12953. Please remove that PR first.\r\n\r\nIn my opinion, the `getlabeladdress` should not have been introduced. However, it was included in #12892 to remove controversy and ensure that PR could be merged.\r\n\r\nThere are two main reasons for removing this RPC method:\r\n\r\n- Labels are associated with addresses (rather than addresses being associated with labels, as was the case with accounts). The `getlabeladdress` does not make sense in this model and blurs the distinction that \"labels are associated with addresses, instead of addresses associated with labels\".\r\n- Keeping `getlabeladdress` requires keeping the whole CAccount administration in place. Part of the reason for the account to label refactor is simplify the wallet mess and to get rid of that.\r\n\r\nMany contributors have already concept ACK'ed removing this method (@laanwj at https://github.com/bitcoin/bitcoin/pull/12892#issuecomment-379611854, @PierreRochard at https://github.com/bitcoin/bitcoin/pull/12892#issuecomment-379874953, @promag at https://github.com/bitcoin/bitcoin/pull/12892#pullrequestreview-110855143, @jonasschnelli at https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179550228)\r\n\r\nMain opposition to removing this method came from @ryanofsky and @luke-jr . See https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-199444036 onwards for a full discussion.\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MzY5NDA2Ng==",
                    "publishedAt": "2018-04-23T19:28:30Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/13060#issuecomment-383694066"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars2.githubusercontent.com/u/7133040?v=4",
                        "login": "ryanofsky"
                    },
                    "body": "> Main opposition to removing this method came from @ryanofsky and @luke-jr \r\n\r\nNo opposition here, I just didn't think this should be removed or changed in the middle of a PR that otherwise was only adding functionality.\r\n\r\nBut I actually don't know what \"labels are associated with addresses rather than addresses being\r\nassociated with labels\" is supposed to mean. This sounds like a zen koan. It may be more accurate to say \"Only one label can be associated with an address, but many addresses can be associated with one label. Labels (unlike accounts) do not have a default receiving address.\"\r\n\r\nIt could also be good to update release notes with a workaround for the deprecated `getaccountadddress`, though I couldn't think of anything very straightforward. Could suggest combining `getnewaddress(label)`, `listreceivedbylabel`, and `getaddressesbylabel` for a replacement depending on the use-case.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MzcwNjk5Ng==",
                    "publishedAt": "2018-04-23T20:11:59Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/13060#issuecomment-383706996"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1063656?v=4",
                        "login": "jnewbery"
                    },
                    "body": "> I actually don't know what \"labels are associated with addresses rather than addresses being\r\nassociated with labels\".\r\n\r\nThe idea is that an address HAS labels (currently an address can have only one label, but it should be possible to extend that in future). Conversely an account HAS addresses, ie the address belongs to the account.\r\n\r\nIn a model where accounts have addresses, it makes sense for an account to have a 'default receiving address'. It doesn't make sense for a label to have a 'default receiving address', since a label is just a description that can be attached to one or more addresses.\r\n\r\nI don't think that's too mystical. The relationship of addresses owning labels is simple, and the existence of a 'label address' confuses that simple relationship.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MzcwOTk4Mw==",
                    "publishedAt": "2018-04-23T20:22:12Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/13060#issuecomment-383709983"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1063656?v=4",
                        "login": "jnewbery"
                    },
                    "body": "> It could also be good to update release notes with a workaround for the deprecated getaccountadddress, though I couldn't think of anything very straightforward.\r\n\r\nThere are two suggested workarounds here: https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-200219840 and here: https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-206929678.\r\n\r\nI'm happy to add those to the release notes if you think that's a good idea.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MzczMjc4MA==",
                    "publishedAt": "2018-04-23T21:43:04Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/13060#issuecomment-383732780"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "Concept ACK. Will review in detail after #12953 merged.\r\n(it has been merged, please rebase)",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MzkxMTI3OQ==",
                    "publishedAt": "2018-04-24T12:25:31Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/13060#issuecomment-383911279"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
                        "login": "MarcoFalke"
                    },
                    "body": "Purged GitHub to get rid of the merged commits without rebase:\r\n\r\n<details><summary></summary>\r\n\r\n```\r\ngit push git@github.com:jnewbery/bitcoin.git a3d7d6ad9ff3b40904fae0b8d97b46126e810f3b:remove_getlabeladdress && git push git@github.com:jnewbery/bitcoin.git 8d22e03929f1c6fdcf8669fb01246b7099d861f2:remove_getlabeladdress -f\r\n```\r\n</details>",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MzkzNDQ1OQ==",
                    "publishedAt": "2018-04-24T13:40:54Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/13060#issuecomment-383934459"
                }
            ],
            "totalCount": 6
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "8d22e03929f1c6fdcf8669fb01246b7099d861f2"
                    }
                }
            ],
            "totalCount": 2
        },
        "createdAt": "2018-04-23T19:21:11Z",
        "deletions": 80,
        "id": "MDExOlB1bGxSZXF1ZXN0MTgzNTMyMDA5",
        "labels": {
            "nodes": [
                {
                    "color": "08a781",
                    "id": "MDU6TGFiZWwxNDk0MjQ=",
                    "name": "Wallet"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "number": 13060,
        "state": "OPEN",
        "title": "[wallet] [rpc] Remove getlabeladdress RPC",
        "updatedAt": "2018-04-24T13:40:54Z"
    },
    {
        "additions": 120,
        "author": {
            "avatarUrl": "https://avatars1.githubusercontent.com/u/548488?v=4",
            "login": "sipa",
            "url": "https://github.com/sipa"
        },
        "body": "This introduces versions of `GetScriptOp`, `EvalScript`, and `VerifyScript` that operate on scripts represented by `Span<const unsigned char>`. This makes it possible to use different representation types for scripts.\r\n\r\nThis is also a step towards reducing the consensus-criticalness of CScript, but not entirely. The interpreter code still uses CScript internally for a few purposes (notably `DecodeOP_N`, and `operator<<`).",
        "closedAt": null,
        "comments": {
            "nodes": [],
            "totalCount": 0
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "2a26aced5322a0f42cc535a8bf9b5950a58fe576"
                    }
                }
            ],
            "totalCount": 6
        },
        "createdAt": "2018-04-23T23:11:37Z",
        "deletions": 49,
        "id": "MDExOlB1bGxSZXF1ZXN0MTgzNTgxNDEz",
        "labels": {
            "nodes": [
                {
                    "color": "009800",
                    "id": "MDU6TGFiZWwxOTIyMDIwMDA=",
                    "name": "Consensus"
                },
                {
                    "color": "E6F6D6",
                    "id": "MDU6TGFiZWwxMzU5NjE=",
                    "name": "Refactoring"
                }
            ],
            "totalCount": 2
        },
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "number": 13062,
        "state": "OPEN",
        "title": "Make script interpreter independent from storage type CScript",
        "updatedAt": "2018-04-24T09:04:26Z"
    },
    {
        "additions": 329,
        "author": {
            "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
            "login": "promag",
            "url": "https://github.com/promag"
        },
        "body": "Currently there are 3 places where it makes sense to retain a wallet shared pointer:\r\n - `WalletManager` internal registry;\r\n - `interfaces::Wallet` interface instance - used by the UI;\r\n - wallet RPC functions - given by `GetWalletForJSONRPCRequest`.\r\n\r\nThis PR replaces #11402, and builds on top of #13034.",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/1063656?v=4",
                        "login": "jnewbery"
                    },
                    "body": "needs rebase",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4Mzk4NjQ5Ng==",
                    "publishedAt": "2018-04-24T15:59:43Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/13063#issuecomment-383986496"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/3534524?v=4",
                        "login": "promag"
                    },
                    "body": "Rebased.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4Mzk5NjgyMw==",
                    "publishedAt": "2018-04-24T16:30:38Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/13063#issuecomment-383996823"
                }
            ],
            "totalCount": 2
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "58962fd6b7169e04c7819dca81cc663371506ef6"
                    }
                }
            ],
            "totalCount": 3
        },
        "createdAt": "2018-04-23T23:11:45Z",
        "deletions": 160,
        "id": "MDExOlB1bGxSZXF1ZXN0MTgzNTgxNDMy",
        "labels": {
            "nodes": [
                {
                    "color": "08a781",
                    "id": "MDU6TGFiZWwxNDk0MjQ=",
                    "name": "Wallet"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "number": 13063,
        "state": "OPEN",
        "title": "Use shared pointer to retain wallet instance",
        "updatedAt": "2018-04-24T16:30:38Z"
    },
    {
        "additions": 149,
        "author": {
            "avatarUrl": "https://avatars0.githubusercontent.com/u/11154118?v=4",
            "login": "ken2812221",
            "url": "https://github.com/ken2812221"
        },
        "body": "The cron job that runs every day would fail because of git checkout a single commit, not a branch.\r\n\r\n#12708 introduce a method to check whether merges are clean.\r\nHowever, there are four merges are not clean.\r\nSo, I add a list of merges that are dirty and ignore them.\r\n\r\nAlso, I modify the current shell script to python, it makes the script speed up a lot.\r\nThe python code `tree_sha512sum` was copied from `github-merge.py`\r\n\r\nThe travis job to test this: https://travis-ci.org/ken2812221/bitcoin/jobs/370542817",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
                        "login": "MarcoFalke"
                    },
                    "body": "> The cron job that runs every day would fail because of git checkout a single commit, not a branch.\r\n\r\nMind to elaborate why it wouldn't work on a \"single commit\"?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MzkzMjQ1NA==",
                    "publishedAt": "2018-04-24T13:35:01Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/13066#issuecomment-383932454"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/11154118?v=4",
                        "login": "ken2812221"
                    },
                    "body": "`git rev-parse --abbrev-ref HEAD` does not work with commit, it always returns `HEAD`.\r\nAnd git would not return to latest commit after the script.\r\nBut I don't know if this is the exact reason. I just test on my PC, the script failed to check signature at random commit.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4MzkzNzYzNQ==",
                    "publishedAt": "2018-04-24T13:49:36Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/13066#issuecomment-383937635"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/126646?v=4",
                        "login": "laanwj"
                    },
                    "body": "> Also, I modify the current shell script to python, it makes the script speed up a lot.\r\n> The python code tree_sha512sum was copied from github-merge.py\r\n\r\nThanks! Yes, the current implementation has been slow especially the treehash512 checking, my implementation from `github-merge.py` only uses a single call to `ls-tree` which makes it more efficient.\r\n\r\nConcept ACK.\r\n",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4Mzk3NTA2NQ==",
                    "publishedAt": "2018-04-24T15:27:57Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/13066#issuecomment-383975065"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
                        "login": "MarcoFalke"
                    },
                    "body": "I think we should remove the shell script after this has been converted to python. Objections, @TheBlueMatt ?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4Mzk3NzYxMg==",
                    "publishedAt": "2018-04-24T15:35:03Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/13066#issuecomment-383977612"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars1.githubusercontent.com/u/548488?v=4",
                        "login": "sipa"
                    },
                    "body": "All the unclean merge commits are from 2016 or earlier. Perhaps instead there can just be a threshold that skips the validation below a certain age (say, 1 month)?",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4NDAzMDM0OQ==",
                    "publishedAt": "2018-04-24T18:17:01Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/13066#issuecomment-384030349"
                }
            ],
            "totalCount": 5
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "902e9f986685d9e428221f7b251b81fa0c3e4fca"
                    }
                }
            ],
            "totalCount": 2
        },
        "createdAt": "2018-04-24T12:42:40Z",
        "deletions": 2,
        "id": "MDExOlB1bGxSZXF1ZXN0MTgzNzIyODQy",
        "labels": {
            "nodes": [
                {
                    "color": "d4c5f9",
                    "id": "MDU6TGFiZWw2Mjk2MzUxNg==",
                    "name": "Tests"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "number": 13066,
        "state": "OPEN",
        "title": "Make travis run verify-commits",
        "updatedAt": "2018-04-24T18:17:01Z"
    },
    {
        "additions": 41,
        "author": {
            "avatarUrl": "https://avatars2.githubusercontent.com/u/18324680?v=4",
            "login": "ccdle12",
            "url": "https://github.com/ccdle12"
        },
        "body": "fixes #12583\r\n\r\nContinuing on the work of @chrislennon.\r\n\r\nI've applied his changes to the tests and also updated: \r\n\r\n`unit_test_directory(const std::string fileName)` \r\n\r\n* It now passes in the the current fileName to be used as part of the temp directory file path.\r\n\r\nAny guidance on further improvements or refactored would be very much welcomed ",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
                        "login": "MarcoFalke"
                    },
                    "body": "Needs rebase",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4Mzk1ODE4Nw==",
                    "publishedAt": "2018-04-24T14:41:47Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/13067#issuecomment-383958187"
                }
            ],
            "totalCount": 1
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "73f239ed07a520b78b7c936a1ee5f6ef4e128dd0"
                    }
                }
            ],
            "totalCount": 4
        },
        "createdAt": "2018-04-24T13:53:02Z",
        "deletions": 11,
        "id": "MDExOlB1bGxSZXF1ZXN0MTgzNzQ0MjQx",
        "labels": {
            "nodes": [
                {
                    "color": "d4c5f9",
                    "id": "MDU6TGFiZWw2Mjk2MzUxNg==",
                    "name": "Tests"
                }
            ],
            "totalCount": 1
        },
        "mergeable": "CONFLICTING",
        "mergedAt": null,
        "number": 13067,
        "state": "OPEN",
        "title": "[WIP] Unit test sub-directories - Continued",
        "updatedAt": "2018-04-24T14:41:47Z"
    },
    {
        "additions": 0,
        "author": {
            "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
            "login": "practicalswift",
            "url": "https://github.com/practicalswift"
        },
        "body": "Remove unused constant `MAX_INV_SZ`.\r\n\r\nLast use removed in 9c92c8c82716d0c35b638142a1125d07b3f240a8.",
        "closedAt": null,
        "comments": {
            "nodes": [],
            "totalCount": 0
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "d66943d453c2541d918bb867000045d8dea7066d"
                    }
                }
            ],
            "totalCount": 1
        },
        "createdAt": "2018-04-24T19:06:31Z",
        "deletions": 1,
        "id": "MDExOlB1bGxSZXF1ZXN0MTgzODM0NjIx",
        "labels": {
            "nodes": [],
            "totalCount": 0
        },
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "number": 13068,
        "state": "OPEN",
        "title": "tests: Remove unused constant MAX_INV_SZ",
        "updatedAt": "2018-04-24T19:06:31Z"
    },
    {
        "additions": 2,
        "author": {
            "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
            "login": "practicalswift",
            "url": "https://github.com/practicalswift"
        },
        "body": "Fix typos.",
        "closedAt": null,
        "comments": {
            "nodes": [
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
                        "login": "MarcoFalke"
                    },
                    "body": "Thanks for fixing those, but I'd prefer if we had a single pull request for those and not separate for each typo (c.f. #13052 from two days ago)",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4NDA0OTQ3MA==",
                    "publishedAt": "2018-04-24T19:21:10Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/13069#issuecomment-384049470"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars3.githubusercontent.com/u/7826565?v=4",
                        "login": "practicalswift"
                    },
                    "body": "@MarcoFalke I submit typos as I find them (otherwise I would forget them!). If I have an already existing open typo PR then I add the newly found typo to that one. Is that not the recommended procedure? :-)",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4NDA1MjE5NQ==",
                    "publishedAt": "2018-04-24T19:30:41Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/13069#issuecomment-384052195"
                },
                {
                    "author": {
                        "avatarUrl": "https://avatars0.githubusercontent.com/u/6399679?v=4",
                        "login": "MarcoFalke"
                    },
                    "body": "Fine, I will leave this one open until next month.",
                    "id": "MDEyOklzc3VlQ29tbWVudDM4NDA1NTM0OQ==",
                    "publishedAt": "2018-04-24T19:42:06Z",
                    "url": "https://github.com/bitcoin/bitcoin/pull/13069#issuecomment-384055349"
                }
            ],
            "totalCount": 3
        },
        "commits": {
            "nodes": [
                {
                    "commit": {
                        "oid": "fdbe55337fc609ba48ce5fc11222b78b2256c7be"
                    }
                }
            ],
            "totalCount": 1
        },
        "createdAt": "2018-04-24T19:14:30Z",
        "deletions": 2,
        "id": "MDExOlB1bGxSZXF1ZXN0MTgzODM2NTYz",
        "labels": {
            "nodes": [],
            "totalCount": 0
        },
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "number": 13069,
        "state": "OPEN",
        "title": "docs: Fix typos",
        "updatedAt": "2018-04-24T19:42:06Z"
    }
]